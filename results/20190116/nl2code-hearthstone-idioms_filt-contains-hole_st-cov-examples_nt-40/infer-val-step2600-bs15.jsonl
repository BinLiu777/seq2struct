{"beams": [{"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -1.4773257802002533, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -0.9372012615203857, 0.0, -0.03877711296081543, 0.0, -0.43478596210479736, -1.52587890625e-05, -0.0003714561462402344, 0.0, -3.814697265625e-06, -0.000423431396484375, -0.013736724853515625, -0.02243216522037983, -0.0001678466796875, -0.000843048095703125, -3.576278118089249e-07, -0.0003029107756447047, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "DRUID", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -1.7500969989336568, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -1.440570592880249, 0.0, -0.015177488327026367, 0.0, -0.22064995765686035, -9.5367431640625e-06, -0.0006362199201248586, 0.0, -3.814697265625e-06, -0.00054168701171875, -0.011557579040527344, -0.030379708856344223, -0.000156402587890625, -0.001861572265625, -3.576278118089249e-07, -0.0002877711958717555, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -2.1511324894374795, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -0.9372012615203857, 0.0, -0.03877711296081543, 0.0, -1.0447121858596802, -1.9073486328125e-06, -6.914138793945312e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.045729637145996094, -0.04006004333496094, -0.014771698974072933, -0.000209808349609375, -0.0010262727737426758, -7.152555099310121e-07, -0.00030446049640886486, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "DRUID", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ALL, CARD_RARITY\n            .FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.015938736410412, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.475755453109741, 0.0, -0.017345786094665527, 0.0, -0.4543095827102661, -9.5367431640625e-06, -0.00036132335662841797, -1.9073486328125e-06, -3.814697265625e-06, -0.000400543212890625, -0.013700485229492188, -0.022936295717954636, -0.000225067138671875, -0.002307891845703125, -5.960462772236497e-07, -0.0003160238265991211, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "ALL", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.079778555576439, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.611999273300171, 0.0, -0.0972975492477417, 0.0, -0.305248498916626, -9.5367431640625e-06, -0.0009337663068436086, 0.0, -3.814697265625e-06, -0.00057220458984375, -0.014513969421386719, -0.018656112253665924, -0.0001468658447265625, -0.001857757568359375, -2.3841855067985307e-07, -0.0002746581449173391, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "COMMON", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.089344546984073, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.7469098567962646, 0.0, -0.03417801856994629, 0.0, -0.24673676490783691, -1.1444091796875e-05, -0.0003863572783302516, -1.9073486328125e-06, -3.814697265625e-06, -0.0003948211669921875, -0.015898704528808594, -0.01468720007687807, -0.0002956390380859375, -0.001270294189453125, -4.768370445162873e-07, -0.0003048181242775172, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "ROGUE", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -3.2516646793804895, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -1.440570592880249, 0.0, -0.015177488327026367, 0.0, -1.6280109882354736, 0.0, -9.66787338256836e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.08187675476074219, -0.03511524200439453, -0.019693151116371155, -0.000202178955078125, -0.0023746490478515625, -4.768370445162873e-07, -0.000278234452707693, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.2937685902282894, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.6035211086273193, 0.0, -0.046187520027160645, 0.0, -0.5786019563674927, -1.52587890625e-05, -0.00028836727142333984, -1.9073486328125e-06, -5.7220458984375e-06, -0.00043487548828125, -0.01581096649169922, -0.017941633239388466, -0.0003662109375, -0.0020160675048828125, -4.768370445162873e-07, -0.0003120899200439453, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "PALADIN", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -3.6069215786402467, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.6035211086273193, 0.0, -0.046187520027160645, 0.0, -0.824987530708313, -1.9073486328125e-06, -5.7697296142578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.03862285614013672, -0.04759979248046875, -0.014520286582410336, -0.0004215240478515625, -0.0024356842041015625, -8.344646857949556e-07, -0.0002965926832985133, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "PALADIN", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ALL, CARD_RARITY\n            .FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -3.6202554701877645, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.475755453109741, 0.0, -0.017345786094665527, 0.0, -1.012161374092102, 0.0, -6.92605972290039e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.024309158325195312, -0.04164409637451172, -0.017453882843255997, -0.0002593994140625, -0.002681732177734375, -8.344646857949556e-07, -0.00030624866485595703, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.926118808710548, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -3.4245669841766357, 0.0, -0.11717414855957031, 0.0, -0.32161545753479004, -9.5367431640625e-06, -0.00025141239166259766, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003814697265625, -0.015343666076660156, -0.015547922812402248, -0.00045013427734375, -0.002178192138671875, -5.960462772236497e-07, -0.00032722949981689453, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "HUNTER", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -4.277116211945554, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.611999273300171, 0.0, -0.0972975492477417, 0.0, -1.3393652439117432, 0.0, -0.00014603137969970703, 0.0, -1.9073486328125e-06, -0.1442089080810547, -0.03990459442138672, -0.013230926357209682, -0.00019073486328125, -0.0022411346435546875, -4.768370445162873e-07, -0.00026512143085710704, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "COMMON", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -4.349433807567465, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -0.9372012615203857, 0.0, -3.298471212387085, 0.0, -0.024810791015625, -1.52587890625e-05, -0.0001533031463623047, -3.814697265625e-06, -3.814697265625e-06, -0.00035858154296875, -0.03561973571777344, -0.02273857779800892, -0.0001735687255859375, -0.0011882781982421875, -1.311301275563892e-06, -0.0004297494888305664, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "EPIC", "hole2": "DRUID", "hole1": 5}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Weapon(3, 4)\n", "score": -4.4359076012617535, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -2.7469098567962646, 0.0, -0.03417801856994629, 0.0, -1.526902437210083, 0.0, -6.186962127685547e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.034641265869140625, -0.050121307373046875, -0.012629362754523754, -0.0003604888916015625, -0.0015298128128051758, -7.152555099310121e-07, -0.0003042220778297633, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "ROGUE", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "4", "<EOS>", "SHAMAN", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 4, SHAMAN=True)\n", "score": -6.160676616185356, "score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -0.9372012615203857, 0.0, -0.03877711296081543, 0.0, -1.0447121858596802, -1.9073486328125e-06, -6.914138793945312e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.148496627807617, -0.002758026123046875, -0.0020652965176850557, -3.814697265625e-06, -0.00015234554302878678, 0.0, -0.9016293287277222, -7.62939453125e-06, -0.05095100402832031, -0.004360198974609375, -0.001220703125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "<UNK> Blade", "hole3": "FREE", "hole2": "DRUID", "hole1": 5}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "<UNK>Blade", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "SHAMAN", "hole1": 4}], "hole4": "player"}}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -1.3906118647778882, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.6189548969268799, -3.814697265625e-06, -4.267692565917969e-05, 0.0, -0.0977252721786499, 0.0, -4.1961669921875e-05, -0.0002346038818359375, -1.1444091796875e-05, -0.00016605854034423828, -1.8358061424805783e-05, -0.0072966814041137695, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -1.5095142093381213, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.4823102951049805, -0.0002841949462890625, 0.0, -4.5180306187830865e-05, -1.1920928244535389e-07, 0.0, -0.00011851522140204906, -0.00016246906307060272, -0.0017014741897583008, 0.0, -0.004385948181152344, 0.0, -1.3470649719238281e-05, -3.814697265625e-06, -4.887576324108522e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0033245086669921875, -1.1444091796875e-05, -0.00010883808135986328, -6.198863957251888e-06, -0.006049752235412598, -9.536738616588991e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Boulderfist Ogre", "hole3": "FREE", "hole2": "ALL", "hole1": 6}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -1.5374406355191397, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.8564255237579346, -3.814697265625e-06, -4.279613494873047e-05, 0.0, -0.00714719295501709, 0.0, -0.0001773834228515625, -0.00028228759765625, -1.9073486328125e-05, -0.00018715858459472656, -1.1444026313256472e-05, -0.007027983665466309, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -2.279763449836075, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -1.798807144165039, -5.7220458984375e-05, -1.9073486328125e-05, -3.3378546504536644e-06, -0.00014591201033908874, -1.9431065084063448e-05, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -0.00011968830222031102, 0.0, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -1.072883515007561e-05, -2.0265579223632812e-06, -0.016739368438720703, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0011583566665649414, 0.0, -0.0001811981201171875, -5.7220458984375e-06, -7.62939453125e-06, -2.503394853192731e-06, -8.58306884765625e-06, 0.0, -0.00020599365234375, 0.0, -5.53131103515625e-05, -8.392333984375e-05, -1.52587890625e-05, -0.0005304812802933156, -4.768370445162873e-07, -0.011148691177368164, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -2.7216942185210513, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -2.154385566711426, -1.33514404296875e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0003681182861328125, 0.0, -0.021381378173828125, -0.0001506805419921875, -1.33514404296875e-05, -9.65590606938349e-06, -6.532668339787051e-05, -2.6702873583417386e-05, 0.0, -5.53131103515625e-05, 0.0, -5.626695929095149e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.8477439880371094e-05, -2.0265579223632812e-06, -0.03779935836791992, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0008400678634643555, 0.0, -0.00046539306640625, -5.7220458984375e-06, -7.62939453125e-06, -2.384185791015625e-06, -5.7220458984375e-06, -0.000553131103515625, -0.0003204345703125, -0.17804527282714844, 0.0, -1.4066685253055766e-05, 0.0, -6.043771645636298e-05, 0.0, -9.5367431640625e-06, -0.0001125335693359375, -2.09808349609375e-05, -0.0006470680236816406, -1.311301275563892e-06, -0.005704641342163086, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DRAGON"}], "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -3.4822641127468543, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.454970359802246, -0.0003337860107421875, -1.1920922133867862e-06, -3.4332275390625e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0003485308261588216, -3.576278118089249e-07, -0.00189971923828125, 0.0, -0.0027490854263305664, 0.0, -3.814697265625e-05, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0001888275146484375, -3.814697265625e-06, -0.002625584602355957, 0.0, -2.0265579223632812e-06, 0.0, -7.343292236328125e-05, 0.0, -0.0001544952392578125, -0.000400543212890625, -5.7220458984375e-06, -0.00019085407257080078, -3.2186455882765586e-06, -0.007183074951171875, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "FREE", "hole3": "minion_type", "hole1": 6, "hole0": "Boulderfist Ogre", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(6, 7)\n", "score": -4.5559941307515, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.6189548969268799, -3.814697265625e-06, -4.267692565917969e-05, 0.0, -3.2607319355010986, -1.9073486328125e-06, -2.288818359375e-05, -0.0074825286865234375, -5.340576171875e-05, -8.583068120060489e-05, -5.960462772236497e-07, -0.0024979112204164267, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "p"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -4.576686251416369, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -2.154385566711426, -1.33514404296875e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0003681182861328125, 0.0, -0.021381378173828125, -0.0001506805419921875, -1.33514404296875e-05, -9.65590606938349e-06, -6.532668339787051e-05, -2.6702873583417386e-05, 0.0, -5.53131103515625e-05, 0.0, -5.626695929095149e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.8477439880371094e-05, -2.0265579223632812e-06, -0.03779935836791992, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0008400678634643555, 0.0, -0.00046539306640625, -5.7220458984375e-06, -7.62939453125e-06, -2.384185791015625e-06, -5.7220458984375e-06, -0.000553131103515625, -0.0003204345703125, -2.033445358276367, -1.1920928244535389e-07, -7.748602001811378e-06, 0.0, -4.2914787627523765e-05, 0.0, -7.62939453125e-06, -9.34600830078125e-05, -1.52587890625e-05, -0.0005037784576416016, -2.264974000354414e-06, -0.005489349365234375, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -5.174855823075788, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.148721694946289, -0.000881195068359375, -3.576278118089249e-07, -2.6702880859375e-05, -1.1920928244535389e-07, 0.0, -0.0007883370853960514, -3.576272320060525e-06, -0.004837155342102051, 0.0, -0.00033402442932128906, 0.0, -9.417532055522315e-06, 0.0, -7.62939453125e-06, -0.000896453857421875, -9.5367431640625e-06, -0.00016605854034423828, -8.22540732769994e-06, -0.007185935974121094, -1.0728830375228426e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Boulderfist Ogre", "hole2": "ALL", "hole1": 6}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.DRUID)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -5.4337562101215084, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -4.676182746887207, -1.9073486328125e-06, -2.6464460461284034e-05, 0.0, -0.08380496501922607, 0.0, -7.62939453125e-05, -0.0001697540283203125, -9.5367431640625e-06, -0.00017178058624267578, -1.4662635294371285e-05, -0.0071822404861450195, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRUID"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(6, 7)\n", "score": -5.529713369520479, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.6189548969268799, -3.814697265625e-06, -4.267692565917969e-05, 0.0, -3.1985599994659424, 0.0, -4.76837158203125e-05, -1.0433025360107422, -0.0001430511474609375, -8.440016972599551e-05, -9.536738616588991e-07, -0.0024576180148869753, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "_"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -5.620171882500607, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -4.930930137634277, 0.0, -3.540513716870919e-05, 0.0, -0.015015602111816406, 0.0, -3.814697265625e-05, -0.0002002716064453125, -1.1444091796875e-05, -0.00019502639770507812, -4.529942543740617e-06, -0.007625460624694824, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 249, 84, 141, 16, 110, 21, 134, "Minion", "<EOS>", 239, 46, 139, "6", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(6, MINION_TYPE.BEAST, SelfSelector())\n", "score": -5.970066337661301, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.6189548969268799, -3.814697265625e-06, -4.267692565917969e-05, 0.0, -3.1985599994659424, 0.0, -4.76837158203125e-05, -0.47809791564941406, -0.0002346038818359375, -0.28726768493652344, -0.0004520416259765625, -0.0002269744873046875, -1.9073486328125e-06, -0.008350390009582043, -0.0035076141357421875, -0.0023956298828125, -0.018312454223632812, -1.9073486328125e-06, -0.003642264287918806, -4.6491513785440475e-06, -0.0684347152709961, -0.008500099182128906, -3.814697265625e-06, 0.0, -0.07423838973045349, -0.00016903874347917736, -0.03514087200164795, 0.0, -0.010528564453125, -5.7220458984375e-06, -0.48678433895111084, -3.814697265625e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Return", "value": {"_type": "Call", "func": {"_type": "Name", "id": "Minion"}, "args": [{"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole4": "_"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -6.614385243952128, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.4823102951049805, -0.0002841949462890625, 0.0, -4.5180306187830865e-05, -1.1920928244535389e-07, 0.0, -0.00011851522140204906, -0.00016246906307060272, -0.0017014741897583008, 0.0, -0.004385948181152344, 0.0, -1.3470649719238281e-05, -3.814697265625e-06, -4.887576324108522e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0033245086669921875, -1.1444091796875e-05, -0.00010883808135986328, -6.198863957251888e-06, -5.110917568206787, -4.172316494077677e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Boulderfist Ogre", "hole3": "FREE", "hole2": "ALL", "hole1": 6}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -7.404613968432486, "score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.4823102951049805, -0.0002841949462890625, 0.0, -4.5180306187830865e-05, -1.1920928244535389e-07, 0.0, -0.00011851522140204906, -0.00016246906307060272, -0.0017014741897583008, 0.0, -5.900163650512695, 0.0, -3.11136209347751e-05, -1.9073486328125e-06, -4.41074053014745e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.003238677978515625, -1.1444091796875e-05, -0.0001049041748046875, -6.9141146923357155e-06, -0.005445361137390137, -1.1920922133867862e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Boulderfist Ogre", "hole3": "EPIC", "hole2": "ALL", "hole1": 6}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BoulderfistOgre", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 7}], "hole4": "player"}}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -1.6332556852300968, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843276262283325, -1.9073486328125e-06, -0.2794433534145355, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -2.5205598720515354, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -1.5123460292816162, 0.0, -0.0002002716064453125, 0.0, -0.0008450746536254883, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015781402587890625, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004979133605957031, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012569427490234375, 0.0, -0.2840604782104492, -6.103515625e-05, -0.0002307891845703125, 0.0, -4.1961669921875e-05, 0.0, -0.0002690553665161133, 0.0, -4.1961669921875e-05, -0.09990882873535156, -0.0001087188720703125, -0.005031585693359375, -0.015361785888671875, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843667268753052, -1.9073486328125e-06, -0.2800881564617157, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "score": -2.9555995413263645, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843276262283325, -1.9073486328125e-06, -1.6017872095108032, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 2, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.1874925741160496, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -2.1801326274871826, 0.0, -0.0004439353942871094, 0.0, -0.0008622407913208008, 0.0, -2.0265579223632812e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015626907348632812, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004906654357910156, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012650489807128906, 0.0, -0.28340625762939453, -5.91278076171875e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002690553665161133, 0.0, -4.1961669921875e-05, -0.09961128234863281, -0.0001087188720703125, -0.0050449371337890625, -0.015346527099609375, -0.000644683837890625, -0.000194549560546875, -0.00060272216796875, 0.0, -0.2848902940750122, -1.9073486328125e-06, -0.2795494496822357, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "HUNTER", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_attack(2)\n", "score": -3.3496647426086383, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -1.9351140260696411, -2.622604142743512e-06, -0.34506529569625854, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 2, "hole1": "change_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.4088378795534027, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -2.40766978263855, 0.0, -0.00012445449829101562, 0.0, -0.0012513399124145508, 0.0, -4.0531158447265625e-06, 0.0, -1.52587890625e-05, -1.52587890625e-05, -7.748603820800781e-06, -4.0531076592742465e-06, -0.01584911346435547, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001068115234375, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.00495147705078125, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012826919555664062, 0.0, -0.27569580078125, -6.103515625e-05, -0.0002231597900390625, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.1961669921875e-05, -0.10053348541259766, -0.0001087188720703125, -0.0050201416015625, -0.01528167724609375, -0.000644683837890625, -0.000194549560546875, -0.00060272216796875, 0.0, -0.2844935655593872, -1.9073486328125e-06, -0.2801097333431244, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "PALADIN", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in range(0, 2):\n            player.draw()\n", "score": -3.548302911703786, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -1.42578125, -0.9871845245361328, -0.23401451110839844, -1.9073486328125e-06, -0.0013580322265625, 0.0, -4.9591064453125e-05, -0.0004062652587890625, 0.0, -0.0003795456141233444, -1.9073486328125e-06, -0.017461776733398438, -5.7220458984375e-06, -0.19947533309459686, 0.0, -0.01160430908203125, -0.0017642974853515625, -1.33514404296875e-05, -0.00146484375, -5.7220458984375e-06, -0.0033550262451171875, -1.9073486328125e-06, -1.728534698486328e-05, 0.0, -0.00031495094299316406, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "score": -3.840159053465186, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -1.5123460292816162, 0.0, -0.0002002716064453125, 0.0, -0.0008450746536254883, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015781402587890625, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004979133605957031, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012569427490234375, 0.0, -0.2840604782104492, -6.103515625e-05, -0.0002307891845703125, 0.0, -4.1961669921875e-05, 0.0, -0.0002690553665161133, 0.0, -4.1961669921875e-05, -0.09990882873535156, -0.0001087188720703125, -0.005031585693359375, -0.015361785888671875, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843667268753052, -1.9073486328125e-06, -1.5996873378753662, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 2, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_attack(2)\n", "score": -4.235176021715233, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -1.5123460292816162, 0.0, -0.0002002716064453125, 0.0, -0.0008450746536254883, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015781402587890625, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004979133605957031, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012569427490234375, 0.0, -0.2840604782104492, -6.103515625e-05, -0.0002307891845703125, 0.0, -4.1961669921875e-05, 0.0, -0.0002690553665161133, 0.0, -4.1961669921875e-05, -0.09990882873535156, -0.0001087188720703125, -0.005031585693359375, -0.015361785888671875, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -1.934937596321106, -2.622604142743512e-06, -0.3441327214241028, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 2, "hole1": "change_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_attack(3)\n", "score": -4.30042087521133, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -1.9351140260696411, -2.622604142743512e-06, -1.2958214282989502, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "change_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in range(0, 2):\n            player.draw()\n", "score": -4.43045596197976, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -1.5123460292816162, 0.0, -0.0002002716064453125, 0.0, -0.0008450746536254883, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015781402587890625, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004979133605957031, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012569427490234375, 0.0, -1.4227075576782227, -0.9881858825683594, -0.23331260681152344, -1.9073486328125e-06, -0.0013561248779296875, 0.0, -5.14984130859375e-05, -0.000408172607421875, 0.0, -0.0003731094766408205, -1.9073486328125e-06, -0.017580032348632812, -5.7220458984375e-06, -0.19846493005752563, 0.0, -0.011533737182617188, -0.0017642974853515625, -1.33514404296875e-05, -0.00147247314453125, -5.7220458984375e-06, -0.0033359527587890625, -1.9073486328125e-06, -1.728534698486328e-05, 0.0, -0.00031495094299316406, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "set_health_to", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.set_health_to(3)\n", "score": -4.452487731834246, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -3.0875940322875977, -1.1920928244535389e-07, -0.29541078209877014, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 3, "hole1": "set_health_to"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "score": -4.5095694014037235, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -2.1801326274871826, 0.0, -0.0004439353942871094, 0.0, -0.0008622407913208008, 0.0, -2.0265579223632812e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841830625315197e-06, -0.015626907348632812, -1.1444091796875e-05, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.004906654357910156, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.012650489807128906, 0.0, -0.28340625762939453, -5.91278076171875e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002690553665161133, 0.0, -4.1961669921875e-05, -0.09961128234863281, -0.0001087188720703125, -0.0050449371337890625, -0.015346527099609375, -0.000644683837890625, -0.000194549560546875, -0.00060272216796875, 0.0, -0.2848902940750122, -1.9073486328125e-06, -1.6016262769699097, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "HUNTER", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 2, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(1)\n", "score": -4.6601153561075535, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843276262283325, -1.9073486328125e-06, -3.306303024291992, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "minion"}, "hole2": 1, "hole1": "change_temp_attack"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 111, 21, 134, "<UNK>", "<EOS>", 237, 53, 182, "Count", "<EOS>", "Card", "Selector", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 249, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in <UNK>(Count(CardSelector()), value=0):\n            super().reveal()\n", "score": -5.481475213872045, "score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -1.42578125, -0.47461700439453125, -0.0003070831298828125, 0.0, -0.001819610595703125, 0.0, -0.0002155303955078125, -0.657261848449707, -0.01068878173828125, -0.4634881019592285, -5.6028297876764555e-06, -0.015837181359529495, -0.00041305998456664383, 0.0, -9.5367431640625e-06, -0.0007762908935546875, -0.0001125335693359375, -0.34735584259033203, -1.9073486328125e-06, -0.0034198760986328125, -1.9073486328125e-06, -0.00023746147053316236, -1.9073486328125e-06, -0.6879110336303711, -0.12982845306396484, -1.33514404296875e-05, -0.15804672241210938, -9.5367431640625e-06, -0.43683719635009766, -1.9073486328125e-06, -0.0006955859716981649, 0.0, -0.0021382570266723633, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deadly Poison", "hole3": "FREE", "hole2": "DRUID", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "DeadlyPoison", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "<UNK>"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template26", "hole0": "Count", "hole1": "CardSelector"}]}}], "hole4": "player"}}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 162, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -0.5141986714370717, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -0.09854793548583984, -0.25281524658203125, -3.8146954466355965e-06, -1.52587890625e-05, -0.0017986297607421875, 0.0, -0.0009227914270013571, -2.110004425048828e-05, -0.017084479331970215, -7.2479248046875e-05, 0.0, -0.008220791816711426, 0.0, -0.0002542734146118164, 0.0, -1.71661376953125e-05, -0.001941680908203125, -7.62939453125e-06, -0.0005035400390625, -1.6689286894688848e-06, -8.41617293190211e-05, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -1.902344956509495, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -0.09854793548583984, -1.6278018951416016, -2.002705878112465e-05, -4.9591064453125e-05, -0.0048656463623046875, 0.0, -0.014567490667104721, -3.826618194580078e-05, -0.014118552207946777, -8.0108642578125e-05, -1.9073486328125e-06, -0.009496927261352539, 0.0, -0.00026726722717285156, 0.0, -2.288818359375e-05, -0.000324249267578125, -5.7220458984375e-06, -0.00012433528900146484, -8.344646857949556e-07, -0.00012540811439976096, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -2.730209770966809, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -2.458004951477051, -0.010670438408851624, -1.6570085790590383e-05, -1.1444091796875e-05, -0.000194549560546875, 0.0, -0.0005567369516938925, -5.7220458984375e-06, -0.012669920921325684, -3.814697265625e-06, -7.62939453125e-06, -0.005062103271484375, -2.6702880859375e-05, 0.0, -7.62939453125e-05, -1.1444091796875e-05, -9.918212890625e-05, -1.9073486328125e-06, -0.0001392364501953125, -0.0001392364501953125, -1.9073486328125e-06, -3.62396240234375e-05, -3.814697265625e-06, -0.0039272308349609375, 0.0, -0.10494422912597656, -1.9073486328125e-06, -0.0005942583084106445, -0.00040090084075927734, 0.0, -1.3947486877441406e-05, 0.0, -8.845329284667969e-05, 0.0, -7.05718994140625e-05, -0.000324249267578125, -1.52587890625e-05, -0.00010180473327636719, -2.3841855067985307e-07, -0.00010120867227669805, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 25, 162, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.287965739254133, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -3.844707489013672, 0.0, -0.0011140108108520508, 0.0, -0.048140525817871094, -0.10466957092285156, -0.20745344460010529, -4.1723224057932384e-06, -1.33514404296875e-05, -0.0010128021240234375, 0.0, -0.0008650929667055607, -2.110004425048828e-05, -0.016489386558532715, -7.62939453125e-05, 0.0, -0.008226513862609863, 0.0, -0.00023889541625976562, 0.0, -1.71661376953125e-05, -0.001682281494140625, -7.62939453125e-06, -0.000457763671875, -1.6689286894688848e-06, -8.392331073991954e-05, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Damage", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeAttack(2))], BothPlayer()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.695689702073054, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -3.3145227432250977, -2.09808349609375e-05, -0.0025854110717773438, -3.0517578125e-05, -0.004382967948913574, 0.0, -0.0003509521484375, -0.0694570541381836, -0.0007762908935546875, -0.02132415771484375, -0.004581451416015625, -0.001129150390625, -0.06805658340454102, -0.0002384185791015625, -0.018629884347319603, -1.9073486328125e-05, -0.01117706298828125, -0.0046844482421875, -0.0863196849822998, -1.9073486328125e-06, -0.33580589294433594, -0.4047490358352661, -1.9073486328125e-06, -0.05412748456001282, -1.9073486328125e-06, -0.011096954345703125, -8.20159912109375e-05, -0.1864166259765625, -0.0051441192626953125, -0.0005950927734375, 0.0, 0.0, -0.000125885009765625, 0.0, -1.33514404296875e-05, -0.0009860992431640625, -5.7220458984375e-06, -0.00025010108947753906, -1.5497195136049413e-06, -6.341933476505801e-05, -3.218649908376392e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Damage", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeAttack"}]}, {"_type": "Template39", "hole0": "BothPlayer"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 162, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.7209634886935135, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -0.09854793548583984, -0.25281524658203125, -3.8146954466355965e-06, -1.52587890625e-05, -0.0017986297607421875, 0.0, -0.0009227914270013571, -2.110004425048828e-05, -4.220753192901611, -4.57763671875e-05, 0.0, -0.0031729936599731445, 0.0, -0.0002770423889160156, 0.0, -2.6702880859375e-05, -0.00897979736328125, -1.9073486328125e-05, -0.001613616943359375, -2.7418097943154862e-06, -5.9008591051679105e-05, -3.3378591979271732e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 30, 193, "Random", "Picker", "<EOS>", "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.178060961316731, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -2.458004951477051, -0.010670438408851624, -1.6570085790590383e-05, -1.1444091796875e-05, -0.000194549560546875, 0.0, -0.0005567369516938925, -5.7220458984375e-06, -0.012669920921325684, -3.814697265625e-06, -7.62939453125e-06, -0.005062103271484375, -2.6702880859375e-05, 0.0, -7.62939453125e-05, -1.1444091796875e-05, -9.918212890625e-05, -1.9073486328125e-06, -0.0001392364501953125, -0.0001392364501953125, -1.9073486328125e-06, -3.62396240234375e-05, -3.814697265625e-06, -0.0039272308349609375, 0.0, -2.3666210174560547, -0.005097389221191406, -0.0884329080581665, -0.0053092241287231445, -5.7220458984375e-06, -0.016720781102776527, 0.0, -0.07045173645019531, 0.0, -4.6968456445029005e-05, 0.0, -0.0001220703125, -0.0014438629150390625, -7.62939453125e-06, -0.00020062923431396484, -9.536738616588991e-07, -4.267692202120088e-05, -4.88758041683468e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template34", "hole0": "RandomPicker", "hole1": 3}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 25, 162, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.250416883840131, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -4.79998779296875, 0.0, -0.0008342266082763672, 0.0, -0.02873516082763672, -0.08109283447265625, -0.2562497854232788, -4.768367489305092e-06, -1.71661376953125e-05, -0.0007305145263671875, 0.0, -0.0009318497031927109, -1.728534698486328e-05, -0.018333792686462402, -6.103515625e-05, 0.0, -0.00843346118927002, 0.0, -0.00022399425506591797, 0.0, -1.71661376953125e-05, -0.001544952392578125, -7.62939453125e-06, -0.0004235506057739258, -1.5497195136049413e-06, -8.571145008318126e-05, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Damage", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Damage", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeHealth(2))], BothPlayer()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.392181718381231, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -3.3145227432250977, -2.09808349609375e-05, -0.0025854110717773438, -3.0517578125e-05, -0.004382967948913574, 0.0, -0.0003509521484375, -0.0694570541381836, -0.0007762908935546875, -0.02132415771484375, -0.004581451416015625, -0.001129150390625, -0.06805658340454102, -0.0002384185791015625, -0.018629884347319603, -1.9073486328125e-05, -0.01117706298828125, -0.0046844482421875, -0.0863196849822998, -1.9073486328125e-06, -0.33580589294433594, -1.1479846239089966, -7.62939453125e-06, -0.08948501944541931, -1.9073486328125e-06, -0.0075244903564453125, -0.000141143798828125, -0.108673095703125, -0.0043811798095703125, -0.00042724609375, -1.1920928244535389e-07, 0.0, -0.000141143798828125, 0.0, -1.52587890625e-05, -0.00103759765625, -5.7220458984375e-06, -0.00026154518127441406, -1.5497195136049413e-06, -6.40153739368543e-05, -3.218649908376392e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Damage", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeHealth"}]}, {"_type": "Template39", "hole0": "BothPlayer"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Fire", "Elemental", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.618379030473022, "score_history": [-3.448258399963379, -0.0001373291015625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, -2.729855441430118e-05, -1.3947414117865264e-05, -7.521823135903105e-05, -7.62939453125e-06, -0.0001239776611328125, -1.9073486328125e-06, -1.3110111467540264e-06, -0.0005517005920410156, 0.0, -6.67572021484375e-05, -0.000514984130859375, -5.14984130859375e-05, -0.00017915551143232733, -0.0006812810897827148, -1.64508237503469e-05, 0.0, -2.690032124519348e-05, -3.576278118089249e-07, -1.0477639436721802, -0.0003032684326171875, -0.0008931159973144531, 0.0, -0.22840356826782227, -2.682209014892578e-05, -0.011111259460449219, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.0177764892578125, 0.0, -0.010394096374511719, -3.814697265625e-06, -0.00592803955078125, -1.9073486328125e-06, -0.4599883556365967, 0.0, -0.010167121887207031, -0.23607349395751953, -0.012116062454879284, -2.3961063561728224e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00015710722072981298, -3.933906555175781e-06, -0.0027527809143066406, -3.814697265625e-06, -1.9073486328125e-06, -0.0033245086669921875, -1.52587890625e-05, 0.0, -8.0108642578125e-05, -7.62939453125e-06, -0.000171661376953125, -1.9073486328125e-06, -0.0001468658447265625, -5.14984130859375e-05, -1.9073486328125e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0044708251953125, 0.0, -0.11360836029052734, -1.9073486328125e-06, -0.0005328655242919922, -0.00039136409759521484, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.00036227505188435316, -1.9073486328125e-06, -9.846665489021689e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 6, "hole0": "Fire Elemental", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 5}]}]}}, {"choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.93006803046714, "score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -3.844707489013672, 0.0, -0.0011140108108520508, 0.0, -0.048140525817871094, -0.10466957092285156, -1.8377273082733154, -1.823891761887353e-05, -4.1961669921875e-05, -0.00431060791015625, 0.0, -0.012921806424856186, -3.826618194580078e-05, -0.013306021690368652, -8.7738037109375e-05, -1.9073486328125e-06, -0.009464502334594727, 0.0, -0.0002461671829223633, 0.0, -2.288818359375e-05, -0.0003108978271484375, -5.7220458984375e-06, -0.00012242794036865234, -7.152555099310121e-07, -0.00012671941658481956, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "battlecry", "hole1": 6, "hole0": "Fire Elemental", "hole4": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FireElemental", "hole6": [{"_type": "Template27", "hole0": 6, "hole1": 5}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Fire", "Elemental", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -6.1326671847727425, "score_history": [-3.448258399963379, -0.0001373291015625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, -2.729855441430118e-05, -1.3947414117865264e-05, -7.521823135903105e-05, -7.62939453125e-06, -0.0001239776611328125, -1.9073486328125e-06, -1.3110111467540264e-06, -0.0005517005920410156, 0.0, -6.67572021484375e-05, -0.000514984130859375, -5.14984130859375e-05, -0.00017915551143232733, -0.0006812810897827148, -1.64508237503469e-05, 0.0, -2.690032124519348e-05, -3.576278118089249e-07, -1.2517815828323364, -4.57763671875e-05, -0.0011788606643676758, 0.0, -0.5056416988372803, -2.300739288330078e-05, -0.0037794113159179688, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.008869171142578125, 0.0, -0.010573387145996094, -3.814697265625e-06, -0.00634765625, -1.9073486328125e-06, -0.48985755443573, 0.0, -0.009926795959472656, -0.25521183013916016, -0.01247568428516388, -2.3961063561728224e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001579415547894314, -3.933906555175781e-06, -0.0027146339416503906, -3.814697265625e-06, -1.9073486328125e-06, -0.0034160614013671875, -1.52587890625e-05, 0.0, -8.0108642578125e-05, -7.62939453125e-06, -0.000171661376953125, -1.9073486328125e-06, -0.0001468658447265625, -5.14984130859375e-05, -1.9073486328125e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0044536590576171875, 0.0, -0.11309432983398438, -1.9073486328125e-06, -0.0005309581756591797, -0.00039136409759521484, 0.0, -0.000156402587890625, -3.4332275390625e-05, -0.0003606061218306422, -1.9073486328125e-06, -0.00010037400352302939, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARLOCK", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 6, "hole0": "Fire Elemental", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Fire", "Elemental", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(3), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -6.283258820818382, "score_history": [-3.448258399963379, -0.0001373291015625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, -2.729855441430118e-05, -1.3947414117865264e-05, -7.521823135903105e-05, -7.62939453125e-06, -0.0001239776611328125, -1.9073486328125e-06, -1.3110111467540264e-06, -0.0005517005920410156, 0.0, -6.67572021484375e-05, -0.000514984130859375, -5.14984130859375e-05, -0.00017915551143232733, -0.0006812810897827148, -1.64508237503469e-05, 0.0, -2.690032124519348e-05, -3.576278118089249e-07, -1.2517815828323364, -4.57763671875e-05, -0.0011788606643676758, 0.0, -1.102003812789917, 0.0, -0.000171661376953125, 0.0, -0.0013484954833984375, -1.9073486328125e-06, -0.14218902587890625, 0.0, -0.006394863128662109, 0.0, -0.000675201416015625, -0.1694011688232422, -0.038339704275131226, -2.0503992345766164e-05, -5.7220458984375e-06, -2.288818359375e-05, -3.814697265625e-06, -6.782849959563464e-05, -2.0265579223632812e-06, -0.00593411922454834, -3.814697265625e-06, -1.9073486328125e-06, -0.0040149688720703125, -1.9073486328125e-05, 0.0, -5.340576171875e-05, -3.814697265625e-06, -0.000156402587890625, -1.9073486328125e-06, -0.0001373291015625, -9.1552734375e-05, -1.9073486328125e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0044918060302734375, 0.0, -0.10213184356689453, -1.9073486328125e-06, -0.000540614128112793, -0.00039327144622802734, 0.0, -0.00014495849609375, -3.4332275390625e-05, -0.00035500340163707733, -1.9073486328125e-06, -0.00010013558494392782, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARLOCK", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Fire Elemental", "hole6": "<UNK>", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Fire", "Elemental", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -6.340808709690407, "score_history": [-3.448258399963379, -0.0001373291015625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, -2.729855441430118e-05, -1.3947414117865264e-05, -7.521823135903105e-05, -7.62939453125e-06, -0.0001239776611328125, -1.9073486328125e-06, -1.3110111467540264e-06, -0.0005517005920410156, 0.0, -6.67572021484375e-05, -0.000514984130859375, -5.14984130859375e-05, -0.00017915551143232733, -0.0006812810897827148, -1.64508237503469e-05, 0.0, -2.690032124519348e-05, -3.576278118089249e-07, -1.5815144777297974, -0.000247955322265625, -0.01474010944366455, 0.0, -0.3282599449157715, -1.3470649719238281e-05, -0.004143714904785156, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.010395050048828125, 0.0, -0.008015632629394531, -3.814697265625e-06, -0.0068817138671875, -1.9073486328125e-06, -0.5500963926315308, 0.0, -0.010480880737304688, -0.23625946044921875, -0.012786660343408585, -2.4080271032289602e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00015376984083559364, -3.933906555175781e-06, -0.002800464630126953, -3.814697265625e-06, -1.9073486328125e-06, -0.00334930419921875, -1.52587890625e-05, 0.0, -8.20159912109375e-05, -7.62939453125e-06, -0.0001697540283203125, -1.9073486328125e-06, -0.0001468658447265625, -5.14984130859375e-05, -1.9073486328125e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0044536590576171875, 0.0, -0.1130990982055664, -1.9073486328125e-06, -0.0005328655242919922, -0.00038945674896240234, 0.0, -0.0001544952392578125, -3.4332275390625e-05, -0.0003610829298850149, -1.9073486328125e-06, -0.00010049320553662255, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "SHAMAN", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 6, "hole0": "Fire Elemental", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Fire", "Elemental", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "battlecry", "<EOS>", 25, 163, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 30, 193, "Random", "Picker", "<EOS>", "3", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "score": -8.874562893493874, "score_history": [-3.448258399963379, -0.0001373291015625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, -2.729855441430118e-05, -1.3947414117865264e-05, -7.521823135903105e-05, -7.62939453125e-06, -0.0001239776611328125, -1.9073486328125e-06, -1.3110111467540264e-06, -0.0005517005920410156, 0.0, -6.67572021484375e-05, -0.000514984130859375, -5.14984130859375e-05, -0.00017915551143232733, -0.0006812810897827148, -1.64508237503469e-05, 0.0, -2.690032124519348e-05, -3.576278118089249e-07, -1.0477639436721802, -0.0003032684326171875, -0.0008931159973144531, 0.0, -0.22840356826782227, -2.682209014892578e-05, -0.011111259460449219, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.0177764892578125, 0.0, -0.010394096374511719, -3.814697265625e-06, -0.00592803955078125, -1.9073486328125e-06, -0.4599883556365967, 0.0, -0.010167121887207031, -0.23607349395751953, -0.012116062454879284, -2.3961063561728224e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00015710722072981298, -3.933906555175781e-06, -0.0027527809143066406, -3.814697265625e-06, -1.9073486328125e-06, -0.0033245086669921875, -1.52587890625e-05, 0.0, -8.0108642578125e-05, -7.62939453125e-06, -0.000171661376953125, -1.9073486328125e-06, -0.0001468658447265625, -5.14984130859375e-05, -1.9073486328125e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0044708251953125, 0.0, -2.2905845642089844, -0.006400108337402344, -0.11093175411224365, -0.006280064582824707, -5.7220458984375e-06, -0.017490195110440254, 0.0, -0.8236303329467773, -0.0024242401123046875, -0.0021572113037109375, -2.6702880859375e-05, -8.0108642578125e-05, -0.0001773834228515625, -0.00081634521484375, -1.71661376953125e-05, -1.3470649719238281e-05, -3.814697265625e-06, -4.1961669921875e-05, -0.0005626678466796875, 0.0, -3.0517578125e-05, -1.3470649719238281e-05, -7.62939453125e-06, -0.0004444122314453125, -0.0022373199462890625, -5.340576171875e-05, -0.01503753662109375, -4.9591064453125e-05, -0.000225067138671875, -1.9073486328125e-06, -0.0017325878143310547, -0.000125885009765625, -9.1552734375e-05, 0.0, -8.392333984375e-05, -1.9073486328125e-06, -3.898143768310547e-05, -7.62939453125e-06, -0.0008907318115234375, -0.003108978271484375, -0.000469207763671875, -5.7220458984375e-06, -0.009695053100585938, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.01910877227783203, 0.0, -0.0004367828369140625, 0.0, -1.9073486328125e-06, -0.00017547607421875, -9.5367431640625e-06, -0.0001068115234375, -1.1444091796875e-05, -3.62396240234375e-05, 0.0, -0.00030028820037841797, 0.0, -0.054941605776548386, 0.0, -0.0001087188720703125, -5.7220458984375e-06, -0.0001125335693359375, -1.9073486328125e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Damage", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template34", "hole0": "RandomPicker", "hole1": 3}}], "hole2": "CharacterSelector", "hole1": [{"_type": "Num", "n": 3}]}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 6, "hole0": "Fire Elemental", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "battlecry"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Draw()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -1.5984264793726197, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -0.9245929718017578, -0.0023764767684042454, -6.592163845198229e-05, -2.348403722862713e-05, -6.556489552167477e-06, -3.194808232365176e-05, 0.0, -1.752376374497544e-05, 0.0, -3.0517578125e-05, -0.0008068084716796875, -0.000244140625, -3.4451481042196974e-05, -2.50339189733495e-06, 0.0, -2.622600959512056e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "Draw"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Draw", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Effect(Draw(),\n            PlayerSelector())), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -2.1054504504128317, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -1.3714303970336914, -0.0005702972412109375, -3.814697265625e-05, -5.7220458984375e-06, -0.16156649589538574, -2.0265579223632812e-06, -0.0009365081787109375, -0.0003662109375, -1.9073486328125e-06, -0.16571618616580963, -7.987004210008308e-06, -0.023954391479492188, -1.1444091796875e-05, -0.0038350820541381836, -5.91278076171875e-05, -4.768370445162873e-07, -0.007231667637825012, -0.00015150438412092626, -1.20401346066501e-05, -1.943111237778794e-05, -1.9073486328125e-06, -1.5377996533061378e-05, 0.0, -2.47955322265625e-05, -0.0004673004150390625, -0.0003223419189453125, -3.4213058825116605e-05, -3.099436753473128e-06, 0.0, -3.6954811548639555e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "Draw"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Battle", "Player", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BattlePlayer()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -2.1666477240535187, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -1.0641855001449585, -0.07996165007352829, -2.0265579223632812e-06, -0.3510361611843109, -0.00015007407637313008, -6.437280717364047e-06, -5.495546793099493e-05, 0.0, -1.549720582261216e-05, 0.0, -2.288818359375e-05, -0.0007534027099609375, -0.000232696533203125, -3.218650817871094e-05, -1.9073468138230965e-06, 0.0, -1.7881377516459906e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "BattlePlayer"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 39, 110, 21, 134, "Buff", "Until", "<EOS>", 238, 63, 205, "Draw", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BuffUntil(Draw(),\n            PlayerSelector())), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.3454628183516206, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -2.3391761779785156, -0.00010120868682861328, -0.0019974922761321068, -3.814697265625e-06, -2.51529327215394e-05, -0.0005788803100585938, -3.719267624546774e-05, -0.00019633627380244434, -3.433226083870977e-05, -0.2691543400287628, -0.0007759827421978116, -0.0001888275146484375, -0.0900259017944336, -0.000179290771484375, -2.6702880859375e-05, -1.9073486328125e-06, -0.061147212982177734, -0.026577472686767578, 0.0, -0.07595443725585938, -0.0022907257080078125, -4.1961669921875e-05, -0.1081376001238823, -0.00017724884673953056, -0.00400543212890625, -2.09808349609375e-05, -0.0020946261938661337, -1.9073486328125e-05, -3.576278118089249e-07, -0.2824990451335907, -1.0609614946588408e-05, -2.861022494471399e-06, -0.015720367431640625, -0.0057163238525390625, -7.62939453125e-06, -0.0014878511428833008, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -0.0007768869400024414, -2.7060499633080326e-05, -2.86102294921875e-05, -2.574904283392243e-05, 0.0, -4.112720489501953e-05, 0.0, -3.24249267578125e-05, -0.053874969482421875, -7.62939453125e-05, -5.888938176212832e-05, -2.503394853192731e-06, 0.0, -9.536738616588991e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template39", "hole0": "Draw"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Battle", "Player", "<EOS>", "Draw", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BattlePlayer()),\n            Draw()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.666848389819279, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -1.0641855001449585, -0.07996165007352829, -2.0265579223632812e-06, -1.8265734910964966, -0.017065521329641342, -0.0006237030029296875, 0.0, -1.049041748046875e-05, 0.0, -1.52587890625e-05, -0.0080413818359375, -0.0001354217529296875, -4.076957338838838e-05, -1.311301275563892e-06, 0.0, -1.311301275563892e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "Draw", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "BattlePlayer"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Frozen()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.703895836749325, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -3.020190715789795, -0.009299316443502903, -0.0029653452802449465, -7.784092304063961e-05, -9.775113539944869e-06, -4.6491612010868266e-05, 0.0, -1.549720582261216e-05, 0.0, -2.86102294921875e-05, -0.0007839202880859375, -0.0002460479736328125, -3.790855407714844e-05, -1.9073468138230965e-06, 0.0, -1.9073468138230965e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "Frozen"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Battle", "Player", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BattlePlayer()),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.8200819214940793, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -1.0641855001449585, -0.07996165007352829, -2.0265579223632812e-06, -2.002650499343872, -2.110004425048828e-05, -7.390960945485858e-06, -6.759150710422546e-05, 0.0, -2.586840491858311e-05, 0.0, -3.62396240234375e-05, -0.0025119781494140625, -0.0003871917724609375, -3.0636783776571974e-05, -1.5497195136049413e-06, 0.0, -2.145764938177308e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "MinionSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "BattlePlayer"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Whelp", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Whelp()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.996935700597078, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -3.141693115234375, -0.18344518542289734, -0.00048640018212608993, -4.458344483282417e-05, -1.7762025890988298e-05, -2.3961063561728224e-05, 0.0, -1.740455445542466e-05, 0.0, -3.0517578125e-05, -0.0006923675537109375, -0.0002536773681640625, -3.612041473388672e-05, -1.9073468138230965e-06, 0.0, -2.145764938177308e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "Whelp"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 208, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.069391835751674, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -3.9948019981384277, -0.00033361490932293236, -0.0005356782930903137, -3.814697265625e-06, -3.3378546504536644e-06, -7.295609248103574e-05, -0.0002865380665753037, -0.0038892023731023073, -0.0012907992349937558, -0.06190425157546997, -0.0005944579606875777, -7.569660374429077e-05, -0.0012053424725309014, -8.702239938429557e-06, -2.5510787963867188e-05, 0.0, -1.883505319710821e-05, 0.0, -1.52587890625e-05, -0.0019073486328125, -0.0002994537353515625, -5.984305971651338e-05, -1.5497195136049413e-06, 0.0, -1.4305104514278355e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.361724266588965, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -2.3391761779785156, -0.00010120868682861328, -0.0019974922761321068, -3.814697265625e-06, -2.51529327215394e-05, -0.0005788803100585938, -3.719267624546774e-05, -0.00019633627380244434, -3.433226083870977e-05, -1.5309934616088867, -0.00022935390006750822, -0.0002574920654296875, -0.010317802429199219, -0.000110626220703125, -0.3735966384410858, -0.006958349142223597, -0.038998670876026154, -4.482269287109375e-05, -7.152555099310121e-07, -0.003082275390625, -0.0015239715576171875, -1.9073486328125e-06, -0.0006276369094848633, 0.0, -3.24249267578125e-05, -5.7220458984375e-06, -0.0018905401229858398, -2.8252599804545753e-05, -1.1444091796875e-05, -2.324571687495336e-05, 0.0, -3.5881996154785156e-05, 0.0, -3.4332275390625e-05, -0.04857826232910156, -7.62939453125e-05, -5.4001797252567485e-05, -2.503394853192731e-06, 0.0, -8.344646857949556e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Black", "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BlackDraw()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.443649298909008, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -3.7329840660095215, -0.039201799780130386, -4.768370445162873e-07, -0.00027092653908766806, -1.8358125089434907e-05, -5.364403477869928e-06, -1.931189763126895e-05, 0.0, -1.597404116182588e-05, 0.0, -3.0517578125e-05, -0.0005741119384765625, -0.0003070831298828125, -2.515315827622544e-05, -3.099436753473128e-06, 0.0, -2.50339189733495e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Template39", "hole0": "BlackDraw"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 39, 110, 21, 134, "Buff", "Until", "<EOS>", 238, 63, 205, "Draw", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(BuffUntil(Draw(),\n            PlayerSelector())), MinionSelector(players=BothPlayer(), picker\n            =UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.53964140877531, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -2.3391761779785156, -0.00010120868682861328, -0.0019974922761321068, -3.814697265625e-06, -2.51529327215394e-05, -0.0005788803100585938, -3.719267624546774e-05, -0.00019633627380244434, -3.433226083870977e-05, -0.2691543400287628, -0.0007759827421978116, -0.0001888275146484375, -0.0900259017944336, -0.000179290771484375, -2.6702880859375e-05, -1.9073486328125e-06, -0.061147212982177734, -0.026577472686767578, 0.0, -0.07595443725585938, -0.0022907257080078125, -4.1961669921875e-05, -0.1081376001238823, -0.00017724884673953056, -0.00400543212890625, -2.09808349609375e-05, -0.0020946261938661337, -1.9073486328125e-05, -3.576278118089249e-07, -1.4563883543014526, -3.933906555175781e-06, -4.0531158447265625e-06, -0.08731937408447266, -5.14984130859375e-05, -1.52587890625e-05, -0.0001264810562133789, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -0.0005124806193634868, -1.7404525351594202e-05, -2.86102294921875e-05, -0.0001583099365234375, -3.814697265625e-06, -0.0004655122756958008, -6.794906312279636e-06, -8.58306884765625e-05, -1.9073486328125e-06, -0.0003566607483662665, -0.0008078753016889095, -4.4225667807040736e-05, -2.5153007300104946e-05, 0.0, -5.125999450683594e-05, 0.0, -4.38690185546875e-05, -0.007959365844726562, -8.20159912109375e-05, -3.385543095646426e-05, -2.503394853192731e-06, 0.0, -9.536738616588991e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "MinionSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template39", "hole0": "Draw"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 211, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.108082525061711, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -5.05855655670166, -7.152555099310121e-07, -0.0003450938093010336, 0.0, -8.225420970120467e-06, -6.628036499023438e-05, -0.00016676020459271967, -0.0007154941558837891, -9.536738616588991e-07, -0.02625804953277111, -0.0003759859537240118, -0.0031826866324990988, -5.841255187988281e-06, -1.1920928244535389e-07, -9.72747802734375e-05, -0.0004329681396484375, -3.814697265625e-06, -0.005028679035604, -1.8596643712953664e-05, 0.0, -1.8715856640483253e-05, 0.0, -0.0001233816146850586, 0.0, -5.7220458984375e-06, -0.010311126708984375, -0.0001354217529296875, -0.00016427038644906133, -2.9802317840221804e-06, 0.0, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole6": [{"_type": "Template39", "hole0": "EnemyPlayer"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Attribute('<UNK>',\n            PlayerSelector())), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.182090227056051, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -1.3714303970336914, -0.0005702972412109375, -3.814697265625e-05, -5.7220458984375e-06, -2.804147481918335, -2.9802317840221804e-06, -1.52587890625e-05, -0.046108245849609375, -0.0002880096435546875, -0.12865614891052246, -0.0017566840397194028, -0.027391433715820312, -1.1444091796875e-05, -0.4247699975967407, -1.537799835205078e-05, 0.0, -0.007218848913908005, -0.00035887680132873356, -1.6927711840253323e-05, -1.8358225133852102e-05, 0.0, -2.312659489689395e-05, 0.0, -2.6702880859375e-05, -0.000247955322265625, -0.0002727508544921875, -3.0517570849042386e-05, -3.6954811548639555e-06, 0.0, -4.172316494077677e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Heal", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.413287066313217, "score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -3.570405960083008, -3.96960494981613e-05, -0.0001147972943726927, -1.9073486328125e-06, -8.106231689453125e-06, -3.147125244140625e-05, -4.911301948595792e-05, -0.0013159513473510742, -6.556489552167477e-06, -1.0548349618911743, -0.0015215021558105946, -0.10568452626466751, -9.5367431640625e-05, -1.4185804502631072e-05, -0.3982095718383789, -0.023603439331054688, -7.62939453125e-06, -0.23223137855529785, -5.006777428206988e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.0013035527663305402, -0.0019332343945279717, -0.00010573305189609528, -3.635852044681087e-05, 0.0, -1.740455445542466e-05, 0.0, -5.340576171875e-05, -0.0194091796875, -5.7220458984375e-05, -4.613398778019473e-05, -2.503394853192731e-06, 0.0, -1.0728830375228426e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Heal", "hole5": "MinionSelector", "hole1": 4, "hole0": "Gnomish Inventor", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "GnomishInventor", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 4}], "hole4": "player"}}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n", "score": -2.3108799344697672, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -0.8240022659301758, 0.0, -0.0019818542059510946, 0.0, -0.0011349916458129883, 0.0, -7.867813110351562e-06, 0.0, -0.0004177093505859375, -0.0001068115234375, -1.537799835205078e-05, -5.364412118069595e-06, -0.7294626235961914, -1.9073486328125e-05, -0.0001430511474609375, -0.0003261566162109375, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -7.82012939453125e-05, -0.010801315307617188, -5.7220458984375e-06, -0.000415802001953125, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.0001430511474609375, -0.0002956390380859375, 0.0, -0.004573941230773926, 0.0, -0.7203712463378906, -1.9073486328125e-06, -0.008902688510715961, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "score": -2.354282687308796, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -0.8240022659301758, 0.0, -0.0019818542059510946, 0.0, -0.0011349916458129883, 0.0, -7.867813110351562e-06, 0.0, -0.0004177093505859375, -0.0001068115234375, -1.537799835205078e-05, -5.364412118069595e-06, -0.7294626235961914, -1.9073486328125e-05, -0.0001430511474609375, -0.0003261566162109375, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -7.82012939453125e-05, -0.010801315307617188, -5.7220458984375e-06, -0.000415802001953125, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.0001430511474609375, -0.0002956390380859375, 0.0, -0.004573941230773926, 0.0, -0.7292966842651367, -5.7220458984375e-06, -0.04337618872523308, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score": -2.4131296126940853, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -0.8240022659301758, 0.0, -0.0019818542059510946, 0.0, -0.0011349916458129883, 0.0, -7.867813110351562e-06, 0.0, -0.0004177093505859375, -0.0001068115234375, -1.537799835205078e-05, -5.364412118069595e-06, -0.6627674102783203, -7.62939453125e-06, -1.52587890625e-05, -0.00019073486328125, -3.0517578125e-05, -7.43865966796875e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00016987323760986328, -0.10263252258300781, -1.9073486328125e-06, -0.00045013427734375, -0.0002346038818359375, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.000186920166015625, -0.0003814697265625, 0.0, -0.005267143249511719, 0.0, -0.6924229860305786, -3.814697265625e-06, -0.043277423828840256, 0.0, -0.00545501708984375, -1.9073486328125e-06, -0.00867462158203125, -0.0001277923583984375, -0.0001354217529296875, -1.1444091796875e-05, -2.86102294921875e-05, -1.33514404296875e-05, -0.024402618408203125, 0.0, -0.002150297164916992, 0.0, -0.017263544723391533, -1.9073486328125e-06, -0.011578223668038845, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n", "score": -2.4453754582279927, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -0.8240022659301758, 0.0, -0.0019818542059510946, 0.0, -0.0011349916458129883, 0.0, -7.867813110351562e-06, 0.0, -0.0004177093505859375, -0.0001068115234375, -1.537799835205078e-05, -5.364412118069595e-06, -0.6627674102783203, -7.62939453125e-06, -1.52587890625e-05, -0.00019073486328125, -3.0517578125e-05, -7.43865966796875e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00016987323760986328, -0.10263252258300781, -1.9073486328125e-06, -0.00045013427734375, -0.0002346038818359375, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.000186920166015625, -0.0003814697265625, 0.0, -0.005267143249511719, 0.0, -0.7571288347244263, -1.9073486328125e-06, -0.010133267380297184, 0.0, -0.002681732177734375, -1.9073486328125e-06, -0.0068492889404296875, -0.00020599365234375, -0.0001430511474609375, -2.09808349609375e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.02518463134765625, 0.0, -0.0020444393157958984, 0.0, -0.023197360336780548, -1.9073486328125e-06, -0.01011750940233469, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score": -2.5926477360806004, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -1.0736274719238281, 0.0, -0.002871870994567871, 0.0, -0.0009480714797973633, 0.0, -1.5497207641601562e-05, 0.0, -0.0006313323974609375, -0.000110626220703125, -1.3470649719238281e-05, -6.318082796497038e-06, -0.5903196334838867, -7.62939453125e-06, -1.52587890625e-05, -0.0001850128173828125, -2.86102294921875e-05, -6.866455078125e-05, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00017178058624267578, -0.10181617736816406, -1.9073486328125e-06, -0.00045013427734375, -0.00023651123046875, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.000186920166015625, -0.00037384033203125, 0.0, -0.005249977111816406, 0.0, -0.6946136951446533, -3.814697265625e-06, -0.04336065053939819, 0.0, -0.005428314208984375, -1.9073486328125e-06, -0.008655548095703125, -0.0001277923583984375, -0.0001373291015625, -1.1444091796875e-05, -2.86102294921875e-05, -1.33514404296875e-05, -0.024438858032226562, 0.0, -0.002145528793334961, 0.0, -0.01726616732776165, -1.9073486328125e-06, -0.01157834380865097, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n", "score": -2.6205388411215083, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -1.0736274719238281, 0.0, -0.002871870994567871, 0.0, -0.0009480714797973633, 0.0, -1.5497207641601562e-05, 0.0, -0.0006313323974609375, -0.000110626220703125, -1.3470649719238281e-05, -6.318082796497038e-06, -0.5903196334838867, -7.62939453125e-06, -1.52587890625e-05, -0.0001850128173828125, -2.86102294921875e-05, -6.866455078125e-05, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00017178058624267578, -0.10181617736816406, -1.9073486328125e-06, -0.00045013427734375, -0.00023651123046875, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.000186920166015625, -0.00037384033203125, 0.0, -0.005249977111816406, 0.0, -0.7551119327545166, -1.9073486328125e-06, -0.010118361562490463, 0.0, -0.0026607513427734375, -1.9073486328125e-06, -0.0068264007568359375, -0.00020599365234375, -0.00014495849609375, -2.09808349609375e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.025177001953125, 0.0, -0.002042531967163086, 0.0, -0.02319163829088211, -1.9073486328125e-06, -0.010116077959537506, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n", "score": -2.6446952467124447, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -1.0736274719238281, 0.0, -0.002871870994567871, 0.0, -0.0009480714797973633, 0.0, -1.5497207641601562e-05, 0.0, -0.0006313323974609375, -0.000110626220703125, -1.3470649719238281e-05, -6.318082796497038e-06, -0.8132743835449219, -1.71661376953125e-05, -0.0001430511474609375, -0.000324249267578125, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.5299530029296875e-06, -8.0108642578125e-05, -0.01087188720703125, -5.7220458984375e-06, -0.000415802001953125, -8.96453857421875e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.000141143798828125, -0.0002803802490234375, 0.0, -0.0045844316482543945, 0.0, -0.7197563648223877, -1.9073486328125e-06, -0.008906836621463299, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "score": -2.6901706374521837, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -1.0736274719238281, 0.0, -0.002871870994567871, 0.0, -0.0009480714797973633, 0.0, -1.5497207641601562e-05, 0.0, -0.0006313323974609375, -0.000110626220703125, -1.3470649719238281e-05, -6.318082796497038e-06, -0.8132743835449219, -1.71661376953125e-05, -0.0001430511474609375, -0.000324249267578125, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.5299530029296875e-06, -8.0108642578125e-05, -0.01087188720703125, -5.7220458984375e-06, -0.000415802001953125, -8.96453857421875e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.000141143798828125, -0.0002803802490234375, 0.0, -0.0045844316482543945, 0.0, -0.7300999164581299, -5.7220458984375e-06, -0.04403486102819443, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score": -3.5674234527352766, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.1485157012939453, 0.0, -0.0013988018035888672, 0.0, -0.0017052888870239258, 0.0, -1.9311904907226562e-05, 0.0, -0.0006561279296875, -0.000125885009765625, -1.537799835205078e-05, -7.748586540401448e-06, -0.49596405029296875, -7.62939453125e-06, -1.52587890625e-05, -0.0001926422119140625, -2.86102294921875e-05, -7.05718994140625e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00017178058624267578, -0.09966278076171875, -1.9073486328125e-06, -0.00045013427734375, -0.0002288818359375, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0001888275146484375, -0.0003814697265625, 0.0, -0.0053043365478515625, 0.0, -0.6906079053878784, -3.814697265625e-06, -0.044229261577129364, 0.0, -0.0053882598876953125, -1.9073486328125e-06, -0.008749008178710938, -0.000125885009765625, -0.0001373291015625, -1.1444091796875e-05, -3.0517578125e-05, -1.33514404296875e-05, -0.024562835693359375, 0.0, -0.00214540958404541, 0.0, -0.017193330451846123, -1.9073486328125e-06, -0.011610284447669983, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n", "score": -3.6024241131919936, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.1485157012939453, 0.0, -0.0013988018035888672, 0.0, -0.0017052888870239258, 0.0, -1.9311904907226562e-05, 0.0, -0.0006561279296875, -0.000125885009765625, -1.537799835205078e-05, -7.748586540401448e-06, -0.49596405029296875, -7.62939453125e-06, -1.52587890625e-05, -0.0001926422119140625, -2.86102294921875e-05, -7.05718994140625e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00017178058624267578, -0.09966278076171875, -1.9073486328125e-06, -0.00045013427734375, -0.0002288818359375, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0001888275146484375, -0.0003814697265625, 0.0, -0.0053043365478515625, 0.0, -0.7590283155441284, -1.9073486328125e-06, -0.010245634242892265, 0.0, -0.0026226043701171875, -1.9073486328125e-06, -0.006866455078125, -0.00020599365234375, -0.00014495849609375, -2.09808349609375e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.025304794311523438, 0.0, -0.002039670944213867, 0.0, -0.023096032440662384, -1.9073486328125e-06, -0.010149934329092503, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n", "score": -3.8508326570693043, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.1485157012939453, 0.0, -0.0013988018035888672, 0.0, -0.0017052888870239258, 0.0, -1.9311904907226562e-05, 0.0, -0.0006561279296875, -0.000125885009765625, -1.537799835205078e-05, -7.748586540401448e-06, -0.9450111389160156, -1.71661376953125e-05, -0.0001468658447265625, -0.00032806396484375, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -8.0108642578125e-05, -0.010515213012695312, -5.7220458984375e-06, -0.0004100799560546875, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.000148773193359375, -0.0002841949462890625, 0.0, -0.004581570625305176, 0.0, -0.7202425003051758, -1.9073486328125e-06, -0.008949743583798409, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "score": -3.8948359369489935, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.1485157012939453, 0.0, -0.0013988018035888672, 0.0, -0.0017052888870239258, 0.0, -1.9311904907226562e-05, 0.0, -0.0006561279296875, -0.000125885009765625, -1.537799835205078e-05, -7.748586540401448e-06, -0.9450111389160156, -1.71661376953125e-05, -0.0001468658447265625, -0.00032806396484375, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -8.0108642578125e-05, -0.010515213012695312, -5.7220458984375e-06, -0.0004100799560546875, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.000148773193359375, -0.0002841949462890625, 0.0, -0.004581570625305176, 0.0, -0.72930908203125, -5.7220458984375e-06, -0.04388262704014778, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n", "score": -4.418094131279986, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.937838554382324, 0.0, -0.001021265983581543, 0.0, -0.0008221864700317383, 0.0, -1.7404556274414062e-05, 0.0, -0.0006237030029296875, -0.00011444091796875, -1.3470649719238281e-05, -7.152543730626348e-06, -0.7254409790039062, -1.52587890625e-05, -0.00012969970703125, -0.00032806396484375, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -8.0108642578125e-05, -0.0110321044921875, -5.7220458984375e-06, -0.0004138946533203125, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.0001392364501953125, -0.000293731689453125, 0.0, -0.004567265510559082, 0.0, -0.7186018228530884, -1.9073486328125e-06, -0.008920792490243912, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "score": -4.4655576340148855, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.937838554382324, 0.0, -0.001021265983581543, 0.0, -0.0008221864700317383, 0.0, -1.7404556274414062e-05, 0.0, -0.0006237030029296875, -0.00011444091796875, -1.3470649719238281e-05, -7.152543730626348e-06, -0.7254409790039062, -1.52587890625e-05, -0.00012969970703125, -0.00032806396484375, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.649161837733118e-06, -8.0108642578125e-05, -0.0110321044921875, -5.7220458984375e-06, -0.0004138946533203125, -8.7738037109375e-05, -0.00012969970703125, -1.71661376953125e-05, -7.62939453125e-06, -0.0001392364501953125, -0.000293731689453125, 0.0, -0.004567265510559082, 0.0, -0.7311340570449829, -5.7220458984375e-06, -0.043848246335983276, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score": -4.535238620009515, "score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -2.937838554382324, 0.0, -0.001021265983581543, 0.0, -0.0008221864700317383, 0.0, -1.7404556274414062e-05, 0.0, -0.0006237030029296875, -0.00011444091796875, -1.3470649719238281e-05, -7.152543730626348e-06, -0.6666488647460938, -7.62939453125e-06, -1.52587890625e-05, -0.0001773834228515625, -3.0517578125e-05, -7.05718994140625e-05, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00017178058624267578, -0.1066741943359375, -1.9073486328125e-06, -0.00045013427734375, -0.000232696533203125, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0001850128173828125, -0.0003814697265625, 0.0, -0.005279541015625, 0.0, -0.693115234375, -3.814697265625e-06, -0.04366814345121384, 0.0, -0.005596160888671875, -1.9073486328125e-06, -0.0086212158203125, -0.0001277923583984375, -0.0001354217529296875, -1.1444091796875e-05, -2.86102294921875e-05, -1.33514404296875e-05, -0.024616241455078125, 0.0, -0.002144455909729004, 0.0, -0.017293347045779228, -1.9073486328125e-06, -0.011576673947274685, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Heroic Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "HeroicStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "change_temp_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 2, "hole1": "increase_armor"}}], "hole4": "player"}}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -1.2363459269750976, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.1749722957611084, 0.0, -0.000827789306640625, 0.0, -0.014412403106689453, 0.0, -1.9073486328125e-06, -0.0001392364501953125, -8.96453857421875e-05, 7.152555099310121e-07, -0.006858995649963617, -2.7181053155800328e-05, -8.511257328791544e-05, -0.0015947805950418115, -1.9073486328125e-06, -0.0003223419189453125, -7.62939453125e-06, -0.00028324127197265625, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "DRUID", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -1.5252008393970158, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.4716823101043701, -1.1920928244535389e-07, -6.878376007080078e-05, 0.0, -0.010179281234741211, 0.0, -3.814697265625e-06, -0.0001621246337890625, -7.62939453125e-05, 8.344646857949556e-07, -0.003959541209042072, -2.7061581931775436e-05, -5.829205838381313e-05, -0.0016008608508855104, -1.9073486328125e-06, -0.0003662109375, -9.5367431640625e-06, -0.00028145313262939453, -7.867813110351562e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "MAGE", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ROGUE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -1.7331366647982165, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.6791036128997803, 0.0, -0.0013104677200317383, 0.0, -0.0015499353175982833, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0001277923583984375, 5.960462772236497e-07, -0.011711282655596733, -2.575138205429539e-05, -6.043771645636298e-05, -0.0016304247546941042, -1.9073486328125e-06, -0.000423431396484375, -7.62939453125e-06, -0.00029838085174560547, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "ROGUE", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -2.5370679578505744, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -2.481595754623413, 0.0, -0.000293731689453125, 0.0, -0.0013787734787911177, 0.0, -3.814697265625e-06, -0.000213623046875, -0.0001010894775390625, 7.152555099310121e-07, -0.01427896972745657, -2.1340587409213185e-05, -0.00011276666191406548, -0.0015943042235448956, -1.9073486328125e-06, -0.0003910064697265625, -7.62939453125e-06, -0.00035178661346435547, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "WARRIOR", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -2.77271653120129, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -2.7233121395111084, 0.0, -6.127357482910156e-05, 0.0, -0.0009720321395434439, 0.0, -3.814697265625e-06, -0.0001506805419921875, -7.62939453125e-05, 5.960462772236497e-07, -0.009162204340100288, -1.776445424184203e-05, -5.2689490985358134e-05, -0.0015081162564456463, -1.9073486328125e-06, -0.000347137451171875, -7.62939453125e-06, -0.00032126903533935547, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "PRIEST", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -2.8591034883453332, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -2.803490400314331, 0.0, -0.0005245208740234375, 0.0, -0.0016543834935873747, 0.0, -3.814697265625e-06, -0.0004711151123046875, -0.000118255615234375, 7.152555099310121e-07, -0.013616979122161865, -1.859873009379953e-05, -7.962934614624828e-05, -0.0016843071207404137, -1.9073486328125e-06, -0.000431060791015625, -7.62939453125e-06, -0.00027942657470703125, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "PALADIN", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "SHAMAN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -3.650176753423459, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -3.6010539531707764, 0.0, -0.0001035928726196289, 0.0, -0.0015112035907804966, 0.0, -3.814697265625e-06, -0.0001354217529296875, -0.0001049041748046875, 8.344646857949556e-07, -0.008248577825725079, -2.6704634365160018e-05, -5.0305410695727915e-05, -0.0015140767209231853, -1.9073486328125e-06, -0.0003833770751953125, -9.5367431640625e-06, -0.00030612945556640625, -7.867813110351562e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "SHAMAN", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 150, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "Ironbark", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Ironbark().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "score": -3.953690841129358, "score_history": [-3.814697265625e-06, -3.5131120681762695, -2.3364747903542593e-05, -1.6689286894688848e-06, -4.649158654501662e-06, -0.03390110656619072, -1.52587890625e-05, -8.70227722771233e-06, -1.71661376953125e-05, -0.00057220458984375, -5.7220458984375e-05, -2.264974000354414e-06, -2.5272369384765625e-05, -1.1920928244535389e-07, 0.0, -9.654741734266281e-05, -0.00020489977032411844, -0.05072832107543945, -3.4570680327306036e-06, -0.000316619873046875, 0.0, -0.0015773773193359375, 0.0, -5.340576171875e-05, -1.52587890625e-05, -0.0001291036605834961, -3.290122185717337e-05, -0.01691436767578125, -1.9073486328125e-06, -5.7220458984375e-06, -0.000308990478515625, -0.00014495849609375, -0.000110626220703125, 0.0, -9.357929229736328e-05, 0.0, -5.7220458984375e-06, 0.0, -4.38690185546875e-05, -1.33514404296875e-05, -3.063678741455078e-05, -3.814697265625e-05, -0.006702423095703125, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -0.0012606382369995117, -1.1920928244535389e-07, -0.001888275146484375, -0.0001354217529296875, -0.0004863739013671875, -3.814697265625e-06, -9.91808992694132e-05, -1.9073486328125e-06, -0.000209808349609375, -3.62396240234375e-05, 0.0, -0.0001761867169989273, -2.6702880859375e-05, -0.0021381378173828125, 0.0, -0.016442935913801193, -3.814697265625e-06, -0.00154876708984375, -0.0003185272216796875, -0.0007152557373046875, -9.1552734375e-05, -0.0006103515625, -0.0031704253051429987, -0.15072514116764069, -0.08355426043272018, 0.0, -0.002834320068359375, -0.005077362060546875, -2.6702880859375e-05, -0.028432846069335938, 0.0, -0.000995635986328125, -3.814697265625e-06, -4.9591064453125e-05, -3.933906555175781e-06, -0.0001316070556640625, -9.5367431640625e-06, -4.00543212890625e-05, 0.0, -0.0033998489379882812, -7.62939453125e-06, -0.0002193450927734375, -1.71661376953125e-05, -4.1961669921875e-05, -1.1444091796875e-05, 0.0, -5.733966827392578e-05, 0.0, -0.00013399124145507812, -3.814697265625e-06, -1.1444091796875e-05, -0.0004177093505859375, -0.000152587890625, -0.010740160942077637, -2.3841855067985307e-07, -0.001216888427734375, -6.4849853515625e-05, -0.00061798095703125, -2.86102294921875e-05, -3.814697265625e-06, -1.9073486328125e-06, -2.47955322265625e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -3.254413604736328e-05, -3.814689989667386e-06, -0.0001316070556640625, -0.0011730194091796875, -9.72747802734375e-05, -0.0035037994384765625, -3.62396240234375e-05, -9.918212890625e-05, -0.0001125335693359375, -6.866455078125e-05, -1.33514404296875e-05, -1.1444091796875e-05, -7.62939453125e-06, -1.7762184143066406e-05, -1.9073486328125e-06, -0.0008258819580078125, 0.0, -0.0002231597900390625, -1.9073486328125e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.000274658203125, -1.1444091796875e-05, -0.0001430511474609375, -1.33514404296875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.0008130073547363281, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0001703500747680664, 0.0, -0.00023233890533447266, -3.814697265625e-06, -0.000148773193359375, -0.0001735687255859375, -9.5367431640625e-05, -0.00019073486328125, -1.33514404296875e-05, -0.0011337993200868368, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "MAGE", "hole1": 8}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "Ironbark"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARLOCK", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -4.848172446078529, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -4.80081033706665, 0.0, -0.000148773193359375, 0.0, -0.001144647365435958, 0.0, -3.814697265625e-06, -0.000148773193359375, -0.0001010894775390625, 5.960462772236497e-07, -0.006906299386173487, -2.4439606931991875e-05, -5.578878699452616e-05, -0.0014404051471501589, -1.9073486328125e-06, -0.000339508056640625, -7.62939453125e-06, -0.00031745433807373047, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "WARLOCK", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "HUNTER", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -5.438837423344573, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -5.38570499420166, 0.0, -0.00026917457580566406, 0.0, -0.00038575968937948346, 0.0, -3.814697265625e-06, -0.0001983642578125, -0.000118255615234375, 7.152555099310121e-07, -0.01325311604887247, -2.289072290295735e-05, -5.6265602324856445e-05, -0.0014256233116611838, -1.9073486328125e-06, -0.0003509521484375, -7.62939453125e-06, -0.0003173351287841797, -5.841255187988281e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "HUNTER", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(8, 8, taunt=True)\n", "score": -5.559394507216545, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.1749722957611084, 0.0, -0.000827789306640625, 0.0, -4.3394083976745605, 0.0, -3.814697265625e-06, -0.0001316070556640625, -0.00023651123046875, 7.152555099310121e-07, -0.005295787006616592, -2.7183887141291052e-05, -4.184180943411775e-05, -0.0011487002484500408, -1.9073486328125e-06, -0.0002899169921875, -7.62939453125e-06, -0.00028145313262939453, -4.172325134277344e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "DRUID", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "_"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.061052237021265, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -6.003546714782715, 0.0, -0.0003211498260498047, 0.0, -0.0027025858871638775, 0.0, -3.814697265625e-06, -0.0002193450927734375, -0.0001049041748046875, 7.152555099310121e-07, -0.015053086914122105, -2.145919279428199e-05, -8.916537626646459e-05, -0.0014970287447795272, -1.9073486328125e-06, -0.0004291534423828125, -7.62939453125e-06, -0.00033092498779296875, -7.867813110351562e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "COMMON", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.1075769693002755, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -6.055286407470703, 0.0, -0.0003910064697265625, 0.0, -9.95396840153262e-05, 0.0, -3.814697265625e-06, -0.0003032684326171875, -0.0001201629638671875, 5.960462772236497e-07, -0.012338293716311455, -1.812155096558854e-05, -7.807960355421528e-05, -0.001519678975455463, -1.9073486328125e-06, -0.0003795623779296875, -7.62939453125e-06, -0.00030982494354248047, -4.0531158447265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "ALL", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "Form", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.Form,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.173160935965477, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -6.122903347015381, 0.0, -6.103515625e-05, 0.0, -0.000337719451636076, 0.0, -3.814697265625e-06, -0.0001697540283203125, -0.0001506805419921875, 7.152555099310121e-07, -0.010374940000474453, -2.1697611373383552e-05, -7.939081115182489e-05, -0.00167238584253937, -1.9073486328125e-06, -0.00037384033203125, -7.62939453125e-06, -0.00028133392333984375, -5.9604644775390625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "Form", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 8, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ROGUE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "8", "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(888, 8, taunt=True)\n", "score": -6.517803923938622, "score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.6791036128997803, 0.0, -0.0013104677200317383, 0.0, -0.0015499353175982833, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0001277923583984375, 5.960462772236497e-07, -4.48213005065918, -0.1437721997499466, -0.16922755539417267, -0.0017126989550888538, -2.6821999199455604e-05, -0.0012027022894471884, -3.814697265625e-06, -0.000492095947265625, -9.5367431640625e-06, -0.00024139881134033203, -1.3589859008789062e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Ironbark Protector", "hole2": "ROGUE", "hole1": 8}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronbarkProtector", "hole6": [{"_type": "Template22", "hole0": 888, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -2.420797344439954, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.752431333065033, 0.0, -0.55120849609375, -0.0001583099365234375, -0.0014514923095703125, -3.814697265625e-05, -4.76837158203125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0024652481079101562, 0.0, -4.1961669921875e-05, -0.005269050598144531, -0.0009784698486328125, -0.004679836332798004, -5.471706026582979e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "score": -2.7069284507606426, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.6528053283691406, -1.9073486328125e-06, -0.1597003936767578, -1.52587890625e-05, -0.0001697540283203125, -4.1961669921875e-05, -0.0003986358642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.15678632259368896, 0.0, -0.6350039839744568, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(2)\n", "score": -2.8818584868286052, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.6528053283691406, -1.9073486328125e-06, -0.1597003936767578, -1.52587890625e-05, -0.0001697540283203125, -4.1961669921875e-05, -0.0003986358642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.15678632259368896, 0.0, -0.8099359273910522, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -3.0960629537248607, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -1.1818675994873047, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.00023651123046875, 0.0, -0.0015506744384765625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-05, -0.0001049041748046875, -5.733966827392578e-05, -9.655952453613281e-06, -0.0002498626708984375, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000331878662109375, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0019000768661499023, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.1086402082582936e-05, -0.5091133117675781, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.0001811981201171875, -0.03850555419921875, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00511777400970459, -9.655952453613281e-06, -0.7521414756774902, 0.0, -0.5519523620605469, -0.0001583099365234375, -0.0014514923095703125, -3.814697265625e-05, -4.76837158203125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0024662017822265625, 0.0, -4.1961669921875e-05, -0.005267143249511719, -0.0009784698486328125, -0.00467995461076498, -5.471706026582979e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n", "score": -3.2549002954337993, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.752431333065033, 0.0, -0.8634567260742188, -5.7220458984375e-06, -0.000736236572265625, -3.0517578125e-05, -0.000133514404296875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.11920952796936035, 0.0, -0.416884183883667, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "score": -3.3818291613415568, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -1.1818675994873047, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.00023651123046875, 0.0, -0.0015506744384765625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-05, -0.0001049041748046875, -5.733966827392578e-05, -9.655952453613281e-06, -0.0002498626708984375, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000331878662109375, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0019000768661499023, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.1086402082582936e-05, -0.5091133117675781, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.0001811981201171875, -0.03850555419921875, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00511777400970459, -9.655952453613281e-06, -0.6530698537826538, -1.9073486328125e-06, -0.15949630737304688, -1.52587890625e-05, -0.0001697540283203125, -4.1961669921875e-05, -0.0003986358642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.1568225622177124, 0.0, -0.6349955797195435, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(2)\n", "score": -3.556777913267979, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -1.1818675994873047, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.00023651123046875, 0.0, -0.0015506744384765625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-05, -0.0001049041748046875, -5.733966827392578e-05, -9.655952453613281e-06, -0.0002498626708984375, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000331878662109375, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0019000768661499023, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.1086402082582936e-05, -0.5091133117675781, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.0001811981201171875, -0.03850555419921875, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00511777400970459, -9.655952453613281e-06, -0.6530698537826538, -1.9073486328125e-06, -0.15949630737304688, -1.52587890625e-05, -0.0001697540283203125, -4.1961669921875e-05, -0.0003986358642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.1568225622177124, 0.0, -0.8099462389945984, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -3.6977294209873364, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.6528053283691406, -1.9073486328125e-06, -1.9280767440795898, -0.0001430511474609375, -0.000370025634765625, -5.53131103515625e-05, -0.0001068115234375, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0023576021194458008, 0.0, -6.29425048828125e-05, -0.005421638488769531, -0.0007915496826171875, -0.00551252905279398, -5.1379196520429105e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n", "score": -3.9284098038033335, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -1.1818675994873047, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.00023651123046875, 0.0, -0.0015506744384765625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-05, -0.0001049041748046875, -5.733966827392578e-05, -9.655952453613281e-06, -0.0002498626708984375, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000331878662109375, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0019000768661499023, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.1086402082582936e-05, -0.5091133117675781, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.0001811981201171875, -0.03850555419921875, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00511777400970459, -9.655952453613281e-06, -0.7521414756774902, 0.0, -0.8624467849731445, -5.7220458984375e-06, -0.000736236572265625, -3.0517578125e-05, -0.000133514404296875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.11917805671691895, 0.0, -0.4169125258922577, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n", "score": -3.9795094320152202, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.752431333065033, 0.0, -0.8634567260742188, -5.7220458984375e-06, -0.000736236572265625, -3.0517578125e-05, -0.000133514404296875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.11920952796936035, 0.0, -1.1414952278137207, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.374021956834433, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -1.1818675994873047, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.00023651123046875, 0.0, -0.0015506744384765625, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-05, -0.0001049041748046875, -5.733966827392578e-05, -9.655952453613281e-06, -0.0002498626708984375, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000331878662109375, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.0019000768661499023, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.1086402082582936e-05, -0.5091133117675781, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.0001811981201171875, -0.03850555419921875, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00511777400970459, -9.655952453613281e-06, -0.6530698537826538, -1.9073486328125e-06, -1.9292926788330078, -0.0001430511474609375, -0.000370025634765625, -5.53131103515625e-05, -0.0001068115234375, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0023576021194458008, 0.0, -6.29425048828125e-05, -0.005421638488769531, -0.0007915496826171875, -0.0055121686309576035, -5.1379196520429105e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.550872250599184, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -1.612527847290039, -0.0004329681396484375, 0.0, -0.00011444091796875, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -0.0001373291015625, -0.02086353302001953, -1.9073486328125e-06, -0.0001010894775390625, -2.6702880859375e-05, -0.0002689361572265625, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004076242446899414, -1.1563301086425781e-05, -0.7674356698989868, 0.0, -0.16290855407714844, -5.7220458984375e-06, -0.001811981201171875, -3.4332275390625e-05, -0.0001506805419921875, -7.62939453125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.1687023639678955, 0.0, -0.3656540513038635, -3.814697265625e-06, -0.012029647827148438, -6.67572021484375e-05, -8.20159912109375e-05, -3.24249267578125e-05, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -3.576278118089249e-07, -0.002720952033996582, 0.0, -7.2479248046875e-05, -0.8778362274169922, -0.0004482269287109375, -0.010009611956775188, -5.114077794132754e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.588255698000438, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -1.612527847290039, -0.0004329681396484375, 0.0, -0.00011444091796875, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -0.0001373291015625, -0.02086353302001953, -1.9073486328125e-06, -0.0001010894775390625, -2.6702880859375e-05, -0.0002689361572265625, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004076242446899414, -1.1563301086425781e-05, -0.6398059129714966, -1.9073486328125e-06, -0.14622783660888672, -7.62939453125e-06, -0.000396728515625, -8.392333984375e-05, -0.000396728515625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.1813664436340332, 0.0, -0.5533393621444702, -5.7220458984375e-06, -0.013463973999023438, -6.866455078125e-05, -8.7738037109375e-05, -2.47955322265625e-05, -3.0517578125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -2.3841855067985307e-07, -0.0026198625564575195, 0.0, -6.866455078125e-05, -0.8596420288085938, -0.0004367828369140625, -0.00935581885278225, -4.923342930851504e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n        self.target.add_buff(Buff(ChangeAttack(2)))\n", "score": -5.268600001987977, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -1.612527847290039, -0.0004329681396484375, 0.0, -0.00011444091796875, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -0.0001373291015625, -0.02086353302001953, -1.9073486328125e-06, -0.0001010894775390625, -2.6702880859375e-05, -0.0002689361572265625, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004076242446899414, -1.1563301086425781e-05, -0.7674356698989868, 0.0, -0.16290855407714844, -5.7220458984375e-06, -0.001811981201171875, -3.4332275390625e-05, -0.0001506805419921875, -7.62939453125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.1687023639678955, 0.0, -0.3656540513038635, -3.814697265625e-06, -0.012029647827148438, -6.67572021484375e-05, -8.20159912109375e-05, -3.24249267578125e-05, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -3.576278118089249e-07, -0.002720952033996582, 0.0, -7.2479248046875e-05, -0.5460023880004883, -0.0001926422119140625, -0.00042479849071241915, -3.8146954466355965e-06, -0.5519692897796631, -0.2394564151763916, -2.9802317840221804e-06, -0.2680206298828125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n        self.target.add_buff(Buff(ChangeAttack(2)))\n", "score": -5.352262090482753, "score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -1.612527847290039, -0.0004329681396484375, 0.0, -0.00011444091796875, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -0.0001373291015625, -0.02086353302001953, -1.9073486328125e-06, -0.0001010894775390625, -2.6702880859375e-05, -0.0002689361572265625, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004076242446899414, -1.1563301086425781e-05, -0.6398059129714966, -1.9073486328125e-06, -0.14622783660888672, -7.62939453125e-06, -0.000396728515625, -8.392333984375e-05, -0.000396728515625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.1813664436340332, 0.0, -0.5533393621444702, -5.7220458984375e-06, -0.013463973999023438, -6.866455078125e-05, -8.7738037109375e-05, -2.47955322265625e-05, -3.0517578125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -2.3841855067985307e-07, -0.0026198625564575195, 0.0, -6.866455078125e-05, -0.5594043731689453, -0.0001983642578125, -0.00043826494948007166, -3.8146954466355965e-06, -0.5544371604919434, -0.24669885635375977, -2.9802317840221804e-06, -0.2723064422607422, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "MarkOfTheWild", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "hole4": "player"}}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -2.224349422592006, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24274373054504395, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.02724933624267578, 0.0, -0.021004319190979004, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005055427551269531, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24912019073963165, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107578873634338, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "4", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(4), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -3.4895192421761223, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24274373054504395, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.02724933624267578, 0.0, -0.021004319190979004, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005055427551269531, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -1.5143173933029175, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -1.52587890625e-05, -5.14984130859375e-05, -4.57763671875e-05, -0.0027054548263549805, 0.0, -3.62396240234375e-05, -4.76837158203125e-05, -0.0003299713134765625, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.0001506805419921875, -0.00030517578125, -1.9073486328125e-06, -1.9073486328125e-05, -3.6716461181640625e-05, -7.987022399902344e-06, -0.000362396240234375, -0.001895904541015625, -0.0004253387451171875, -8.96453857421875e-05, -2.6702880859375e-05, -0.000148773193359375, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.0002803802490234375, 0.0, -0.0001068115234375, 0.0, -1.0251998901367188e-05, 0.0, -0.0013523101806640625, -2.47955322265625e-05, -0.0012531280517578125, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034447908401489258, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.392333984375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008656978607177734, -3.814697265625e-06, -0.0013221479021012783, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004634857177734375, 0.0, -0.1112409234046936, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 4, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_battlecry_target", "<EOS>", 238, 36, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", 41, 127, 0, 177, "x", "<EOS>", 22, 135, "True", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(\n            player.game, lambda x: True)\n        minions = game.random_choice(minions)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -3.543259680590566, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -1.7940759658813477, -1.9073486328125e-06, -0.00128173828125, -0.0001811981201171875, -1.33514404296875e-05, -3.4332275390625e-05, -0.0521240234375, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.1637793779373169, -2.09808349609375e-05, -0.0003427267074584961, -1.9073486328125e-06, -0.03709304332733154, -1.9073486328125e-06, -0.0001983642578125, -0.000263214111328125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.000316619873046875, 0.0, -0.002987384796142578, 0.0, -0.000347137451171875, -7.43865966796875e-05, -8.20159912109375e-05, -0.0005931854248046875, -0.01201927661895752, -1.3589840818895027e-05, -0.0010223388671875, -0.0002155303955078125, -5.352497100830078e-05, -2.3841855067985307e-07, -0.007587432861328125, -0.000186920166015625, -0.0002460479736328125, -4.57763671875e-05, -5.7220458984375e-06, -0.18994557857513428, 0.0, -0.01611328125, -7.05718994140625e-05, -8.0108642578125e-05, -0.0004901885986328125, -0.0003757476806640625, -1.33514404296875e-05, -0.00038874149322509766, 0.0, -0.00221097469329834, -1.1920928244535389e-07, -1.33514404296875e-05, -0.0002288818359375, -5.7220458984375e-06, -0.4481790065765381, 0.0, -0.0028047561645507812, -0.0053844451904296875, -3.4332275390625e-05, -0.027156472206115723, -2.741813204920618e-06, -4.57763671875e-05, -8.0108642578125e-05, -8.58306884765625e-05, -4.76837158203125e-05, -5.245208376436494e-05, 0.0, -0.000141143798828125, -4.76837158203125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -4.029273986816406e-05, -1.3828277587890625e-05, -0.000579833984375, -0.021646499633789062, -0.0008544921875, -0.0001068115234375, -2.6702880859375e-05, -0.0002460479736328125, -7.62939453125e-06, -0.0001373291015625, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -1.251697449333733e-05, -1.9073486328125e-06, -9.72747802734375e-05, 0.0, -0.0001125335693359375, 0.0, -1.4185905456542969e-05, 0.0, -0.0015716552734375, -1.9073486328125e-05, -0.001209259033203125, -3.0517578125e-05, -0.0001621246337890625, 0.0, -0.003396153450012207, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.96453857421875e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.05718994140625e-05, 0.0, -0.0008677244186401367, -3.814697265625e-06, -0.0013688189210370183, 0.0, -0.00011444091796875, -0.00273895263671875, -0.0003299713134765625, -0.000423431396484375, 0.0, -0.10588718205690384, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_enemy_minion_battlecry_target"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, {"_type": "Lambda", "body": {"_type": "NameConstant", "value": true}, "args": {"_type": "Template21", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 3):\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -3.5862570633696507, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -1.3065415620803833, -5.841255187988281e-06, -0.28787899017333984, -0.5942497253417969, -0.0003986358642578125, -1.71661376953125e-05, 0.0, -0.09326791763305664, 0.0, -0.18769681453704834, -1.1444091796875e-05, 0.0, -0.0011320114135742188, -3.0517578125e-05, -1.71661376953125e-05, 0.0, -0.00016987323760986328, -5.7220458984375e-06, -0.00019442668417468667, 0.0, -0.0940394252538681, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -1.52587890625e-05, -5.14984130859375e-05, -7.82012939453125e-05, -0.003040790557861328, 0.0, -4.00543212890625e-05, -4.00543212890625e-05, -0.00014495849609375, -2.47955322265625e-05, -9.655952453613281e-06, -7.62939453125e-06, -0.0001506805419921875, -0.0004291534423828125, -1.9073486328125e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.0003070831298828125, -0.001529693603515625, -0.000408172607421875, -8.96453857421875e-05, -2.6702880859375e-05, -0.000156402587890625, -1.1444091796875e-05, -0.000152587890625, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.0002841949462890625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.00147247314453125, -2.47955322265625e-05, -0.0013475418090820312, -2.09808349609375e-05, -0.000125885009765625, 0.0, -0.0034199953079223633, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.001323578879237175, 0.0, -0.00011444091796875, -0.00286865234375, -0.0003509521484375, -0.00045013427734375, 0.0, -0.11127961426973343, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.130933152767049, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -2.016752243041992, -0.11304378509521484, -0.0002422332763671875, -5.7220458984375e-05, -1.9073486328125e-06, -0.12671315670013428, 0.0, -0.3011183738708496, -1.1444091796875e-05, 0.0, -0.00127410888671875, -3.814697265625e-05, -3.62396240234375e-05, 0.0, -0.00020992755889892578, -3.814697265625e-06, -0.0002548587799537927, 0.0, -0.10275792330503464, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-05, -7.05718994140625e-05, -0.002826213836669922, 0.0, -4.1961669921875e-05, -3.814697265625e-05, -0.00014495849609375, -2.288818359375e-05, -1.1563301086425781e-05, -9.5367431640625e-06, -0.0001506805419921875, -0.0004329681396484375, -1.9073486328125e-06, -1.9073486328125e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.0003185272216796875, -0.001552581787109375, -0.000408172607421875, -8.96453857421875e-05, -2.6702880859375e-05, -0.000152587890625, -1.1444091796875e-05, -0.000156402587890625, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.0002803802490234375, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.00141143798828125, -2.47955322265625e-05, -0.0013027191162109375, -1.9073486328125e-05, -0.000125885009765625, 0.0, -0.003430485725402832, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.0013283409643918276, 0.0, -0.00011444091796875, -0.0028705596923828125, -0.0003528594970703125, -0.000453948974609375, 0.0, -0.11118144541978836, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "targets", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.345972147632658, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -1.5496580600738525, -1.9073486328125e-06, -0.00014495849609375, -2.09808349609375e-05, -0.00022125244140625, -1.9073486328125e-06, -0.8376502990722656, -1.9073486328125e-06, -0.022771358489990234, 0.0, -1.71661376953125e-05, -0.0024099349975585938, -3.814697265625e-06, -0.0010663270950317383, 0.0, -0.0005016326904296875, -0.0001659393310546875, -0.00214385986328125, -5.7220458984375e-06, -0.005222320556640625, 0.0, -6.866455078125e-05, 0.0, -7.62939453125e-06, -0.000457763671875, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -1.9073486328125e-05, -0.00014340876077767462, 0.0, -0.2519664168357849, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.76837158203125e-05, -6.4849853515625e-05, -0.0032410621643066406, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.0001506805419921875, -0.0003833770751953125, -3.814697265625e-06, -2.288818359375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.0003147125244140625, -0.0016155242919921875, -0.0004119873046875, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.00016021728515625, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.00133514404296875, -2.47955322265625e-05, -0.0012531280517578125, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.003464818000793457, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.0013270288472995162, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.000461578369140625, 0.0, -0.11109539866447449, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.400426197077415, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -2.54476261138916, 0.0, -0.002681732177734375, 0.0, -0.013544082641601562, 0.0, -0.00014495849609375, 0.0, -3.0517578125e-05, -1.71661376953125e-05, -5.412101745605469e-05, -5.924701690673828e-05, -0.21997737884521484, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-05, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004138946533203125, -1.9073486328125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18808472156524658, -3.814697265625e-06, -0.020818710327148438, -0.000244140625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0024623870849609375, -1.9073486328125e-06, -0.0002650022506713867, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008143403567373753, 0.0, -0.010402679443359375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017409324645996094, 0.0, -0.0030536651611328125, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.0006669688154943287, -1.9073486328125e-06, -0.00287628173828125, -1.71661376953125e-05, -0.44509264826774597, -3.814697265625e-06, -0.1812267303466797, -0.0006103515625, -0.0006771087646484375, -0.0001430511474609375, -0.001407623291015625, -3.814697265625e-06, -0.001522064208984375, 0.0, -0.005564689636230469, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008007049560546875, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032958984375, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24253106117248535, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.027273178100585938, 0.0, -0.021007180213928223, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005054473876953125, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24912400543689728, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107568442821503, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "1", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n", "score": -4.441918386358104, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24274373054504395, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.02724933624267578, 0.0, -0.021004319190979004, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005055427551269531, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24912019073963165, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -2.328658103942871, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 1}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.521326850132709, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -1.6350688934326172, -5.53131103515625e-05, -1.71661376953125e-05, -8.392333984375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -2.1457672119140625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -3.933906555175781e-06, -3.814697265625e-06, -0.0002613067626953125, -1.1444091796875e-05, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-05, -0.21401739120483398, -1.9073486328125e-06, -0.02164173126220703, -0.000774383544921875, -1.1444091796875e-05, -1.52587890625e-05, -0.0057525634765625, -3.814697265625e-06, -0.0006511211395263672, -1.9073486328125e-06, -0.0004787445068359375, -1.9073486328125e-06, -1.1444091796875e-05, -7.2479248046875e-05, -2.47955322265625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -4.57763671875e-05, -9.5367431640625e-06, -1.33514404296875e-05, 0.0, -0.0007138251676224172, -1.9073486328125e-06, -0.008686683140695095, 0.0, -0.011540412902832031, -0.0001773834228515625, -0.0004825592041015625, -9.5367431640625e-06, -0.004958391189575195, 0.0, -0.42437076568603516, 0.0, -7.2479248046875e-05, -4.1961669921875e-05, -4.9591064453125e-05, -0.4609489440917969, -7.62939453125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0008087158203125, 0.0, -0.36336183547973633, 0.0, -0.0006099783931858838, 0.0, -0.029260635375976562, -9.1552734375e-05, -1.71661376953125e-05, 0.0, -0.4750385284423828, 0.0, -0.196807861328125, -1.1444091796875e-05, -0.010507583618164062, 0.0, -0.0028629302978515625, -0.008636474609375, -2.86102294921875e-05, -3.814697265625e-05, 0.0, -0.0003815889358520508, 0.0, -0.0027358531951904297, -1.9073486328125e-06, 0.0, -0.0004901885986328125, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001220703125, -5.7220458984375e-06, -9.524796041660011e-05, 0.0, -0.12024176865816116, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.9073486328125e-05, -7.05718994140625e-05, -6.29425048828125e-05, -0.003513336181640625, 0.0, -4.1961669921875e-05, -3.0517578125e-05, -0.000171661376953125, -2.288818359375e-05, -9.655952453613281e-06, -7.62939453125e-06, -0.0001506805419921875, -0.000396728515625, -3.814697265625e-06, -2.6702880859375e-05, -4.076957702636719e-05, -7.987022399902344e-06, -0.0003261566162109375, -0.001567840576171875, -0.0004100799560546875, -8.7738037109375e-05, -2.6702880859375e-05, -0.0001506805419921875, -1.1444091796875e-05, -0.0001621246337890625, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.198883056640625e-06, -1.9073486328125e-06, -0.000274658203125, 0.0, -0.0001087188720703125, 0.0, -1.0251998901367188e-05, 0.0, -0.0012607574462890625, -2.6702880859375e-05, -0.001194000244140625, -1.71661376953125e-05, -0.0001220703125, 0.0, -0.0034810304641723633, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.392333984375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008656978607177734, -3.814697265625e-06, -0.0013351242523640394, 0.0, -0.000110626220703125, -0.0028858184814453125, -0.000354766845703125, -0.000469207763671875, 0.0, -0.1111588105559349, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 3):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.607957391629263, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -1.3065415620803833, -5.841255187988281e-06, -1.6823158264160156, -0.0031223297119140625, -0.0004062652587890625, -0.000270843505859375, -0.0002765655517578125, -5.7220458984375e-06, -0.0013380050659179688, 0.0, -0.006627082824707031, -3.4332275390625e-05, -3.814697265625e-06, -9.1552734375e-05, -0.01275634765625, -7.62939453125e-06, -0.000244140625, 0.0, -0.0031147003173828125, -1.9073486328125e-06, -3.814697265625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.2594090700149536, 0.0, -0.0010356903076171875, -5.7220458984375e-06, -0.0003147125244140625, -3.814697265625e-06, -0.026546478271484375, 0.0, -0.021049141883850098, 0.0, -2.288818359375e-05, -0.0021333694458007812, -1.9073486328125e-06, -0.0009558200836181641, -1.9073486328125e-06, -0.00052642822265625, -0.00022125244140625, -0.0019397735595703125, -7.62939453125e-06, -0.004887580871582031, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004405975341796875, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.2503044009208679, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032715797424316406, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.0003147125244140625, -0.0016231536865234375, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.0002841949462890625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.001325838384218514, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107826232910156, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_battlecry_target", "<EOS>", 238, 36, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", 41, 127, 0, 177, "x", "<EOS>", 22, 135, "True", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "targets", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(\n            player.game, lambda x: True)\n        minions = game.random_choice(targets)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.769721763064538, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -1.7940759658813477, -1.9073486328125e-06, -0.00128173828125, -0.0001811981201171875, -1.33514404296875e-05, -3.4332275390625e-05, -0.0521240234375, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.1637793779373169, -2.09808349609375e-05, -0.0003427267074584961, -1.9073486328125e-06, -0.03709304332733154, -1.9073486328125e-06, -0.0001983642578125, -0.000263214111328125, -5.7220458984375e-06, -5.7220458984375e-05, 0.0, -0.000316619873046875, 0.0, -0.002987384796142578, 0.0, -0.000347137451171875, -7.43865966796875e-05, -8.20159912109375e-05, -0.0005931854248046875, -0.01201927661895752, -1.3589840818895027e-05, -0.0010223388671875, -0.0002155303955078125, -5.352497100830078e-05, -2.3841855067985307e-07, -0.007587432861328125, -0.000186920166015625, -0.0002460479736328125, -4.57763671875e-05, -5.7220458984375e-06, -0.18994557857513428, 0.0, -0.01611328125, -7.05718994140625e-05, -8.0108642578125e-05, -0.0004901885986328125, -0.0003757476806640625, -1.33514404296875e-05, -0.00038874149322509766, 0.0, -0.00221097469329834, -1.1920928244535389e-07, -1.33514404296875e-05, -0.0002288818359375, -5.7220458984375e-06, -1.0249946117401123, -3.814697265625e-06, -0.0008544921875, -0.47356128692626953, -0.000812530517578125, -0.21435749530792236, -4.1723224057932384e-06, -2.288818359375e-05, -8.96453857421875e-05, -8.7738037109375e-05, -5.91278076171875e-05, -2.6941299438476562e-05, 0.0, -0.000133514404296875, -4.76837158203125e-05, -5.7220458984375e-06, -2.86102294921875e-05, -3.266334533691406e-05, -9.894371032714844e-06, -0.001708984375, -0.015542984008789062, -0.0008220672607421875, -0.0001049041748046875, -2.288818359375e-05, -0.000240325927734375, -7.62939453125e-06, -0.000141143798828125, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -1.2278556823730469e-05, -1.9073486328125e-06, -9.72747802734375e-05, 0.0, -0.0001087188720703125, 0.0, -1.2159347534179688e-05, 0.0, -0.0015583038330078125, -1.9073486328125e-05, -0.0012493133544921875, -3.0517578125e-05, -0.00016021728515625, 0.0, -0.0033665895462036133, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -9.5367431640625e-06, -8.7738037109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008656978607177734, -3.814697265625e-06, -0.0013348903739824891, 0.0, -0.0001163482666015625, -0.0027475357055664062, -0.0003261566162109375, -0.000423431396484375, 0.0, -0.1064256802201271, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_enemy_minion_battlecry_target"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, {"_type": "Lambda", "body": {"_type": "NameConstant", "value": true}, "args": {"_type": "Template21", "hole0": "x"}}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "minions"}]}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "targets", "<EOS>", 93, 196, 21, 134, "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(3), self)\n            game.other_player.hero.damage(player.effective_spell_damage(3),\n                self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.783932200815549, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -1.5496580600738525, -1.9073486328125e-06, -0.00014495849609375, -2.09808349609375e-05, -0.00022125244140625, -1.9073486328125e-06, -0.5949163436889648, -1.1920928244535389e-07, -0.14242374897003174, -1.9073486328125e-06, -9.5367431640625e-06, -0.0019283294677734375, -1.9073486328125e-05, -5.7220458984375e-06, 0.0, -2.6702880859375e-05, -9.5367431640625e-06, -0.00015068052744027227, 0.0, -0.15983371436595917, 0.0, -2.288818359375e-05, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -0.06842041015625, -0.00011444091796875, -0.000469207763671875, -0.000568389892578125, -0.3667869567871094, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003871917724609375, 0.0, -0.0019476329907774925, -3.814697265625e-06, -0.05597957968711853, -1.1920928244535389e-07, -0.06046426296234131, 0.0, -1.9073486328125e-06, -0.0002307891845703125, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.00020027157734148204, 0.0, -0.10743376612663269, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -1.71661376953125e-05, -0.000110626220703125, -4.38690185546875e-05, -0.0034139156341552734, 0.0, -4.38690185546875e-05, -4.1961669921875e-05, -0.0001220703125, -2.288818359375e-05, -9.655952453613281e-06, -7.62939453125e-06, -0.00014495849609375, -0.0004405975341796875, -1.9073486328125e-06, -1.71661376953125e-05, -3.3020973205566406e-05, -6.079673767089844e-06, -0.0003662109375, -0.00156402587890625, -0.00041961669921875, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001468658447265625, -1.1444091796875e-05, -0.000171661376953125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0001068115234375, 0.0, -1.0251998901367188e-05, 0.0, -0.0013275146484375, -2.47955322265625e-05, -0.0012493133544921875, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034409761428833008, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.392333984375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008656978607177734, -3.814697265625e-06, -0.001332269748672843, 0.0, -0.00011444091796875, -0.0028705596923828125, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11111672967672348, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "4", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 4):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -4.811170762150816, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -2.502511739730835, -1.9073486328125e-05, -0.6513280868530273, -0.0005245208740234375, -0.0001163482666015625, -0.0002727508544921875, -0.000385284423828125, -3.814697265625e-06, -0.0011606216430664062, 0.0, -0.007348060607910156, -3.814697265625e-05, -3.814697265625e-06, -8.20159912109375e-05, -0.009317398071289062, -7.62939453125e-06, -0.00026702880859375, 0.0, -0.003070831298828125, -1.9073486328125e-06, -3.814697265625e-06, -0.0001811981201171875, -1.9073486328125e-06, -0.31105828285217285, 0.0, -0.001415252685546875, -7.62939453125e-06, -0.000217437744140625, -3.814697265625e-06, -0.020420074462890625, 0.0, -0.02060854434967041, 0.0, -2.09808349609375e-05, -0.0021276473999023438, -1.9073486328125e-06, -0.0009424686431884766, -1.9073486328125e-06, -0.0005092620849609375, -0.000202178955078125, -0.0018596649169921875, -7.62939453125e-06, -0.006899833679199219, 0.0, -7.05718994140625e-05, 0.0, -9.5367431640625e-06, -0.0004405975341796875, -1.71661376953125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001435279700672254, 0.0, -0.24697096645832062, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.003239154815673828, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.0001811981201171875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013427734375, -2.47955322265625e-05, -0.0012569427490234375, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034600496292114258, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.001326433615759015, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11106374114751816, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 4}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -5.037319883915863, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -3.0691232681274414, -3.814697265625e-06, -0.0002689361572265625, 0.0, -0.10681915283203125, 0.0, -0.0002117156982421875, 0.0, -3.0517578125e-05, -1.9073486328125e-05, -5.030632019042969e-05, -5.924701690673828e-05, -0.23867511749267578, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.000385284423828125, -1.9073486328125e-05, -9.5367431640625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.1913071870803833, -3.814697265625e-06, -0.020966529846191406, -0.000240325927734375, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025043487548828125, -1.9073486328125e-06, -0.00026297569274902344, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008124848827719688, 0.0, -0.010125160217285156, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.01745891571044922, 0.0, -0.0030517578125, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045228004455566406, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.0006669688154943287, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44512975215911865, -3.814697265625e-06, -0.18080615997314453, -0.0006084442138671875, -0.0006771087646484375, -0.0001430511474609375, -0.001407623291015625, -3.814697265625e-06, -0.001522064208984375, 0.0, -0.005558967590332031, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008005142211914062, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032958984375, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24271798133850098, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.027253150939941406, 0.0, -0.02100813388824463, 0.0, -2.288818359375e-05, -0.0022897720336914062, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.0019130706787109375, -7.62939453125e-06, -0.005053520202636719, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24913544952869415, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107578873634338, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "MAGE", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "score": -5.041721743801411, "score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -3.204524040222168, 0.0, -0.0031871795654296875, 0.0, -0.013692855834960938, 0.0, -0.0002422332763671875, 0.0, -5.14984130859375e-05, -2.47955322265625e-05, -6.389617919921875e-05, -8.022785186767578e-05, -0.19740772247314453, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004291534423828125, -1.9073486328125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18483173847198486, -3.814697265625e-06, -0.020816802978515625, -0.0002422332763671875, -9.5367431640625e-06, -1.52587890625e-05, -0.0024394989013671875, -1.9073486328125e-06, -0.0002669095993041992, -1.9073486328125e-06, -0.0004673004150390625, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008135485462844372, 0.0, -0.010423660278320312, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017795562744140625, 0.0, -0.0030460357666015625, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045228004455566406, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.0006668496644124389, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.45101991295814514, -3.814697265625e-06, -0.1810474395751953, -0.000606536865234375, -0.0006732940673828125, -0.000141143798828125, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.0055484771728515625, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008014678955078125, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24306225776672363, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.02718830108642578, 0.0, -0.02100050449371338, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005054473876953125, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24912972748279572, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107578873634338, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Multi-Shot", "hole3": "FREE", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Multi-Shot", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minions"}, "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove"}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 4}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "score": -1.9825786955283604, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -0.20943331718444824, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00026702880859375, 0.0, -0.002597808837890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0001583099365234375, -4.1961669921875e-05, -5.7220458984375e-05, -7.271765298355604e-06, -0.000141143798828125, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011539459228515625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.019478440284729004, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0070514678955078125, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028394699096679688, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001220703125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1195831298828125, -2.2649765014648438e-06, -0.6047840118408203, -1.9073486328125e-06, -0.006687164306640625, -1.9073486328125e-06, -0.0005054473876953125, -7.62939453125e-06, -0.000579833984375, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.02087724208831787, 0.0, -0.05564200505614281, -7.748603820800781e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "score": -2.7075886839148993, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08556365966796875, -0.0001678466796875, -5.7220458984375e-06, -0.10610103607177734, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19674110412597656, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.0042514801025390625, 0.0, 0.0, 0.0, -0.12221705913543701, -2.622604142743512e-06, -0.46707671880722046, -7.62939453125e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.increase_health(4)\n", "score": -3.2148063227163277, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -0.20943331718444824, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00026702880859375, 0.0, -0.002597808837890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0001583099365234375, -4.1961669921875e-05, -5.7220458984375e-05, -7.271765298355604e-06, -0.000141143798828125, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011539459228515625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.019478440284729004, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0070514678955078125, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028394699096679688, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001220703125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1195831298828125, -2.2649765014648438e-06, -1.4674863815307617, -2.0265579223632812e-06, -0.1636180877685547, -7.62939453125e-06, -0.0036029815673828125, -3.814697265625e-06, -0.0001392364501953125, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.0003662109375, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.07463574409484863, 0.0, -0.2116071581840515, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(4)\n", "score": -3.6650234654174767, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -0.20943331718444824, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00026702880859375, 0.0, -0.002597808837890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0001583099365234375, -4.1961669921875e-05, -5.7220458984375e-05, -7.271765298355604e-06, -0.000141143798828125, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011539459228515625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.019478440284729004, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0070514678955078125, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028394699096679688, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001220703125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1195831298828125, -2.2649765014648438e-06, -2.02896785736084, 0.0, -0.04621315002441406, -1.9073486328125e-06, -0.0057239532470703125, -3.814697265625e-06, -7.82012939453125e-05, -1.71661376953125e-05, -5.7220458984375e-06, 0.0, -0.011432647705078125, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -0.0826113224029541, 0.0, -0.19664593040943146, -3.933906555175781e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "score": -3.6919280185919945, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -1.9209067821502686, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0003566741943359375, 0.0, -0.001979827880859375, -1.9073486328125e-06, -1.9073486328125e-06, -0.000156402587890625, -3.814697265625e-05, -6.103515625e-05, -7.6293927122605965e-06, -0.0001354217529296875, -6.29425048828125e-05, -9.5367431640625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011997222900390625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.01848912239074707, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.007069587707519531, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028253555297851562, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001239776611328125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1191244125366211, -2.2649765014648438e-06, -0.6047239899635315, -1.9073486328125e-06, -0.0066680908203125, -1.9073486328125e-06, -0.0005054473876953125, -7.62939453125e-06, -0.000579833984375, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.02087724208831787, 0.0, -0.05564449727535248, -7.748603820800781e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -3.8852412217376227, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08556365966796875, -0.0001678466796875, -5.7220458984375e-06, -0.10610103607177734, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19674110412597656, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.0042514801025390625, 0.0, 0.0, 0.0, -0.12221705913543701, -2.622604142743512e-06, -1.644736886024475, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n", "score": -4.086566266380402, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -0.20943331718444824, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00026702880859375, 0.0, -0.002597808837890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0001583099365234375, -4.1961669921875e-05, -5.7220458984375e-05, -7.271765298355604e-06, -0.000141143798828125, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011539459228515625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.019478440284729004, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0070514678955078125, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028394699096679688, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001220703125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1195831298828125, -2.2649765014648438e-06, -2.637417793273926, 0.0, -0.06283760070800781, -1.9073486328125e-06, -0.00225067138671875, -9.5367431640625e-06, -0.0002613067626953125, -7.62939453125e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -4.38690185546875e-05, 0.0, -0.029749274253845215, 0.0, -0.060670606791973114, -5.841255187988281e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.1864663016598485, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08556365966796875, -0.0001678466796875, -5.7220458984375e-06, -0.10610103607177734, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -1.7239770889282227, -6.4849853515625e-05, -0.0004901885986328125, -9.34600830078125e-05, -8.58306884765625e-05, 0.0, -0.0019168853759765625, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.17227959632873535, 0.0, -2.86102294921875e-05, -0.25948429107666016, -0.1051950454711914, -0.00539413234218955, -0.0007477824110537767], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "score": -4.258610319447278, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08556365966796875, -0.0001678466796875, -5.7220458984375e-06, -0.10610103607177734, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19674110412597656, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.0042514801025390625, 0.0, 0.0, 0.0, -0.12221705913543701, -2.622604142743512e-06, -2.018105983734131, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.increase_health(1)\n", "score": -4.834374968670453, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -0.20943331718444824, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.00026702880859375, 0.0, -0.002597808837890625, -1.9073486328125e-06, -3.814697265625e-06, -0.0001583099365234375, -4.1961669921875e-05, -5.7220458984375e-05, -7.271765298355604e-06, -0.000141143798828125, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011539459228515625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.019478440284729004, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.0070514678955078125, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028394699096679688, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001220703125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1195831298828125, -2.2649765014648438e-06, -1.4674863815307617, -2.0265579223632812e-06, -0.1636180877685547, -7.62939453125e-06, -0.0036029815673828125, -3.814697265625e-06, -0.0001392364501953125, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.0003662109375, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.07463574409484863, 0.0, -1.8311777114868164, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "1", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 1 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "score": -4.910190646178442, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -2.407731533050537, -3.218649908376392e-06, -0.013586997985839844, -9.918212890625e-05, -0.0038299560546875, -7.62939453125e-06, -0.017663590610027313, -2.0265579223632812e-06, -0.002366185188293457, -3.254413604736328e-05, -0.0037689208984375, -2.6702880859375e-05, -0.0005015134811401367, -0.00018310546875, -0.00247955322265625, -0.00301361083984375, -0.0021381378173828125, -1.9073486328125e-05, -8.404254913330078e-05, -1.1920928244535389e-07, -3.814697265625e-06, -3.24249267578125e-05, -3.814697265625e-06, -9.5367431640625e-06, -0.0004425048828125, -2.3841855067985307e-07, -0.10158061981201172, -0.000171661376953125, -5.7220458984375e-06, -0.12603092193603516, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.318092346191406e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.00018310546875, -0.21053123474121094, -1.52587890625e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002880096435546875, -0.0001163482666015625, -5.7220458984375e-06, 0.0, -0.0044651031494140625, 0.0, 0.0, 0.0, -0.11735522747039795, -2.622604142743512e-06, -0.5061646699905396, -7.62939453125e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 1}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Power", " ", "Word", " ", "Shield", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.increase_health(4)\n", "score": -4.923359860442275, "score_history": [-0.8272695541381836, -0.000171661376953125, -1.823891761887353e-05, -0.0036322609521448612, -0.01820189505815506, -0.0015804223949089646, -5.242240149527788e-06, -7.62939453125e-06, -3.576278118089249e-07, -1.52587890625e-05, -0.010936737060546875, -5.340576171875e-05, -3.814697265625e-05, 0.0, -9.536738616588991e-07, 0.0, -1.072883515007561e-05, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0004177093505859375, -3.552434282028116e-05, -0.00017118453979492188, -0.03952560946345329, -0.0005589723587036133, -7.009504770394415e-05, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.556506832566811e-06, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.883505319710821e-05, -1.9073486328125e-06, -1.9209067821502686, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0003566741943359375, 0.0, -0.001979827880859375, -1.9073486328125e-06, -1.9073486328125e-06, -0.000156402587890625, -3.814697265625e-05, -6.103515625e-05, -7.6293927122605965e-06, -0.0001354217529296875, -6.29425048828125e-05, -9.5367431640625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0011997222900390625, -3.814697265625e-06, -0.00010907649993896484, 0.0, -0.01848912239074707, 0.0, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.748603820800781e-06, -2.3841855067985307e-07, -0.007069587707519531, -5.7220458984375e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -2.0265579223632812e-06, -2.0265579223632812e-06, -3.24249267578125e-05, -1.33514404296875e-05, -8.344650268554688e-06, -0.0008983612060546875, -0.028253555297851562, -1.9073486328125e-06, -0.0002422332763671875, -4.38690185546875e-05, -0.000156402587890625, -0.0001239776611328125, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.1191244125366211, -2.2649765014648438e-06, -1.4678020477294922, -2.0265579223632812e-06, -0.162628173828125, -7.62939453125e-06, -0.0035877227783203125, -3.814697265625e-06, -0.0001392364501953125, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.000370025634765625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.07457375526428223, 0.0, -0.2114824503660202, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "PowerWordShield", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "score": -4.959323093789081, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -2.4801454544067383, 0.0, -0.0002146959159290418, -2.300739288330078e-05, -6.4849853515625e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.0005970001220703125, -5.7220458984375e-06, -0.00044274330139160156, 0.0, -0.0051577091217041016, 0.0, -0.03493734449148178, -7.62939453125e-06, -0.00096893310546875, -0.0001468658447265625, -0.0001010894775390625, -1.71661376953125e-05, -0.040686607360839844, -3.099440846199286e-06, -0.0014476776123046875, -0.0003604888916015625, -0.0009403228759765625, -0.000274658203125, -0.00673675537109375, -1.52587890625e-05, -0.0149688720703125, -9.5367431640625e-06, -7.05718994140625e-05, -2.47955322265625e-05, -0.026744838804006577, -1.1920928244535389e-07, -0.03949892520904541, -3.6954863844584906e-06, -0.0003490447998046875, -0.19422531127929688, -7.62939453125e-06, -0.000701904296875, -1.9073486328125e-06, -0.31772008538246155, -3.0517570849042386e-05, -0.00539398193359375, -7.82012939453125e-05, -0.001079559326171875, -5.7220458984375e-06, -0.004942416679114103, -2.0265579223632812e-06, -0.002308964729309082, -1.1563301086425781e-05, -0.002094268798828125, -2.47955322265625e-05, -0.0007576942443847656, -0.0001201629638671875, -0.0013523101806640625, -0.0029277801513671875, -0.002017974853515625, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08564376831054688, -0.0001678466796875, -5.7220458984375e-06, -0.10631179809570312, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19661903381347656, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.0042552947998046875, 0.0, 0.0, 0.0, -0.12224090099334717, -2.622604142743512e-06, -0.467049777507782, -7.62939453125e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "COMMON", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "score": -5.080931801449786, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -2.583932876586914, -1.71661376953125e-05, -1.9073486328125e-06, -0.001270294189453125, 0.0, -3.814697265625e-06, 0.0, -6.675719760096399e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -4.1484832763671875e-05, -0.00023651123046875, -0.0269775390625, -1.1444091796875e-05, -0.00022125244140625, -5.53131103515625e-05, -0.000232696533203125, -0.0001163482666015625, -3.814697265625e-06, -1.9073486328125e-06, -0.0008907318115234375, 0.0, 0.0, 0.0, -0.06685435771942139, -2.2649765014648438e-06, -0.5950222611427307, -5.7220458984375e-06, -0.009752273559570312, -5.7220458984375e-06, -0.0003795623779296875, -7.62939453125e-06, -0.0009307861328125, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.00042724609375, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.014363646507263184, 0.0, -0.0545734241604805, -1.728534698486328e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "increase_health"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "score": -5.13234829790499, "score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -2.639002799987793, 0.0, -0.0017257800791412592, -1.3470649719238281e-05, -0.00025177001953125, -1.71661376953125e-05, -5.7220458984375e-06, 0.0, -0.0039653778076171875, -3.814697265625e-06, -0.0002886056900024414, 0.0, -0.008234977722167969, 0.0, -0.03843780234456062, -9.5367431640625e-06, -0.0008869171142578125, -0.00014495849609375, -0.000102996826171875, -1.71661376953125e-05, -0.043498992919921875, -3.218649908376392e-06, -0.0015058517456054688, -0.0003566741943359375, -0.0008983612060546875, -0.000293731689453125, -0.007231712341308594, -1.52587890625e-05, -0.015857696533203125, -9.5367431640625e-06, -7.62939453125e-05, -2.6702880859375e-05, -0.02942657098174095, -2.0265579223632812e-06, -0.03922617435455322, -3.6954863844584906e-06, -0.000347137451171875, -0.19237518310546875, -7.62939453125e-06, -0.000713348388671875, -1.9073486328125e-06, -0.31564655900001526, -3.0398361559491605e-05, -0.0053501129150390625, -7.82012939453125e-05, -0.0010623931884765625, -5.7220458984375e-06, -0.0049831862561404705, -2.0265579223632812e-06, -0.0023108720779418945, -1.1563301086425781e-05, -0.002101898193359375, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.001346588134765625, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0005588531494140625, -2.3841855067985307e-07, -0.08561038970947266, -0.0001678466796875, -5.7220458984375e-06, -0.10635089874267578, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19671249389648438, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.004253387451171875, 0.0, 0.0, 0.0, -0.12221324443817139, -2.622604142743512e-06, -0.4670359194278717, -7.62939453125e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "EPIC", "hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "calculate_attack"}, "comparators": [{"_type": "Num", "n": 2}], "ops": [{"_type": "LtE"}]}, {"_type": "Template36", "hole0": {"_type": "Name", "id": "target"}, "hole1": "spell_targetable"}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 1, "hole0": "Power <UNK> Shield", "hole6": "find_minion_spell_target", "hole4": "target_func", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 4, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -0.17228576807845997, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -0.06535053253173828, 0.0, -0.004514813423156738, 0.0, -2.622604142743512e-06, 0.0, -0.0002679824538063258, 0.0, 0.0, -9.72747802734375e-05, -0.000518798828125, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021312326134648174, -2.3841855067985307e-07, -0.0014138221740722656, -3.814697265625e-06, -0.000362396240234375, -1.71661376953125e-05, -2.3365017113974318e-05, -4.220008850097656e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -2.569071519341101, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -2.5581398010253906, -6.866455078125e-05, 0.0, -3.457069396972656e-05, 0.0, 0.0, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.0061931610107421875, 0.0, -0.000621795654296875, 0.0, -0.00013470565318129957, 0.0, -7.62939453125e-06, -0.0007534027099609375, -0.000232696533203125, -1.1920928244535389e-07, -4.768370445162873e-07, -0.00011824870307464153, -3.576278118089249e-07, -0.0012099742889404297, -1.9073486328125e-06, -0.000579833984375, -1.9073486328125e-05, -8.70227231644094e-05, -6.341934204101562e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Sen'jin Shieldmasta", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -3.0830267360641628, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -2.979281425476074, 0.0, -0.0012398958206176758, 0.0, -2.1457672119140625e-06, 0.0, -0.00037193295429460704, 0.0, 0.0, -9.1552734375e-05, -0.0005283355712890625, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00022909372637514025, -2.3841855067985307e-07, -0.0013889074325561523, -3.814697265625e-06, -0.0003452301025390625, -1.71661376953125e-05, -2.3365017113974318e-05, -4.601478576660156e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -4.536544156471152, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -4.48503303527832, -0.011501312255859375, -8.344646857949556e-07, -3.4689903259277344e-05, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.0006923675537109375, 0.0, -0.00268399715423584, -1.1920928244535389e-07, -3.814697265625e-06, -1.52587890625e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.028898239135742188, -1.9073486328125e-06, -0.0032548904418945312, -1.9073486328125e-06, -0.00017583370208740234, 0.0, -0.0012744665145874023, 0.0, -0.0001354217529296875, -5.340576171875e-05, -0.0001468658447265625, -5.960462772236497e-07, -2.3841855067985307e-07, -0.00029666893533430994, -2.3841855067985307e-07, -0.000716090202331543, -1.9073486328125e-06, -0.000518798828125, -1.71661376953125e-05, -0.00010013564315158874, -0.00012814998626708984], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "FREE", "hole3": "minion_type", "hole1": 4, "hole0": "Sen'jin Shieldmasta", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -5.643922539506853, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -5.541045188903809, 0.0, -0.0005426406860351562, 0.0, -2.1457672119140625e-06, 0.0, -0.00024795529316179454, 0.0, 0.0, -9.5367431640625e-05, -0.0004024505615234375, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021669881243724376, -2.3841855067985307e-07, -0.0014785528182983398, -3.814697265625e-06, -0.00034332275390625, -1.71661376953125e-05, -2.3365017113974318e-05, -4.601478576660156e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "MAGE", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -5.681394559003671, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -0.06535053253173828, 0.0, -5.513236045837402, 0.0, -4.29153169534402e-06, 0.0, -5.114077794132754e-05, 0.0, -1.9073486328125e-06, -0.0002117156982421875, -0.000324249267578125, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00016366050112992525, -2.3841855067985307e-07, -0.0019959211349487305, -1.9073486328125e-06, -0.000492095947265625, -1.9073486328125e-05, -3.2305710192304105e-05, -5.1856040954589844e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "EPIC", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.taunt,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -6.276065797507123, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -6.173089981079102, 0.0, -0.0004570484161376953, 0.0, -2.9802317840221804e-06, 0.0, -0.0003919601149391383, 0.0, 0.0, -9.34600830078125e-05, -0.000499725341796875, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00022158534557092935, -2.3841855067985307e-07, -0.0014232397079467773, -3.814697265625e-06, -0.000335693359375, -1.71661376953125e-05, -2.3365017113974318e-05, -4.792213439941406e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "taunt", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Sen'jin", " ", "Shieldmasta", "<EOS>", 46, 139, "4", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, p):\n        return Minion(3, 5, taunt=True)\n", "score": -6.396871986037397, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -5.898960113525391, -0.2379436492919922, -0.0002536773681640625, -9.5367431640625e-06, -9.679379581939429e-05, -2.0265579223632812e-06, -0.00020635128021240234, -3.814697265625e-06, -0.045337677001953125, -9.5367431640625e-06, -9.34600830078125e-05, -1.1920928244535389e-07, -0.0021181204356253147, -3.933904736186378e-06, -5.125993993715383e-06, -3.62396240234375e-05, -3.814697265625e-06, -0.00016438961029052734, -4.1961669921875e-05, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, 0.0, -9.298310033045709e-06, -5.7220458984375e-06, -0.011887431144714355, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, -0.0005705356597900391, 0.0, -8.392333984375e-05, -1.52587890625e-05, -7.82012939453125e-05, 0.0, -1.8954275219584815e-05, 0.0, -0.19414734840393066, -1.9073486328125e-06, -2.288818359375e-05, -0.0004634857177734375, -4.57763671875e-05, -7.629377250850666e-06, -3.933906555175781e-06, -0.00033015699591487646, -7.152555099310121e-07, -0.0006299008382484317, -4.1961669921875e-05, -0.0006046295166015625, -1.71661376953125e-05, -0.0013101048534736037, -0.00041556358337402344], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Sen'jin Shieldmasta"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "p"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -6.8679581617241965, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -6.765074729919434, 0.0, -0.0005469322204589844, 0.0, -2.2649765014648438e-06, 0.0, -0.0002083778235828504, 0.0, 0.0, -8.96453857421875e-05, -0.000431060791015625, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021014381491113454, -2.3841855067985307e-07, -0.0015262365341186523, -1.9073486328125e-06, -0.0003185272216796875, -1.71661376953125e-05, -2.34842264035251e-05, -4.982948303222656e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -6.874283166346537, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -6.770810127258301, 0.0, -0.0011081695556640625, 0.0, -2.2649765014648438e-06, 0.0, -0.0002763271040748805, 0.0, 0.0, -9.34600830078125e-05, -0.0004100799560546875, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021824819850735366, -2.3841855067985307e-07, -0.0014766454696655273, -3.814697265625e-06, -0.000335693359375, -1.71661376953125e-05, -2.34842264035251e-05, -4.982948303222656e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "ROGUE", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "auras", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, auras=True)\n", "score": -7.423014852089715, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -0.06535053253173828, 0.0, -0.004514813423156738, 0.0, -2.622604142743512e-06, 0.0, -0.0002679824538063258, 0.0, 0.0, -9.72747802734375e-05, -0.000518798828125, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021312326134648174, -2.3841855067985307e-07, -7.08202600479126, -2.09808349609375e-05, -0.1704235076904297, -2.86102294921875e-05, -6.556510197697207e-05, -2.7179718017578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "auras", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "FREE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.FREE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.463138073703554, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -7.359086513519287, 0.0, -0.001891016960144043, 0.0, -4.0531158447265625e-06, 0.0, -0.0001863241195678711, 0.0, 0.0, -9.72747802734375e-05, -0.0004253387451171875, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00022575676848646253, -2.3841855067985307e-07, -0.0013222694396972656, -3.814697265625e-06, -0.000347137451171875, -1.71661376953125e-05, -2.562999361543916e-05, -4.792213439941406e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "FREE", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "Selector", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.Selector,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.494465920949345, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -7.374774932861328, 0.0, -0.017275691032409668, 0.0, -2.0265579223632812e-06, 0.0, -0.00034904477070085704, 0.0, 0.0, -0.0001087188720703125, -0.0003948211669921875, -2.0265579223632812e-06, -4.768370445162873e-07, -0.00020930949540343136, -2.3841855067985307e-07, -0.0014556646347045898, -3.814697265625e-06, -0.0003414154052734375, -1.71661376953125e-05, -2.551078432588838e-05, -4.982948303222656e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "Selector", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.784350128297625, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -7.681316375732422, 0.0, -0.0007916688919067383, 0.0, -2.384185791015625e-06, 0.0, -0.00029850006103515625, 0.0, 0.0, -0.000102996826171875, -0.0003643035888671875, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00022003601770848036, -2.3841855067985307e-07, -0.0013622045516967773, -1.9073486328125e-06, -0.000339508056640625, -1.71661376953125e-05, -2.53915750363376e-05, -4.982948303222656e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sen'jin Shieldmasta", "hole3": "FREE", "hole2": "PALADIN", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Sen'jin", " ", "Shieldmasta", "<EOS>", 46, 139, "4", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.804568741507062, "score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -5.898960113525391, -1.7455406188964844, -0.0001010894775390625, 0.0, -2.9802317840221804e-06, 0.0, -0.00043261051177978516, 0.0, -0.028713226318359375, -2.6702880859375e-05, -6.103515625e-05, -9.536738616588991e-07, -0.00016486452659592032, -6.0796710386057384e-06, -1.4305104514278355e-06, -1.1444091796875e-05, -7.62939453125e-06, -0.00014674663543701172, 0.0, -8.20159912109375e-05, 0.0, -5.7220458984375e-06, 0.0, -8.583057933719829e-06, 0.0, -0.0085526704788208, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0009309053421020508, 0.0, -0.000152587890625, -1.9073486328125e-05, -0.0001964569091796875, 0.0, -5.7220458984375e-06, -0.029157638549804688, -6.103515625e-05, -0.014429092407226562, -5.7220458984375e-06, -0.00027358264196664095, 0.0, -0.07248044013977051, 0.0, -9.5367431640625e-06, -5.91278076171875e-05, -0.00012969970703125, -3.576278118089249e-07, -5.245203283266164e-06, -8.296786836581305e-05, -1.0728830375228426e-06, -0.0006341865519061685, -2.47955322265625e-05, -0.0005407333374023438, -3.0517578125e-05, -0.0012106809299439192, -0.00045669078826904297], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Sen'jin Shieldmasta"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Sen'jinShieldmasta", "hole6": [{"_type": "Template22", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5}], "hole4": "player"}}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -0.7873005420239494, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -0.6510269641876221, 0.0, -0.0002422332763671875, 0.0, -0.00069427490234375, 0.0, -3.457069396972656e-05, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -3.933906555175781e-06, -1.5258699932019226e-05, -0.0001811981201171875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0049076080322265625, -4.76837158203125e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.05254936218261719, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.001232743263244629, 0.0, -0.002298073610290885, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -3.62396240234375e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.0008196823764592409, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -1.8869202875300104, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -1.7496140003204346, 0.0, -8.7738037109375e-05, 0.0, -0.0010700225830078125, 0.0, -5.936622619628906e-05, -1.9073486328125e-06, -0.000202178955078125, -3.814697265625e-06, -3.933906555175781e-06, -1.549711487314198e-05, -0.0001659393310546875, -1.71661376953125e-05, -3.814697265625e-06, -2.47955322265625e-05, -7.62939453125e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0046787261962890625, -4.57763671875e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.053558349609375, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00012969970703125, 0.0, -0.001217484474182129, 0.0, -0.0023022452369332314, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.00081801344640553, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -2.389024690513615, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -2.2515032291412354, 0.0, -8.20159912109375e-05, 0.0, -0.0012378692626953125, 0.0, -3.8504600524902344e-05, -1.9073486328125e-06, -0.000209808349609375, -3.814697265625e-06, -3.933906555175781e-06, -1.573553163325414e-05, -0.00018310546875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.004688262939453125, -4.38690185546875e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.053592681884765625, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.0012308359146118164, 0.0, -0.002295928541570902, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.0008178942371159792, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "PALADIN", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -2.8690504569682886, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -2.7327730655670166, -1.9073486328125e-05, -6.4849853515625e-05, 0.0, -0.0006275177001953125, 0.0, -4.017353057861328e-05, -1.9073486328125e-06, -0.00019073486328125, -3.814697265625e-06, -3.933906555175781e-06, -1.26361273942166e-05, -0.000171661376953125, -1.71661376953125e-05, -3.814697265625e-06, -2.6702880859375e-05, -7.62939453125e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.005023956298828125, -5.14984130859375e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.05262947082519531, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00012969970703125, 0.0, -0.0012232065200805664, 0.0, -0.0023140464909374714, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -3.62396240234375e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.0008217089343816042, -1.1920928244535389e-07, -0.00012969970703125, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "MAGE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -3.251765087765925, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -3.11519455909729, -1.9073486328125e-06, -0.00020802021026611328, 0.0, -0.0005626678466796875, 0.0, -4.601478576660156e-05, -1.9073486328125e-06, -0.0001392364501953125, -1.9073486328125e-06, -3.814697265625e-06, -1.3112959095451515e-05, -0.000179290771484375, -1.71661376953125e-05, -3.814697265625e-06, -2.47955322265625e-05, -7.62939453125e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.5735626220703125e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0046844482421875, -4.57763671875e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.05325889587402344, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.001228928565979004, 0.0, -0.0022973588202148676, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.00081801344640553, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "PRIEST", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -3.8725465093954696, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -3.7359812259674072, -1.9073486328125e-06, -0.0002231597900390625, 0.0, -0.000560760498046875, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.000194549560546875, -3.814697265625e-06, -3.933906555175781e-06, -1.573553163325414e-05, -0.000171661376953125, -1.71661376953125e-05, -3.814697265625e-06, -2.47955322265625e-05, -5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.3709068298339844e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0047130584716796875, -4.1961669921875e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.053170204162597656, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.001232743263244629, 0.0, -0.0022964051458984613, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.00081801344640553, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "WARLOCK", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -3.8840540212237826, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -3.74794602394104, 0.0, -0.0001354217529296875, 0.0, -0.0007171630859375, 0.0, -4.029273986816406e-05, -1.9073486328125e-06, -0.0001354217529296875, -3.814697265625e-06, -3.933906555175781e-06, -1.633156898606103e-05, -0.00017547607421875, -1.71661376953125e-05, -3.814697265625e-06, -2.47955322265625e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -7.867813110351562e-06, 0.0, -0.004665374755859375, -4.38690185546875e-05, -5.7220458984375e-05, -3.814697265625e-06, -0.05276012420654297, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.0012270212173461914, 0.0, -0.002286749891936779, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.0008178942371159792, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "HUNTER", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "score": -4.0072102532337155, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -0.6510269641876221, 0.0, -0.0002422332763671875, 0.0, -0.00069427490234375, 0.0, -3.457069396972656e-05, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -3.933906555175781e-06, -1.5258699932019226e-05, -0.0001811981201171875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0049076080322265625, -4.76837158203125e-05, -5.91278076171875e-05, -3.814697265625e-06, -2.9813880920410156, -3.814697265625e-06, -0.2939748764038086, 0.0, -1.71661376953125e-05, 0.0, -0.0004863739013671875, 0.0, -3.814697265625e-06, -0.000270843505859375, -2.47955322265625e-05, -0.000244140625, 0.0, -1.1444091796875e-05, 0.0, -8.213518594857305e-05, 0.0, -0.0007042879587970674, -1.1920928244535389e-07, -0.0002307891845703125, -1.9073486328125e-06, -6.29425048828125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Sinister", " ", "Strike", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -4.096855816475589, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.674165725708008, -8.0108642578125e-05, -7.62939453125e-06, 0.0, -1.537799835205078e-05, 0.0, -7.867813110351562e-06, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -7.510157047363464e-06, -6.544589268742129e-05, -3.576278118089249e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.931180668179877e-05, 0.0, -8.0108642578125e-05, -6.67572021484375e-05, -1.52587890625e-05, -1.71661376953125e-05, -3.8743008190067485e-05, 0.0, -0.6152815818786621, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -4.57763671875e-05, 0.0, -0.0201416015625, 0.0, -7.62939453125e-06, -0.00023651123046875, -0.0006160736083984375, -8.96453857421875e-05, -2.0265579223632812e-06, -8.7738037109375e-05, -8.7738037109375e-05, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.1682510375976562e-05, 0.0, -0.5739679336547852, 0.0, -3.62396240234375e-05, 0.0, -1.71661376953125e-05, 0.0, -4.00543212890625e-05, 0.0, -3.814697265625e-06, -2.3841855067985307e-07, -0.10184669494628906, -7.82012939453125e-05, -1.9073486328125e-06, -0.000255584716796875, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.800060272216797e-05, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, 0.0, -0.000335693359375, -5.91278076171875e-05, -6.103515625e-05, -7.62939453125e-06, -0.10396575927734375, -6.103515625e-05, -7.62939453125e-06, 0.0, -0.000247955322265625, 0.0, -0.0008951425552368164, 0.0, -0.0020871746819466352, 0.0, -7.2479248046875e-05, 0.0, -1.9073486328125e-06, -7.82012939453125e-05, -3.4332275390625e-05, -1.71661376953125e-05, 0.0, -1.1444091796875e-05, 0.0, -9.33408664423041e-05, 0.0, -0.0007987015997059643, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.1961669921875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_enemy_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "FREE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.FREE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -4.3196723021453, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -4.1819281578063965, 0.0, -0.0010266304016113281, 0.0, -0.0006219148635864258, 0.0, -3.647804260253906e-05, -1.9073486328125e-06, -0.0001277923583984375, -1.9073486328125e-06, -3.933906555175781e-06, -1.4662661669717636e-05, -0.00018310546875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5735626220703125e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.00457763671875, -4.38690185546875e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.05369091033935547, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.001228928565979004, 0.0, -0.00229104096069932, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -3.814697265625e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.00081801344640553, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "FREE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Sinister", " ", "Strike", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -4.703662928936545, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.674165725708008, -8.0108642578125e-05, -7.62939453125e-06, 0.0, -1.537799835205078e-05, 0.0, -7.867813110351562e-06, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -7.510157047363464e-06, -6.544589268742129e-05, -3.576278118089249e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.931180668179877e-05, 0.0, -8.0108642578125e-05, -6.67572021484375e-05, -1.52587890625e-05, -1.71661376953125e-05, -3.8743008190067485e-05, 0.0, -1.2077336311340332, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-05, 0.0, -0.0211181640625, 0.0, -7.62939453125e-06, -0.0002574920654296875, -0.0005550384521484375, -9.5367431640625e-05, -2.0265579223632812e-06, -8.7738037109375e-05, -9.918212890625e-05, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.1682510375976562e-05, 0.0, -0.5856361389160156, 0.0, -3.62396240234375e-05, 0.0, -1.52587890625e-05, 0.0, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -2.3841855067985307e-07, -0.10315227508544922, -7.82012939453125e-05, -1.9073486328125e-06, -0.0002727508544921875, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.800060272216797e-05, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -4.291534423828125e-06, 0.0, -0.000339508056640625, -6.103515625e-05, -6.29425048828125e-05, -7.62939453125e-06, -0.10434341430664062, -6.103515625e-05, -7.62939453125e-06, 0.0, -0.000247955322265625, 0.0, -0.0009046792984008789, 0.0, -0.0021029100753366947, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -7.82012939453125e-05, -3.4332275390625e-05, -1.71661376953125e-05, 0.0, -1.1444091796875e-05, 0.0, -9.33408664423041e-05, 0.0, -0.0007985823904164135, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.1961669921875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_enemy_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "score": -5.099647282114965, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -1.7496140003204346, 0.0, -8.7738037109375e-05, 0.0, -0.0010700225830078125, 0.0, -5.936622619628906e-05, -1.9073486328125e-06, -0.000202178955078125, -3.814697265625e-06, -3.933906555175781e-06, -1.549711487314198e-05, -0.0001659393310546875, -1.71661376953125e-05, -3.814697265625e-06, -2.47955322265625e-05, -7.62939453125e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0046787261962890625, -4.57763671875e-05, -5.91278076171875e-05, -3.814697265625e-06, -2.9626827239990234, -3.814697265625e-06, -0.30649375915527344, 0.0, -1.71661376953125e-05, 0.0, -0.00048065185546875, 0.0, -3.814697265625e-06, -0.000270843505859375, -2.47955322265625e-05, -0.0002460479736328125, 0.0, -1.1444091796875e-05, 0.0, -8.213518594857305e-05, 0.0, -0.0007042879587970674, -1.1920928244535389e-07, -0.0002307891845703125, -1.9073486328125e-06, -6.29425048828125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage(player.effective_spell_damage(3), self)\n", "score": -5.1358066780500735, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -0.6510269641876221, 0.0, -0.0002422332763671875, 0.0, -0.00069427490234375, 0.0, -3.457069396972656e-05, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -3.933906555175781e-06, -1.5258699932019226e-05, -0.0001811981201171875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0049076080322265625, -4.76837158203125e-05, -5.91278076171875e-05, -3.814697265625e-06, -2.9813880920410156, -3.814697265625e-06, -1.3915939331054688, 0.0, -0.014658093452453613, 0.0, -0.016725540161132812, 0.0, -1.9073486328125e-06, -0.000331878662109375, -6.29425048828125e-05, -0.0002079010009765625, 0.0, -1.9073486328125e-05, 0.0, -8.2373597251717e-05, 0.0, -0.000738500792067498, 0.0, -0.0002307891845703125, -1.9073486328125e-06, -5.7220458984375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Sinister Strike", "hole3": "FREE", "hole2": "ROGUE", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Sinister", " ", "Strike", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -5.62592490970578, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.674165725708008, -8.0108642578125e-05, -7.62939453125e-06, 0.0, -1.537799835205078e-05, 0.0, -7.867813110351562e-06, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -7.510157047363464e-06, -6.544589268742129e-05, -3.576278118089249e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.931180668179877e-05, 0.0, -8.0108642578125e-05, -6.67572021484375e-05, -1.52587890625e-05, -1.71661376953125e-05, -3.8743008190067485e-05, 0.0, -0.6152815818786621, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -4.57763671875e-05, 0.0, -0.0201416015625, 0.0, -7.62939453125e-06, -0.00023651123046875, -0.0006160736083984375, -8.96453857421875e-05, -2.0265579223632812e-06, -8.7738037109375e-05, -8.7738037109375e-05, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.1682510375976562e-05, 0.0, -2.128786087036133, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.33514404296875e-05, 0.0, -2.288818359375e-05, 0.0, -3.814697265625e-06, -2.3841855067985307e-07, -0.11619186401367188, -7.62939453125e-05, -1.9073486328125e-06, -0.000244140625, -5.7220458984375e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.633167266845703e-05, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -6.675719760096399e-06, 0.0, -0.000461578369140625, -4.1961669921875e-05, -4.9591064453125e-05, -7.62939453125e-06, -0.06334781646728516, -7.2479248046875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0005054473876953125, 0.0, -0.0013110637664794922, 0.0, -0.0018461606232449412, 0.0, -7.2479248046875e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -3.62396240234375e-05, -1.71661376953125e-05, 0.0, -1.1444091796875e-05, 0.0, -9.155272709904239e-05, 0.0, -0.0007995361229404807, -1.1920928244535389e-07, -0.00012969970703125, -1.9073486328125e-06, -4.1961669921875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_spell_target"}}], "hole2": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Sinister", " ", "Strike", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -5.810841186067293, "score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.674165725708008, -8.0108642578125e-05, -7.62939453125e-06, 0.0, -1.537799835205078e-05, 0.0, -7.867813110351562e-06, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -7.510157047363464e-06, -6.544589268742129e-05, -3.576278118089249e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.931180668179877e-05, 0.0, -8.0108642578125e-05, -6.67572021484375e-05, -1.52587890625e-05, -1.71661376953125e-05, -3.8743008190067485e-05, 0.0, -0.6152815818786621, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -4.57763671875e-05, 0.0, -0.0201416015625, 0.0, -7.62939453125e-06, -0.00023651123046875, -0.0006160736083984375, -8.96453857421875e-05, -2.0265579223632812e-06, -8.7738037109375e-05, -8.7738037109375e-05, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.1682510375976562e-05, 0.0, -1.7363882064819336, 0.0, -0.0001220703125, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.5506839752197266, -4.76837158203125e-05, -1.9073486328125e-06, -0.00012969970703125, -3.24249267578125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.788135887181852e-05, 0.0, -2.0265579223632812e-06, 0.0, -7.62939453125e-06, 0.0, -5.841253368998878e-06, 0.0, -8.392333984375e-05, -3.24249267578125e-05, -8.20159912109375e-05, -1.9073486328125e-06, -0.18496417999267578, -5.14984130859375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00038909912109375, 0.0, -0.001309514045715332, 0.0, -0.0020436886698007584, 0.0, -7.62939453125e-05, 0.0, -3.814697265625e-06, -7.43865966796875e-05, -4.38690185546875e-05, -2.09808349609375e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00010347365605412051, 0.0, -0.0007331364322453737, -1.1920928244535389e-07, -0.0001125335693359375, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -0.000644683837890625, -8.0108642578125e-05, -4.00543212890625e-05, -9.34600830078125e-05, -0.0023651123046875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.009263992309570312, 0.0, -0.0008760690689086914, 0.0, -0.004943990148603916, 0.0, -0.0020503997802734375, 0.0, -3.814697265625e-06, -9.34600830078125e-05, -0.000102996826171875, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, 0.0, -0.00016736981342546642, 0.0, -0.0007480354397557676, 0.0, -7.62939453125e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "SinisterStrike", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 3, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Battlecry(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -1.6975820095102776, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8378583192825317, -0.2115747183561325, -0.0002549832279328257, -3.576278118089249e-07, -0.006363868713378906, -0.0005893707275390625, -1.1563277439563535e-05, -2.4557026335969567e-05, -0.0001667598116910085, -2.3841855067985307e-07, -0.007321596145629883, -1.1444091796875e-05, -0.004982948303222656, -0.00760650634765625, -0.0027618408203125, -8.58306884765625e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            BattlecryPlayer(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -2.7267689133613686, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8938056230545044, -0.6706362366676331, -0.5191763043403625, -0.00019108827109448612, -2.3841855067985307e-07, -0.006112098693847656, -0.0004711151123046875, -2.1696043404517695e-05, -1.1324866136419587e-05, -0.000247209332883358, -1.1920928244535389e-07, -0.004575967788696289, -3.0517578125e-05, -0.0026750564575195312, -0.008165359497070312, -0.002593994140625, -1.060962586052483e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayer", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            BattlecryPlayerPlayerSelector(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.0463070723294123, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8938056230545044, -1.454046368598938, -0.01718169078230858, -1.6689286894688848e-06, -0.04022038355469704, -0.00015294362674467266, -1.1920928244535389e-07, -0.005859375, -0.000484466552734375, -3.4332180803176016e-05, -6.914134246471804e-06, -0.00031561608193442225, -2.3841855067985307e-07, -0.003879070281982422, -4.57763671875e-05, -0.0014820098876953125, -0.007944107055664062, -0.0027894973754882812, -1.251697449333733e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayerPlayerSelector", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Battlecry<UNK>(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.058028493531296, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -2.3597795963287354, -0.013399801217019558, -0.041564587503671646, -8.70227722771233e-06, 0.0, -0.008378982543945312, -0.0005016326904296875, -2.8133335945312865e-05, -1.2278553185751662e-05, -0.0002381515660090372, -1.1920928244535389e-07, -0.004037380218505859, -2.09808349609375e-05, -0.0023698806762695312, -0.0063323974609375, -0.0032978057861328125, -1.3709065569855738e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry<UNK>", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            BattlecryPlayerSelector(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.2237051325975727, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8938056230545044, -1.5659009218215942, -1.1920922133867862e-06, -0.12266591191291809, -0.000158784503582865, -1.1920928244535389e-07, -0.0056171417236328125, -0.000469207763671875, -2.3245709598995745e-05, -6.914134246471804e-06, -0.0002998853160534054, -2.3841855067985307e-07, -0.004503607749938965, -2.288818359375e-05, -0.0021963119506835938, -0.0070171356201171875, -0.0029611587524414062, -1.049041748046875e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayerSelector", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Battlecry(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.511022503183902, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -2.034144163131714, -7.62939453125e-06, -0.07923972606658936, 0.0, -0.0028853416442871094, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000274658203125, -1.9073486328125e-06, -0.0965280532836914, -7.748603820800781e-06, -0.0004897117614746094, 0.0, -0.16213226318359375, -0.07734203338623047, -0.06564964354038239, -0.7284701466560364, -0.2268083393573761, -0.00024723424576222897, -3.576278118089249e-07, -0.006232261657714844, -0.0005474090576171875, -1.1563279258552939e-05, -2.574910467956215e-05, -0.0001678325206739828, -2.3841855067985307e-07, -0.007422685623168945, -1.1444091796875e-05, -0.0047779083251953125, -0.00759124755859375, -0.0027914047241210938, -8.58306884765625e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARLOCK", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(\n            Battlecry(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.727080174829055, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -2.582455635070801, 0.0, -0.0031665549613535404, 0.0, -0.042694091796875, -0.11847782135009766, -0.15852896869182587, -0.42797085642814636, -0.16487382352352142, -0.00015914322284515947, -2.3841855067985307e-07, -0.006450653076171875, -0.0006656646728515625, -1.3232178389444016e-05, -2.9325432478799485e-05, -0.00019369622168596834, -1.1920928244535389e-07, -0.007901310920715332, -9.5367431640625e-06, -0.0057125091552734375, -0.0059757232666015625, -0.0029439926147460938, -8.58306884765625e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "<UNK>", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "<EOS>", "Battlecry", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            BattlecryPlayer(), BattlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.7976601217360084, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8938056230545044, -0.6706362366676331, -1.5203900337219238, -0.06443417072296143, 0.0, -0.009119033813476562, -0.00118255615234375, -1.5020268619991839e-05, -5.2690465963678434e-05, -0.0002352911396883428, -2.3841855067985307e-07, -0.008190274238586426, -5.7220458984375e-06, -0.00438690185546875, -0.0042400360107421875, -0.0029134750366210938, -8.463859558105469e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayer", "hole2": "BattlecrySelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<EOS>", "Battlecry", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Battlecry(), BattlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -4.108348374111259, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8378583192825317, -1.988195538520813, -0.6218087673187256, -1.1920928244535389e-07, -0.0139617919921875, -0.001567840576171875, -2.622568717924878e-05, -6.783002754673362e-05, -0.00042834601481445134, -2.3841855067985307e-07, -0.012883186340332031, -3.814697265625e-06, -0.0065364837646484375, -0.003490447998046875, -0.0034666061401367188, -8.463859558105469e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry", "hole2": "BattlecrySelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 162, "Battlecry", "<EOS>", 237, 63, 205, "Battle", "Axe", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Battlecry(BattleAxe()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.312442424277258, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -3.269563674926758, -0.09990010410547256, -0.003123501082882285, -9.5367431640625e-05, -0.11408233642578125, -4.9591064453125e-05, -0.18893952667713165, -0.14272013306617737, -1.9073486328125e-06, -0.0003527109802234918, -4.0531158447265625e-06, 0.0, -0.024812698364257812, -5.14984130859375e-05, -5.841253368998878e-06, 0.0, -9.536738616588991e-07, -4.768370445162873e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "Battlecry", "hole2": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BattleAxe"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 4, "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(BattlecryPlayer(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -4.769219943399506, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -2.034144163131714, -7.62939453125e-06, -0.07923972606658936, 0.0, -0.0028853416442871094, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000274658203125, -1.9073486328125e-06, -0.0965280532836914, -7.748603820800781e-06, -0.0004897117614746094, 0.0, -0.16213226318359375, -0.07734203338623047, -0.06564964354038239, -0.9712823033332825, -0.6886550784111023, -0.5584962368011475, -0.00018477057165000588, -2.3841855067985307e-07, -0.006014823913574219, -0.0004482269287109375, -2.1696047042496502e-05, -9.894352842820808e-06, -0.0002545984461903572, -1.1920928244535389e-07, -0.004582762718200684, -3.4332275390625e-05, -0.002559661865234375, -0.0081329345703125, -0.0026235580444335938, -1.060962586052483e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARLOCK", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayer", "hole2": "PlayerSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "Player", "<EOS>", ":", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            BattlecryPlayer(), :()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -5.071531806169041, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8938056230545044, -0.6706362366676331, -1.7358040809631348, -0.018038993701338768, -1.052657127380371, -0.0038785934448242188, -0.0006226299447007477, -7.152555099310121e-07, -0.005309214815497398, -3.576278118089249e-07, -0.03117668628692627, -1.0013580322265625e-05, -0.0054492950439453125, -0.024682044982910156, -0.01140129566192627, -1.4543494216923136e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Template18", "hole0": "BattlecryPlayer", "hole2": ":"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 34, 220, 238, 49, 161, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 237, 63, 205, "Adjacent", "<EOS>", 49, 161, "Battlecry", "<EOS>", "Minion", "Selector", "<EOS>", 237, 63, 205, "Enemy", "Player", "<EOS>", 97, 219, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(Kill\n            (), MinionSelector(Adjacent())), Battlecry(Battlecry(),\n            MinionSelector(EnemyPlayer()))))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -6.122795884380643, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -1.9228591918945312, -0.0025415420532226562, -0.3137178421020508, -0.0013580322265625, -1.282038688659668, -0.3308793604373932, -5.9604562920867465e-06, -0.0007627552840858698, -0.000179290771484375, -2.3841855067985307e-07, -0.0018310546875, -9.72747802734375e-05, -1.9073486328125e-06, -0.308390736579895, -0.030599573627114296, -0.4056510925292969, -0.1240987777709961, -0.11920972913503647, -0.0016450773691758513, -0.32752957940101624, -0.0001678466796875, -2.3841855067985307e-07, -0.000782012939453125, -0.007678985595703125, -1.9073486328125e-06, -0.6220495104789734, -0.00784384086728096, 0.0, -0.004008293151855469, -2.86102294921875e-05, -1.442432312614983e-05, 0.0, -7.152555099310121e-07, -4.768370445162873e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Tuple", "elts": [{"_type": "Template18", "hole0": "Kill", "hole3": [{"_type": "Template39", "hole0": "Adjacent"}], "hole2": "MinionSelector"}, {"_type": "Template18", "hole0": "Battlecry", "hole3": [{"_type": "Template39", "hole0": "EnemyPlayer"}], "hole2": "MinionSelector"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 4, "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 34, 220, 239, 49, 162, "Replace", "Hero", "With", "Minion", "<EOS>", 237, 63, 205, "Succubus", "<EOS>", "Hero", "Selector", "<EOS>", 49, 159, "Remove", "<EOS>", "Self", "Selector", "<EOS>", 49, 162, "Equip", "<EOS>", 237, 63, 205, "Blood", "Fury", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(\n            ReplaceHeroWithMinion(Succubus()), HeroSelector()), Battlecry(\n            Remove(), SelfSelector()), Battlecry(Equip(BloodFury()),\n            PlayerSelector())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -6.72578306517137, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -1.9228591918945312, -0.0025415420532226562, -1.3710136413574219, -0.0024623870849609375, -0.0561676025390625, -0.21310710906982422, -0.14763058722019196, -0.01800820790231228, -0.0720822736620903, -0.0102691650390625, -0.0006866455078125, -0.000396728515625, -3.24249267578125e-05, -0.10413940250873566, -1.3384908437728882, -0.20050105452537537, -0.021323082968592644, 0.0, -0.0029268264770507812, -0.1594839096069336, -0.20905348658561707, -0.04969949275255203, -0.16705918312072754, -2.3841855067985307e-07, -1.9073486328125e-06, -0.002056121826171875, -0.16547203063964844, -0.06379543989896774, -6.556510470545618e-06, 0.0, -0.0001220703125, 0.0, -0.06649631261825562, -0.04659687355160713, -8.106222594506107e-06, -0.0002570152282714844, -3.814697265625e-06, 0.0, -0.004168510437011719, -2.86102294921875e-05, -1.2278534995857626e-05, 0.0, -9.536737479720614e-07, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Tuple", "elts": [{"_type": "Template18", "hole0": "ReplaceHeroWithMinion", "hole2": "HeroSelector", "hole1": [{"_type": "Template39", "hole0": "Succubus"}]}, {"_type": "Template18", "hole0": "Remove", "hole2": "SelfSelector"}, {"_type": "Template18", "hole0": "Equip", "hole2": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BloodFury"}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 4, "hole1": 3}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 34, 220, 238, 49, 162, "Replace", "Hero", "With", "Minion", "<EOS>", 237, 63, 205, "Succubus", "<EOS>", "Player", "Selector", "<EOS>", 49, 161, "Battlecry", "<EOS>", "Minion", "Selector", "<EOS>", 237, 63, 205, "Enemy", "Player", "<EOS>", 97, 219, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(\n            ReplaceHeroWithMinion(Succubus()), PlayerSelector()), Battlecry\n            (Battlecry(), MinionSelector(EnemyPlayer()))))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -7.056271976567125, "score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -1.9228591918945312, -0.0025415420532226562, -0.3137178421020508, -0.0013580322265625, -0.5218305587768555, -0.4155562222003937, -0.7212566137313843, -0.024414777755737305, -0.12076103687286377, -0.0035228729248046875, -0.000331878662109375, -0.010027885437011719, -3.814697265625e-06, -0.39767321944236755, -1.06209397315979, -0.15779101848602295, -1.33514404296875e-05, 0.0, -0.004894256591796875, -0.09515857696533203, -0.09439346939325333, -0.003956079017370939, -0.23065710067749023, -0.0001468658447265625, -7.152555099310121e-07, -0.000789642333984375, -0.0005626678466796875, 0.0, -0.6351505517959595, -0.006078719161450863, 0.0, -0.0018663406372070312, -2.86102294921875e-05, -1.2278556823730469e-05, 0.0, -4.768370445162873e-07, -4.768370445162873e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole8": {"_type": "Tuple", "elts": [{"_type": "Template18", "hole0": "ReplaceHeroWithMinion", "hole2": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Succubus"}]}, {"_type": "Template18", "hole0": "Battlecry", "hole3": [{"_type": "Template39", "hole0": "EnemyPlayer"}], "hole2": "MinionSelector"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Succubus", "hole6": "DEMON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 4, "hole1": 3}]}]}}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -0.9301869199371708, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -0.6009464263916016, -1.71661376953125e-05, -7.867813110351562e-06, -1.9073486328125e-06, -0.0013256072998046875, 0.0, -0.000476837158203125, -0.00098419189453125, -1.9073486328125e-05, -8.344642310476047e-07, -2.3841855067985307e-07, -1.1345706298016012e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -1.2952751403031186, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -0.9632320404052734, -1.33514404296875e-05, -1.537799835205078e-05, 0.0, -0.004952907562255859, 0.0, -8.20159912109375e-05, -0.0005512237548828125, -1.52587890625e-05, -2.2649762740911683e-06, -5.960462772236497e-07, -1.456031168345362e-05, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -1.5642677209386022, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -1.4963884353637695, -5.7220458984375e-05, -3.62396240234375e-05, -1.9073468138230965e-06, -0.00028657272923737764, -2.4914430468925275e-05, -2.0265579223632812e-06, -4.57763671875e-05, -1.9073486328125e-06, -2.086191307171248e-05, -7.867813110351562e-06, -2.09808349609375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001112222671508789, 0.0, -0.0002456844667904079, 0.0, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, 0.0, -7.331371307373047e-05, 0.0, -0.0020961761474609375, -1.9073486328125e-06, -3.814697265625e-06, -2.384185791015625e-06, -7.867813110351562e-06, 0.0, -3.4928321838378906e-05, 0.0, -2.09808349609375e-05, -0.000370025634765625, -1.33514404296875e-05, -1.1920852557523176e-05, 0.0, -3.292782639618963e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.3175107964107156, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.303652763366699, -0.001132965087890625, -1.1920928244535389e-07, -3.254413604736328e-05, -1.1920928244535389e-07, -1.1920928244535389e-07, -8.464627171633765e-06, -2.4437606043647975e-05, -0.00012111535761505365, 0.0, -3.290176027803682e-05, 0.0, -9.584086365066469e-05, 0.0, -5.7220458984375e-06, -0.0033130645751953125, -9.5367431640625e-06, -5.960460498499742e-07, -1.1920928244535389e-07, -7.63238494982943e-06, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "War Golem", "hole2": "ALL", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DRUID)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.9668568845922607, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -3.634148597717285, -5.7220458984375e-06, -5.9604644775390625e-06, 0.0, -0.005673766136169434, 0.0, -0.0001735687255859375, -0.0004215240478515625, -1.33514404296875e-05, -2.6226039153698366e-06, -3.576278118089249e-07, -1.6109173884615302e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRUID"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.197930655532467, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -4.935654640197754, -1.1444091796875e-05, 0.0, -1.0728830375228426e-06, 0.0, -6.866455078125e-05, 0.0, -0.021230697631835938, -8.7738037109375e-05, -1.52587890625e-05, -1.6689160474925302e-05, -0.00023984344443306327, -1.8119681044481695e-05, -2.0265579223632812e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.792244726559147e-05, -4.0531158447265625e-06, -3.0517578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00010371208190917969, 0.0, -0.00017952497000806034, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -1.52587890625e-05, 0.0, -6.949901580810547e-05, 0.0, -0.001708984375, -1.9073486328125e-06, -3.814697265625e-06, -2.1457672119140625e-06, -1.1444091796875e-05, -0.000438690185546875, -0.00041961669921875, -0.18077945709228516, 0.0, -2.741813204920618e-06, 0.0, -1.013275596051244e-05, 0.0, -7.62939453125e-06, -0.000514984130859375, -1.33514404296875e-05, -3.3378571515640942e-06, 0.0, -1.7660378944128752e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DRAGON"}], "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.260188158961284, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -4.930810928344727, 0.0, -4.172325134277344e-06, 0.0, -0.0017652511596679688, 0.0, -0.000217437744140625, -0.0009593963623046875, -1.52587890625e-05, -5.245192824077094e-06, 0.0, -1.528364373371005e-05, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "False"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.408667999096323, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.084787368774414, -0.0002841949462890625, -3.576278118089249e-07, -5.9843052440555766e-05, -1.1920928244535389e-07, 0.0, -7.868035027058795e-06, -2.1695930627174675e-05, -6.401538848876953e-05, 0.0, -0.013916730880737305, 0.0, -9.775159924174659e-06, -3.814697265625e-06, -1.537793104944285e-05, 0.0, -1.9073486328125e-06, -0.3004035949707031, -9.5367431640625e-06, -2.384184938364342e-07, -1.1920928244535389e-07, -8.825008990243077e-06, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "War Golem", "hole3": "COMMON", "hole2": "ALL", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.462602309075066, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -5.13271427154541, 0.0, -1.1801719665527344e-05, 0.0, -0.002624034881591797, 0.0, -0.00017547607421875, -0.00064849853515625, -1.52587890625e-05, -2.6225998226436786e-06, 0.0, -1.515953044872731e-05, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "range", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.range)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.502356342967708, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -5.173656940460205, 0.0, -1.728534698486328e-05, 0.0, -0.0007364749908447266, 0.0, -9.72747802734375e-05, -0.001422882080078125, -1.71661376953125e-05, -9.536734637549671e-07, -1.1920928244535389e-07, -1.1822470696642995e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "range"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -5.889989906991559, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -5.5613579750061035, 0.0, -9.655952453613281e-06, 0.0, -0.0011212825775146484, 0.0, -0.00011444091796875, -0.0009593963623046875, -1.9073486328125e-05, -5.960459930065554e-07, -2.3841855067985307e-07, -1.1943615390919149e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -6.399754007960453, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -6.373180389404297, -0.0007534027099609375, -9.894321920000948e-06, -3.0517578125e-05, -2.3841855067985307e-07, 0.0, -2.503447831259109e-06, -1.1920928244535389e-07, -0.0008869171142578125, 0.0, -0.00014805780665483326, 0.0, -3.4332275390625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -0.014385104179382324, 0.0, -1.9073486328125e-06, 0.0, -5.555152893066406e-05, 0.0, -0.0005283355712890625, -0.000560760498046875, -7.62939453125e-06, 1.1920926112907182e-07, -1.1920928244535389e-07, -1.3834607671014965e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 7, "hole0": "War Golem", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "spell_targetable", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.spell_targetable)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -6.531660605975048, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -6.201634407043457, 0.0, -3.933906555175781e-06, 0.0, -0.0026732683181762695, 0.0, -0.0004177093505859375, -0.0005016326904296875, -1.52587890625e-05, -2.8610220397240482e-06, -2.3841855067985307e-07, -1.5991827240213752e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "spell_targetable"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -6.859179906951503, "score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -6.528106212615967, -1.1920928244535389e-07, -2.872943878173828e-05, 0.0, -0.0037637948989868164, 0.0, -7.62939453125e-05, -0.0007781982421875, -1.71661376953125e-05, -3.576276412786683e-07, -2.3841855067985307e-07, -1.3372598914429545e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Template27", "hole0": 7, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 150, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "War", "<EOS>", "__init__", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 58, 192, "1", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 250, 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 21, 134, "player", "<EOS>", "opponent", "<EOS>", "bind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "War", "<EOS>", "__init__", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 58, 192, "1", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            War().__init__(Aura(ChangeHealth(1), MinionSelector()))\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def _reveal(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            War().__init__(Aura(ChangeHealth(1), MinionSelector()))\n", "score": -18.252036271815314, "score_history": [-5.7220458984375e-06, -5.098026275634766, -8.141693251673132e-05, -1.1920922133867862e-06, -2.288796349603217e-05, -0.018321137875318527, -3.814697265625e-06, -3.933906555175781e-06, -6.103515625e-05, -0.5503196716308594, -0.12045669555664062, -0.0002422332763671875, -3.814697265625e-06, -1.6927575416048057e-05, 0.0, -0.0002880096435546875, 0.0, -0.6282024383544922, -0.0002593994140625, -1.33514404296875e-05, -7.629365427419543e-06, -0.00016450828115921468, -1.2636104656849056e-05, -1.9073486328125e-06, -6.4849853515625e-05, -1.9073486328125e-06, -5.960602720733732e-06, -1.3470649719238281e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.00011134147644042969, 0.0, -0.0002691698318812996, 0.0, -1.9073486328125e-06, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -9.775161743164062e-05, 0.0, -0.0010852813720703125, -1.9073486328125e-06, -3.814697265625e-06, -2.2649765014648438e-06, -0.08217728137969971, 0.0, -0.0019336938858032227, 0.0, -5.53131103515625e-05, -0.0001506805419921875, -0.00014078617095947266, -2.729860534600448e-05, -0.04749584197998047, -0.000385284423828125, -1.1444091796875e-05, -0.0004558563232421875, -0.0001087188720703125, -1.1444091796875e-05, 0.0, -8.225431884056889e-06, 0.0, -4.38690185546875e-05, 0.0, -6.103515625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.002971649169921875, -4.76837158203125e-05, -4.00543212890625e-05, 0.0, -0.006419181823730469, 0.0, -0.011979103088378906, -0.00018310546875, -0.00018310546875, 0.0, -7.975100743351504e-05, -1.9073486328125e-06, -0.000843048095703125, -0.000148773193359375, 0.0, -0.007079874165356159, -1.9073486328125e-06, -0.000797271728515625, 0.0, -0.5669354200363159, 0.0, -0.0031032562255859375, -0.11609935760498047, -0.000484466552734375, -0.018672943115234375, -0.0005130767822265625, -0.04899819567799568, -0.12752693891525269, -0.42993056774139404, 0.0, -0.10693931579589844, -0.09454727172851562, -0.004782676696777344, -0.2187710553407669, -7.62939453125e-06, -0.0006504058837890625, -0.9971208572387695, -0.0015430450439453125, -0.00019657610391732305, 0.0, -0.49991798400878906, -1.33514404296875e-05, -0.016652777791023254, -2.288818359375e-05, -1.9073486328125e-06, -0.060484886169433594, -1.2296972274780273, -5.53131103515625e-05, -0.4898184835910797, -1.9073486328125e-06, -0.000415802001953125, -0.0039157867431640625, -0.02451324462890625, -6.103515625e-05, -0.0001983642578125, -7.62939453125e-06, -1.33514404296875e-05, -7.450580596923828e-05, -3.814697265625e-06, -0.06253623962402344, -0.0063304901123046875, -1.71661376953125e-05, -0.04260444641113281, -0.000179290771484375, -0.09999847412109375, 0.0, -5.0306247430853546e-05, 0.0, -0.3700706958770752, -1.52587890625e-05, -0.6049623489379883, -1.9073486328125e-05, -7.62939453125e-06, -7.82012939453125e-05, -3.62396240234375e-05, -0.4152429401874542, -0.0016231536865234375, -0.006104469299316406, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -4.76837158203125e-05, 0.0, -0.18317604064941406, 0.0, -0.0074634552001953125, -0.0001506805419921875, -0.39810264110565186, 0.0, -0.00136566162109375, -0.0036907196044921875, -0.002735137939453125, -5.91278076171875e-05, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -0.0077381134033203125, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -2.3841830625315197e-06, -0.4030914306640625, -0.36406421661376953, -7.62939453125e-06, -0.1961956024169922, -0.000152587890625, -0.000152587890625, 0.0, -1.406666160619352e-05, 0.0, -0.0004673004150390625, 0.0, -8.392333984375e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -0.06740951538085938, -4.1961669921875e-05, -2.6702880859375e-05, 0.0, -0.0074416399002075195, 0.0, -0.01922893524169922, -0.000232696533203125, -0.000102996826171875, 0.0, -8.916854130802676e-05, -1.9073486328125e-06, -0.0004329681396484375, -0.0001316070556640625, 0.0, -0.006384226493537426, -1.9073486328125e-06, -0.0008296966552734375, 0.0, -0.5979067087173462, 0.0, -0.0035762786865234375, -0.1531505584716797, -0.0005035400390625, -0.02191162109375, -0.0006961822509765625, -0.04840706288814545, -0.10933835804462433, -0.45780205726623535, 0.0, -0.10230064392089844, -0.0966949462890625, -0.004421234130859375, -0.21297086775302887, -7.62939453125e-06, -0.000652313232421875, -0.9884109497070312, -0.0015716552734375, -0.00020432470773812383, 0.0, -0.509002685546875, -1.33514404296875e-05, -0.016523852944374084, -2.288818359375e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "WarGolem", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "War"}, "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template33", "hole0": 1}, {"_type": "Template39", "hole0": "MinionSelector"}]}], "hole1": "__init__"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "opponent"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "War"}, "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template33", "hole0": 1}, {"_type": "Template39", "hole0": "MinionSelector"}]}], "hole1": "__init__"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.064237581727575, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -1.0054740905761719, -0.0006351470947265625, -8.094310032902285e-05, -4.613332566805184e-05, -1.1801685104728676e-05, -3.576278118089249e-07, -0.002138710580766201, -5.7220458984375e-06, -0.0013704299926757812, -0.0004596710205078125, -0.00017452210886403918, 0.0, -2.288818359375e-05, -7.82012939453125e-05, -0.0001659393310546875, -3.62396240234375e-05, -2.6702880859375e-05, -0.003976186737418175, -0.3031795024871826, -7.152555099310121e-07, -0.020936965942382812, -0.019324302673339844, -9.5367431640625e-06, -0.007414817810058594, 0.0, -0.0002880096435546875, -2.6702880859375e-05, -0.0008997917175292969, -3.4331867936998606e-05, -0.0003509521484375, -1.71661376953125e-05, -0.615386962890625, -0.008127212524414062, 0.0, 0.0, -0.013247489929199219, -0.00019073486328125, -0.03861647844314575, -1.33514404296875e-05, -0.0003300905227661133, -3.814697265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.478462246754809, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -0.37913990020751953, 0.0, -2.47955322265625e-05, -0.0001773834228515625, -0.16513824462890625, -0.011765003204345703, 0.0, 0.0, -0.4556884765625, -0.001312255859375, -0.03753165155649185, -1.9073486328125e-06, -0.003127455711364746, -1.9311904907226562e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.682923621104628, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -1.0054740905761719, -0.0006351470947265625, -8.094310032902285e-05, -4.613332566805184e-05, -1.1801685104728676e-05, -3.576278118089249e-07, -0.002138710580766201, -5.7220458984375e-06, -0.0013704299926757812, -0.0004596710205078125, -0.00017452210886403918, 0.0, -2.288818359375e-05, -7.82012939453125e-05, -0.0001659393310546875, -3.62396240234375e-05, -2.6702880859375e-05, -0.003976186737418175, -1.411365270614624, -9.536738616588991e-07, -0.016327857971191406, -0.0010662078857421875, -1.33514404296875e-05, -0.07109451293945312, 0.0, -0.001346588134765625, -9.5367431640625e-06, -0.0007663965225219727, -1.5497176718781702e-05, -0.000274658203125, -1.52587890625e-05, -0.08422279357910156, -0.00676727294921875, 0.0, 0.0, -0.012228965759277344, -0.0001659393310546875, -0.0410623736679554, -1.33514404296875e-05, -0.0003243684768676758, -3.814697265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 52, 180, "<UNK>", "Attack", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(Buff(\n            <UNK>Attack())), SelfSelector()))])\n", "score": -3.0280072095508714, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -1.6868219375610352, -0.14859068393707275, -0.00012289722508285195, -1.1444091796875e-05, -8.7738037109375e-05, -0.015030860900878906, -0.4201902747154236, 0.0, 0.0, -0.16727161407470703, -0.0198211669921875, -0.04591423645615578, -0.03620059788227081, -5.042444172431715e-05, -0.00818777084350586, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "<UNK>Attack"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            BEAST)), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.1635882719845014, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -1.1824321746826172, 0.0, -1.71661376953125e-05, -0.0001392364501953125, -0.09810829162597656, -0.005875110626220703, 0.0, 0.0, -0.41240692138671875, -0.000804901123046875, -0.03696846589446068, -1.9073486328125e-06, -0.0022809505462646484, -1.728534698486328e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Kill(), SelfSelector()))])\n", "score": -3.8882167890418984, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -1.0054740905761719, -0.0006351470947265625, -8.094310032902285e-05, -4.613332566805184e-05, -1.1801685104728676e-05, -3.576278118089249e-07, -0.002138710580766201, -5.7220458984375e-06, -0.0013704299926757812, -0.0004596710205078125, -0.00017452210886403918, 0.0, -2.288818359375e-05, -7.82012939453125e-05, -0.0001659393310546875, -3.62396240234375e-05, -2.6702880859375e-05, -0.003976186737418175, -0.3031795024871826, -7.152555099310121e-07, -0.020936965942382812, -0.019324302673339844, -9.5367431640625e-06, -0.007414817810058594, 0.0, -0.0002880096435546875, -2.6702880859375e-05, -0.0008997917175292969, -3.4331867936998606e-05, -0.0003509521484375, -1.71661376953125e-05, -2.2165918350219727, -0.2743546962738037, -2.622604142743512e-06, -0.008940347470343113, -7.748603820800781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}, "hole2": "effects", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), SelfSelector()))])\n", "score": -3.889142551501884, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -0.37913990020751953, 0.0, -2.47955322265625e-05, -0.0001773834228515625, -0.16513824462890625, -0.011765003204345703, 0.0, 0.0, -1.125868797302246, -0.0009365081787109375, -0.011630058288574219, -0.0002956390380859375, -0.0011882781982421875, -0.006781219970434904, 0.0, -0.006038546562194824, -0.016368865966796875, 0.0, -0.12406378239393234, -1.9073486328125e-06, -0.0007801055908203125, -0.009763717651367188, -0.0027227401733398438, -1.9073486328125e-06, -0.00176239013671875, -0.0025768280029296875, 0.0, -0.059806939214468, -3.814697265625e-06, -0.5377655029296875, -1.9073486328125e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Minion", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Summon(\n            Minion()), PlayerSelector()))])\n", "score": -4.126561235111453, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -1.6868219375610352, -0.14859068393707275, -0.00012289722508285195, -1.1444091796875e-05, -8.7738037109375e-05, -0.015030860900878906, -1.2849019765853882, -1.1920928244535389e-07, 0.0, -0.020084381103515625, -8.96453857421875e-05, -0.4073654115200043, -0.07333338260650635, -0.00900566391646862, -0.0014133453369140625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Minion"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            BEAST)), ActionTag(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), SelfSelector()))])\n", "score": -4.500651949127807, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -1.1824321746826172, 0.0, -1.71661376953125e-05, -0.0001392364501953125, -0.09810829162597656, -0.005875110626220703, 0.0, 0.0, -1.1811199188232422, -0.0008029937744140625, -0.007073402404785156, -0.000347137451171875, -0.001186370849609375, -0.0058910842053592205, 0.0, -0.008346199989318848, -0.013818740844726562, 0.0, -0.10785175114870071, -1.9073486328125e-06, -0.0008335113525390625, -0.011671066284179688, -0.00251007080078125, -1.9073486328125e-06, -0.00185394287109375, -0.0025615692138671875, 0.0, -0.060081835836172104, -3.814697265625e-06, -0.38358116149902344, -1.9073486328125e-06, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), HeroSelector()))])\n", "score": -4.576171436389579, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -0.37913990020751953, 0.0, -2.47955322265625e-05, -0.0001773834228515625, -0.16513824462890625, -0.011765003204345703, 0.0, 0.0, -1.125868797302246, -0.0009365081787109375, -0.011630058288574219, -0.0002956390380859375, -0.0011882781982421875, -0.006781219970434904, 0.0, -0.006038546562194824, -0.016368865966796875, 0.0, -0.12406378239393234, -1.9073486328125e-06, -0.0007801055908203125, -0.009763717651367188, -0.0027227401733398438, -1.9073486328125e-06, -0.00176239013671875, -0.0025768280029296875, 0.0, -0.059806939214468, -3.814697265625e-06, -1.2247943878173828, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "HeroSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 170, "Damage", "<EOS>", 237, 46, 139, "2", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Damage(2), CharacterSelector(players=\n            BothPlayer())))])\n", "score": -4.792553084116371, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -1.0054740905761719, -0.0006351470947265625, -8.094310032902285e-05, -4.613332566805184e-05, -1.1801685104728676e-05, -3.576278118089249e-07, -0.002138710580766201, -5.7220458984375e-06, -0.0013704299926757812, -0.0004596710205078125, -0.00017452210886403918, 0.0, -2.288818359375e-05, -7.82012939453125e-05, -0.0001659393310546875, -3.62396240234375e-05, -2.6702880859375e-05, -0.003976186737418175, -0.3031795024871826, -7.152555099310121e-07, -0.020936965942382812, -0.019324302673339844, -9.5367431640625e-06, -0.007414817810058594, 0.0, -0.0002880096435546875, -2.6702880859375e-05, -0.0008997917175292969, -3.4331867936998606e-05, -0.0003509521484375, -1.71661376953125e-05, -1.4302034378051758, -0.5410357713699341, -5.614757537841797e-05, 0.0, -0.008092880249023438, -1.9073486328125e-06, -0.12322041392326355, -2.0265579223632812e-06, -0.3061239719390869, -6.67572021484375e-05, 0.0, -0.8842325210571289, -0.001079559326171875, -2.86102294921875e-05, -0.0105820894241333, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.09946751594543457, -9.417517503607087e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole1": [{"_type": "Num", "n": 2}]}]}, "hole2": "effects", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            BEAST)), ActionTag(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), HeroSelector()))])\n", "score": -5.585615747650756, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -1.1824321746826172, 0.0, -1.71661376953125e-05, -0.0001392364501953125, -0.09810829162597656, -0.005875110626220703, 0.0, 0.0, -1.1811199188232422, -0.0008029937744140625, -0.007073402404785156, -0.000347137451171875, -0.001186370849609375, -0.0058910842053592205, 0.0, -0.008346199989318848, -0.013818740844726562, 0.0, -0.10785175114870071, -1.9073486328125e-06, -0.0008335113525390625, -0.011671066284179688, -0.00251007080078125, -1.9073486328125e-06, -0.00185394287109375, -0.0025615692138671875, 0.0, -0.060081835836172104, -3.814697265625e-06, -1.4685487747192383, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "HeroSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Target", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Give([Buff(ChangeAttack(3)), Buff(\n            ChangeHealth(3))]), TargetSelector()))])\n", "score": -5.6376910591923135, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -0.37913990020751953, 0.0, -2.47955322265625e-05, -0.0001773834228515625, -0.16513824462890625, -0.011765003204345703, 0.0, 0.0, -1.125868797302246, -0.0009365081787109375, -0.011630058288574219, -0.0002956390380859375, -0.0011882781982421875, -0.006781219970434904, 0.0, -0.006038546562194824, -0.016368865966796875, 0.0, -0.12406378239393234, -1.9073486328125e-06, -0.0007801055908203125, -0.009763717651367188, -0.0027227401733398438, -1.9073486328125e-06, -0.00176239013671875, -0.0025768280029296875, 0.0, -0.059806939214468, -3.814697265625e-06, -2.2863006591796875, -1.9073486328125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "MinionDied", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 170, "Damage", "<EOS>", 237, 46, 139, "2", "<EOS>", "Character", "Selector", "<EOS>", 246, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Damage(2), CharacterSelector(players=\n            EnemyPlayer(), players=BothPlayer(), players=BothPlayer())))])\n", "score": -6.19379593634374, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -1.0054740905761719, -0.0006351470947265625, -8.094310032902285e-05, -4.613332566805184e-05, -1.1801685104728676e-05, -3.576278118089249e-07, -0.002138710580766201, -5.7220458984375e-06, -0.0013704299926757812, -0.0004596710205078125, -0.00017452210886403918, 0.0, -2.288818359375e-05, -7.82012939453125e-05, -0.0001659393310546875, -3.62396240234375e-05, -2.6702880859375e-05, -0.003976186737418175, -0.3031795024871826, -7.152555099310121e-07, -0.020936965942382812, -0.019324302673339844, -9.5367431640625e-06, -0.007414817810058594, 0.0, -0.0002880096435546875, -2.6702880859375e-05, -0.0008997917175292969, -3.4331867936998606e-05, -0.0003509521484375, -1.71661376953125e-05, -1.4302034378051758, -0.5410357713699341, -5.614757537841797e-05, 0.0, -0.008092880249023438, -1.9073486328125e-06, -0.12322041392326355, -2.0265579223632812e-06, -0.3061239719390869, -6.67572021484375e-05, 0.0, -0.6397190093994141, -0.006075859069824219, -3.814697265625e-06, -0.00010502338409423828, -1.9073486328125e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.4536486864089966, -2.47955322265625e-05, -1.9073486328125e-06, -0.0012836456298828125, 0.0, -0.8087196350097656, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -0.0006543397903442383, -3.933906555175781e-06, 0.0, -0.0015087127685546875, 0.0, -0.48449230194091797, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -0.00020611286163330078, -4.0531158447265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole1": [{"_type": "Num", "n": 2}]}]}, "hole2": "effects", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Minion", "Died", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(TurnEnded(IsType(MINION_TYPE.\n            BEAST)), ActionTag(Give(ChangeAttack(1)), SelfSelector())),\n            Effect(Effect(MinionDied(player=BothPlayer()), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector())), IsMinion())])\n", "score": -8.13925347806957, "score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -2.214226245880127, -0.1199880912899971, -0.03235006332397461, 0.0, -0.000209808349609375, -0.1287832260131836, -0.000301361083984375, -5.7220458984375e-06, -9.5367431640625e-06, -0.34333157539367676, -0.00027930736541748047, 0.0, -0.0055599212646484375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.02509629726409912, -1.9073486328125e-06, -0.5909948348999023, 0.0, -7.62939453125e-06, -0.00142669677734375, -0.03168678283691406, -0.0007596015930175781, 0.0, 0.0, -0.3269681930541992, -0.0004425048828125, -0.03297554701566696, -1.9073486328125e-06, -0.0011782646179199219, -1.3470649719238281e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.006755828857421875, -0.0073986053466796875, -0.0003666877746582031, -1.9073486328125e-06, -0.0001277923583984375, -0.7357330322265625, -0.0079498291015625, -5.91278076171875e-05, -3.814697265625e-06, -0.46583402156829834, -3.814697265625e-06, -0.015008926391601562, -0.19098472595214844, -0.058258056640625, -1.9073486328125e-06, -7.62939453125e-06, -0.8936156630516052, -0.25877952575683594, 0.0, -0.000102996826171875, -0.014407157897949219, -5.7220458984375e-06, -0.18074798583984375, 0.0, -0.001239776611328125, -3.0517578125e-05, -0.003835916519165039, -1.0609622222546022e-05, -7.05718994140625e-05, -6.4849853515625e-05, -0.4376697540283203, -0.008752822875976562, 0.0, 0.0, -0.012905120849609375, -0.000152587890625, -0.04579517990350723, -1.1444091796875e-05, -0.0004369020462036133, -5.7220458984375e-06, -1.9073486328125e-06, -0.3074674606323242, -0.1157379150390625, -0.027830345556139946, -0.0038559138774871826, -0.0008907318115234375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Acidmaw", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "MinionDied"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}], "hole2": 2, "hole1": 4}], "hole4": "player"}}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -0.9515317059383435, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.6057310104370117, -8.96453857421875e-05, -0.00057220458984375, 0.0, -1.6569983927183785e-05, -1.52587890625e-05, 0.0, -0.0009434801759198308, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0018051862716674805, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0005340576171875, -2.288818359375e-05, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000865936279296875, -3.814697265625e-06, -0.05588531494140625, 0.0, -3.445148468017578e-05, 0.0, -0.21989154815673828, 0.0, -1.33514404296875e-05, -0.0019321441650390625, -2.6702880859375e-05, -1.919269561767578e-05, -1.1920922133867862e-06, -2.6345251171733253e-05, 0.0, -0.010855317115783691, 0.0, -0.000247955322265625, -5.7220458984375e-06, -1.9431114196777344e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -1.0780429829292117, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.7971010208129883, -2.86102294921875e-05, -0.0001239776611328125, -1.1920928244535389e-07, -5.841253368998878e-06, -1.9073486328125e-06, 0.0, -5.6027092796284705e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -2.491474151611328e-05, 0.0, -8.273075945908204e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -7.653236389160156e-05, 0.0, -0.000263214111328125, -5.91278076171875e-05, -4.1961669921875e-05, 0.0, -5.7220440794480965e-06, 0.0, -0.03612399101257324, 0.0, -0.0002460479736328125, -0.18495750427246094, -5.7220458984375e-05, -6.496906280517578e-05, -2.741813204920618e-06, -3.409384225960821e-05, 0.0, -0.00636136531829834, 0.0, -0.0005092620849609375, -1.33514404296875e-05, -5.5789947509765625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "score": -2.371924815244249, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.6057310104370117, -8.96453857421875e-05, -0.00057220458984375, 0.0, -1.6569983927183785e-05, -1.52587890625e-05, 0.0, -0.0009434801759198308, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0018051862716674805, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0005340576171875, -2.288818359375e-05, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000865936279296875, -3.814697265625e-06, -0.05588531494140625, 0.0, -3.445148468017578e-05, 0.0, -1.6406021118164062, 0.0, -9.5367431640625e-06, -0.0014324188232421875, -3.814697265625e-05, -2.1338462829589844e-05, -2.0265579223632812e-06, -2.5033932615770027e-05, 0.0, -0.011037707328796387, 0.0, -0.0002384185791015625, -5.7220458984375e-06, -1.9550323486328125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "p"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "score": -2.6904087055859165, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.7971010208129883, -2.86102294921875e-05, -0.0001239776611328125, -1.1920928244535389e-07, -5.841253368998878e-06, -1.9073486328125e-06, 0.0, -5.6027092796284705e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -2.491474151611328e-05, 0.0, -8.273075945908204e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -7.653236389160156e-05, 0.0, -0.000263214111328125, -5.91278076171875e-05, -4.1961669921875e-05, 0.0, -5.7220440794480965e-06, 0.0, -0.03612399101257324, 0.0, -0.0002460479736328125, -1.8037633895874023, -4.9591064453125e-05, -0.00041961669921875, 0.0, -0.00018942354654427618, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -3.2067360516220944, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -3.158797264099121, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, 0.0, -9.655952453613281e-06, -5.7220458984375e-06, -0.0011577606201171875, -2.09808349609375e-05, -7.05718994140625e-05, 0.0, -5.841247457283316e-06, -1.9073486328125e-06, 0.0, -7.152502803364769e-07, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.0875205993652344e-05, 0.0, -0.000109550790512003, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -7.092952728271484e-05, 0.0, -0.0002498626708984375, -5.14984130859375e-05, -2.6702880859375e-05, 0.0, -7.62939453125e-06, -0.0002880096435546875, -0.000240325927734375, -0.023836135864257812, -1.9073486328125e-06, -3.1471197871724144e-05, 0.0, -0.0002828503493219614, 0.0, -2.6702880859375e-05, -0.00379180908203125, -1.52587890625e-05, -3.814697265625e-05, -1.2516897186287679e-05, -2.7060508728027344e-05, -1.1920928244535389e-07, -0.00968480110168457, 0.0, -0.000278472900390625, -7.62939453125e-06, -3.3020973205566406e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -4.0527060604899745, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.6057310104370117, -8.96453857421875e-05, -0.00057220458984375, 0.0, -1.6569983927183785e-05, -1.52587890625e-05, 0.0, -0.0009434801759198308, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0018051862716674805, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0005340576171875, -2.288818359375e-05, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000865936279296875, -3.814697265625e-06, -3.2626752853393555, 0.0, -2.110004425048828e-05, 0.0, -0.07401514053344727, 0.0, -1.33514404296875e-05, -0.046428680419921875, -8.58306884765625e-05, -2.300739288330078e-05, -4.053113570989808e-06, -2.2530553906108253e-05, 0.0, -0.0065081119537353516, 0.0, -0.000301361083984375, -1.52587890625e-05, -1.9311904907226562e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 249, 91, 183, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "score": -4.448169103137381, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.7971010208129883, -2.86102294921875e-05, -0.0001239776611328125, -1.1920928244535389e-07, -5.841253368998878e-06, -1.9073486328125e-06, 0.0, -5.6027092796284705e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -2.491474151611328e-05, 0.0, -8.273075945908204e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -7.653236389160156e-05, 0.0, -0.000263214111328125, -5.91278076171875e-05, -4.1961669921875e-05, 0.0, -5.7220440794480965e-06, 0.0, -3.353985548019409, -1.9073486328125e-06, -2.6702880859375e-05, -0.243316650390625, -6.4849853515625e-05, -0.00047731390804983675, 0.0, -0.0006794850341975689, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 2}], "hole4": "p"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Boar", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -5.348525281265864, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -5.055783271789551, -0.0013713836669921875, 0.0, -9.429045167053118e-05, -2.1457672119140625e-06, 0.0, -0.22607803344726562, 0.0, -0.00011908992019016296, -2.3841855067985307e-07, -4.1961669921875e-05, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.00018513202667236328, -1.9073486328125e-06, -0.0482330322265625, 0.0, -4.6372413635253906e-05, 0.0, -5.1736828027060255e-05, 0.0, -7.43865966796875e-05, -0.007259368896484375, -7.62939453125e-06, -3.24249267578125e-05, -3.2186455882765586e-06, -2.944469451904297e-05, 0.0, -0.008360624313354492, 0.0, -0.0002803802490234375, -7.62939453125e-06, -1.7523765563964844e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Boar", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -5.679442105374612, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.6057310104370117, -8.96453857421875e-05, -0.00057220458984375, 0.0, -1.6569983927183785e-05, -1.52587890625e-05, 0.0, -0.0009434801759198308, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0018051862716674805, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0005340576171875, -2.288818359375e-05, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000865936279296875, -3.814697265625e-06, -4.9055633544921875, 0.0, -5.3882598876953125e-05, 0.0, -0.08283984661102295, 0.0, -1.33514404296875e-05, -0.020547866821289062, -4.1961669921875e-05, -2.110004425048828e-05, -1.6689286894688848e-06, -2.2649763195659034e-05, 0.0, -0.0074961185455322266, 0.0, -0.000240325927734375, -9.5367431640625e-06, -1.7404556274414062e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Boar", "<EOS>", "3", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -6.766087050329354, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -5.055783271789551, -0.0013713836669921875, 0.0, -9.429045167053118e-05, -2.1457672119140625e-06, 0.0, -1.6446704864501953, 0.0, -0.00018656195607036352, -1.1920928244535389e-07, -5.14984130859375e-05, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -8.022785186767578e-05, -1.9073486328125e-06, -0.04490387439727783, 0.0, -6.008148193359375e-05, 0.0, -5.40018045285251e-05, 0.0, -0.0001049041748046875, -0.009979248046875, -7.62939453125e-06, -3.24249267578125e-05, -3.2186455882765586e-06, -2.753734588623047e-05, 0.0, -0.007915019989013672, 0.0, -0.0002841949462890625, -7.62939453125e-06, -1.7523765563964844e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "FREE", "hole3": "minion_type", "hole1": 3, "hole0": "Boar", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 238, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "score": -7.059601336024116, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -6.419973373413086, -0.0049571990966796875, -1.9073486328125e-05, -1.4305012882687151e-05, 0.0, -0.009138107299804688, -1.9073486328125e-06, -0.019801408052444458, 0.0, -0.002004384994506836, 0.0, -0.0015186071395874023, 0.0, -0.0002040863037109375, -0.5483884811401367, -2.288818359375e-05, -0.00130462646484375, 0.0, -0.00048804268590174615, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 238, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -7.38920274321071, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -6.419973373413086, -0.0049571990966796875, -1.9073486328125e-05, -1.4305012882687151e-05, 0.0, -0.009138107299804688, -1.9073486328125e-06, -0.019801408052444458, 0.0, -0.002004384994506836, 0.0, -0.0015186071395874023, 0.0, -0.0002040863037109375, -0.8702325820922852, -6.67572021484375e-05, -0.0008527040481567383, -3.576272320060525e-06, -4.2080875573446974e-05, 0.0, -0.007857441902160645, 0.0, -0.0006628036499023438, -1.1444091796875e-05, -7.593631744384766e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Boar", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "score": -7.843234895758755, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -7.690339088439941, -0.0020351409912109375, 0.0, -5.841253368998878e-06, -5.960462203802308e-07, -1.1920928244535389e-07, -7.081031799316406e-05, 0.0, -0.03565013408660889, 0.0, -4.017317041871138e-05, -1.9073486328125e-06, -0.0001845356309786439, 0.0, -3.814697265625e-06, -0.11377716064453125, -2.6702880859375e-05, -0.0004863739013671875, -1.1920928244535389e-07, -0.00019311904907226562, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Boar", "hole3": "COMMON", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Boar", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -8.40943264515132, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -5.055783271789551, -0.0013713836669921875, 0.0, -9.429045167053118e-05, -2.1457672119140625e-06, 0.0, -0.22607803344726562, 0.0, -0.00011908992019016296, -2.3841855067985307e-07, -4.1961669921875e-05, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.00018513202667236328, -1.9073486328125e-06, -3.097151756286621, 0.0, -2.622604188218247e-05, 0.0, -5.1140785217285156e-05, 0.0, -0.00026702880859375, -0.021137237548828125, -4.38690185546875e-05, -4.9591064453125e-05, -5.125986263010418e-06, -2.562999725341797e-05, -1.1920928244535389e-07, -0.006211638450622559, 0.0, -0.000316619873046875, -9.5367431640625e-06, -1.5616416931152344e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Boar", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Boar", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "score": -10.307646100361517, "score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -10.283967971801758, -0.0005359649658203125, 0.0, -0.00014328944962471724, -2.3841855067985307e-07, -1.1920928244535389e-07, -3.433226083870977e-05, 0.0, -1.609317769180052e-05, 0.0, -0.0006185224046930671, 0.0, -0.0001678466796875, -0.020687103271484375, -1.9073486328125e-05, -0.0007781982421875, -2.3841855067985307e-07, -0.00025784969329833984, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Boar", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Boar", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 2}], "hole4": "player"}}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -0.7745369109880258, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -0.3634398877620697, 0.0, -0.000370025634765625, -1.9073486328125e-06, -9.28640365600586e-05, -6.198883056640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.10874921193912, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -2.680663824081421, 0.0, -0.0012664749519899487, -1.1920928244535389e-07, -0.00052642822265625, -8.20159912109375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -3.4332275390625e-05, -2.09808349609375e-05, -0.01128387451171875, 0.0, -4.0531158447265625e-06, 0.0, -0.0017586946487426758, 0.0, -2.09808349609375e-05, -0.012308120727539062, -2.47955322265625e-05, -1.430509882993647e-06, -2.9802276912960224e-06, -0.0007775048725306988, -1.1920928244535389e-07, -0.334623783826828, 0.0, -0.0003662109375, -1.9073486328125e-06, -8.33272933959961e-05, -6.198883056640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "0", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, enrage=[Aura(ChangeAttack(0), SelfSelector())])\n", "score": -3.5167957416224738, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -2.0814268589019775, -1.1920928244535389e-07, -0.0026340484619140625, -0.010503768920898438, -0.0007512557203881443, -5.841255187988281e-06, -1.71661376953125e-05, -0.029030799865722656, -0.000125885009765625, -0.7730139493942261, -0.00034940242767333984, -0.041351318359375, -5.7220458984375e-06, -0.16689623892307281, -9.655950634623878e-06, -4.76837158203125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 0}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.989882283198874, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -3.820528984069824, -2.47955322265625e-05, -7.152555099310121e-07, -0.00012362003326416016, -0.00036132335662841797, -8.20159912109375e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.115714520798065e-05, -2.2649765014648438e-06, -0.04694211483001709, 0.0, -3.063678741455078e-05, 0.0, -0.07173550128936768, 0.0, -3.814697265625e-06, -0.0001544952392578125, -1.71661376953125e-05, 2.3841852225814364e-07, -6.9141146923357155e-06, -0.000614081509411335, -1.1920928244535389e-07, -0.044918887317180634, 0.0, -0.0003986358642578125, -1.9073486328125e-06, -4.088878631591797e-05, -4.291534423828125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Anodized Robo Cub", "hole2": "DRUID", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, windfury=True)\n", "score": -4.008700225085285, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -3.5922038555145264, -9.536738616588991e-07, -0.000965118408203125, -1.9073486328125e-06, -0.00489497184753418, -7.390969585685525e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "6", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, enrage=[Aura(ChangeAttack(6), SelfSelector())])\n", "score": -4.230714025176923, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -2.0814268589019775, -1.1920928244535389e-07, -0.0026340484619140625, -0.010503768920898438, -0.0007512557203881443, -5.841255187988281e-06, -1.71661376953125e-05, -0.029030799865722656, -0.000125885009765625, -1.6303919553756714, -0.00044703480671159923, -0.006862640380859375, -1.9073486328125e-06, -0.05784401297569275, -1.4185905456542969e-05, -3.0517578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 6}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, DRUID=True)\n", "score": -4.336443755363717, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -3.8813159465789795, -1.1920928244535389e-07, -0.033687591552734375, -1.9073486328125e-06, -0.01080465316772461, -7.510183422709815e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "DRUID", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -4.424699967289172, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -3.9573028087615967, -1.1920928244535389e-07, -0.00025773022207431495, -1.1920928244535389e-07, -0.0011539459228515625, -0.0001068115234375, -5.14984130859375e-05, -3.814697265625e-06, -4.00543212890625e-05, -1.71661376953125e-05, -0.01773834228515625, 0.0, -2.1457672119140625e-06, 0.0, -0.0017586946487426758, 0.0, -2.09808349609375e-05, -0.010662078857421875, -2.288818359375e-05, -1.6689280073478585e-06, -2.861018856492592e-06, -0.0007889487314969301, -1.1920928244535389e-07, -0.36944326758384705, 0.0, -0.0003681182861328125, -1.9073486328125e-06, -8.71419906616211e-05, -6.198883056640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "score": -4.424800956844621, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -2.0814268589019775, -1.1920928244535389e-07, -0.0026340484619140625, -0.010503768920898438, -0.0007512557203881443, -5.841255187988281e-06, -1.71661376953125e-05, -0.029030799865722656, -0.000125885009765625, -1.78962242603302, -5.5193893786054105e-05, -0.022025108337402344, -1.9073486328125e-06, -0.07793604582548141, -6.079673767089844e-06, -3.24249267578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_targetable=True)\n", "score": -4.675749156213925, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -4.115850925445557, -1.1920928244535389e-07, -0.036950111389160156, -7.62939453125e-06, -0.11230790615081787, -6.4373016357421875e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 32, 201, "Choice", "<EOS>", 239, 63, 205, "Health", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 52, 180, "Taunt", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Choice", "<EOS>", 239, 63, 205, "Attack", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeHealth(2)), Buff(Taunt())]), SelfSelector()), Choice(\n            Attack(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -4.723369776269145, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -1.8928890228271484, 0.0, -0.00066375732421875, -0.0011806488037109375, -0.0036965608596801758, -2.0265579223632812e-06, -0.005146026611328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.11673426628112793, -0.00023697357391938567, -0.03773975372314453, -7.43865966796875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0066082654520869255, -4.6491513785440475e-06, -2.86102294921875e-05, -0.0001926422119140625, -1.52587890625e-05, -0.2053842544555664, -0.000347137451171875, -2.6702880859375e-05, -0.0003906485508196056, -2.3841855067985307e-07, -0.001272022258490324, -0.24467432498931885, 0.0, -0.0005646171048283577, -4.0531158447265625e-06, -0.1769275665283203, -0.0011234283447265625, -1.0614326000213623, -0.0001380355970468372, -0.000377655029296875, -1.9073486328125e-06, -0.10067931562662125, -3.933906555175781e-06, -2.09808349609375e-05, -1.9073486328125e-05, -2.288818359375e-05, -0.0001201629638671875, -0.0007694633677601814, -3.933906555175781e-06, -0.00095367431640625, -3.62396240234375e-05, -6.866455078125e-05, -0.01690574549138546, -0.0007902164361439645, -0.14227294921875, -0.0001735687255859375, -2.288818359375e-05, -3.814697265625e-06, -0.013716533780097961, -1.025196434056852e-05, -1.1444091796875e-05, -0.007171630859375, -7.05718994140625e-05, -0.0046329498291015625, -0.002140045166015625, -9.1552734375e-05, -0.003190852701663971, -0.00012444722233340144, -0.020038610324263573, -0.08720468729734421, -3.576278118089249e-07, -1.815205905586481e-06, -3.576278118089249e-07, -0.0058269500732421875, -1.52587890625e-05, -0.005010031629353762, -5.7220458984375e-06, -8.20159912109375e-05, -2.3722626792732626e-05, 0.0, -0.00017356858006678522, 0.0, -1.9073486328125e-06, -0.3845252990722656, -0.000156402587890625, 4.768339749716688e-07, -1.5020257706055418e-05, -0.0010850162943825126, -6.914134246471804e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "choices", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Template38", "hole0": "Choice", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Choice", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template39", "hole0": "Health"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}, {"_type": "Template25", "hole0": "Taunt"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 32, 201, "Choice", "<EOS>", 239, 63, 205, "Health", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 52, 180, "Health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Choice", "<EOS>", 239, 63, 205, "Attack", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeHealth(2)), Buff(Health())]), SelfSelector()), Choice(\n            Attack(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -4.884470559791758, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -1.8928890228271484, 0.0, -0.00066375732421875, -0.0011806488037109375, -0.0036965608596801758, -2.0265579223632812e-06, -0.005146026611328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.11673426628112793, -0.00023697357391938567, -0.03773975372314453, -7.43865966796875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0066082654520869255, -4.6491513785440475e-06, -2.86102294921875e-05, -0.0001926422119140625, -1.52587890625e-05, -0.2053842544555664, -0.000347137451171875, -2.6702880859375e-05, -0.0003906485508196056, -2.3841855067985307e-07, -0.001272022258490324, -0.24467432498931885, 0.0, -0.0005646171048283577, -4.0531158447265625e-06, -0.1769275665283203, -0.0011234283447265625, -1.2183082103729248, -6.663624662905931e-05, -0.000545501708984375, 0.0, -0.11068490147590637, -2.1457672119140625e-06, -2.110004425048828e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0001163482666015625, -0.000781854207161814, -3.933906555175781e-06, -0.001068115234375, -4.38690185546875e-05, -7.82012939453125e-05, -0.016571419313549995, -0.0006277221837081015, -0.1335277557373047, -0.00012969970703125, -2.288818359375e-05, -3.814697265625e-06, -0.015492591075599194, -1.0728796951298136e-05, -1.1444091796875e-05, -0.006548881530761719, -7.05718994140625e-05, -0.0046787261962890625, -0.002132415771484375, -8.96453857421875e-05, -0.003290223889052868, -0.00012182493082946166, -0.019723577424883842, -0.08934998512268066, -4.768370445162873e-07, -1.2201780918985605e-06, -3.576278118089249e-07, -0.0059146881103515625, -1.52587890625e-05, -0.004999491851776838, -5.7220458984375e-06, -8.20159912109375e-05, -2.3722626792732626e-05, 0.0, -0.00017344937077723444, 0.0, -1.9073486328125e-06, -0.38460350036621094, -0.000156402587890625, 4.768339749716688e-07, -1.4781842764932662e-05, -0.00108582794200629, -6.914134246471804e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "choices", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Template38", "hole0": "Choice", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Choice", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template39", "hole0": "Health"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}, {"_type": "Template25", "hole0": "Health"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 32, 201, "Choice", "<EOS>", 239, 63, 205, "Health", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 52, 180, "Attack", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Choice", "<EOS>", 239, 63, 205, "Attack", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeHealth(2)), Buff(Attack())]), SelfSelector()), Choice(\n            Attack(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.073224783344038, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -1.8928890228271484, 0.0, -0.00066375732421875, -0.0011806488037109375, -0.0036965608596801758, -2.0265579223632812e-06, -0.005146026611328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.11673426628112793, -0.00023697357391938567, -0.03773975372314453, -7.43865966796875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0066082654520869255, -4.6491513785440475e-06, -2.86102294921875e-05, -0.0001926422119140625, -1.52587890625e-05, -0.2053842544555664, -0.000347137451171875, -2.6702880859375e-05, -0.0003906485508196056, -2.3841855067985307e-07, -0.001272022258490324, -0.24467432498931885, 0.0, -0.0005646171048283577, -4.0531158447265625e-06, -0.1769275665283203, -0.0011234283447265625, -1.3184115886688232, -0.042255599051713943, -0.000942230224609375, -1.9073486328125e-06, -0.1933976411819458, -3.933906555175781e-06, -9.5367431640625e-06, -1.52587890625e-05, -2.47955322265625e-05, -0.0001392364501953125, -0.0007613607449457049, -3.933906555175781e-06, -0.0012722015380859375, -4.38690185546875e-05, -6.67572021484375e-05, -0.016673125326633453, -0.0007799662998877466, -0.09961223602294922, -0.0001583099365234375, -2.09808349609375e-05, -3.814697265625e-06, -0.01415155827999115, -1.013275596051244e-05, -1.1444091796875e-05, -0.00640869140625, -6.67572021484375e-05, -0.004848480224609375, -0.00212860107421875, -9.1552734375e-05, -0.0032330474350601435, -0.00012110976240364835, -0.0194541085511446, -0.08852112293243408, -3.576278118089249e-07, -1.8151768017560244e-06, -3.576278118089249e-07, -0.0059642791748046875, -1.52587890625e-05, -0.004844610579311848, -5.7220458984375e-06, -8.20159912109375e-05, -2.3722626792732626e-05, 0.0, -0.00017344937077723444, 0.0, -1.9073486328125e-06, -0.3839855194091797, -0.000156402587890625, 3.5762514016823843e-07, -1.490105023549404e-05, -0.0010844137286767364, -6.914134246471804e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "choices", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Template38", "hole0": "Choice", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Choice", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template39", "hole0": "Health"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}, {"_type": "Template25", "hole0": "Attack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 32, 201, "Choice", "<EOS>", 239, 63, 205, "Health", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Choice", "<EOS>", 239, 63, 205, "Attack", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeAttack(2))]), SelfSelector()), Choice(Attack(), Give([\n            Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.285669719540195, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -1.8928890228271484, 0.0, -0.00066375732421875, -0.0011806488037109375, -0.0036965608596801758, -2.0265579223632812e-06, -0.005146026611328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.11673426628112793, -0.00023697357391938567, -0.03773975372314453, -7.43865966796875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0066082654520869255, -4.6491513785440475e-06, -2.86102294921875e-05, -0.0001926422119140625, -1.52587890625e-05, -1.7095651626586914, -0.008769989013671875, -0.000202178955078125, -0.0007666680030524731, -8.225420970120467e-06, -0.0028769313357770443, -0.14148399233818054, -7.152555099310121e-07, -5.4348260164260864e-05, -1.1920928244535389e-07, -0.23598289489746094, -1.52587890625e-05, -0.010500399395823479, -5.7220458984375e-06, -7.05718994140625e-05, -9.5367431640625e-06, -4.76837158203125e-05, -0.000904083251953125, -0.0005520307458937168, -9.775161743164062e-06, -0.0010356903076171875, -6.866455078125e-05, -2.288818359375e-05, -0.020897652953863144, -0.0011091656051576138, -0.36629486083984375, -7.82012939453125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0173691026866436, -1.025196434056852e-05, -1.1444091796875e-05, -0.0044460296630859375, -7.2479248046875e-05, -0.0043888092041015625, -0.0022106170654296875, -9.34600830078125e-05, -0.00376003491692245, -0.00011383881792426109, -0.01730882190167904, -0.11148929595947266, -3.576278118089249e-07, -9.88540705293417e-07, -2.3841855067985307e-07, -0.0070095062255859375, -1.33514404296875e-05, -0.004354060627520084, -5.7220458984375e-06, -8.7738037109375e-05, -2.1576861399807967e-05, 0.0, -0.00016987312119454145, 0.0, -1.9073486328125e-06, -0.3775959014892578, -0.0001544952392578125, 3.5762514016823843e-07, -1.537788011773955e-05, -0.0010921325301751494, -7.033342626527883e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "choices", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Template38", "hole0": "Choice", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Choice", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template39", "hole0": "Health"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 32, 201, "Choice", "<EOS>", 239, 63, 205, "Health", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 52, 180, "Taunt", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Choice", "<EOS>", 239, 63, 205, "Attack", "<EOS>", 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeHealth(2)), Buff(Taunt())]), SelfSelector()), Choice(\n            Attack(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -5.488803297501974, "score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -1.8928890228271484, 0.0, -0.00066375732421875, -0.0011806488037109375, -0.0036965608596801758, -2.0265579223632812e-06, -0.005146026611328125, -1.9073486328125e-06, -5.7220458984375e-06, -0.11673426628112793, -0.00023697357391938567, -0.03773975372314453, -7.43865966796875e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.0066082654520869255, -4.6491513785440475e-06, -2.86102294921875e-05, -0.0001926422119140625, -1.52587890625e-05, -0.2053842544555664, -0.000347137451171875, -2.6702880859375e-05, -0.0003906485508196056, -2.3841855067985307e-07, -0.001272022258490324, -0.24467432498931885, 0.0, -0.0005646171048283577, -4.0531158447265625e-06, -0.1769275665283203, -0.0011234283447265625, -1.0614326000213623, -0.0001380355970468372, -0.000377655029296875, -1.9073486328125e-06, -0.10067931562662125, -3.933906555175781e-06, -2.09808349609375e-05, -1.9073486328125e-05, -2.288818359375e-05, -0.0001201629638671875, -0.0007694633677601814, -3.933906555175781e-06, -0.00095367431640625, -3.62396240234375e-05, -6.866455078125e-05, -0.01690574549138546, -0.0007902164361439645, -0.14227294921875, -0.0001735687255859375, -2.288818359375e-05, -3.814697265625e-06, -0.013716533780097961, -1.025196434056852e-05, -1.1444091796875e-05, -0.007171630859375, -7.05718994140625e-05, -0.0046329498291015625, -0.002140045166015625, -9.1552734375e-05, -0.003190852701663971, -0.00012444722233340144, -0.020038610324263573, -0.08720468729734421, -3.576278118089249e-07, -1.815205905586481e-06, -3.576278118089249e-07, -0.0058269500732421875, -1.52587890625e-05, -0.005010031629353762, -5.7220458984375e-06, -8.20159912109375e-05, -2.3722626792732626e-05, 0.0, -0.00017356858006678522, 0.0, -1.9073486328125e-06, -1.1429414749145508, -0.0034637451171875, 1.1920923270736239e-07, -3.075552376685664e-05, -0.0001111798919737339, -2.3841855067985307e-07, -0.00425528222694993, -1.1920928244535389e-07, -0.000370025634765625, -1.9073486328125e-06, -4.0531158447265625e-05, -6.556510470545618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "DRUID", "hole3": "choices", "hole1": 2, "hole0": "Anodized Robo Cub", "hole4": {"_type": "Template38", "hole0": "Choice", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Choice", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template39", "hole0": "Health"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}, {"_type": "Template25", "hole0": "Taunt"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AnodizedRoboCub", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "explodes", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, 2]:\n            <UNK> = explodes()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -3.3536185739745576, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.579637885093689, 0.0, -0.09932231903076172, -0.000370025634765625, -0.0093841552734375, -0.008839607238769531, -2.288818359375e-05, -0.0014011666644364595, -7.62939453125e-06, -0.000972747802734375, -0.0008373260498046875, -0.10751394927501678, 0.0, -0.2657747268676758, -0.00048065185546875, -0.3545888364315033, -1.9073486328125e-06, -0.04706096649169922, -0.021749496459960938, -0.001094818115234375, -3.814697265625e-06, -0.0023651123046875, -2.47955322265625e-05, -0.0004316568374633789, -5.960462772236497e-07, -0.009474754333496094, -8.96453857421875e-05, -0.20239615440368652, -0.02944270148873329, -0.0004062652587890625, -0.000202178955078125, -0.023714065551757812, 0.0, -0.0023514030035585165, -3.4570680327306036e-06, -0.027760863304138184, -1.9073486328125e-06, -0.0019893646240234375, -0.0017795562744140625, -1.9073486328125e-06, -1.072883515007561e-05, -1.9073486328125e-05, -0.000865936279296875, -5.7220458984375e-06, -0.00023853778839111328, -4.291534423828125e-06, -0.0001354217529296875, -0.000659942626953125, -3.24249267578125e-05, 0.0, -0.00012016295659122989, -8.106231689453125e-06, -0.000640869140625, -0.0001239776611328125, -9.5367431640625e-06, -9.1552734375e-05, 0.0, -5.841255187988281e-06, 0.0, -0.0011616945266723633, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "explodes"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "explodes", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, 2]:\n            <UNK> = explodes()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -3.89464597668902, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -1.1216214895248413, 0.0, -0.13416516780853271, 0.0, -2.2053680368117057e-05, 0.0, -2.15768777707126e-05, -3.24249267578125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.5497207641601562e-05, -0.06295299530029297, -0.00018310546875, -5.7220458984375e-06, -6.29425048828125e-05, -1.71661376953125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.075599670410156e-05, -9.72747802734375e-05, -0.3546428680419922, -0.0006694793701171875, -0.0046814680099487305, -0.00045549869537353516, -0.004815101623535156, -0.0028333663940429688, -0.06566940993070602, -0.21315598487854004, -0.003052704967558384, -0.0011234581470489502, 0.0, -0.11495018005371094, -0.0003681182861328125, -2.6702880859375e-05, 0.0, -0.5839160680770874, 0.0, -0.09969425201416016, -0.0003681182861328125, -0.009380340576171875, -0.008803367614746094, -2.288818359375e-05, -0.0013980693183839321, -7.62939453125e-06, -0.00096893310546875, -0.0008296966552734375, -0.10698893666267395, 0.0, -0.26482582092285156, -0.000476837158203125, -0.3529406487941742, -1.9073486328125e-06, -0.047379493713378906, -0.021814346313476562, -0.0010890960693359375, -3.814697265625e-06, -0.0023632049560546875, -2.47955322265625e-05, -0.00042879581451416016, -5.960462772236497e-07, -0.009481430053710938, -9.1552734375e-05, -0.201982319355011, -0.029509197920560837, -0.0004062652587890625, -0.0002040863037109375, -0.023710250854492188, 0.0, -0.002349144546315074, -3.4570680327306036e-06, -0.027780890464782715, -1.9073486328125e-06, -0.0019893646240234375, -0.0017852783203125, -1.9073486328125e-06, -1.072883515007561e-05, -1.9073486328125e-05, -0.000865936279296875, -5.7220458984375e-06, -0.00024044513702392578, -4.291534423828125e-06, -0.0001354217529296875, -0.000659942626953125, -3.24249267578125e-05, 0.0, -0.00012016295659122989, -8.106231689453125e-06, -0.000640869140625, -0.0001239776611328125, -9.5367431640625e-06, -9.1552734375e-05, 0.0, -5.841255187988281e-06, 0.0, -0.0011636018753051758, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "explodes"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        super().reveal()\n", "score": -4.404232425204356, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -2.6046628952026367, -0.001529693603515625, -0.0205535888671875, -5.7220458984375e-06, -0.2397012710571289, -1.1444091796875e-05, -2.6702815375756472e-05, -8.940695806813892e-06, -0.10035586357116699, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        super().reveal()\n", "score": -4.8914703005305284, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -1.1216214895248413, 0.0, -0.13416516780853271, 0.0, -2.2053680368117057e-05, 0.0, -2.15768777707126e-05, -3.24249267578125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.5497207641601562e-05, -0.06295299530029297, -0.00018310546875, -5.7220458984375e-06, -6.29425048828125e-05, -1.71661376953125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.075599670410156e-05, -9.72747802734375e-05, -0.3546428680419922, -0.0006694793701171875, -0.0046814680099487305, -0.00045549869537353516, -0.004815101623535156, -0.0028333663940429688, -0.06566940993070602, -0.21315598487854004, -0.003052704967558384, -0.0011234581470489502, 0.0, -2.558781623840332, -0.0015163421630859375, -0.020233154296875, -5.7220458984375e-06, -0.2387523651123047, -1.1444091796875e-05, -2.6702815375756472e-05, -8.940695806813892e-06, -0.09999728202819824, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "explodes", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, 2]:\n            <UNK> = explodes()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -5.173942263786188, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -2.432734727859497, 0.0, -0.08604607731103897, 0.0, -5.483576387632638e-05, -1.9073486328125e-06, -2.3365017113974318e-05, -2.86102294921875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.5497207641601562e-05, -0.07009601593017578, -0.0001697540283203125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.72747802734375e-05, -0.3599386215209961, -0.000675201416015625, -0.004725456237792969, -0.00047278404235839844, -0.004824638366699219, -0.00284576416015625, -0.06603419035673141, -0.21492791175842285, -0.003040063427761197, -0.001129060983657837, 0.0, -0.11835193634033203, -0.0003643035888671875, -2.6702880859375e-05, 0.0, -0.580065131187439, 0.0, -0.09967231750488281, -0.0003643035888671875, -0.009368896484375, -0.008868217468261719, -2.288818359375e-05, -0.0013972355518490076, -7.62939453125e-06, -0.00096893310546875, -0.00083160400390625, -0.10768122971057892, 0.0, -0.2649221420288086, -0.0004787445068359375, -0.3543533384799957, -1.9073486328125e-06, -0.0470733642578125, -0.021818161010742188, -0.00109100341796875, -3.814697265625e-06, -0.00235748291015625, -2.47955322265625e-05, -0.00043070316314697266, -5.960462772236497e-07, -0.009455680847167969, -8.96453857421875e-05, -0.20218804478645325, -0.029480071738362312, -0.0004062652587890625, -0.0002040863037109375, -0.023723602294921875, 0.0, -0.0023480718955397606, -3.4570680327306036e-06, -0.027770400047302246, -1.9073486328125e-06, -0.0019893646240234375, -0.0017833709716796875, -1.9073486328125e-06, -1.072883515007561e-05, -1.9073486328125e-05, -0.000865936279296875, -5.7220458984375e-06, -0.00024044513702392578, -4.291534423828125e-06, -0.0001354217529296875, -0.000659942626953125, -3.24249267578125e-05, 0.0, -0.00012016295659122989, -8.106231689453125e-06, -0.000640869140625, -0.0001239776611328125, -9.5367431640625e-06, -9.1552734375e-05, 0.0, -5.841255187988281e-06, 0.0, -0.0011616945266723633, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "explodes"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, 2]:\n            <UNK> = <UNK>()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -5.473680448364206, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.579637885093689, 0.0, -0.09932231903076172, -0.000370025634765625, -0.0093841552734375, -0.008839607238769531, -2.288818359375e-05, -0.0014011666644364595, -7.62939453125e-06, -0.000972747802734375, -0.0008373260498046875, -0.10751394927501678, 0.0, -0.2657747268676758, -0.00048065185546875, -0.3545888364315033, -1.9073486328125e-06, -0.04706096649169922, -0.021749496459960938, -0.001094818115234375, -3.814697265625e-06, -0.0023651123046875, -2.47955322265625e-05, -0.0004316568374633789, -5.960462772236497e-07, -0.009474754333496094, -8.96453857421875e-05, -2.322458028793335, -0.02944270148873329, -0.0004062652587890625, -0.000202178955078125, -0.023714065551757812, 0.0, -0.0023514030035585165, -3.4570680327306036e-06, -0.027760863304138184, -1.9073486328125e-06, -0.0019893646240234375, -0.0017795562744140625, -1.9073486328125e-06, -1.072883515007561e-05, -1.9073486328125e-05, -0.000865936279296875, -5.7220458984375e-06, -0.00023853778839111328, -4.291534423828125e-06, -0.0001354217529296875, -0.000659942626953125, -3.24249267578125e-05, 0.0, -0.00012016295659122989, -8.106231689453125e-06, -0.000640869140625, -0.0001239776611328125, -9.5367431640625e-06, -9.1552734375e-05, 0.0, -5.841255187988281e-06, 0.0, -0.0011616945266723633, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "Burrowing", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(Deathrattle(Summon(Burrowing()),\n                PlayerSelector()))\n", "score": -5.724051821781558, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -1.7922110557556152, -2.09808349609375e-05, -6.67572021484375e-05, -0.18428897857666016, -0.0008640289306640625, -0.10927685350179672, -5.948388570686802e-05, -0.345701664686203, -0.1192552000284195, -0.0004749298095703125, -0.0002307891845703125, -0.00469970703125, -2.6702880859375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "Burrowing"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "minion", "<EOS>", 238, 63, 205, "explodes", "Damage", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(minion(explodesDamage(), PlayerSelector()))\n", "score": -5.93798093258485, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -0.818270206451416, -0.1187582015991211, -0.000247955322265625, -0.00733184814453125, -1.33514404296875e-05, -0.44767045974731445, -1.2997843027114868, -5.0306298362556845e-05, -0.000453948974609375, -1.52587890625e-05, -0.07849705219268799, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "minion"}, "args": [{"_type": "Template39", "hole0": "explodesDamage"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "minion", "<EOS>", 238, 63, 205, "explodes", "<EOS>", 63, 205, "Turn", "Ended", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(minion(explodes(), TurnEnded()))\n", "score": -6.416304630534086, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -0.818270206451416, -0.1187582015991211, -0.000247955322265625, -0.00733184814453125, -1.33514404296875e-05, -0.44767045974731445, -1.5362130403518677, -0.034951210021972656, -0.0006618499755859375, -0.28386521339416504, -0.0014466046122834086, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "minion"}, "args": [{"_type": "Template39", "hole0": "explodes"}, {"_type": "Template39", "hole0": "TurnEnded"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "minion", "<EOS>", 238, 63, 205, "explodes", "Damage", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(minion(explodesDamage(), PlayerSelector()))\n", "score": -6.472126203035458, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -1.1216214895248413, 0.0, -0.13416516780853271, 0.0, -2.2053680368117057e-05, 0.0, -2.15768777707126e-05, -3.24249267578125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.5497207641601562e-05, -0.06295299530029297, -0.00018310546875, -5.7220458984375e-06, -6.29425048828125e-05, -1.71661376953125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.075599670410156e-05, -9.72747802734375e-05, -0.3546428680419922, -0.0006694793701171875, -0.0046814680099487305, -0.00045549869537353516, -0.004815101623535156, -0.0028333663940429688, -0.06566940993070602, -0.21315598487854004, -0.003052704967558384, -0.0011234581470489502, 0.0, -0.11495018005371094, -0.0003681182861328125, -2.6702880859375e-05, 0.0, -0.8710445165634155, -1.9073486328125e-06, -0.007168769836425781, -4.38690185546875e-05, -0.000392913818359375, 0.0, -0.00043773651123046875, 0.0, -0.04181265830993652, -1.9073486328125e-06, -0.00028228759765625, -0.001171112060546875, -7.62939453125e-06, -0.008394241333007812, 0.0, -0.5545504093170166, -3.576278118089249e-07, -0.1185382604598999, -5.817396959173493e-05, -0.0061092376708984375, -0.003253936767578125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -0.8180603981018066, -0.11867332458496094, -0.000247955322265625, -0.0073337554931640625, -1.33514404296875e-05, -0.4475037753582001, -1.300260305404663, -5.0306298362556845e-05, -0.000453948974609375, -1.52587890625e-05, -0.07849514484405518, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "minion"}, "args": [{"_type": "Template39", "hole0": "explodesDamage"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Buff", "Until", "<EOS>", 238, 63, 205, "explodes", "Attack", "<EOS>", 63, 205, "Turn", "Ended", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(BuffUntil(explodesAttack(), TurnEnded()))\n", "score": -6.616723911327853, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -1.957674503326416, -0.0016906261444091797, 0.0, -0.01679229736328125, -0.008722305297851562, -6.866455078125e-05, -0.0560673251748085, -1.362892508506775, -1.1920922133867862e-06, -0.000293731689453125, -1.1444091796875e-05, -0.043910738080739975, -0.0017238855361938477, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template39", "hole0": "explodesAttack"}, {"_type": "Template39", "hole0": "TurnEnded"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "<UNK>", "draw", "<EOS>", "0", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", 63, 205, "Turn", "Ended", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(AuraUntil(<UNK>draw(0), PlayerSelector(),\n                TurnEnded()))\n", "score": -6.765556209212463, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -1.4856171607971191, -0.020925521850585938, -1.9073486328125e-06, -0.24573135375976562, -0.007079124450683594, -9.5367431640625e-06, -0.004867605399340391, -0.07924512028694153, -0.12179519236087799, -0.5463647842407227, -2.384185791015625e-06, -0.0001544952392578125, -1.9073486328125e-06, -0.11616729199886322, -7.867813110351562e-06, -1.9073486328125e-06, -0.4528312683105469, -3.814697265625e-06, -0.5137159824371338, -0.004157293122261763, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "<UNK>draw", "hole1": 0}, {"_type": "Template39", "hole0": "PlayerSelector"}, {"_type": "Template39", "hole0": "TurnEnded"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "<UNK>", "draw", "<EOS>", "0", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", 63, 205, "Turn", "Ended", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(AuraUntil(<UNK>draw(0), PlayerSelector(),\n                TurnEnded()))\n", "score": -7.3006676201978, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -1.1216214895248413, 0.0, -0.13416516780853271, 0.0, -2.2053680368117057e-05, 0.0, -2.15768777707126e-05, -3.24249267578125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.5497207641601562e-05, -0.06295299530029297, -0.00018310546875, -5.7220458984375e-06, -6.29425048828125e-05, -1.71661376953125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.075599670410156e-05, -9.72747802734375e-05, -0.3546428680419922, -0.0006694793701171875, -0.0046814680099487305, -0.00045549869537353516, -0.004815101623535156, -0.0028333663940429688, -0.06566940993070602, -0.21315598487854004, -0.003052704967558384, -0.0011234581470489502, 0.0, -0.11495018005371094, -0.0003681182861328125, -2.6702880859375e-05, 0.0, -0.8710445165634155, -1.9073486328125e-06, -0.007168769836425781, -4.38690185546875e-05, -0.000392913818359375, 0.0, -0.00043773651123046875, 0.0, -0.04181265830993652, -1.9073486328125e-06, -0.00028228759765625, -0.001171112060546875, -7.62939453125e-06, -0.008394241333007812, 0.0, -0.5545504093170166, -3.576278118089249e-07, -0.1185382604598999, -5.817396959173493e-05, -0.0061092376708984375, -0.003253936767578125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -1.4864134788513184, -0.020949363708496094, -1.9073486328125e-06, -0.2458934783935547, -0.007080078125, -9.5367431640625e-06, -0.00487081054598093, -0.07926209270954132, -0.12171962112188339, -0.5463290214538574, -2.384185791015625e-06, -0.0001544952392578125, -1.9073486328125e-06, -0.116103395819664, -7.867813110351562e-06, -1.9073486328125e-06, -0.4528827667236328, -3.814697265625e-06, -0.5138170719146729, -0.004157293122261763, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "<UNK>draw", "hole1": 0}, {"_type": "Template39", "hole0": "PlayerSelector"}, {"_type": "Template39", "hole0": "TurnEnded"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "<UNK>", "draw", "<EOS>", "0", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for minion in player.minions:\n            deathrattle.<UNK>(AuraUntil(<UNK>draw(0), PlayerSelector(),\n                SelfSelector()))\n", "score": -7.9291108892786895, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.8763879537582397, -1.9073486328125e-06, -0.0071849822998046875, -4.38690185546875e-05, -0.0003795623779296875, 0.0, -0.0004405975341796875, 0.0, -0.04161238670349121, -1.9073486328125e-06, -0.00028228759765625, -0.0011730194091796875, -7.62939453125e-06, -0.008403778076171875, 0.0, -0.5548807382583618, -3.576278118089249e-07, -0.1183847188949585, -5.626662095892243e-05, -0.006130218505859375, -0.0032672882080078125, -6.4849853515625e-05, -0.0001888275146484375, 0.0, -1.4856171607971191, -0.020925521850585938, -1.9073486328125e-06, -0.24573135375976562, -0.007079124450683594, -9.5367431640625e-06, -0.004867605399340391, -0.07924512028694153, -0.12179519236087799, -0.5463647842407227, -2.384185791015625e-06, -0.0001544952392578125, -1.9073486328125e-06, -0.11616729199886322, -7.867813110351562e-06, -1.9073486328125e-06, -0.4528312683105469, -3.814697265625e-06, -1.6814053058624268, -2.0623205273295753e-05, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "<UNK>draw", "hole1": 0}, {"_type": "Template39", "hole0": "PlayerSelector"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "minion", "<EOS>", 238, 63, 205, "explodes", "Damage", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, player.minions]:\n            deathrattle.<UNK>(minion(explodesDamage(), PlayerSelector()))\n", "score": -8.123034898928637, "score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.579637885093689, 0.0, -0.09932231903076172, -0.000370025634765625, -0.0093841552734375, -0.008839607238769531, -2.288818359375e-05, -0.0014011666644364595, -7.62939453125e-06, -0.000972747802734375, -0.0008373260498046875, -0.10751394927501678, 0.0, -1.564438819885254, -0.00200653076171875, -5.53131103515625e-05, 0.0, -0.0053594112396240234, -5.7220458984375e-06, -0.02220916375517845, -1.9073486328125e-06, -0.028066635131835938, -0.0070781707763671875, -1.71661376953125e-05, -0.00173187255859375, 0.0, -0.7868666648864746, -1.311301275563892e-06, -0.1926039457321167, -8.857242937665433e-05, -0.012083053588867188, -0.020361900329589844, -0.0001049041748046875, -0.002872467041015625, 0.0, -0.914657473564148, -0.07835590839385986, -0.0003376007080078125, -0.0019245147705078125, -7.62939453125e-06, -0.9604511260986328, -1.1064703464508057, -2.5153151000267826e-05, -0.00156402587890625, -2.288818359375e-05, -0.056960105895996094, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Burrowing Mine", "hole3": "EPIC", "hole2": "ALL", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BurrowingMine", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ImportFrom", "module": "hearthbreaker.cards.minions.druid", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "deathrattle"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "minion"}, "args": [{"_type": "Template39", "hole0": "explodesDamage"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole1": "<UNK>"}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}}], "hole4": "player"}}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -1.1608427414684996, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -0.019013404846191406, 0.0, -0.00034332275390625, -0.0003833770751953125, -0.2895417809486389, 0.0, -0.003101348876953125, -7.62939453125e-06, -0.0040340423583984375, -1.9073486328125e-06, -3.814697265625e-05, -1.33514404296875e-05, -0.0008869171142578125, -2.86102294921875e-05, -0.003070831298828125, 0.0, -0.0002155303955078125, -0.004154205322265625, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000247955322265625, -0.00012969970703125, -8.20159912109375e-05, -0.0041866302490234375, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006151199340820312, -1.1920928244535389e-07, -0.0013772249221801758, -1.9073486328125e-06, 0.0, -0.000759124755859375, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020229618530720472, 0.0, -0.004864593502134085, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -1.4576682691476748, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.9145411252975464, -0.0002613067626953125, -0.02610170841217041, 0.0, -0.0016769170761108398, -4.780292510986328e-05, -5.53131103515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0005512237548828125, 0.0, -0.0005645751953125, -5.7220458984375e-06, -0.008915901184082031, -0.0001277923583984375, -0.018502235412597656, 0.0, -0.0003414154052734375, -0.0003814697265625, -0.2902457118034363, 0.0, -0.0031309127807617188, -7.62939453125e-06, -0.00406646728515625, -1.9073486328125e-06, -4.00543212890625e-05, -1.33514404296875e-05, -0.0008945465087890625, -2.86102294921875e-05, -0.0031042098999023438, 0.0, -0.0002155303955078125, -0.004288673400878906, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.0002460479736328125, -0.00012969970703125, -8.20159912109375e-05, -0.00421142578125, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006160736083984375, -1.1920928244535389e-07, -0.0013772249221801758, -1.9073486328125e-06, 0.0, -0.0007572174072265625, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020229618530720472, 0.0, -0.004864831455051899, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "SHAMAN", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -2.150422846010663, "score_history": [-1.9041328430175781, -0.0003757476806640625, -0.0004240567213855684, -1.0490362910786644e-05, -3.211386501789093e-05, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -0.10516548156738281, -5.91278076171875e-05, -4.291525328881107e-06, 0.0, -1.1920926112907182e-07, -1.1920928244535389e-07, -0.049211740493774414, 0.0, -0.0067642927169799805, -1.1920928244535389e-07, -6.866455078125e-05, -1.9073486328125e-06, -0.01089431345462799, -3.576278118089249e-07, -0.0005910395993851125, 0.0, -4.029273986816406e-05, 0.0, -0.0001964569091796875, -9.34600830078125e-05, -3.814697265625e-06, -5.364412118069595e-06, -0.0016880035400390625, -3.814697265625e-06, -9.5367431640625e-06, -1.33514404296875e-05, -3.24249267578125e-05, -9.5367431640625e-06, 0.0, -0.0007687807083129883, 0.0, -7.62939453125e-06, 0.0, -5.14984130859375e-05, 0.0, -6.31808916295995e-06, -2.47955322265625e-05, -0.06120777130126953, -0.00026702880859375, -0.0001506805419921875, -2.09808349609375e-05, -0.0002574920654296875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000728607177734375, -1.1920928244535389e-07, -0.0012017488479614258, -1.9073486328125e-06, -1.9073486328125e-06, -0.000713348388671875, -9.5367431640625e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.00020599155686795712, 0.0, -0.0048036035150289536, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "overload", "hole1": 2, "hole0": "Crackle", "hole4": {"_type": "Num", "n": 1}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Crackle", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "2", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -2.334874953863604, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -0.019013404846191406, 0.0, -0.00034332275390625, -0.0003833770751953125, -1.458379864692688, 0.0, -0.000762939453125, -4.1961669921875e-05, -0.014743804931640625, -1.9073486328125e-06, -6.866455078125e-05, -7.62939453125e-06, -0.0011444091796875, -2.6702880859375e-05, -0.0008182525634765625, 0.0, -0.000213623046875, -0.0035314559936523438, -3.814697265625e-06, -3.4332275390625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.0003910064697265625, -0.0001735687255859375, -9.918212890625e-05, -0.003383636474609375, -3.0517578125e-05, -1.52587890625e-05, 0.0, -0.0002785921096801758, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.410743713378906e-06, -1.52587890625e-05, -8.96453857421875e-05, -6.4849853515625e-05, -0.0001773834228515625, -1.1444091796875e-05, -0.000392913818359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006208419799804688, -1.1920928244535389e-07, -0.0014001131057739258, -1.9073486328125e-06, 0.0, -0.0008106231689453125, -9.5367431640625e-06, -6.29425048828125e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00019383248582016677, 0.0, -0.004838308785110712, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 2}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "2", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -2.6274109736623217, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.9145411252975464, -0.0002613067626953125, -0.02610170841217041, 0.0, -0.0016769170761108398, -4.780292510986328e-05, -5.53131103515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0005512237548828125, 0.0, -0.0005645751953125, -5.7220458984375e-06, -0.008915901184082031, -0.0001277923583984375, -0.018502235412597656, 0.0, -0.0003414154052734375, -0.0003814697265625, -1.4548581838607788, 0.0, -0.0007781982421875, -4.38690185546875e-05, -0.014753341674804688, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -0.001155853271484375, -2.6702880859375e-05, -0.0008258819580078125, 0.0, -0.000213623046875, -0.003673553466796875, -3.814697265625e-06, -3.4332275390625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.00038909912109375, -0.000171661376953125, -9.918212890625e-05, -0.00339508056640625, -3.0517578125e-05, -1.52587890625e-05, 0.0, -0.0002785921096801758, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.410743713378906e-06, -1.52587890625e-05, -8.96453857421875e-05, -6.4849853515625e-05, -0.0001773834228515625, -1.1444091796875e-05, -0.000392913818359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006208419799804688, -1.1920928244535389e-07, -0.0014001131057739258, -1.9073486328125e-06, 0.0, -0.0008106231689453125, -9.5367431640625e-06, -6.29425048828125e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00019395168055780232, 0.0, -0.0048384275287389755, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "SHAMAN", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 2}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -4.343476228510539, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -3.237173318862915, -1.9073486328125e-06, -0.006484508514404297, -2.86102294921875e-05, -2.6702880859375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.0004100799560546875, 0.0, -0.0006313323974609375, -5.7220458984375e-06, -0.008664131164550781, -0.0001392364501953125, -0.019422292709350586, 0.0, -0.0003376007080078125, -0.00038909912109375, -0.2819007933139801, 0.0, -0.0030965805053710938, -7.62939453125e-06, -0.0039501190185546875, -1.9073486328125e-06, -4.00543212890625e-05, -1.33514404296875e-05, -0.000904083251953125, -3.0517578125e-05, -0.0030984878540039062, 0.0, -0.0002193450927734375, -0.004250526428222656, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000247955322265625, -0.00012969970703125, -8.20159912109375e-05, -0.004138946533203125, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002938508987426758, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.000213623046875, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006160736083984375, -1.1920928244535389e-07, -0.0013791322708129883, -1.9073486328125e-06, 0.0, -0.000759124755859375, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020229618530720472, 0.0, -0.004865664057433605, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "FREE", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -4.418090099548849, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -3.891496419906616, -4.1961669921875e-05, -0.013152480125427246, 0.0, -0.0014296770095825195, -4.780292510986328e-05, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0005664825439453125, 0.0, -0.000659942626953125, -5.7220458984375e-06, -0.008846282958984375, -0.0001239776611328125, -0.019003629684448242, 0.0, -0.0003414154052734375, -0.00038909912109375, -0.2866475284099579, 0.0, -0.003082275390625, -7.62939453125e-06, -0.0041217803955078125, -1.9073486328125e-06, -4.00543212890625e-05, -1.33514404296875e-05, -0.000888824462890625, -3.0517578125e-05, -0.0030994415283203125, 0.0, -0.000217437744140625, -0.0042171478271484375, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000244140625, -0.0001277923583984375, -8.20159912109375e-05, -0.00421905517578125, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.2479248046875e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006160736083984375, -1.1920928244535389e-07, -0.0013791322708129883, -1.9073486328125e-06, 0.0, -0.0007572174072265625, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020241538004484028, 0.0, -0.0048667388036847115, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "WARLOCK", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -4.810635561218064, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -4.269326210021973, -1.33514404296875e-05, -0.02432084083557129, 0.0, -0.0017145872116088867, -4.208087921142578e-05, -4.38690185546875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0006256103515625, -5.7220458984375e-06, -0.008520126342773438, -0.0001277923583984375, -0.018916010856628418, 0.0, -0.0003414154052734375, -0.0003833770751953125, -0.2902713716030121, 0.0, -0.00311279296875, -7.62939453125e-06, -0.0040912628173828125, -1.9073486328125e-06, -4.00543212890625e-05, -1.33514404296875e-05, -0.0008869171142578125, -3.0517578125e-05, -0.003124237060546875, 0.0, -0.000217437744140625, -0.004391670227050781, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000244140625, -0.0001277923583984375, -8.0108642578125e-05, -0.004215240478515625, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006160736083984375, -1.1920928244535389e-07, -0.0013791322708129883, -1.9073486328125e-06, 0.0, -0.000759124755859375, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020229618530720472, 0.0, -0.0048667388036847115, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "WARRIOR", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "6", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=6)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -4.8562520985360464, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -0.019013404846191406, 0.0, -0.00034332275390625, -0.0003833770751953125, -3.983736991882324, 0.0, -0.0013408660888671875, -1.71661376953125e-05, -0.0047206878662109375, -1.1444091796875e-05, -9.34600830078125e-05, -2.6702880859375e-05, -0.00058746337890625, -3.0517578125e-05, -0.0035505294799804688, 0.0, -0.00016021728515625, -0.007134437561035156, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -4.0531158447265625e-06, -0.0002288818359375, -0.0001201629638671875, -7.62939453125e-05, -0.0032749176025390625, -3.4332275390625e-05, -1.71661376953125e-05, 0.0, -0.0003072023391723633, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.7738037109375e-05, -7.43865966796875e-05, -0.000213623046875, -1.1444091796875e-05, -0.000385284423828125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000621795654296875, -1.1920928244535389e-07, -0.0013924837112426758, -1.9073486328125e-06, 0.0, -0.0007762908935546875, -9.5367431640625e-06, -6.4849853515625e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020050803141202778, 0.0, -0.004874248988926411, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 6}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "6", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=6)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.168122076975109, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.9145411252975464, -0.0002613067626953125, -0.02610170841217041, 0.0, -0.0016769170761108398, -4.780292510986328e-05, -5.53131103515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0005512237548828125, 0.0, -0.0005645751953125, -5.7220458984375e-06, -0.008915901184082031, -0.0001277923583984375, -0.018502235412597656, 0.0, -0.0003414154052734375, -0.0003814697265625, -3.999422311782837, 0.0, -0.0013599395751953125, -1.71661376953125e-05, -0.0047130584716796875, -1.1444091796875e-05, -9.5367431640625e-05, -2.6702880859375e-05, -0.0005950927734375, -3.0517578125e-05, -0.0035867691040039062, 0.0, -0.00016021728515625, -0.0073986053466796875, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -4.0531158447265625e-06, -0.0002269744873046875, -0.0001201629638671875, -7.62939453125e-05, -0.0032787322998046875, -3.4332275390625e-05, -1.71661376953125e-05, 0.0, -0.0003072023391723633, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.7738037109375e-05, -7.62939453125e-05, -0.000213623046875, -1.1444091796875e-05, -0.000385284423828125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006227493286132812, -1.1920928244535389e-07, -0.0013905763626098633, -1.9073486328125e-06, 0.0, -0.0007762908935546875, -9.5367431640625e-06, -6.4849853515625e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020050803141202778, 0.0, -0.004874606151133776, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "SHAMAN", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 6}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.494209908951163, "score_history": [-1.9041328430175781, -0.0003757476806640625, -0.0004240567213855684, -1.0490362910786644e-05, -3.211386501789093e-05, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -0.10516548156738281, -5.91278076171875e-05, -4.291525328881107e-06, 0.0, -1.1920926112907182e-07, -1.1920928244535389e-07, -3.2728474140167236, -3.576277322281385e-06, -0.12606847286224365, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -0.011458398774266243, -2.3841855067985307e-07, -0.0005223751068115234, 0.0, -4.029273986816406e-05, 0.0, -0.00019073486328125, -8.7738037109375e-05, -3.814697265625e-06, -5.483620952873025e-06, -0.00174713134765625, -3.814697265625e-06, -9.5367431640625e-06, -1.33514404296875e-05, -3.24249267578125e-05, -9.5367431640625e-06, 0.0, -0.0007497072219848633, 0.0, -7.62939453125e-06, 0.0, -5.14984130859375e-05, 0.0, -6.31808916295995e-06, -2.47955322265625e-05, -0.06147956848144531, -0.0002689361572265625, -0.000152587890625, -2.288818359375e-05, -0.000255584716796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0007295608520507812, -1.1920928244535389e-07, -0.0011998414993286133, -1.9073486328125e-06, -1.9073486328125e-06, -0.0007114410400390625, -9.5367431640625e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.00020622994634322822, 0.0, -0.0048064664006233215, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "MAGE", "hole3": "overload", "hole1": 2, "hole0": "Crackle", "hole4": {"_type": "Num", "n": 1}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Crackle", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "2", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.549647533589436, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -3.237173318862915, -1.9073486328125e-06, -0.006484508514404297, -2.86102294921875e-05, -2.6702880859375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.0004100799560546875, 0.0, -0.0006313323974609375, -5.7220458984375e-06, -0.008664131164550781, -0.0001392364501953125, -0.019422292709350586, 0.0, -0.0003376007080078125, -0.00038909912109375, -1.4836045503616333, 0.0, -0.000789642333984375, -4.38690185546875e-05, -0.013933181762695312, -1.9073486328125e-06, -7.2479248046875e-05, -7.62939453125e-06, -0.0011768341064453125, -2.6702880859375e-05, -0.0008287429809570312, 0.0, -0.0002155303955078125, -0.0036134719848632812, -3.814697265625e-06, -3.62396240234375e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.00038909912109375, -0.000171661376953125, -9.918212890625e-05, -0.003322601318359375, -3.0517578125e-05, -1.52587890625e-05, 0.0, -0.0002766847610473633, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.410743713378906e-06, -1.52587890625e-05, -8.96453857421875e-05, -6.4849853515625e-05, -0.00017547607421875, -1.1444091796875e-05, -0.000392913818359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000621795654296875, -1.1920928244535389e-07, -0.0014020204544067383, -1.9073486328125e-06, 0.0, -0.000812530517578125, -9.5367431640625e-06, -6.29425048828125e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00019383248582016677, 0.0, -0.004837591201066971, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "FREE", "hole8": {"_type": "Num", "n": 2}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "buffs", "<EOS>", 19, 129, 237, 52, 181, "Mana", "Change", "<EOS>", 238, 55, 185, "Count", "<EOS>", 21, 134, "Dead", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 64, 222, 99, 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=\n            BothPlayer())), -1))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.8363254087084755, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -4.59425163269043, -1.9073486328125e-06, -0.08778190612792969, -1.71661376953125e-05, -0.0001735687255859375, -6.67572021484375e-05, -0.002529144287109375, -0.014260530471801758, -0.0004316568374633789, -2.288818359375e-05, -0.004565238952636719, -0.06721115112304688, -0.007407188415527344, -0.039372801780700684, -5.7220458984375e-06, -0.0001316070556640625, 0.0, -0.027084708213806152, -0.008435368537902832, -2.09808349609375e-05, -1.71661376953125e-05, -0.006694793701171875, -2.47955322265625e-05, -1.9073486328125e-06, -0.000885009765625, 0.0, -0.00014495849609375, -9.5367431640625e-06, -0.0001068115234375, -0.0001735687255859375, 0.0, -0.06954193115234375, -9.34600830078125e-05, -0.0001373291015625, -1.1444091796875e-05, -7.05718994140625e-05, -0.00028795268735848367, 0.0, -0.03294944763183594, -6.866455078125e-05, -0.0002384185791015625, -3.24249267578125e-05, -0.000156402587890625, -6.103515625e-05, -0.00037384033203125, -5.14984130859375e-05, -0.004456639289855957, 0.0, -0.0003490447998046875, -0.03248119354248047, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-06, -9.894371032714844e-06, -0.000141143798828125, -5.7220458984375e-05, -0.000102996826171875, -0.0012264251708984375, -2.288818359375e-05, -1.71661376953125e-05, 0.0, -0.00022339820861816406, 0.0, -1.52587890625e-05, 0.0, -5.91278076171875e-05, 0.0, -4.88758041683468e-06, -1.52587890625e-05, -8.20159912109375e-05, -0.000110626220703125, -0.0001983642578125, -1.33514404296875e-05, -0.0003814697265625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006866455078125, -1.1920928244535389e-07, -0.0015126466751098633, -1.9073486328125e-06, 0.0, -0.0007762908935546875, -9.5367431640625e-06, -6.4849853515625e-05, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -0.00020420340297278017, 0.0, -0.0049315039068460464, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "List", "elts": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole1": {"_type": "Name", "id": "DeadMinionSelector"}}, {"_type": "UnaryOp", "operand": {"_type": "Num", "n": 1}, "op": {"_type": "USub"}}]}]}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "buffs"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}, {"choice_history": [70, 149, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 82, 121, 17, 113, 13, 103, 21, 134, "player", "<EOS>", "cards_played", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>", 249, 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.damage(player.effective_spell_damage(6), self)\n        else:\n            self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.904936188759002, "score_history": [-1.9041328430175781, -0.0003757476806640625, -0.0004240567213855684, -1.0490362910786644e-05, -3.211386501789093e-05, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -0.10516548156738281, -5.91278076171875e-05, -4.291525328881107e-06, 0.0, -1.1920926112907182e-07, -1.1920928244535389e-07, -0.049211740493774414, 0.0, -0.0067642927169799805, -1.1920928244535389e-07, -6.866455078125e-05, -1.9073486328125e-06, -0.01089431345462799, -3.576278118089249e-07, -0.0005910395993851125, 0.0, -4.029273986816406e-05, 0.0, -0.0001964569091796875, -9.34600830078125e-05, -3.814697265625e-06, -5.364412118069595e-06, -0.0016880035400390625, -3.814697265625e-06, -9.5367431640625e-06, -1.33514404296875e-05, -3.24249267578125e-05, -9.5367431640625e-06, 0.0, -0.0007687807083129883, 0.0, -7.62939453125e-06, 0.0, -5.14984130859375e-05, 0.0, -6.31808916295995e-06, -2.47955322265625e-05, -3.045609474182129, -0.0007686614990234375, -0.013677597045898438, -6.866455078125e-05, -0.000263214111328125, -1.9073486328125e-05, -0.000904083251953125, -1.9073486328125e-06, -0.0018531084060668945, 0.0, -0.28498053550720215, -1.1920928244535389e-07, -0.000263214111328125, -0.08484649658203125, -0.0001583099365234375, -1.52587890625e-05, -1.52587890625e-05, -0.0009217745973728597, -2.682209014892578e-05, -5.14984130859375e-05, -0.34746646881103516, -0.000179290771484375, -0.00138092041015625, 0.0, -3.0517578125e-05, 0.0, -0.0035480260848999023, 0.0, -0.001705169677734375, 0.0, -0.001117706298828125, -1.1444091796875e-05, -3.814697265625e-06, -0.000728607177734375, -3.814697265625e-05, -2.86102294921875e-05, 0.0, -3.24249267578125e-05, 0.0, -0.00012755353236570954, 0.0, -0.00522649846971035, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.62939453125e-06, -0.00022125244140625, -2.47955322265625e-05, -0.0001125335693359375, 0.0, -0.0022068023681640625, 0.0, -0.0003508329391479492, 0.0, -0.0004711151123046875, -3.576278118089249e-07, -0.014790534973144531, -1.9073486328125e-06, -1.9073486328125e-06, -0.0023956298828125, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0003774120705202222, 0.0, -0.006978604942560196, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "SHAMAN", "hole3": "overload", "hole1": 2, "hole0": "Crackle", "hole4": {"_type": "Num", "n": 1}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Crackle", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "If", "orelse": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 6, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "test": {"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "cards_played"}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "hole4": "player"}}, {"choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -8.643673601764007, "score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -0.019013404846191406, 0.0, -0.00034332275390625, -0.0003833770751953125, -0.2895417809486389, 0.0, -0.003101348876953125, -7.62939453125e-06, -0.0040340423583984375, -1.9073486328125e-06, -3.814697265625e-05, -1.33514404296875e-05, -0.0008869171142578125, -2.86102294921875e-05, -0.003070831298828125, 0.0, -0.0002155303955078125, -0.004154205322265625, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000247955322265625, -0.00012969970703125, -8.20159912109375e-05, -0.0041866302490234375, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006151199340820312, -1.1920928244535389e-07, -7.463150978088379, 0.0, -0.017831802368164062, -0.004843711853027344, -0.0002574920654296875, -0.0040702782571315765, -2.4795524950604886e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole8": {"_type": "Num", "n": 1}, "hole5": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "hole1": 2, "hole0": "Crackle", "hole6": "find_spell_target", "hole4": "target_func", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -0.21210727330787194, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -0.009990692138671875, -1.1444091796875e-05, -0.0001354217529296875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.08259010314941406, 0.0, -0.01235113199800253, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -3.1950877821308197, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -0.009990692138671875, -1.1444091796875e-05, -0.0001354217529296875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -3.0719175338745117, -7.62939453125e-06, -0.0059965807013213634, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -3.7828492583010913, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -0.009990692138671875, -1.1444091796875e-05, -0.0001354217529296875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -3.657588005065918, -1.9073486328125e-06, -0.008093307726085186, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_heal_power", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.563922311668513, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -3.114935874938965, -3.0517578125e-05, -0.00029754638671875, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -0.8374948501586914, 0.0, -9.34600830078125e-05, -0.002086639404296875, -1.9073486328125e-06, -0.00286865234375, -8.58306884765625e-05, -8.20159912109375e-05, 0.0, -0.0014591217041015625, 0.0, -0.3967398703098297, -1.1920928244535389e-07, -0.0070362091064453125, -0.06992053985595703, -0.00054931640625, -0.044769287109375, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.1920928244535389e-07, -0.013720273971557617, 0.0, -0.0101165771484375, -1.9073486328125e-06, -3.62396240234375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_heal_power"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_max_health"}]}, {"_type": "Name", "id": "self"}], "hole1": "heal"}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "score": -4.76421439230932, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -4.618885040283203, -0.000148773193359375, -0.009657859802246094, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -8.0108642578125e-05, -5.7220458984375e-06, -2.47955322265625e-05, 0.0, -0.028398871421813965, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "bounce"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n", "score": -5.00890445292486, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -0.009990692138671875, -1.1444091796875e-05, -0.0001354217529296875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.08259010314941406, 0.0, -4.80914831161499, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -5.0768385933714555, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -3.114935874938965, -3.0517578125e-05, -0.00029754638671875, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -1.6639318466186523, 0.0, -0.00011444091796875, -0.19392013549804688, -0.0014190673828125, -0.040470704436302185, -0.0002450941829010844], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.divine_shield)\n", "score": -5.524952407484157, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -3.114935874938965, -3.0517578125e-05, -0.00029754638671875, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -1.4320707321166992, 0.0, -0.08461570739746094, -0.008044242858886719, -6.29425048828125e-05, -0.0015277862548828125, 0.0, -5.91278076171875e-05, 0.0, -0.028629302978515625, -1.9073486328125e-06, -0.0006275177001953125, -2.3841855067985307e-07, -0.7925755977630615, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "divine_shield"}], "hole1": "increase_health"}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -5.6497919168668815, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -5.441850185394287, -3.814697265625e-06, -6.29425048828125e-05, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.00010180473327636719, 0.0, -0.00014495849609375, -5.7220458984375e-06, -0.00027692317962646484, -3.576278118089249e-07, -0.003753662109375, -0.0001354217529296875, -9.918212890625e-05, -0.00030040740966796875, -9.536738616588991e-07, -0.0007381439208984375, -7.62939453125e-06, -5.7220458984375e-05, 0.0, -7.62939453125e-06, 0.0, -0.0038738250732421875, -1.1444091796875e-05, -8.821487426757812e-05, -5.7220458984375e-06, -0.004067420959472656, 0.0, -6.079673767089844e-06, 0.0, -1.9669532775878906e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.384185791015625e-06, -1.8000473573920317e-05, -0.023895263671875, -2.288818359375e-05, -0.0001220703125, -0.0034084320068359375, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -3.3140084269689396e-05, 0.0, -3.170967102050781e-05, 0.0, -0.00011527538299560547, -5.7220458984375e-06, -1.4185901818564162e-05, -1.9073486328125e-06, -0.04635810852050781, -5.7220458984375e-06, -0.010599136352539062, -1.33514404296875e-05, -0.0001430511474609375, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.08321154117584229, 0.0, -0.01200648583471775, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "self", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.other_player.draw()\n        self.target.bounce()\n", "score": -6.003923165107025, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -3.8170528411865234, -2.47955322265625e-05, -1.9073486328125e-06, -0.0070343017578125, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -5.996118488837965e-05, 0.0, -2.0384788513183594e-05, 0.0, -6.330013275146484e-05, -5.7220458984375e-06, -1.0609622222546022e-05, -1.9073486328125e-06, -0.11952781677246094, -0.0001773834228515625, -0.000274658203125, -3.0517578125e-05, -3.814697265625e-06, 0.0, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.8572683334350586, -1.9073486328125e-06, -0.011140823364257812, -0.0024709701538085938, -2.288818359375e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.06787681579589844, -9.5367431640625e-06, -0.00107574462890625, -3.814697265625e-06, -0.29079627990722656, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.41970157623291016, 0.0, -0.013594985008239746, 0.0, -0.026685349643230438, 0.0, -0.14397144317626953, -1.52587890625e-05, -0.0007381439208984375, -1.9073486328125e-05, -0.06615257263183594, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.02083873748779297, -1.9073486328125e-06, -0.000202178955078125, 0.0, -0.10272431373596191, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "self"}], "hole1": "die"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "hole1": "draw"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "bounce"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -7.513811235674467, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -6.686455726623535, -0.0004863739013671875, -1.52587890625e-05, -0.0001018001203192398, 0.0, -7.378915324807167e-05, -1.9073486328125e-06, -0.6292324066162109, -0.0002918243408203125, 0.0, -1.3112935448589269e-05, -5.137920379638672e-05, -3.731181277544238e-05, -3.814697265625e-06, -6.103515625e-05, 0.0, -7.033322617644444e-06, 0.0, -0.000339508056640625, 0.0, -1.9073486328125e-06, 0.0, -0.00027120113372802734, -1.9073486328125e-06, -0.004472493659704924, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.00012791156768798828, 0.0, -0.000362396240234375, -1.1444091796875e-05, -0.00017762184143066406, -2.3841855067985307e-07, -0.0032235383987426758, 0.0, -0.0001835822913562879, 0.0, -0.0002727508544921875, -5.7220458984375e-06, -2.861022494471399e-06, -1.549711487314198e-05, -0.0055904388427734375, -1.1444091796875e-05, -0.0001926422119140625, -0.001300811767578125, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -5.221339233685285e-05, 0.0, -0.00024580955505371094, 0.0, -0.0009254217147827148, -3.814697265625e-06, -1.9669500034069642e-05, -3.814697265625e-06, -0.01163482666015625, -3.814697265625e-06, -0.009494781494140625, -1.52587890625e-05, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -5.340576171875e-05, 0.0, -0.14701497554779053, 0.0, -0.01027692947536707, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=BothPlayer())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -7.833034858678381, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -7.410043716430664, -0.000179290771484375, -0.18767547607421875, -0.005693316459655762, 0.0, -0.010374891571700573, 0.0, -4.684923987952061e-05, 0.0, -0.0001811981201171875, -3.62396240234375e-05, -7.271765298355604e-06, -1.4066622497921344e-05, -0.020477294921875, -1.9073486328125e-05, -0.000179290771484375, -0.0026264190673828125, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -3.039830335183069e-05, 0.0, -2.372264862060547e-05, 0.0, -0.0001308917999267578, -3.814697265625e-06, -1.3828268492943607e-05, -1.9073486328125e-06, -0.05196571350097656, -5.7220458984375e-06, -0.010393142700195312, -1.52587890625e-05, -0.000148773193359375, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -1.71661376953125e-05, 0.0, -0.09880387783050537, 0.0, -0.01072097010910511, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "self", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        self.increase_health(1)\n        player.draw()\n", "score": -8.144333902389796, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -6.133679389953613, -0.10172653198242188, -0.6492795944213867, -1.1444091796875e-05, -0.03455352783203125, -1.9073486328125e-06, -0.45351314544677734, 0.0, -0.035042114555835724, -1.9073486328125e-06, -0.025209426879882812, -2.288818359375e-05, -0.2539091110229492, -8.58306884765625e-05, -0.07740592956542969, -1.52587890625e-05, -0.31549072265625, 0.0, -0.0066106319427490234, -1.4662729881820269e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "self"}, "hole2": 1, "hole1": "increase_health"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n", "score": -8.253131741635904, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -8.21338176727295, -0.0022258758544921875, -1.9073486328125e-06, -0.0033435821533203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.853026596014388e-05, 0.0, -5.507466266863048e-05, -1.9073486328125e-06, -4.649161928682588e-05, -5.7220458984375e-06, -1.657007851463277e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_heal_power", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 44, 134, "self", "<EOS>", 75, 102, 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 29, 190, 21, 134, "self", "<EOS>", "target", "<EOS>", "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target(1)\n", "score": -9.393813694317764, "score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -3.8170528411865234, -2.47955322265625e-05, -1.9073486328125e-06, -0.0070343017578125, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -5.996118488837965e-05, 0.0, -2.0384788513183594e-05, 0.0, -6.330013275146484e-05, -5.7220458984375e-06, -1.0609622222546022e-05, -1.9073486328125e-06, -0.11952781677246094, -0.0001773834228515625, -0.000274658203125, -3.0517578125e-05, -3.814697265625e-06, 0.0, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.9761428833007812, 0.0, -1.71661376953125e-05, -0.002101898193359375, -7.62939453125e-06, -0.000904083251953125, -0.000102996826171875, -0.000110626220703125, 0.0, -0.00025177001953125, 0.0, -0.23926538228988647, -2.3841855067985307e-07, -0.0057048797607421875, -0.08430671691894531, -0.0004291534423828125, -0.08295249938964844, 0.0, -0.000156402587890625, 0.0, -0.00016021728515625, -1.9073486328125e-06, -1.52587890625e-05, -2.3841855067985307e-07, -0.009798407554626465, 0.0, -0.00301361083984375, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -0.328765869140625, -7.05718994140625e-05, -3.814697265625e-05, -0.1132802963256836, -2.47955322265625e-05, -0.01965618133544922, 0.0, -0.00019073486328125, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -3.814697265625e-06, -2.9802276912960224e-06, -0.6169511079788208, 0.0, -0.15151214599609375, -3.814697265625e-05, -4.208087921142578e-05, 0.0, -0.014193534851074219, -4.9591064453125e-05, -0.7002954483032227, -0.0005588531494140625, -0.5449953079223633, -6.4849853515625e-05, -0.2151966094970703, 0.0, -1.260744571685791, 0.0, -0.0433068573474884, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EmergencyCoolant", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_heal_power"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_max_health"}]}, {"_type": "Name", "id": "self"}], "hole1": "heal"}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "taunt"}]}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "self"}, "hole2": 1, "hole1": "target"}}], "hole4": "player"}}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -0.10596871615131676, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -0.08340668678283691, 0.0, -0.003025054931640625, -1.52587890625e-05, -0.000110626220703125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n", "score": -2.7187254452772933, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -2.6982195377349854, 0.0, -0.000762939453125, -9.5367431640625e-06, -0.0003223419189453125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class <UNK>Machine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -4.755250572755237, "score_history": [-0.0005340576171875, -0.0002536773681640625, -4.660606861114502, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -0.08340668678283691, 0.0, -0.003025054931640625, -1.52587890625e-05, -0.000110626220703125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>Machine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True)\n", "score": -6.19198751688679, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.17250394821167, -1.9073486328125e-06, -2.47955322265625e-05, -9.5367431640625e-06, -3.814697265625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(1, 4, windfury=True)\n", "score": -6.436999800198599, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -6.325258731842041, -0.0004901885986328125, -9.72747802734375e-05, -0.001338958740234375, -0.0002384185791015625, -5.841255187988281e-06, -2.3841855067985307e-07, -1.4185878171701916e-05, -3.099440846199286e-06, -0.09132277965545654, 0.0, -0.0029811859130859375, -1.33514404296875e-05, -8.7738037109375e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4}], "hole4": "p"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, taunt=True)\n", "score": -6.602248194224437, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.582798957824707, 0.0, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Force", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class ForceMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -6.611618488895907, "score_history": [-0.0005340576171875, -0.0002536773681640625, -6.419849872589111, -0.09807798266410828, -1.7046813809429295e-05, -3.576278118089249e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012140274047851562, -0.000171661376953125, 0.0, -5.5909156799316406e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0002980232238769531, 0.0, -0.0002627372741699219, 0.0, -0.0001125335693359375, -2.09808349609375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001544952392578125, -1.9073486328125e-06, -0.0005779266357421875, 0.0, -8.940695806813892e-06, -1.9073486328125e-06, -0.0028486251831054688, 0.0, -7.2479248046875e-05, -0.00136566162109375, -3.814697265625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.4305100194178522e-05, -3.3378591979271732e-06, -0.0824587345123291, 0.0, -0.0030364990234375, -1.52587890625e-05, -0.000110626220703125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ForceMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=True)\n", "score": -7.27776050806721, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -7.193016052246094, 0.0, -0.06528949737548828, -7.62939453125e-06, -3.814697265625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "buffs", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class <UNK>Machine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n", "score": -7.368007301881214, "score_history": [-0.0005340576171875, -0.0002536773681640625, -4.660606861114502, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -2.6982195377349854, 0.0, -0.000762939453125, -9.5367431640625e-06, -0.0003223419189453125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>Machine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "score": -7.61746359110554, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -7.59774923324585, -1.9073486328125e-06, -8.58306884765625e-05, -2.6702880859375e-05, -0.000186920166015625, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -7.706755923635335, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.025997161865234, 0.0, -0.04056358337402344, -0.011409759521484375, -0.00284421443939209, -0.0003337860107421875, -3.24249267578125e-05, -0.4916238784790039, -0.00017547607421875, -0.8088712692260742, -1.1444091796875e-05, -0.1926555633544922, -7.62939453125e-06, -0.11280660331249237, -2.503394853192731e-06, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "score": -8.17802006245335, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.025997161865234, 0.0, -0.04056358337402344, -0.011409759521484375, -0.00284421443939209, -0.0003337860107421875, -3.24249267578125e-05, -0.4916238784790039, -0.00017547607421875, -0.6404753923416138, -1.71661376953125e-05, -0.5538330078125, -5.7220458984375e-06, -0.39128953218460083, -2.1457672119140625e-06, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Windfury", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 53, 182, "Count", "<EOS>", "Card", "Selector", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=[Aura(Windfury(), GreaterThan(Count(\n            CardSelector()), value=0))])\n", "score": -9.173800285211534, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -0.08340668678283691, 0.0, -5.8325700759887695, -0.005726814270019531, -0.26125943660736084, -0.00182342529296875, -3.814697265625e-06, -0.5058231353759766, -3.814697265625e-06, -0.5615084767341614, -2.0265579223632812e-06, -0.08213233947753906, -0.22673416137695312, -0.000331878662109375, -1.9073486328125e-06, -0.1591494381427765, -0.0017209053039550781, -1.895418972708285e-05, -0.001644134521484375, -0.4559135437011719, -0.000186920166015625, -0.006458282470703125, -0.0051729679107666016, -0.6165618896484375, -0.00043260378879494965, 0.0, -5.340576171875e-05, -0.000225067138671875, -0.00141143798828125, -0.0020792484283447266, -2.0265579223632812e-06, -4.9591064453125e-05, 0.0, -0.3419826924800873, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Windfury"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template26", "hole0": "Count", "hole1": "CardSelector"}]}]}, "hole2": "windfury", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "score": -9.564755453085006, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.025997161865234, 0.0, -0.04056358337402344, -0.011409759521484375, -0.00284421443939209, -0.0003337860107421875, -3.24249267578125e-05, -0.4916238784790039, -0.00017547607421875, -0.6404753923416138, -1.71661376953125e-05, -0.8582706451416016, -5.91278076171875e-05, -0.24883712828159332, -0.0002739429473876953, -3.600120544433594e-05, -1.2243056297302246, -9.095272253034636e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}, "hole2": "enrage", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Windfury", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 53, 182, "Count", "<EOS>", "Card", "Selector", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(Windfury(), GreaterThan(Count(\n            CardSelector()), value=0))])\n", "score": -9.587074081508824, "score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -6.025997161865234, 0.0, -0.04056358337402344, -0.011409759521484375, -0.00284421443939209, -0.0003337860107421875, -3.24249267578125e-05, -1.2004289627075195, -9.5367431640625e-06, -0.4226156175136566, -4.0531158447265625e-06, -0.12734413146972656, -0.09850502014160156, -0.000278472900390625, -3.814697265625e-06, -0.17345423996448517, -0.0017375946044921875, -1.8834954971680418e-05, -0.0027294158935546875, -0.46532249450683594, -0.000186920166015625, -0.010097384452819824, -0.005737185478210449, -0.6387844681739807, -0.0004526308330241591, 0.0, -6.29425048828125e-05, -0.0002880096435546875, -0.0016307830810546875, -0.0021364688873291016, -2.1457672119140625e-06, -4.57763671875e-05, 0.0, -0.3346070647239685, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole1": 3, "hole0": "Flying Machine", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "FlyingMachine", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Windfury"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template26", "hole0": "Count", "hole1": "CardSelector"}]}]}, "hole2": "enrage", "hole1": 4}], "hole4": "player"}}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -1.8762547495123485, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -0.37138962745666504, -0.0003216001787222922, -1.1920928244535389e-07, -0.06255865097045898, -0.0007508992566727102, -9.5367431640625e-06, -0.07061328738927841, -9.941700409399346e-05, 0.0, -0.07372093200683594, -6.67572021484375e-05, -2.4795448553049937e-05, 0.0, -0.0005871057510375977, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -2.3842438543385924, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -1.0206971168518066, 0.0, -0.0012559890747070312, 0.0, -0.00018226998508907855, -2.3841855067985307e-07, -0.000133514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.03802490234375, 0.0, -0.00016081290959846228, 0.0, -0.016571998596191406, -0.11501884460449219, -0.06950008869171143, -0.0008095501107163727, -3.814697265625e-06, -0.050728797912597656, -0.0204315185546875, -0.0025745625607669353, -0.004251718521118164, 0.0, -5.7220458984375e-06, -0.1378498077392578, -0.000370025634765625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07853615283966064, -1.7642974853515625e-05, -1.33514404296875e-05, -0.08234405517578125, -0.0002193450927734375, -0.13893982768058777, 0.0, -0.022830963134765625, -0.0002002716064453125, -0.3733323812484741, -0.00032088509760797024, -1.1920928244535389e-07, -0.06238877773284912, -0.0007526873960159719, -9.5367431640625e-06, -0.06909270584583282, -9.965540812117979e-05, 0.0, -0.07173538208007812, -6.67572021484375e-05, -2.4676242901477963e-05, 0.0, -0.0005851984024047852, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            MinionSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.7119525452314974, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -1.2928175926208496, -5.7220458984375e-06, -2.3841855067985307e-07, -0.9457461833953857, -0.0008546113967895508, -3.814697265625e-06, -0.08559741824865341, -0.0001120522283599712, 0.0, -0.09004402160644531, -6.866455078125e-05, -2.253049024147913e-05, 0.0, -0.0005676746368408203, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", "Self", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            MinionSelector(Adjacent()))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.7422401819883433, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -1.2928175926208496, -5.7220458984375e-06, -2.3841855067985307e-07, -0.7058045864105225, -4.875540980719961e-05, -0.3199384808540344, -0.0005488123279064894, 0.0, -0.1259002685546875, -6.866455078125e-05, -3.123279384453781e-05, 0.0, -0.0009639263153076172, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "3", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType(\n            MINION_TYPE.MECH)))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2, taunt=True)\n", "score": -4.031143974173666, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -2.3423843383789062, -0.06521987915039062, -0.004129290580749512, -3.6954811548639555e-06, -1.1444091796875e-05, 0.0, -0.0037506744265556335, -7.43865966796875e-05, -2.86102294921875e-05, -0.0004520416259765625, -0.0007991790771484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -0.008735418319702148, -4.029273986816406e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.33514404296875e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.001718759536743164, 0.0, -0.0024396181106567383, 0.0, -0.1538744866847992, -0.0026024580001831055, 0.0, -0.24292659759521484, -0.000705718994140625, -7.10475433152169e-05, -5.960462772236497e-07, -0.001172065269201994, -1.9073486328125e-06, -0.33489179611206055, -1.9073486328125e-06, -0.020280838012695312, -0.009508132934570312, -0.0002231597900390625, -5.7220458984375e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "Give", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Heal(0), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.196831320472285, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -3.294862747192383, -0.004867435898631811, -5.7220458984375e-06, -0.024695396423339844, -1.9073486328125e-06, -0.0925503820180893, -1.1205645932932384e-05, -0.08017361164093018, -0.00022566078405361623, -2.0265579223632812e-06, -0.011676788330078125, -0.0001316070556640625, -9.775159014679957e-06, 0.0, -0.00039196014404296875, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 0}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            MinionSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.209604237525788, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -1.0206971168518066, 0.0, -0.0012559890747070312, 0.0, -0.00018226998508907855, -2.3841855067985307e-07, -0.000133514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.03802490234375, 0.0, -0.00016081290959846228, 0.0, -0.016571998596191406, -0.11501884460449219, -0.06950008869171143, -0.0008095501107163727, -3.814697265625e-06, -0.050728797912597656, -0.0204315185546875, -0.0025745625607669353, -0.004251718521118164, 0.0, -5.7220458984375e-06, -0.1378498077392578, -0.000370025634765625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07853615283966064, -1.7642974853515625e-05, -1.33514404296875e-05, -0.08234405517578125, -0.0002193450927734375, -0.13893982768058777, 0.0, -0.022830963134765625, -0.0002002716064453125, -1.2875858545303345, -5.7220458984375e-06, -2.3841855067985307e-07, -0.9428548812866211, -0.0008546113967895508, -3.814697265625e-06, -0.08392442762851715, -0.00011229062511119992, 0.0, -0.08777236938476562, -6.866455078125e-05, -2.241129186586477e-05, 0.0, -0.0005638599395751953, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", "Self", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            MinionSelector(Adjacent()))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.247718811208628, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -1.0206971168518066, 0.0, -0.0012559890747070312, 0.0, -0.00018226998508907855, -2.3841855067985307e-07, -0.000133514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.03802490234375, 0.0, -0.00016081290959846228, 0.0, -0.016571998596191406, -0.11501884460449219, -0.06950008869171143, -0.0008095501107163727, -3.814697265625e-06, -0.050728797912597656, -0.0204315185546875, -0.0025745625607669353, -0.004251718521118164, 0.0, -5.7220458984375e-06, -0.1378498077392578, -0.000370025634765625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07853615283966064, -1.7642974853515625e-05, -1.33514404296875e-05, -0.08234405517578125, -0.0002193450927734375, -0.13893982768058777, 0.0, -0.022830963134765625, -0.0002002716064453125, -1.2875858545303345, -5.7220458984375e-06, -2.3841855067985307e-07, -0.7079610824584961, -4.851700214203447e-05, -0.3228752017021179, -0.0005392807070165873, 0.0, -0.1218118667602539, -6.67572021484375e-05, -3.111359183094464e-05, 0.0, -0.0009582042694091797, 0.0], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "3", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType(\n            MINION_TYPE.MECH)))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2, taunt=True)\n", "score": -4.540089271594368, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -1.0206971168518066, 0.0, -0.0012559890747070312, 0.0, -0.00018226998508907855, -2.3841855067985307e-07, -0.000133514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.03802490234375, 0.0, -0.00016081290959846228, 0.0, -0.016571998596191406, -0.11501884460449219, -0.06950008869171143, -0.0008095501107163727, -3.814697265625e-06, -0.050728797912597656, -0.0204315185546875, -0.0025745625607669353, -0.004251718521118164, 0.0, -5.7220458984375e-06, -2.337503433227539, -0.06466388702392578, -0.004180550575256348, -3.6954811548639555e-06, -1.1444091796875e-05, 0.0, -0.003750637173652649, -7.2479248046875e-05, -2.86102294921875e-05, -0.000453948974609375, -0.000797271728515625, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -0.008594393730163574, -4.029273986816406e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.33514404296875e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017206668853759766, 0.0, -0.0024396181106567383, 0.0, -0.1539994329214096, -0.0026367902755737305, 0.0, -0.2489185333251953, -0.0007038116455078125, -7.080915383994579e-05, -5.960462772236497e-07, -0.0011699196184054017, -1.9073486328125e-06, -0.33367881178855896, -1.9073486328125e-06, -0.020307540893554688, -0.009534835815429688, -0.0002231597900390625, -5.7220458984375e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.546310341903116, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -3.0364317893981934, -0.13272547721862793, -0.0002877303631976247, -0.0002117156982421875, -0.3798227310180664, -0.0001544952392578125, -0.0016509294509887695, -2.0265579223632812e-06, -0.002484050812199712, -0.0004709953791461885, 0.0, -0.2445216178894043, 0.0, -0.0463331937789917, 0.0, 0.0, -0.0033130645751953125, -0.10182857513427734, -0.0001373291015625, -9.5367431640625e-06, 0.0, -0.01981651782989502, -4.017353057861328e-05, -3.814697265625e-06, -1.33514404296875e-05, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -0.0034465789794921875, 0.0, -0.004249691963195801, 0.0, -0.00032806396484375, -1.33514404296875e-05, -2.5749204723979346e-05, 0.0, -0.0005860328674316406, -2.3841855067985307e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 53, 182, "Count", "<EOS>", "Card", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Count(CardSelector())))),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.570591576767384, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -3.6008033752441406, -0.0013561248779296875, -0.019239425659179688, -0.0001685619354248047, -0.0017496992368251085, -0.0004458708572201431, 0.0, -0.00336712715215981, -0.00018296985945198685, -1.9073486328125e-06, -0.10784626007080078, -5.14984130859375e-05, -2.2172858734847978e-05, 0.0, -0.0003581046767067164, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template26", "hole0": "Count", "hole1": "CardSelector"}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector(EnemyPlayer()))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.67180483149675, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -0.37138962745666504, -0.0003216001787222922, -1.1920928244535389e-07, -0.06255865097045898, -0.0007508992566727102, -9.5367431640625e-06, -2.8311171531677246, -0.00012981168401893228, 0.0, -0.1084146499633789, -5.53131103515625e-05, -3.48090979969129e-05, 0.0, -0.000910639762878418, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "Give", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Heal(0), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.721909593488597, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -1.0206971168518066, 0.0, -0.0012559890747070312, 0.0, -0.00018226998508907855, -2.3841855067985307e-07, -0.000133514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.03802490234375, 0.0, -0.00016081290959846228, 0.0, -0.016571998596191406, -0.11501884460449219, -3.3163416385650635, -0.004747126717120409, -5.7220458984375e-06, -0.02439117431640625, -1.9073486328125e-06, -0.08969257771968842, -1.0848020792764146e-05, -0.0784372091293335, -0.00022947535035200417, -2.0265579223632812e-06, -0.011335372924804688, -0.000133514404296875, -9.775158105185255e-06, 0.0, -0.00039386749267578125, -1.1920928244535389e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 0}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 3, "hole1": 2}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "3", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2, taunt=True)\n", "score": -4.926348513947488, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -0.37138962745666504, -0.0003216001787222922, -1.1920928244535389e-07, -0.06255865097045898, -0.0007508992566727102, -9.5367431640625e-06, -0.07061328738927841, -9.941700409399346e-05, 0.0, -2.6866531372070312, -0.000713348388671875, -0.0001027554098982364, -2.861022494471399e-06, -0.0010066005634143949, -1.9073486328125e-06, -0.1768505573272705, -0.000579833984375, -0.0398406982421875, -0.21822261810302734, -0.0005092620849609375, -9.894371032714844e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 2, "hole0": "Goblin Auto-Barber", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template7", "hole0": 3, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}]}]}}, {"choice_history": [69, 133, 248], "inferred_code": "", "score": -21.232266426086426, "score_history": [-0.0016698837280273438, -8.392333984375e-05, -21.230512619018555], "model_output": {"_type": "Module", "body": []}}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 58, 192, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -2.1774958417811874, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -0.3834315538406372, -0.0005452880286611617, -3.814697265625e-06, -0.7473592758178711, -0.000911712646484375, -0.17519629001617432, -1.1920928244535389e-07, -1.5130906831473112e-05, -4.38690185546875e-05, -5.7220458984375e-06, -0.004332542419433594, -0.0014896392822265625, -2.6702880859375e-05, -0.007468700408935547, -9.417159162694588e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.005935885012149811, -0.00035369396209716797, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Give", "<EOS>", 237, 58, 192, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -2.3694084650854137, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -1.1878453493118286, -9.143340867012739e-05, -7.62939453125e-06, -0.010581016540527344, -0.000652313232421875, -0.3045324981212616, -1.1920928244535389e-07, -1.0842806659638882e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0041656494140625, -0.002048492431640625, -2.09808349609375e-05, -0.005307555198669434, -9.548261004965752e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0034363283775746822, -0.00025653839111328125, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -2.65370576487458, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -0.3834315538406372, -0.0005452880286611617, -3.814697265625e-06, -0.7365789413452148, -0.0002346038818359375, -0.5994905829429626, -9.536738616588991e-07, -0.03367852419614792, -5.53131103515625e-05, -5.7220458984375e-06, -0.008040428161621094, -0.003643035888671875, -3.24249267578125e-05, -0.025436878204345703, -0.0002644938649609685, -0.0002689361572265625, -3.814697265625e-06, -0.011308062821626663, -0.00045204159687273204, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(2),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -2.9359173597989, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -0.3834315538406372, -0.0005452880286611617, -3.814697265625e-06, -0.7365789413452148, -0.0002346038818359375, -0.8272218108177185, -1.1920928244535389e-07, -0.09237590432167053, -5.14984130859375e-05, -3.814697265625e-06, -0.004084587097167969, -0.0038013458251953125, -2.288818359375e-05, -0.02350485324859619, -0.0003149060357827693, -0.00022125244140625, -7.62939453125e-06, -0.012882250361144543, -0.0004000663757324219, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 2}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "Mech", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(IsType(MINION_TYPE.\n            MECH)), ActionTag(Give(ChangeAttack(2)), SelfSelector())),\n            Effect(TurnEnded(HasMech()), ActionTag(Give(ChangeHealth(2)),\n            SelfSelector()))])\n", "score": -3.36495558654525, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -1.2213010787963867, -0.0005975491367280483, -0.0014729499816894531, -1.9073486328125e-06, -0.004840850830078125, -0.7472257614135742, -8.20159912109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.04749500751495361, -0.001598358154296875, -5.7220458984375e-06, -0.0710296630859375, -2.6702880859375e-05, -7.2479248046875e-05, -7.2479248046875e-05, -1.9073486328125e-06, -0.001544952392578125, -3.814697265625e-06, -0.001102447509765625, 0.0, -3.24249267578125e-05, -0.029969215393066406, -0.011572837829589844, -0.03339862823486328, 0.0, -1.9073486328125e-06, -0.05216503143310547, -0.000179290771484375, -0.007992983795702457, -3.814697265625e-06, -0.0006821153219789267, -1.7881393432617188e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00054168701171875, -0.000415802001953125, -0.0005171298980712891, -0.0006753206253051758, -4.38690185546875e-05, -0.44549083709716797, -0.0002002716064453125, -0.0002894399513024837, -0.0004320101870689541, -1.9073486328125e-06, -0.22320556640625, -0.09817816317081451, -2.7775760827353224e-05, -0.001239776611328125, -0.0020046234130859375, -0.025194168090820312, -1.9073486328125e-06, -5.7220458984375e-06, -0.005290985107421875, -0.000152587890625, -0.001973867416381836, -3.933906555175781e-06, -0.01735161803662777, -1.1563301086425781e-05, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "HasMech"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 63, 205, "Has", "Mech", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "Mech", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(HasMech()), ActionTag\n            (Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(\n            HasMech()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n", "score": -3.3705739601030587, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -1.2213010787963867, -0.0005975491367280483, -0.0014729499816894531, -1.9073486328125e-06, -0.004840850830078125, -0.6958351135253906, -3.814697265625e-06, -0.19838812947273254, -0.047553692013025284, -1.8477399862604216e-05, -7.62939453125e-06, -0.0045948028564453125, -0.009087562561035156, -0.014704585075378418, -8.082389831542969e-05, -1.9073486328125e-06, -0.014230728149414062, -0.0002689361572265625, -0.0023226740304380655, -5.7220458984375e-06, -0.0016475905431434512, -0.0001455545425415039, -1.33514404296875e-05, -1.9073486328125e-06, -0.000484466552734375, -0.000579833984375, -0.0009336471557617188, -0.004418134689331055, -4.57763671875e-05, -0.4465808868408203, -0.0004024505615234375, -0.0002273299905937165, -0.0004401130718179047, -1.9073486328125e-06, -0.2275841236114502, -0.10121584683656693, -3.8146965380292386e-05, -0.00136566162109375, -0.0037631988525390625, -0.03406524658203125, -1.9073486328125e-06, -5.7220458984375e-06, -0.0051822662353515625, -0.0001544952392578125, -0.0022971630096435547, -3.933906555175781e-06, -0.016473274677991867, -1.1682510375976562e-05, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "HasMech"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasMech"}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(picker=RandomPicker())))])\n", "score": -3.5152194454056485, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -1.1878453493118286, -9.143340867012739e-05, -7.62939453125e-06, -0.010581016540527344, -0.000652313232421875, -1.4496350288391113, -4.649161837733118e-06, -4.143838305026293e-05, -0.00025177001953125, -3.814697265625e-06, -0.0018062591552734375, -0.002407073974609375, -2.09808349609375e-05, -0.007177472114562988, -0.00016962260997388512, -3.4332275390625e-05, -3.814697265625e-06, -0.004093209747225046, -0.00016200542449951172, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 58, 192, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.056059563060721, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -2.0799143314361572, -2.622604142743512e-06, -0.0001171826952486299, -1.9073486328125e-06, -9.19096200959757e-05, 0.0, -0.0001468658447265625, -4.00543212890625e-05, -5.14984130859375e-05, -5.960462772236497e-07, -6.103515625e-05, -1.1205673217773438e-05, -2.264974000354414e-06, -8.012627949938178e-05, -8.344646857949556e-07, -3.814697265625e-05, -5.7220458984375e-05, -0.5573034286499023, -0.0025276688393205404, -0.0005023478879593313, -2.288818359375e-05, -3.814697265625e-06, -0.0004119873046875, -0.019471168518066406, -0.4115239381790161, -0.0005387327400967479, -3.814697265625e-06, -0.6654396057128906, -0.0009307861328125, -0.1672307252883911, -1.1920928244535389e-07, -1.5488185454159975e-05, -4.38690185546875e-05, -3.814697265625e-06, -0.004184722900390625, -0.0014781951904296875, -2.6702880859375e-05, -0.007369518280029297, -9.333719935966656e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.0058570983819663525, -0.0003516674041748047, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "TOTEM"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 58, 192, "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(\n            ChangeHealth(2)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.0597809947869905, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -0.3834315538406372, -0.0005452880286611617, -3.814697265625e-06, -0.7473592758178711, -0.000911712646484375, -2.0537874698638916, -4.410743713378906e-06, -0.0001394862774759531, -0.0001354217529296875, -3.814697265625e-06, -0.0018739700317382812, -0.002105712890625, -2.6702880859375e-05, -0.008165597915649414, -0.0001610414037713781, -4.57763671875e-05, -3.814697265625e-06, -0.01064216997474432, -0.00020372867584228516, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Give", "<EOS>", 237, 58, 192, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.236480424276394, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -2.0799143314361572, -2.622604142743512e-06, -0.0001171826952486299, -1.9073486328125e-06, -9.19096200959757e-05, 0.0, -0.0001468658447265625, -4.00543212890625e-05, -5.14984130859375e-05, -5.960462772236497e-07, -6.103515625e-05, -1.1205673217773438e-05, -2.264974000354414e-06, -8.012627949938178e-05, -8.344646857949556e-07, -3.814697265625e-05, -5.7220458984375e-05, -0.5573034286499023, -0.0025276688393205404, -0.0005023478879593313, -2.288818359375e-05, -3.814697265625e-06, -0.0004119873046875, -0.019471168518066406, -1.1276217699050903, -9.047974890563637e-05, -7.62939453125e-06, -0.010642051696777344, -0.0006580352783203125, -0.2913202941417694, -1.1920928244535389e-07, -1.1200027074664831e-05, -8.58306884765625e-05, -3.814697265625e-06, -0.0040740966796875, -0.002017974853515625, -2.09808349609375e-05, -0.005231261253356934, -9.440982103114948e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.003397372318431735, -0.00025272369384765625, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "TOTEM"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 63, 205, "Has", "Mech", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Turn", "Ended", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(HasMech()), ActionTag\n            (Give(ChangeAttack(2)), SelfSelector())), Effect(Buff(\n            ChangeAttack(2)), TurnEnded(player=BothPlayer()))])\n", "score": -4.6346895823992895, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -1.2213010787963867, -0.0005975491367280483, -0.0014729499816894531, -1.9073486328125e-06, -0.004840850830078125, -0.6958351135253906, -3.814697265625e-06, -0.19838812947273254, -0.047553692013025284, -1.8477399862604216e-05, -7.62939453125e-06, -0.0045948028564453125, -0.009087562561035156, -0.014704585075378418, -8.082389831542969e-05, -1.9073486328125e-06, -0.014230728149414062, -0.0002689361572265625, -0.0023226740304380655, -5.7220458984375e-06, -0.0016475905431434512, -0.0001455545425415039, -1.33514404296875e-05, -1.9073486328125e-06, -0.000484466552734375, -0.000579833984375, -0.0009336471557617188, -0.004418134689331055, -4.57763671875e-05, -1.3860235214233398, -5.7220458984375e-05, -0.013224959373474121, -0.040520668029785156, -0.0003747939772438258, -0.12418758869171143, -1.1444091796875e-05, -0.2677190601825714, -5.14984130859375e-05, -0.0686635971069336, -0.10169696807861328, -7.62939453125e-06, 0.0, -0.05723392963409424, -0.0005913972854614258, -1.9073486328125e-06, -5.14984130859375e-05, -0.000225067138671875, -4.57763671875e-05, -0.0014276503352448344, -3.814697265625e-06, -1.9073486328125e-05, -2.09808349609375e-05, -0.04143679141998291, -3.278228541603312e-05, -0.0003070831298828125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}, {"_type": "Call", "func": {"_type": "Name", "id": "TurnEnded"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasMech"}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -4.7069251053624726, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -2.0799143314361572, -2.622604142743512e-06, -0.0001171826952486299, -1.9073486328125e-06, -9.19096200959757e-05, 0.0, -0.0001468658447265625, -4.00543212890625e-05, -5.14984130859375e-05, -5.960462772236497e-07, -6.103515625e-05, -1.1205673217773438e-05, -2.264974000354414e-06, -8.012627949938178e-05, -8.344646857949556e-07, -3.814697265625e-05, -5.7220458984375e-05, -0.5573034286499023, -0.0025276688393205404, -0.0005023478879593313, -2.288818359375e-05, -3.814697265625e-06, -0.0004119873046875, -0.019471168518066406, -0.4115239381790161, -0.0005387327400967479, -3.814697265625e-06, -0.8301916122436523, -0.0002346038818359375, -0.5919898748397827, -9.536738616588991e-07, -0.032655540853738785, -5.7220458984375e-05, -5.7220458984375e-06, -0.00777435302734375, -0.0036716461181640625, -3.24249267578125e-05, -0.025188922882080078, -0.0002594883262645453, -0.0002727508544921875, -3.814697265625e-06, -0.011157681234180927, -0.000446081132395193, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "TOTEM"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Turn", "Ended", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(IsType(MINION_TYPE.\n            MECH)), ActionTag(Give(ChangeAttack(2)), SelfSelector())),\n            Effect(TurnEnded(TurnEnded()), ActionTag(Give(ChangeHealth(2)),\n            SelfSelector()))])\n", "score": -4.867133193467737, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -1.2213010787963867, -0.0005975491367280483, -0.0014729499816894531, -1.9073486328125e-06, -0.004840850830078125, -0.7472257614135742, -8.20159912109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.04749500751495361, -0.001598358154296875, -5.7220458984375e-06, -0.0710296630859375, -2.6702880859375e-05, -7.2479248046875e-05, -7.2479248046875e-05, -1.9073486328125e-06, -0.001544952392578125, -3.814697265625e-06, -0.001102447509765625, 0.0, -3.24249267578125e-05, -0.029969215393066406, -0.011572837829589844, -0.03339862823486328, 0.0, -1.9073486328125e-06, -0.05216503143310547, -0.000179290771484375, -0.007992983795702457, -3.814697265625e-06, -0.0006821153219789267, -1.7881393432617188e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00054168701171875, -0.000415802001953125, -0.0005171298980712891, -0.0006753206253051758, -4.38690185546875e-05, -0.44549083709716797, -0.0002002716064453125, -0.0002894399513024837, -0.0004320101870689541, -1.9073486328125e-06, -1.8364191055297852, -0.0067940060980618, 0.0, -0.000476837158203125, -0.000530242919921875, -0.008455276489257812, -2.0265579223632812e-06, -3.814697265625e-06, -0.009935379028320312, -0.0001125335693359375, -0.0018967391224578023, -3.933906555175781e-06, -0.012157307006418705, -2.1219253540039062e-05, -1.71661376953125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "TurnEnded"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Turn", "Ended", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(IsType(MINION_TYPE.\n            MECH)), ActionTag(Give(ChangeAttack(2)), SelfSelector())),\n            Effect(Buff(ChangeAttack(2)), TurnEnded(player=BothPlayer()))])\n", "score": -4.945976208284549, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -1.2213010787963867, -0.0005975491367280483, -0.0014729499816894531, -1.9073486328125e-06, -0.004840850830078125, -0.7472257614135742, -8.20159912109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.04749500751495361, -0.001598358154296875, -5.7220458984375e-06, -0.0710296630859375, -2.6702880859375e-05, -7.2479248046875e-05, -7.2479248046875e-05, -1.9073486328125e-06, -0.001544952392578125, -3.814697265625e-06, -0.001102447509765625, 0.0, -3.24249267578125e-05, -0.029969215393066406, -0.011572837829589844, -0.03339862823486328, 0.0, -1.9073486328125e-06, -0.05216503143310547, -0.000179290771484375, -0.007992983795702457, -3.814697265625e-06, -0.0006821153219789267, -1.7881393432617188e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.00054168701171875, -0.000415802001953125, -0.0005171298980712891, -0.0006753206253051758, -4.38690185546875e-05, -1.7030954360961914, -4.1961669921875e-05, -0.009146451950073242, -0.02562999725341797, -0.0005483626737259328, -0.15557122230529785, -1.1444091796875e-05, -0.1438017189502716, -5.7220458984375e-05, -0.036334991455078125, -0.23271560668945312, -9.5367431640625e-06, 0.0, -0.06546986103057861, -0.0006314516067504883, -1.9073486328125e-06, -5.340576171875e-05, -0.0002288818359375, -4.38690185546875e-05, -0.0013942717341706157, -5.7220458984375e-06, -2.86102294921875e-05, -2.09808349609375e-05, -0.026901841163635254, -3.695445047924295e-05, -0.000301361083984375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}, {"_type": "Call", "func": {"_type": "Name", "id": "TurnEnded"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(2),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -5.004048601201525, "score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -2.0799143314361572, -2.622604142743512e-06, -0.0001171826952486299, -1.9073486328125e-06, -9.19096200959757e-05, 0.0, -0.0001468658447265625, -4.00543212890625e-05, -5.14984130859375e-05, -5.960462772236497e-07, -6.103515625e-05, -1.1205673217773438e-05, -2.264974000354414e-06, -8.012627949938178e-05, -8.344646857949556e-07, -3.814697265625e-05, -5.7220458984375e-05, -0.5573034286499023, -0.0025276688393205404, -0.0005023478879593313, -2.288818359375e-05, -3.814697265625e-06, -0.0004119873046875, -0.019471168518066406, -0.4115239381790161, -0.0005387327400967479, -3.814697265625e-06, -0.8301916122436523, -0.0002346038818359375, -0.8357259631156921, -1.1920928244535389e-07, -0.09030625224113464, -5.340576171875e-05, -3.814697265625e-06, -0.003958702087402344, -0.003833770751953125, -2.288818359375e-05, -0.02311575412750244, -0.0003085898351855576, -0.000225067138671875, -7.62939453125e-06, -0.012683908455073833, -0.0003941059112548828, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "TOTEM"}], "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "IronSensei", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 2}]}]}], "hole2": 2, "hole1": 2}], "hole4": "player"}}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -2.8751946088409213, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.6444969177246094, -6.139278411865234e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.0823202133178711, -0.0001220703125, -0.40330198407173157, 0.0, -0.043987274169921875, -1.1444091796875e-05, -0.4827337861061096, -7.748603820800781e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector())])\n", "score": -3.805753111515024, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.6444969177246094, -6.139278411865234e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.0823202133178711, -0.0001220703125, -0.40330198407173157, 0.0, -0.043987274169921875, -1.1444091796875e-05, -1.4132790565490723, -3.814697265625e-06, -2.6702880859375e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -3.8821851905958624, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -1.5535917282104492, 0.0, -9.059900548891164e-06, 0.0, -6.079673767089844e-06, 0.0, -2.09808349609375e-05, -0.003292083740234375, -3.0517578125e-05, -2.1457672119140625e-06, -5.364403477869928e-06, -2.2530513888341375e-05, -2.3841855067985307e-07, -0.007939338684082031, 0.0, -1.52587890625e-05, -0.5575647354125977, -5.9604644775390625e-05, -1.33514404296875e-05, -2.47955322265625e-05, -0.09647178649902344, -0.0001220703125, -0.44093888998031616, -1.9073486328125e-06, -0.042095184326171875, -1.1444091796875e-05, -0.4578949809074402, -7.748603820800781e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "6", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(6), SelfSelector())])\n", "score": -4.105804532442072, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.6444969177246094, -6.139278411865234e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.0823202133178711, -0.0001220703125, -1.7298381328582764, -7.62939453125e-06, -0.08033561706542969, -1.9073486328125e-06, -0.3503371477127075, -7.748603820800781e-06, -0.000133514404296875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 6}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -4.428959399132452, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -2.056187629699707, 0.0, -7.152551916078664e-06, 0.0, -1.0371208190917969e-05, 0.0, -1.33514404296875e-05, -0.002292633056640625, -4.1961669921875e-05, -2.0265579223632812e-06, -5.006777428206988e-06, -2.3603386580361985e-05, -2.3841855067985307e-07, -0.007021546363830566, 0.0, -1.9073486328125e-05, -0.5952653884887695, -5.9604644775390625e-05, -1.33514404296875e-05, -2.6702880859375e-05, -0.10214710235595703, -0.0001163482666015625, -0.4416165351867676, -1.9073486328125e-06, -0.04305076599121094, -1.1444091796875e-05, -0.45897454023361206, -7.748603820800781e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.BEAST)))])\n", "score": -4.472672434992283, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -1.0220963954925537, -1.3709068298339844e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.6702880859375e-05, -0.010003924369812012, -1.52587890625e-05, -9.1552734375e-05, -0.38938140869140625, -7.62939453125e-06, -0.11026161909103394, -0.0001093149185180664, -0.19304752349853516, -0.0026330947875976562, -0.00010865926742553711, -0.0001549720618641004, -7.152555099310121e-07, -1.9073486328125e-05, 0.0, -0.0004589398158714175, -9.787081944523379e-05, -3.814697265625e-06, -0.00429534912109375, -7.62939453125e-06, -3.4332275390625e-05, -4.9591064453125e-05, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -0.6423139572143555, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -4.565719604172465, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -2.1286821365356445, 0.0, -9.5367431640625e-06, -9.34600830078125e-05, -3.814697265625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.008235931396484375, -1.9073486328125e-06, -4.38690185546875e-05, -0.1488819122314453, -4.00543212890625e-05, -0.3668203353881836, 0.0, -5.364416665543104e-06, 0.0, -6.4373016357421875e-06, 0.0, -2.47955322265625e-05, -0.0067501068115234375, -4.38690185546875e-05, -2.1457672119140625e-06, -5.006777428206988e-06, -2.312655487912707e-05, -1.1920928244535389e-07, -0.006821036338806152, 0.0, -2.09808349609375e-05, -0.664301872253418, -6.330013275146484e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.07597541809082031, -0.00012969970703125, -0.3956635296344757, 0.0, -0.04454803466796875, -1.1444091796875e-05, -0.4876387119293213, -7.748603820800781e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 58, 192, "1", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector()),\n            Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.BEAST)))])\n", "score": -4.816862696937243, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -0.6676582098007202, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.9591064453125e-05, -0.37653493881225586, -1.9073486328125e-06, -0.0003871917724609375, -1.1038150787353516, -0.0003681182861328125, -0.0008476970833726227, -1.9073486328125e-06, -0.020722389221191406, -0.0002040863037109375, -0.0004665106534957886, -0.00023567621246911585, -5.483612312673358e-06, -0.0005092620849609375, 0.0, -0.002332530450075865, -9.286386193707585e-05, 0.0, -0.0015888214111328125, -7.62939453125e-06, -1.71661376953125e-05, -0.0001163482666015625, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -0.5434885025024414, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template33", "hole0": 1}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -4.938932391352147, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -1.0220963954925537, -1.3709068298339844e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.6702880859375e-05, -0.010003924369812012, -1.52587890625e-05, -9.1552734375e-05, -0.38938140869140625, -7.62939453125e-06, -0.11026161909103394, -0.0001093149185180664, -0.19304752349853516, -0.0026330947875976562, -0.00010865926742553711, -0.0001549720618641004, -7.152555099310121e-07, -1.9073486328125e-05, 0.0, -0.0004589398158714175, -9.787081944523379e-05, -3.814697265625e-06, -0.00429534912109375, -7.62939453125e-06, -3.4332275390625e-05, -4.9591064453125e-05, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -1.1085739135742188, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 58, 192, "1", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector()),\n            Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -5.41053640299193, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -0.6676582098007202, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.9591064453125e-05, -0.37653493881225586, -1.9073486328125e-06, -0.0003871917724609375, -1.1038150787353516, -0.0003681182861328125, -0.0008476970833726227, -1.9073486328125e-06, -0.020722389221191406, -0.0002040863037109375, -0.0004665106534957886, -0.00023567621246911585, -5.483612312673358e-06, -0.0005092620849609375, 0.0, -0.002332530450075865, -9.286386193707585e-05, 0.0, -0.0015888214111328125, -7.62939453125e-06, -1.71661376953125e-05, -0.0001163482666015625, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.137162208557129, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template33", "hole0": 1}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.BEAST)))])\n", "score": -5.531721036491284, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -0.6676582098007202, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.9591064453125e-05, -0.37653493881225586, -1.9073486328125e-06, -0.0003871917724609375, -1.5418939590454102, -1.71661376953125e-05, -0.0869872123003006, -0.00024509429931640625, -0.1602802276611328, -0.0016183853149414062, -0.00013005733489990234, -0.0001608133316040039, -5.960462772236497e-07, -2.47955322265625e-05, 0.0, -0.0005302205099724233, -8.010863530216739e-05, -3.814697265625e-06, -0.0049037933349609375, -7.62939453125e-06, -3.24249267578125e-05, -4.38690185546875e-05, 0.0, -9.560585021972656e-05, -1.9073486328125e-06, -0.5926685333251953, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.BEAST)))])\n", "score": -5.59245362354676, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -1.5535917282104492, 0.0, -9.059900548891164e-06, 0.0, -6.079673767089844e-06, 0.0, -2.09808349609375e-05, -0.003292083740234375, -3.0517578125e-05, -2.1457672119140625e-06, -5.364403477869928e-06, -2.2530513888341375e-05, -2.3841855067985307e-07, -0.007939338684082031, 0.0, -1.52587890625e-05, -0.857975959777832, -0.0029450654983520508, -1.9073486328125e-06, -2.86102294921875e-05, -0.02037334442138672, -3.0517578125e-05, -0.05643604323267937, 0.0, -0.04537773132324219, -3.814697265625e-06, -0.9720674753189087, -1.3709068298339844e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.6702880859375e-05, -0.010295629501342773, -1.52587890625e-05, -9.34600830078125e-05, -0.3843507766723633, -7.62939453125e-06, -0.10959392786026001, -0.0001074075698852539, -0.1948528289794922, -0.0026540756225585938, -0.0001087486743927002, -0.0001530647132312879, -7.152555099310121e-07, -1.9073486328125e-05, 0.0, -0.0004596549551934004, -9.608268010197207e-05, -3.814697265625e-06, -0.0042629241943359375, -7.62939453125e-06, -3.4332275390625e-05, -4.9591064453125e-05, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -0.6428842544555664, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -6.057531977428596, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -1.5535917282104492, 0.0, -9.059900548891164e-06, 0.0, -6.079673767089844e-06, 0.0, -2.09808349609375e-05, -0.003292083740234375, -3.0517578125e-05, -2.1457672119140625e-06, -5.364403477869928e-06, -2.2530513888341375e-05, -2.3841855067985307e-07, -0.007939338684082031, 0.0, -1.52587890625e-05, -0.857975959777832, -0.0029450654983520508, -1.9073486328125e-06, -2.86102294921875e-05, -0.02037334442138672, -3.0517578125e-05, -0.05643604323267937, 0.0, -0.04537773132324219, -3.814697265625e-06, -0.9720674753189087, -1.3709068298339844e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.6702880859375e-05, -0.010295629501342773, -1.52587890625e-05, -9.34600830078125e-05, -0.3843507766723633, -7.62939453125e-06, -0.10959392786026001, -0.0001074075698852539, -0.1948528289794922, -0.0026540756225585938, -0.0001087486743927002, -0.0001530647132312879, -7.152555099310121e-07, -1.9073486328125e-05, 0.0, -0.0004596549551934004, -9.608268010197207e-05, -3.814697265625e-06, -0.0042629241943359375, -7.62939453125e-06, -3.4332275390625e-05, -4.9591064453125e-05, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -1.1079626083374023, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 59, 193, "<UNK>", "Heal", "Amount", "<EOS>", "1", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(<UNK>HealAmount(1), PlayerSelector())])\n", "score": -6.063959682501682, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -1.0220963954925537, -1.3709068298339844e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.6702880859375e-05, -0.010003924369812012, -1.52587890625e-05, -9.1552734375e-05, -1.39544677734375, -5.14984130859375e-05, -0.0018597808666527271, -0.1973193734884262, -0.24674248695373535, 0.0, -0.03071545995771885, 0.0, -0.09876823425292969, -7.2479248046875e-05, -0.9633501768112183, -3.814697265625e-06, -4.57763671875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template34", "hole0": "<UNK>HealAmount", "hole1": 1}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Immune", "<EOS>", 55, 186, "Minion", "Selector", "<EOS>", 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector()),\n            Aura(Immune(), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -6.08508006816853, "score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.750946044921875, -0.005298733711242676, -1.9073486328125e-06, -3.0517578125e-05, -0.019290924072265625, -3.4332275390625e-05, -0.0557190366089344, 0.0, -0.04786109924316406, -3.814697265625e-06, -0.6676582098007202, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.9591064453125e-05, -0.37653493881225586, -1.9073486328125e-06, -0.0003871917724609375, -1.5418939590454102, -1.71661376953125e-05, -0.0869872123003006, -0.00024509429931640625, -0.1602802276611328, -0.0016183853149414062, -0.00013005733489990234, -0.0001608133316040039, -5.960462772236497e-07, -2.47955322265625e-05, 0.0, -0.0005302205099724233, -8.010863530216739e-05, -3.814697265625e-06, -0.0049037933349609375, -7.62939453125e-06, -3.24249267578125e-05, -4.38690185546875e-05, 0.0, -9.560585021972656e-05, -1.9073486328125e-06, -1.1460275650024414, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mal'Ganis", "hole6": [{"_type": "Template22", "hole0": 9, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Immune"}, {"_type": "Template29", "hole0": "MinionSelector", "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE"}], "hole1": {"_type": "Name", "id": "IsType"}}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Black()), PlayerSelector()))])\n", "score": -1.1584794452742244, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -0.4976179599761963, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -0.16403700411319733, -0.1386582851409912, -0.00922393798828125, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Black"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -1.8676650381044055, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -1.368964433670044, -1.537799835205078e-05, 0.0, -0.0023326873779296875, 0.0, -0.014846332371234894, 0.0, -0.13734567165374756, -4.57763671875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 4}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(AddCard(\n            CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)\n            ), PlayerSelector()))])\n", "score": -2.7572668562957006, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -2.239394426345825, -0.0007877349853515625, -1.33514404296875e-05, 0.0, -0.006618499755859375, -0.024023056030273438, -3.814697265625e-06, 0.0, -0.0006803266005590558, -0.0019550323486328125, -3.814697265625e-06, -0.010101318359375, -1.71661376953125e-05, 0.0, -0.005232810974121094, 0.0, -0.013242721557617188, -1.9073486328125e-06, -8.20159912109375e-05, -9.34600830078125e-05, -0.0009061098098754883, 0.0, -0.016504406929016113, 0.0, -0.0264434814453125, -1.9073486328125e-06, -0.0073089599609375, -2.0503786799963564e-05, -0.002155303955078125, -1.1444091796875e-05, -0.015967369079589844, -5.7220458984375e-06, -0.041563987731933594, -9.5367431640625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "spare_part_list"}}]}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "Pain", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            BlackPain()), PlayerSelector()))])\n", "score": -3.369862072761407, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -0.4976179599761963, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -0.16403700411319733, -2.2934060096740723, -1.9073486328125e-06, -0.06585693359375, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BlackPain"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "The", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfThePain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Black()), PlayerSelector()))])\n", "score": -3.3899509574152944, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -2.3199307918548584, -0.010755046270787716, -0.001679062144830823, -0.00011073929636040702, -3.62396240234375e-05, 0.0, -1.52587890625e-05, -0.001129150390625, -0.000118255615234375, -0.0004291534423828125, -1.9073486328125e-06, -6.54458999633789e-05, 0.0, -6.198883056640625e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -2.86102294921875e-05, -2.646424763952382e-05, -9.763240814208984e-05, -6.210665742401034e-05, -8.785724639892578e-05, -3.206684414180927e-05, 0.0, -0.0001659393310546875, -1.9073486328125e-06, -3.969663521274924e-05, -3.576278118089249e-07, -3.4332275390625e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00019073486328125, -4.935239121550694e-05, 0.0, -0.10526180267333984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012989044189453125, -0.0001354217529296875, -0.09415197372436523, -3.576278118089249e-07, -0.00013148749712854624, -1.9073486328125e-06, -3.957737499149516e-05, 0.0, -1.9073486328125e-05, -0.0001697540283203125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006016731262207031, -0.006772116757929325, -0.011411666870117188, 0.0, -0.000682830810546875, -0.0028533935546875, -0.49777817726135254, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -0.16423870623111725, -0.13753929734230042, -0.009237289428710938, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfThePain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Black"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Black()), PlayerSelector()))])\n", "score": -3.673969850568483, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -2.6035985946655273, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -0.0010776519775390625, -0.0001373291015625, -0.10244786739349365, -3.576278118089249e-07, -0.00014030899910721928, -1.9073486328125e-06, -4.2080788261955604e-05, 0.0, -1.71661376953125e-05, -0.00018310546875, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.005824089050292969, -0.006589663214981556, -0.011586666107177734, 0.0, -0.0006961822509765625, -0.0028772354125976562, -0.49446022510528564, -1.9073486328125e-06, -1.9073486328125e-06, -0.0047855377197265625, -1.71661376953125e-05, -0.1625160127878189, -0.1490451544523239, -0.0091400146484375, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Black"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            SelfSelector()))])\n", "score": -3.7971397495225574, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -1.368964433670044, -1.537799835205078e-05, 0.0, -0.0023326873779296875, 0.0, -0.014846332371234894, 0.0, -2.0668375492095947, -1.9073486328125e-06, -2.6702880859375e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "SelfSelector", "hole1": [{"_type": "Num", "n": 4}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Black()), PlayerSelector()))])\n", "score": -3.974997452314426, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -2.9229044914245605, -3.58813522325363e-05, -0.00015687552513554692, -3.814697265625e-06, -5.280932236928493e-05, 0.0, -2.09808349609375e-05, -0.0002307891845703125, -1.71661376953125e-05, -5.602820692729438e-06, -4.00543212890625e-05, -1.9073486328125e-06, -4.768370445162873e-07, -2.944469451904297e-05, -1.0728830375228426e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.0060100555419921875, -0.00665254145860672, -0.011301875114440918, 0.0, -0.00067138671875, -0.0030565261840820312, -0.48947370052337646, -1.9073486328125e-06, -1.9073486328125e-06, -0.0046844482421875, -1.71661376953125e-05, -0.16355076432228088, -0.13553301990032196, -0.009189605712890625, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Black"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "The", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class MistressOfThePain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -4.099789183852863, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -2.3199307918548584, -0.010755046270787716, -0.001679062144830823, -0.00011073929636040702, -3.62396240234375e-05, 0.0, -1.52587890625e-05, -0.001129150390625, -0.000118255615234375, -0.0004291534423828125, -1.9073486328125e-06, -6.54458999633789e-05, 0.0, -6.198883056640625e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -2.86102294921875e-05, -2.646424763952382e-05, -9.763240814208984e-05, -6.210665742401034e-05, -8.785724639892578e-05, -3.206684414180927e-05, 0.0, -0.0001659393310546875, -1.9073486328125e-06, -3.969663521274924e-05, -3.576278118089249e-07, -3.4332275390625e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00019073486328125, -4.935239121550694e-05, 0.0, -0.10526180267333984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012989044189453125, -0.0001354217529296875, -0.09415197372436523, -3.576278118089249e-07, -0.00013148749712854624, -1.9073486328125e-06, -3.957737499149516e-05, 0.0, -1.9073486328125e-05, -0.0001697540283203125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006016731262207031, -0.006772116757929325, -0.011411666870117188, 0.0, -0.000682830810546875, -0.0028533935546875, -1.3688576221466064, -1.537799835205078e-05, 0.0, -0.0023326873779296875, 0.0, -0.01485443115234375, 0.0, -0.1373533010482788, -4.57763671875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfThePain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 4}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -4.381924631698439, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -2.6035985946655273, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -0.0010776519775390625, -0.0001373291015625, -0.10244786739349365, -3.576278118089249e-07, -0.00014030899910721928, -1.9073486328125e-06, -4.2080788261955604e-05, 0.0, -1.71661376953125e-05, -0.00018310546875, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.005824089050292969, -0.006589663214981556, -0.011586666107177734, 0.0, -0.0006961822509765625, -0.0028772354125976562, -1.3727856874465942, -1.537799835205078e-05, 0.0, -0.002346038818359375, 0.0, -0.01494164951145649, 0.0, -0.1377938985824585, -4.57763671875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 4}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            <UNK>()), PlayerSelector()))])\n", "score": -4.4256194505237545, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -0.4976179599761963, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -3.570286989212036, -0.006160606164485216, -0.0026116371154785156, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "<UNK>"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -4.722422647144128, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -2.9229044914245605, -3.58813522325363e-05, -0.00015687552513554692, -3.814697265625e-06, -5.280932236928493e-05, 0.0, -2.09808349609375e-05, -0.0002307891845703125, -1.71661376953125e-05, -5.602820692729438e-06, -4.00543212890625e-05, -1.9073486328125e-06, -4.768370445162873e-07, -2.944469451904297e-05, -1.0728830375228426e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.0060100555419921875, -0.00665254145860672, -0.011301875114440918, 0.0, -0.00067138671875, -0.0030565261840820312, -1.3957494497299194, -1.537799835205078e-05, 0.0, -0.0024547576904296875, 0.0, -0.014383029192686081, 0.0, -0.13723313808441162, -4.76837158203125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 4}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Frozen()), PlayerSelector()))])\n", "score": -4.927812315183928, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -0.4976179599761963, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -4.046234130859375, -0.00042629148811101913, -0.03458595275878906, -1.1444091796875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Frozen"}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "The", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfThePain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(AddCard(\n            CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)\n            ), PlayerSelector()))])\n", "score": -4.988780061885791, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -2.3199307918548584, -0.010755046270787716, -0.001679062144830823, -0.00011073929636040702, -3.62396240234375e-05, 0.0, -1.52587890625e-05, -0.001129150390625, -0.000118255615234375, -0.0004291534423828125, -1.9073486328125e-06, -6.54458999633789e-05, 0.0, -6.198883056640625e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -2.86102294921875e-05, -2.646424763952382e-05, -9.763240814208984e-05, -6.210665742401034e-05, -8.785724639892578e-05, -3.206684414180927e-05, 0.0, -0.0001659393310546875, -1.9073486328125e-06, -3.969663521274924e-05, -3.576278118089249e-07, -3.4332275390625e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00019073486328125, -4.935239121550694e-05, 0.0, -0.10526180267333984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012989044189453125, -0.0001354217529296875, -0.09415197372436523, -3.576278118089249e-07, -0.00013148749712854624, -1.9073486328125e-06, -3.957737499149516e-05, 0.0, -1.9073486328125e-05, -0.0001697540283203125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006016731262207031, -0.006772116757929325, -0.011411666870117188, 0.0, -0.000682830810546875, -0.0028533935546875, -2.2388174533843994, -0.0007877349853515625, -1.33514404296875e-05, 0.0, -0.006618499755859375, -0.023909568786621094, -3.814697265625e-06, 0.0, -0.0006830684142187238, -0.00196075439453125, -3.814697265625e-06, -0.0100860595703125, -1.71661376953125e-05, 0.0, -0.0052318572998046875, 0.0, -0.01324462890625, -1.9073486328125e-06, -8.20159912109375e-05, -9.34600830078125e-05, -0.0009061098098754883, 0.0, -0.016501545906066895, 0.0, -0.02643585205078125, -1.9073486328125e-06, -0.007309913635253906, -2.0503786799963564e-05, -0.0021533966064453125, -1.1444091796875e-05, -0.01596546173095703, -5.7220458984375e-06, -0.041571617126464844, -9.5367431640625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfThePain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "spare_part_list"}}]}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(AddCard(\n            CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)\n            ), PlayerSelector()))])\n", "score": -5.275312825635865, "score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -2.6035985946655273, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -0.0010776519775390625, -0.0001373291015625, -0.10244786739349365, -3.576278118089249e-07, -0.00014030899910721928, -1.9073486328125e-06, -4.2080788261955604e-05, 0.0, -1.71661376953125e-05, -0.00018310546875, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.005824089050292969, -0.006589663214981556, -0.011586666107177734, 0.0, -0.0006961822509765625, -0.0028772354125976562, -2.2475223541259766, -0.00079345703125, -1.33514404296875e-05, 0.0, -0.0065593719482421875, -0.02380847930908203, -3.814697265625e-06, 0.0, -0.0006682864623144269, -0.0019512176513671875, -3.814697265625e-06, -0.010053634643554688, -1.71661376953125e-05, 0.0, -0.005242347717285156, 0.0, -0.013319969177246094, -1.9073486328125e-06, -8.20159912109375e-05, -9.34600830078125e-05, -0.0009080171585083008, 0.0, -0.01650059223175049, 0.0, -0.02650928497314453, -1.9073486328125e-06, -0.007302284240722656, -2.0503786799963564e-05, -0.0021514892578125, -1.1444091796875e-05, -0.015969276428222656, -5.7220458984375e-06, -0.041790008544921875, -9.5367431640625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "MistressOfPain", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "Damaged", "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "spare_part_list"}}]}]}]}], "hole2": 4, "hole1": 1}], "hole4": "player"}}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Weapon", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsWeapon()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\n", "score": -2.8985108282907888, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.8144702911376953, -0.20621593296527863, -0.0018705129623413086, 0.0, -0.0002841949462890625, -0.018726348876953125, -3.0517578125e-05, -0.04818122461438179, -0.3919476568698883, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0010242462158203125, -0.8714389801025391, -0.1252964735031128, -0.001001596450805664, -3.24249267578125e-05, -0.09999752044677734, -0.0002288818359375, -0.0013639898970723152, -3.814697265625e-06, -0.011418700218200684, -1.9073486328125e-06, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "IsWeapon"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Weapon", "<EOS>", 237, 50, 166, "Kill", "<EOS>", "Weapon", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsWeapon()),\n            ActionTag(Kill(), WeaponSelector()))])\n", "score": -2.983357417041013, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.8144702911376953, -0.20621593296527863, -0.0018705129623413086, 0.0, -0.0002841949462890625, -0.018726348876953125, -3.0517578125e-05, -0.04818122461438179, -0.3919476568698883, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0010242462158203125, -0.6915512084960938, -0.21629810333251953, -7.271752110682428e-06, -0.2877720296382904, -1.5616398741258308e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Kill", "hole3": "WeaponSelector"}], "hole1": [{"_type": "Template39", "hole0": "IsWeapon"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Hero", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\n", "score": -3.4818105526049905, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.8144702911376953, -0.20621593296527863, -0.0018705129623413086, 0.0, -0.0002841949462890625, -0.018726348876953125, -3.0517578125e-05, -0.04818122461438179, -1.645173192024231, -1.5735555280116387e-05, -5.7220458984375e-06, -0.000370025634765625, -0.2933626174926758, -0.0743483304977417, -0.0016062259674072266, -3.62396240234375e-05, -0.06480789184570312, -0.0001926422119140625, -0.0011037541553378105, -5.7220458984375e-06, -0.006093025207519531, 0.0, -1.52587890625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "IsHero"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Weapon", "<EOS>", 237, 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsWeapon()),\n            ActionTag(Kill(), SelfSelector()))])\n", "score": -4.105208175173509, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.8144702911376953, -0.20621593296527863, -0.0018705129623413086, 0.0, -0.0002841949462890625, -0.018726348876953125, -3.0517578125e-05, -0.04818122461438179, -0.3919476568698883, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0010242462158203125, -0.6915512084960938, -0.21629810333251953, -7.271752110682428e-06, -1.4095669984817505, -6.925992056494579e-05, -2.1457672119140625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}], "hole1": [{"_type": "Template39", "hole0": "IsWeapon"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Give", "<EOS>", 237, 58, 192, "3", "<EOS>", "Weapon", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(3)), WeaponSelector(picker=RandomPicker())))])\n", "score": -4.593968799400834, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -3.0726547241210938, -0.41378501057624817, -0.007161974906921387, 0.0, -3.814697265625e-06, -0.0024013519287109375, -0.2498025894165039, -0.020394084975123405, -0.010016798973083496, -3.814697265625e-05, -0.004557609558105469, -0.0016450881958007812, -0.4406236410140991, 0.0, -0.004279295913875103, -6.687641143798828e-05, 0.0, -0.04222869873046875, -0.01096343994140625, -2.288818359375e-05, -0.00251924991607666, -1.3828227565682027e-05, -7.43865966796875e-05, -3.814697265625e-06, -0.005711315665394068, -0.00010502335499040782, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "WeaponSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Template33", "hole0": 3}]}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "WARLOCK", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Weapon", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsWeapon()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\n", "score": -4.744138590582558, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -2.155252456665039, -3.814697265625e-06, -0.0002956390380859375, 0.0, -0.03441810607910156, -0.013843536376953125, -1.4543520592269488e-05, -1.9073486328125e-06, -0.0002384185791015625, -0.015705108642578125, -0.0045013427734375, -1.8715683836489916e-05, -3.480850500636734e-05, -0.00479888916015625, 0.0, -0.00026115489890798926, 0.0, -0.0035734176635742188, -0.000583648681640625, -0.6988296508789062, -0.21149513125419617, -0.0019112825393676758, 0.0, -0.0002841949462890625, -0.0189361572265625, -3.0517578125e-05, -0.04611407220363617, -0.3914448618888855, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0010128021240234375, -0.8625555038452148, -0.12415206432342529, -0.0010073184967041016, -3.24249267578125e-05, -0.10015583038330078, -0.0002269744873046875, -0.0013698310358449817, -3.814697265625e-06, -0.011432051658630371, -1.9073486328125e-06, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "WARLOCK", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "IsWeapon"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "WARLOCK", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Weapon", "<EOS>", 237, 50, 166, "Kill", "<EOS>", "Weapon", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsWeapon()),\n            ActionTag(Kill(), WeaponSelector()))])\n", "score": -4.85000526406872, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -2.155252456665039, -3.814697265625e-06, -0.0002956390380859375, 0.0, -0.03441810607910156, -0.013843536376953125, -1.4543520592269488e-05, -1.9073486328125e-06, -0.0002384185791015625, -0.015705108642578125, -0.0045013427734375, -1.8715683836489916e-05, -3.480850500636734e-05, -0.00479888916015625, 0.0, -0.00026115489890798926, 0.0, -0.0035734176635742188, -0.000583648681640625, -0.6988296508789062, -0.21149513125419617, -0.0019112825393676758, 0.0, -0.0002841949462890625, -0.0189361572265625, -3.0517578125e-05, -0.04611407220363617, -0.3914448618888855, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0010128021240234375, -0.6990385055541992, -0.21819782257080078, -7.271752110682428e-06, -0.28955841064453125, -1.573560803080909e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "WARLOCK", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Kill", "hole3": "WeaponSelector"}], "hole1": [{"_type": "Template39", "hole0": "IsWeapon"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Card", "Played", "<EOS>", 237, 63, 205, "Has", "Give", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "3", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CardPlayed(HasGive()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(\n            TurnEnded(Has3()), ActionTag(Give(ChangeHealth(2)),\n            SelfSelector()))])\n", "score": -4.9744498883923, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -1.3771196603775024, -0.15150165557861328, 0.0, -7.62939453125e-06, -0.08775901794433594, -1.9073486328125e-06, -0.12447024881839752, -0.07445251196622849, -0.0002629416121635586, -3.814697265625e-06, -0.022619247436523438, -0.07040023803710938, -0.12411355972290039, -0.00010323524475097656, -2.09808349609375e-05, -0.007355690002441406, -9.5367431640625e-05, -0.004743537865579128, -1.1444091796875e-05, -0.009639382362365723, 0.0, -1.1444091796875e-05, 0.0, -0.2323150634765625, -0.0001430511474609375, -0.002248525619506836, -5.7220458984375e-06, -0.0011653900146484375, -0.06148338317871094, -6.29425048828125e-05, -0.008524056524038315, -0.0010880040936172009, -1.1920928244535389e-07, -0.07858562469482422, -0.9844324588775635, -3.647804260253906e-05, -0.05179309844970703, -0.009908676147460938, -0.0840597152709961, -1.9073486328125e-06, -1.33514404296875e-05, -0.0336151123046875, -0.000209808349609375, -0.040611982345581055, -1.9073486328125e-06, -0.23768198490142822, 0.0, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CardPlayed", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "Has3"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasGive"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 63, 205, "Has", "Give", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "3", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(HasGive()), ActionTag\n            (Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(Has3\n            ()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n", "score": -5.460713752163755, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -1.8015565872192383, -5.7220458984375e-06, -0.05751090869307518, -0.06990515440702438, -0.0007533601601608098, -5.7220458984375e-06, -0.01583099365234375, -0.044066429138183594, -0.1753007173538208, -8.618831634521484e-05, -2.6702880859375e-05, -0.007027626037597656, -9.918212890625e-05, -0.004521338269114494, -9.5367431640625e-06, -0.009519100189208984, 0.0, -1.33514404296875e-05, 0.0, -0.18817996978759766, -0.0001583099365234375, -0.002390742301940918, -5.7220458984375e-06, -0.0008068084716796875, -0.047667503356933594, -6.29425048828125e-05, -0.004286407493054867, -0.001035919995047152, -1.1920928244535389e-07, -0.098430335521698, -0.9846904277801514, -3.075599670410156e-05, -0.041405677795410156, -0.008614540100097656, -0.07708263397216797, -1.9073486328125e-06, -1.33514404296875e-05, -0.034239768981933594, -0.00020599365234375, -0.03641200065612793, -1.9073486328125e-06, -0.22140049934387207, 0.0, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "Has3"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasGive"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Card", "Played", "<EOS>", 237, 63, 205, "Has", "Give", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "Give", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CardPlayed(HasGive()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(\n            TurnEnded(HasGive()), PlayerSelector())])\n", "score": -5.496887818498962, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -1.3771196603775024, -0.15150165557861328, 0.0, -7.62939453125e-06, -0.08775901794433594, -1.9073486328125e-06, -0.12447024881839752, -0.07445251196622849, -0.0002629416121635586, -3.814697265625e-06, -0.022619247436523438, -0.07040023803710938, -0.12411355972290039, -0.00010323524475097656, -2.09808349609375e-05, -0.007355690002441406, -9.5367431640625e-05, -0.004743537865579128, -1.1444091796875e-05, -0.009639382362365723, 0.0, -1.1444091796875e-05, 0.0, -0.2323150634765625, -0.0001430511474609375, -0.002248525619506836, -5.7220458984375e-06, -0.0011653900146484375, -0.06148338317871094, -6.29425048828125e-05, -0.008524056524038315, -0.0010880040936172009, -1.1920928244535389e-07, -0.07858562469482422, -0.8620432615280151, -4.88758041683468e-06, -1.035019874572754, -1.33514404296875e-05, -0.06708014011383057, -0.0006428956985473633, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CardPlayed", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "HasGive"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasGive"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Card", "Played", "<EOS>", 237, 63, 205, "Has", "Give", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 53, 182, "Turn", "Ended", "<EOS>", "Has", "Give", "<EOS>", 50, 169, "Give", "<EOS>", 237, 58, 192, "2", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CardPlayed(HasGive()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(\n            TurnEnded(HasGive()), ActionTag(Give(ChangeHealth(2)),\n            SelfSelector()))])\n", "score": -5.853217140360229, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -1.3771196603775024, -0.15150165557861328, 0.0, -7.62939453125e-06, -0.08775901794433594, -1.9073486328125e-06, -0.12447024881839752, -0.07445251196622849, -0.0002629416121635586, -3.814697265625e-06, -0.022619247436523438, -0.07040023803710938, -0.12411355972290039, -0.00010323524475097656, -2.09808349609375e-05, -0.007355690002441406, -9.5367431640625e-05, -0.004743537865579128, -1.1444091796875e-05, -0.009639382362365723, 0.0, -1.1444091796875e-05, 0.0, -0.2323150634765625, -0.0001430511474609375, -0.002248525619506836, -5.7220458984375e-06, -0.0011653900146484375, -0.06148338317871094, -6.29425048828125e-05, -0.008524056524038315, -0.0010880040936172009, -1.1920928244535389e-07, -0.07858562469482422, -0.8620432615280151, -4.88758041683468e-06, -1.077561378479004, -0.0032014846801757812, -0.03223419189453125, -5.7220458984375e-06, -2.6702880859375e-05, -0.03923225402832031, -0.000232696533203125, -0.10793471336364746, -1.9073486328125e-06, -0.1986449956893921, 0.0, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CardPlayed", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template26", "hole0": "TurnEnded", "hole1": "HasGive"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template33", "hole0": 2}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 2}]}], "hole1": [{"_type": "Template39", "hole0": "HasGive"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 237, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(ActionTag(\n            ChangeTarget(CharacterSelector(Null)), EnemyPlayer(),\n            UserPicker())), GreaterThan(Count(CardSelector(condition=\n            IsMinion())), value=0)), IsType(MINION_TYPE.BEAST)])\n", "score": -7.675864770856478, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -0.19038963317871094, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.1578531265258789, -0.0035791397094726562, -5.7220458984375e-06, -0.006962776184082031, -0.6303281784057617, -0.0001544952392578125, -0.011043346486985683, -0.08821932226419449, -0.0005700166220776737, -1.71661376953125e-05, 0.0, -0.0365980863571167, -0.0010080337524414062, -1.9073486328125e-06, -0.06838417053222656, -1.009511947631836, -5.91278076171875e-05, -0.00019073486328125, -1.1920928244535389e-07, -0.0034160614013671875, 0.0, -0.023369191214442253, -5.340576171875e-05, -1.9073486328125e-06, -0.07250499725341797, -1.9073486328125e-06, -0.3917093276977539, -0.00043213367462158203, -2.50339189733495e-06, -5.7220458984375e-06, -0.09743690490722656, -0.040671348571777344, -7.43865966796875e-05, 0.0, -0.00746762752532959, -0.000732421875, -1.9073486328125e-06, -1.9073486328125e-06, -0.000606536865234375, -0.05010700225830078, -0.01764666475355625, -1.3589859008789062e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.002369880210608244, -0.000652313232421875, 0.0, -5.53131103515625e-05, -0.018978118896484375, -3.4332275390625e-05, -0.01971900463104248, 0.0, -0.2561311721801758, -1.9073486328125e-06, -0.017735719680786133, -0.12109296768903732, -2.09808349609375e-05, -0.000152587890625, -0.009103775024414062, -0.000263214111328125, -0.45709240436553955, -3.075599670410156e-05, -0.0004673004150390625, -0.0002384185791015625, -0.12687279284000397, -1.1682510375976562e-05, -0.0006084442138671875, -0.3431692123413086, -0.007761955261230469, -1.71661376953125e-05, -7.62939453125e-06, -1.18521249294281, -0.018947839736938477, 0.0, -5.91278076171875e-05, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.20576095581054688, -9.5367431640625e-06, -0.44473934173583984, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}]}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 237, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(ActionTag(\n            ChangeTarget(CharacterSelector(Null)), EnemyPlayer(),\n            UserPicker())), GreaterThan(Count(CardSelector(condition=\n            IsMinion())), value=0)), ActionTag(Summon(<UNK>()),\n            PlayerSelector())])\n", "score": -7.686309334291636, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -0.19038963317871094, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.1578531265258789, -0.0035791397094726562, -5.7220458984375e-06, -0.006962776184082031, -0.6303281784057617, -0.0001544952392578125, -0.011043346486985683, -0.08821932226419449, -0.0005700166220776737, -1.71661376953125e-05, 0.0, -0.0365980863571167, -0.0010080337524414062, -1.9073486328125e-06, -0.06838417053222656, -1.009511947631836, -5.91278076171875e-05, -0.00019073486328125, -1.1920928244535389e-07, -0.0034160614013671875, 0.0, -0.023369191214442253, -5.340576171875e-05, -1.9073486328125e-06, -0.07250499725341797, -1.9073486328125e-06, -0.3917093276977539, -0.00043213367462158203, -2.50339189733495e-06, -5.7220458984375e-06, -0.09743690490722656, -0.040671348571777344, -7.43865966796875e-05, 0.0, -0.00746762752532959, -0.000732421875, -1.9073486328125e-06, -1.9073486328125e-06, -0.000606536865234375, -0.05010700225830078, -0.01764666475355625, -1.3589859008789062e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.002369880210608244, -0.000652313232421875, 0.0, -5.53131103515625e-05, -0.018978118896484375, -3.4332275390625e-05, -0.01971900463104248, 0.0, -0.2561311721801758, -1.9073486328125e-06, -0.017735719680786133, -0.12109296768903732, -2.09808349609375e-05, -0.000152587890625, -0.009103775024414062, -0.000263214111328125, -0.45709240436553955, -3.075599670410156e-05, -0.0004673004150390625, -0.0002384185791015625, -0.12687279284000397, -1.1682510375976562e-05, -0.0006084442138671875, -1.2763690948486328, -0.009344100952148438, -0.06888628005981445, 0.0, -1.71661376953125e-05, -1.71661376953125e-05, -0.0001010894775390625, -0.7786690592765808, -0.08239053189754486, -0.00034486930235289037, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "<UNK>"}]}], "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}]}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(ActionTag(\n            ChangeTarget(CharacterSelector(IsType(MINION_TYPE.BEAST))),\n            BothPlayer(), UserPicker())), GreaterThan(Count(CardSelector(\n            condition=IsMinion())), value=0)), IsType(MINION_TYPE.BEAST)])\n", "score": -8.657824682142511, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -0.19038963317871094, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.1578531265258789, -0.0035791397094726562, -5.7220458984375e-06, -0.006962776184082031, -0.6303281784057617, -0.0001544952392578125, -0.011043346486985683, -0.08821932226419449, -0.0005700166220776737, -1.71661376953125e-05, 0.0, -0.0365980863571167, -0.0010080337524414062, -1.9073486328125e-06, -0.06838417053222656, -1.1296606063842773, -1.1444091796875e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.15815746784210205, -7.295608520507812e-05, -1.9073486328125e-06, -8.392333984375e-05, -5.7220458984375e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.11560344696044922, -3.814697265625e-06, -0.5916728973388672, 0.0, -0.06592559814453125, -9.5367431640625e-06, -0.18751764297485352, -1.2755381249007769e-05, -7.867813110351562e-06, -0.02791595458984375, 0.0, -0.03669201582670212, -0.00037741661071777344, -1.0728830375228426e-06, -3.814697265625e-06, -0.11478042602539062, -0.03541755676269531, -6.29425048828125e-05, 0.0, -0.006399393081665039, -0.0008945465087890625, -3.814697265625e-06, -1.9073486328125e-06, -0.0005702972412109375, -0.047812461853027344, -0.018104905262589455, -1.3589859008789062e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.0021581647451967, -0.00061798095703125, 0.0, -4.38690185546875e-05, -0.017304420471191406, -2.86102294921875e-05, -0.02773582935333252, 0.0, -0.3961219787597656, 0.0, -0.03334224224090576, -0.12308055907487869, -1.9073486328125e-05, -0.00017547607421875, -0.009187698364257812, -0.0001583099365234375, -0.3403412103652954, -3.445148468017578e-05, -0.0003032684326171875, -0.000209808349609375, -0.11536238342523575, -1.3589859008789062e-05, -0.00035858154296875, -0.37660789489746094, -0.006230354309082031, -1.9073486328125e-05, -5.7220458984375e-06, -1.2684710025787354, -0.018881797790527344, 0.0, -5.7220458984375e-05, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.2139730453491211, -9.5367431640625e-06, -0.44658565521240234, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "BothPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}]}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 237, 39, 110, 21, 134, "Action", "Selector", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(ActionTag(\n            ChangeTarget(CharacterSelector(IsType(MINION_TYPE.BEAST))),\n            BothPlayer(), UserPicker())), GreaterThan(Count(CardSelector(\n            condition=IsMinion())), value=0)), ActionSelector(MINION_TYPE.\n            BEAST)])\n", "score": -10.15311734571673, "score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -0.19038963317871094, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.1578531265258789, -0.0035791397094726562, -5.7220458984375e-06, -0.006962776184082031, -0.6303281784057617, -0.0001544952392578125, -0.011043346486985683, -0.08821932226419449, -0.0005700166220776737, -1.71661376953125e-05, 0.0, -0.0365980863571167, -0.0010080337524414062, -1.9073486328125e-06, -0.06838417053222656, -1.1296606063842773, -1.1444091796875e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.15815746784210205, -7.295608520507812e-05, -1.9073486328125e-06, -8.392333984375e-05, -5.7220458984375e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.11560344696044922, -3.814697265625e-06, -0.5916728973388672, 0.0, -0.06592559814453125, -9.5367431640625e-06, -0.18751764297485352, -1.2755381249007769e-05, -7.867813110351562e-06, -0.02791595458984375, 0.0, -0.03669201582670212, -0.00037741661071777344, -1.0728830375228426e-06, -3.814697265625e-06, -0.11478042602539062, -0.03541755676269531, -6.29425048828125e-05, 0.0, -0.006399393081665039, -0.0008945465087890625, -3.814697265625e-06, -1.9073486328125e-06, -0.0005702972412109375, -0.047812461853027344, -0.018104905262589455, -1.3589859008789062e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.0021581647451967, -0.00061798095703125, 0.0, -4.38690185546875e-05, -0.017304420471191406, -2.86102294921875e-05, -0.02773582935333252, 0.0, -0.3961219787597656, 0.0, -0.03334224224090576, -0.12308055907487869, -1.9073486328125e-05, -0.00017547607421875, -0.009187698364257812, -0.0001583099365234375, -0.3403412103652954, -3.445148468017578e-05, -0.0003032684326171875, -0.000209808349609375, -0.11536238342523575, -1.3589859008789062e-05, -0.00035858154296875, -0.37660789489746094, -0.006230354309082031, -1.9073486328125e-05, -5.7220458984375e-06, -1.1565630435943604, -0.6308908462524414, 0.0, -0.000423431396484375, -0.06242084503173828, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.9944868087768555, -3.814697265625e-06, -0.5984840393066406, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Powermace", "hole3": "RARE", "hole2": "PRIEST", "hole1": 3}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Powermace", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionSelector"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "BothPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}]}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -1.3993824659712857, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -0.0937948226928711, -0.0001659393310546875, -0.0010366252390667796, -2.145764938177308e-06, -0.00018118497973773628, -0.1051793098449707, -5.7220458984375e-06, -0.001371158054098487, 0.0, -0.001471385476179421, -3.814697265625e-06, -4.0531158447265625e-06, -0.0002288818359375, -2.6702880859375e-05, -1.71661376953125e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.00273895263671875, -6.818771362304688e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -0.024845361709594727, 0.0, -0.0013332366943359375, 0.0, -0.016916275024414062, -0.00017547607421875, -7.510157047363464e-06, -2.3841855067985307e-07, -3.147123061353341e-05, -1.585470999998506e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 165, "Give", "<EOS>", 237, 58, 192, "4", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -1.582460280387572, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.9399528503417969, -8.312053978443146e-07, -0.003415180603042245, -3.24249267578125e-05, -0.1678142547607422, -0.0007305145263671875, -0.004506564699113369, -7.748603820800781e-06, -6.841029971837997e-05, -5.340576171875e-05, -5.841255187988281e-06, -6.103515625e-05, -0.007663726806640625, -5.7220458984375e-06, -2.288818359375e-05, -7.62939453125e-06, -0.00024449825286865234, -7.677078247070312e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.00449371337890625, 0.0, -0.000492095947265625, 0.0, -0.0003795623779296875, -0.0002422332763671875, 0.0, -0.0033799409866333008, -4.5299530029296875e-06, -0.0047969818115234375, -7.62939453125e-06, -0.0011825560359284282, -6.949900853214785e-05, -1.1920928244535389e-07, -0.000202178955078125, -4.76837158203125e-05, -7.164220733102411e-05, 0.0, -0.0001568789448356256, -1.311301275563892e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole2": "MinionSelector", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": [{"_type": "Template33", "hole0": 4}], "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -2.2174606326329354, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -1.2944906949996948, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.0010647773742675781, -2.3841855067985307e-07, -0.0009469985961914062, -7.62939453125e-06, -0.001026153564453125, -1.9073486328125e-06, -0.0019073486328125, 0.0, -3.4332275390625e-05, 0.0, -0.00250244140625, -0.6408786773681641, -0.015367163345217705, -0.007016599178314209, -0.000308990478515625, -0.0920257568359375, -0.00016021728515625, -0.0009724923293106258, -2.145764938177308e-06, -0.00018452228687237948, -0.1055912971496582, -5.7220458984375e-06, -0.0013978600036352873, 0.0, -0.001477338606491685, -3.814697265625e-06, -2.1457672119140625e-06, -0.0002288818359375, -2.6702880859375e-05, -1.52587890625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0027484893798828125, -7.009506225585938e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -0.024156808853149414, 0.0, -0.001338958740234375, 0.0, -0.016702651977539062, -0.00017547607421875, -7.510157047363464e-06, -2.3841855067985307e-07, -3.159043990308419e-05, -1.5735502529423684e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARRIOR", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 165, "Give", "<EOS>", 237, 58, 192, "4", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -2.5099039579181053, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -1.2944906949996948, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.0010647773742675781, -2.3841855067985307e-07, -0.0009469985961914062, -7.62939453125e-06, -0.001026153564453125, -1.9073486328125e-06, -0.0019073486328125, 0.0, -3.4332275390625e-05, 0.0, -0.00250244140625, -1.003082275390625, -7.126946002244949e-07, -0.003544693812727928, -3.24249267578125e-05, -0.16771697998046875, -0.000705718994140625, -0.004445421975106001, -7.748603820800781e-06, -6.983056664466858e-05, -4.9591064453125e-05, -5.841255187988281e-06, -5.91278076171875e-05, -0.0077037811279296875, -5.7220458984375e-06, -2.288818359375e-05, -7.62939453125e-06, -0.00024259090423583984, -7.677078247070312e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.0045375823974609375, 0.0, -0.000492095947265625, 0.0, -0.0003814697265625, -0.000244140625, 0.0, -0.0034600496292114258, -4.5299530029296875e-06, -0.004795074462890625, -7.62939453125e-06, -0.001182675245217979, -6.949900853214785e-05, -1.1920928244535389e-07, -0.0002040863037109375, -4.76837158203125e-05, -7.188061135821044e-05, 0.0, -0.00015699813957326114, -1.311301275563892e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARRIOR", "hole3": "RARE", "hole8": {"_type": "Template18", "hole2": "MinionSelector", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": [{"_type": "Template33", "hole0": 4}], "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -3.6308375975061153, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -0.0937948226928711, -0.0001659393310546875, -0.0010366252390667796, -2.145764938177308e-06, -0.00018118497973773628, -2.313507556915283, -1.9073486328125e-06, -0.00030056387186050415, 0.0, -0.001430039294064045, -3.814697265625e-06, -2.0265579223632812e-06, -0.0002803802490234375, -2.288818359375e-05, -1.52587890625e-05, -3.4332275390625e-05, -3.814697265625e-06, -0.003545999526977539, -8.952617645263672e-05, 0.0, -5.53131103515625e-05, -1.71661376953125e-05, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -0.045557260513305664, 0.0, -0.0014095306396484375, 0.0, -0.019484519958496094, -0.0001811981201171875, -7.390948667307384e-06, -3.576278118089249e-07, -3.3140160667244345e-05, -1.680836794548668e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 165, "Give", "<EOS>", 237, 57, 191, "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.164766940342183, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.9399528503417969, -8.312053978443146e-07, -0.003415180603042245, -3.24249267578125e-05, -2.701348304748535, -0.0001049041748046875, -0.015612033195793629, 0.0, -0.003578752279281616, -8.0108642578125e-05, -3.933906555175781e-06, -7.05718994140625e-05, -0.04271221160888672, -3.814697265625e-06, -3.24249267578125e-05, -5.7220458984375e-06, -0.00022912025451660156, -8.237361907958984e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -0.0035134553909301758, 0.0, -0.0005054473876953125, 0.0, -0.0004367828369140625, -0.000308990478515625, 0.0, -0.004449963569641113, -6.556510470545618e-06, -0.0042324066162109375, -7.62939453125e-06, -0.0012348889140412211, -7.355212437687442e-05, -1.1920928244535389e-07, -0.0001964569091796875, -4.76837158203125e-05, -6.878138810861856e-05, 0.0, -0.00016164728731382638, -1.311301275563892e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole2": "MinionSelector", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": [{"_type": "Template32", "hole0": 2}], "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.44401376910028, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -1.2944906949996948, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.0010647773742675781, -2.3841855067985307e-07, -0.0009469985961914062, -7.62939453125e-06, -0.001026153564453125, -1.9073486328125e-06, -0.0019073486328125, 0.0, -3.4332275390625e-05, 0.0, -0.00250244140625, -0.6408786773681641, -0.015367163345217705, -0.007016599178314209, -0.000308990478515625, -0.0920257568359375, -0.00016021728515625, -0.0009724923293106258, -2.145764938177308e-06, -0.00018452228687237948, -2.309861660003662, -1.9073486328125e-06, -0.00030795857310295105, 0.0, -0.0014333752915263176, -3.814697265625e-06, -2.0265579223632812e-06, -0.000278472900390625, -2.288818359375e-05, -1.52587890625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0035288333892822266, -9.143352508544922e-05, 0.0, -5.53131103515625e-05, -1.71661376953125e-05, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -0.044100046157836914, 0.0, -0.0014171600341796875, 0.0, -0.01924610137939453, -0.000179290771484375, -7.390948667307384e-06, -3.576278118089249e-07, -3.3140160667244345e-05, -1.6689160474925302e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "WARRIOR", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.44872208638256, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -3.53116774559021, -3.0517578125e-05, -4.589557647705078e-05, 0.0, -0.0009025335311889648, -5.960462772236497e-07, -0.0010538101196289062, -7.62939453125e-06, -0.0006809234619140625, -3.814697265625e-06, -0.001544952392578125, 0.0, -3.4332275390625e-05, 0.0, -0.002532958984375, -0.6326560974121094, -0.015364035964012146, -0.006877928040921688, -0.000308990478515625, -0.0949554443359375, -0.0001583099365234375, -0.0010018176399171352, -2.0265558760002023e-06, -0.00018464148161001503, -0.1056523323059082, -5.7220458984375e-06, -0.0013854631688445807, 0.0, -0.001467702561058104, -3.814697265625e-06, -4.0531158447265625e-06, -0.0002269744873046875, -2.6702880859375e-05, -1.52587890625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.002735137939453125, -7.009506225585938e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.33514404296875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -0.0247499942779541, 0.0, -0.001338958740234375, 0.0, -0.016819000244140625, -0.00017547607421875, -7.510157047363464e-06, -2.3841855067985307e-07, -3.147123061353341e-05, -1.585470999998506e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 160, "Give", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(), MinionSelector(players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.519978548541587, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -3.491896152496338, -0.03256966173648834, -0.0012183509534224868, -0.008551973849534988, -0.0024782419204711914, -1.1682492186082527e-05, -0.11824226379394531, -0.00022125244140625, -1.9073486328125e-06, -0.41300296783447266, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.004049777984619141, -7.748603820800781e-06, 0.0, -0.0001506805419921875, -3.814697265625e-06, -0.0017147064208984375, -9.536738616588991e-07, -0.0027866363525390625, -5.7220458984375e-06, -0.00021660314814653248, -4.100799196748994e-05, 0.0, -0.000270843505859375, -4.38690185546875e-05, -0.00013004886568523943, 0.0, -0.0001581902615725994, -1.1920922133867862e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole2": "MinionSelector"}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 165, "Give", "<EOS>", 237, 58, 192, "4", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.762906316758567, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -3.53116774559021, -3.0517578125e-05, -4.589557647705078e-05, 0.0, -0.0009025335311889648, -5.960462772236497e-07, -0.0010538101196289062, -7.62939453125e-06, -0.0006809234619140625, -3.814697265625e-06, -0.001544952392578125, 0.0, -3.4332275390625e-05, 0.0, -0.002532958984375, -1.01629638671875, -7.124617695808411e-07, -0.0035286759957671165, -3.24249267578125e-05, -0.17157268524169922, -0.000720977783203125, -0.004452213644981384, -7.748603820800781e-06, -6.959307938814163e-05, -4.9591064453125e-05, -5.841255187988281e-06, -5.91278076171875e-05, -0.00774383544921875, -5.7220458984375e-06, -2.288818359375e-05, -7.62939453125e-06, -0.00024259090423583984, -7.677078247070312e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.0045223236083984375, 0.0, -0.000492095947265625, 0.0, -0.0003814697265625, -0.000244140625, 0.0, -0.0034486055374145508, -4.5299530029296875e-06, -0.004778861999511719, -7.62939453125e-06, -0.0011807678965851665, -6.949900853214785e-05, -1.1920928244535389e-07, -0.0002040863037109375, -4.76837158203125e-05, -7.176140934461728e-05, 0.0, -0.00015699813957326114, -1.311301275563892e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "PRIEST", "hole3": "RARE", "hole8": {"_type": "Template18", "hole2": "MinionSelector", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole1": [{"_type": "Template33", "hole0": 4}], "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 58, 192, "4", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.775734584384509, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -3.3749332427978516, -0.000957489013671875, -0.216828852891922, -1.1444091796875e-05, -2.5017012376338243e-05, -2.0384788513183594e-05, -2.0265579223632812e-06, -0.00525665283203125, -8.392333984375e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.62939453125e-06, -0.0003293752670288086, -6.031990051269531e-05, 0.0, -3.24249267578125e-05, -1.71661376953125e-05, -1.71661376953125e-05, -2.6702880859375e-05, 0.0, -0.004862070083618164, 0.0, -0.0006046295166015625, 0.0, -0.021714210510253906, -0.00025177001953125, -9.536697689327411e-06, -3.576278118089249e-07, -2.9802298740833066e-05, -1.9192511899746023e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template33", "hole0": 4}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.067057468114797, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -4.1012420654296875, 0.0, -0.0014783143997192383, 0.0, -0.0012476444244384766, -2.3841855067985307e-07, -0.0006704330444335938, -5.7220458984375e-06, -0.0009059906005859375, -1.9073486328125e-06, -0.00185394287109375, 0.0, -4.00543212890625e-05, 0.0, -0.002948760986328125, -0.6805267333984375, -0.015369290485978127, -0.006835038308054209, -0.00031280517578125, -0.09363269805908203, -0.000164031982421875, -0.0009963326156139374, -2.145764938177308e-06, -0.00018249606364406645, -0.10494089126586914, -5.7220458984375e-06, -0.0013597137294709682, 0.0, -0.001476386678405106, -3.814697265625e-06, -2.1457672119140625e-06, -0.0002288818359375, -2.6702880859375e-05, -1.71661376953125e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.00275421142578125, -7.009506225585938e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -0.024835824966430664, 0.0, -0.0013294219970703125, 0.0, -0.016885757446289062, -0.00017547607421875, -7.510157047363464e-06, -2.3841855067985307e-07, -3.159043990308419e-05, -1.585470999998506e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 39, 110, 21, 134, "Buff", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 39, 109, 21, 134, "Turn", "Ended", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=\n            BothPlayer()))), MinionSelector(IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.483619614596847, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -3.082317352294922, -0.0036907196044921875, -7.62939453125e-05, -7.43865966796875e-05, -0.07971571385860443, -0.0010249435435980558, 0.0, -0.1972789764404297, -0.1635284423828125, -2.288818359375e-05, -0.025555815547704697, -3.3378591979271732e-06, -0.0048465728759765625, -0.006588935852050781, -8.392333984375e-05, -3.814697265625e-06, -0.2518494129180908, -0.0006902121240273118, -1.71661376953125e-05, -2.6702880859375e-05, -0.003231048583984375, -0.0004444122314453125, -0.002237915061414242, 0.0, -0.0001277923583984375, -0.000179290771484375, -0.028126955032348633, -0.00023422014783136547, -6.29425048828125e-05, -0.3342747688293457, -1.537799835205078e-05, -2.288818359375e-05, -0.05189990997314453, -0.07034778594970703, -0.0009632110595703125, -3.814697265625e-05, -1.9073486328125e-06, -0.00037598609924316406, -3.147125244140625e-05, 0.0, -3.814697265625e-05, -1.1444091796875e-05, -1.52587890625e-05, -4.00543212890625e-05, 0.0, -0.011728405952453613, 0.0, -0.0006618499755859375, 0.0, -0.011149406433105469, -0.000286102294921875, -1.4901048416504636e-05, -2.3841855067985307e-07, -3.4570664865896106e-05, -1.537788011773955e-05], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Call", "func": {"_type": "Name", "id": "TurnEnded"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            player.minions))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -6.030484667851198, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -0.0937948226928711, -0.0001659393310546875, -0.0010366252390667796, -2.145764938177308e-06, -0.00018118497973773628, -0.1051793098449707, -5.7220458984375e-06, -0.001371158054098487, 0.0, -0.001471385476179421, -3.814697265625e-06, -4.0531158447265625e-06, -0.0002288818359375, -2.6702880859375e-05, -1.71661376953125e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.00273895263671875, -6.818771362304688e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -3.9840385913848877, 0.0, -0.1345762014389038, -3.814697265625e-06, -0.555415153503418, -0.000164031982421875, -4.5179294829722494e-05, -2.3841855067985307e-07, -0.00017797789769247174, -6.437280717364047e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole8": {"_type": "Template18", "hole0": "Give", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole2": "MinionSelector", "hole1": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 4, "hole0": "Screwjank Clunker", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 2, "hole1": 5}]}]}}, {"choice_history": [69, 133, 248], "inferred_code": "", "score": -20.487723350524902, "score_history": [-0.0006494522094726562, -0.0001201629638671875, -20.486953735351562], "model_output": {"_type": "Module", "body": []}}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "score": -0.8817320906838901, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -0.31776395440101624, -0.0011452726321294904, -0.0001506805419921875, -0.002170562744140625, 0.0, -0.0007177587249316275, -1.71661376953125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "'s", "Old", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon('sOld()),\n            PlayerSelector()))\n", "score": -2.1301649168146284, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -1.8608026504516602, -4.57763671875e-05, -0.0007440820336341858, -0.00033206320949830115, -0.1398102045059204, -0.014952469617128372, -0.06587967276573181, -0.00279998779296875, -1.9073486328125e-06, -7.665125303901732e-05, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "'sOld"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Summon", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), Summon()])), PlayerSelector()))\n", "score": -2.249876741336429, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -1.674090027809143, -0.0006154676666483283, -0.000110626220703125, -3.814697265625e-06, -0.015261499211192131, -2.86102294921875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "Summon"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "5", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(5), IsMinion()])), PlayerSelector()))\n", "score": -3.8422602249940354, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -3.118403196334839, -1.1920928244535389e-07, -0.0443267822265625, -0.004750251770019531, -0.16887007653713226, -0.0013054923620074987, -0.0003261566162109375, -0.0018024444580078125, -1.9073486328125e-06, -0.00045287597458809614, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 5}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Minion", "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), MinionIsMinion()])), PlayerSelector()))\n", "score": -3.85308788357559, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -3.1221938133239746, -0.059752821922302246, -0.10199218988418579, -0.000392913818359375, -0.00604248046875, -1.9073486328125e-06, -0.002845879178494215, -9.918212890625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "MinionIsMinion"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "Old", "Old", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(OldOld()),\n            PlayerSelector()))\n", "score": -4.179849322141472, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -1.8608026504516602, -4.57763671875e-05, -0.0007440820336341858, -0.00033206320949830115, -2.1894946098327637, -0.014952469617128372, -0.06587967276573181, -0.00279998779296875, -1.9073486328125e-06, -7.665125303901732e-05, -4.38690185546875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "OldOld"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardSelector(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "score": -4.358160291465701, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -2.645719528198242, 0.0, -0.0001926422119140625, -0.000186920166015625, -2.86102294921875e-05, -0.7171345949172974, 0.0, -0.13917827606201172, -0.0004940032958984375, -0.0015544891357421875, -0.024598121643066406, -0.0002593994140625, -0.06240487098693848, -0.015848271548748016, 0.0, -0.02343425340950489, 0.0, -0.008699417114257812, -0.004384040832519531, -0.3570685088634491, -0.001734915771521628, -0.00017547607421875, -0.003570556640625, 0.0, -0.0006115430733188987, -1.1444091796875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "legendary", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[Manalegendary(Attribute('health', SelfSelector())),\n            IsMinion()])), PlayerSelector()))\n", "score": -4.705034934291852, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -3.2479066848754883, -0.0034284591674804688, -0.014760536141693592, -0.3285945653915405, -0.006460968870669603, -0.000244140625, -5.7220458984375e-06, -0.04864035174250603, -0.00093841552734375, -3.814697265625e-06, -0.0001373291015625, -0.0001010894775390625, -0.1947624683380127, -0.0001697540283203125, -0.2280101776123047, 0.0, -0.12052631378173828, -1.1444091796875e-05, -1.1444091796875e-05, -0.02611827850341797, -0.0034847259521484375, -0.035302840173244476, -0.0002891977201215923, -6.103515625e-05, -0.0022029876708984375, -1.9073486328125e-06, -0.004817127715796232, -9.5367431640625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "Manalegendary", "hole2": [{"_type": "Str", "s": "health"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Increase", "Durability", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IncreaseDurability()])), PlayerSelector())\n            )\n", "score": -5.047992174064511, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -3.8437812328338623, -0.5547926425933838, -0.00016747775953263044, -6.67572021484375e-05, -1.1444091796875e-05, -0.08935251832008362, -5.340576171875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "IncreaseDurability"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Random", "Picker", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardSelector(\n            condition=RandomPicker())), PlayerSelector()))\n", "score": -5.145648635500201, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -2.645719528198242, 0.0, -0.0001926422119140625, -0.000186920166015625, -2.86102294921875e-05, -0.9296094179153442, 0.0, -0.13092899322509766, -3.62396240234375e-05, -1.0006533861160278, -0.0027648210525512695, -1.3470558769768104e-05, -0.00037384033203125, 0.0, -0.08422839641571045, -4.1961669921875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": {"_type": "Name", "id": "CardSelector"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "'s", "Old", "Shredder", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon('sOldShredder()),\n            PlayerSelector()))\n", "score": -5.1958466708148805, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -1.8608026504516602, -4.57763671875e-05, -0.0007440820336341858, -0.00033206320949830115, -0.1398102045059204, -0.014952469617128372, -2.771049737930298, -0.34547069668769836, -0.01776885986328125, -1.9073486328125e-06, -0.00014686398208141327, -4.57763671875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "'sOldShredder"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "<UNK>", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), <UNK>()])), PlayerSelector()))\n", "score": -5.26205054963264, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -4.373201847076416, -0.3162968158721924, -0.00882720947265625, -3.814697265625e-06, -0.003933186177164316, -1.9073486328125e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "<UNK>"}]}}], "hole1": {"_type": "Name", "id": "CardQuery"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 63, 205, "Summon", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(), SelfSelector()))\n", "score": -5.378378009785756, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -4.635702133178711, -1.9073486328125e-06, -0.4682363271713257, -0.01498809177428484, -0.0025997161865234375, 0.0, -0.21209938824176788, -7.271766662597656e-05, -2.1457672119140625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template39", "hole0": "Summon"}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Summon", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardSelector(\n            conditions=[ManaCost(2), Summon()])), PlayerSelector()))\n", "score": -5.471619434482072, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -2.645719528198242, 0.0, -0.0001926422119140625, -0.000186920166015625, -2.86102294921875e-05, -0.7171345949172974, 0.0, -0.13917827606201172, -0.0004940032958984375, -0.0015544891357421875, -0.024598121643066406, -0.0002593994140625, -0.06240487098693848, -0.015848271548748016, 0.0, -0.02343425340950489, 0.0, -0.008699417114257812, -0.004384040832519531, -1.4622398614883423, -0.00022232455376069993, -0.000186920166015625, -5.7220458984375e-06, -0.013953871093690395, -2.288818359375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole3": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}, {"_type": "Template38_expr_seq", "hole0": "Summon"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 186, "Summon", "<EOS>", 21, 134, "Summon", "<EOS>", 238, 63, 205, "Sneed", "<EOS>", 46, 139, "7", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(Summon(Sneed(), \n            7)), PlayerSelector()))\n", "score": -5.546846756100585, "score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -2.322793960571289, -0.013026222586631775, -0.0054471977055072784, -0.0001163482666015625, -3.814697265625e-06, -1.3614907264709473, -1.6450858311145566e-05, -2.09808349609375e-05, -0.0001583099365234375, -3.0517578125e-05, -1.3562772274017334, -0.037830840796232224, -0.01052093505859375, -0.00032806396484375, -0.10725221037864685, -9.894352842820808e-06, -0.08532047271728516, -6.4849853515625e-05, -0.0018714666366577148, -9.5367431640625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole1": 8, "hole0": "<UNK> Old Shredder", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>OldShredder", "hole6": [{"_type": "Template22", "hole0": 5, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole0": "Summon", "hole2": [{"_type": "Template39", "hole0": "Sneed"}, {"_type": "Num", "n": 7}], "hole1": {"_type": "Name", "id": "Summon"}}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 7}], "hole4": "player"}}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -2.8881122813250713, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.8408870697021484, -0.0017910003662109375, -0.0001239776611328125, -4.00543212890625e-05, 0.0, -3.62396240234375e-05, -0.002346038818359375, -3.814697265625e-06, -0.002025604248046875, -4.57763671875e-05, -1.9073486328125e-05, -0.000453948974609375, -1.9073486328125e-06, -7.62939453125e-05, -2.6702880859375e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.003139495849609375, 0.0, -0.09731455147266388, -3.933906555175781e-06, -0.0008716583251953125, -2.09808349609375e-05, -0.02482318878173828, -0.00014340877532958984, -0.0026397705078125, -1.33514404296875e-05, -0.36727428436279297, -9.5367431640625e-06, -0.0019843378104269505, -0.000102996826171875, 0.0, -0.0015354156494140625, -0.006069183349609375, -3.814697265625e-06, -0.004309654235839844, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.010740876197814941, 0.0, -3.814697265625e-06, -1.0132738680113107e-05, 0.0, -2.6822088329936378e-05, 0.0, -0.0021686553955078125, -0.04937458038330078, -2.288818359375e-05, -0.00012123584747314453, -2.3841855067985307e-07, -0.2108091115951538, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "<UNK>"}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 238, 63, 205, "Whelp", "<EOS>", 46, 139, "2", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(Whelp(), 2),\n            PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.3105628247230285, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.5680408477783203, -0.788116455078125, -3.814697265625e-06, -0.1458061933517456, -4.3511365220183507e-05, -0.15562915802001953, -9.5367431640625e-06, -0.186767578125, 0.0, -0.0004696208343375474, -9.5367431640625e-06, 0.0, -4.9591064453125e-05, -0.005596160888671875, -1.9073486328125e-06, -0.005962371826171875, 0.0, -5.53131103515625e-05, -9.5367431640625e-06, -0.005739927291870117, -1.9073486328125e-06, -5.7220458984375e-06, -6.556489552167477e-06, 0.0, -3.6358815123094246e-05, 0.0, -0.0003910064697265625, -0.040482521057128906, -2.09808349609375e-05, -0.0001081228256225586, -3.576278118089249e-07, -0.1505526304244995, -7.152555099310121e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Template39", "hole0": "Whelp"}, {"_type": "Num", "n": 2}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.357634166645333, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -0.16876757144927979, -1.9073486328125e-06, -0.6142662167549133, -9.548664093017578e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.004589080810546875, -5.7220458984375e-06, -0.06442832946777344, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.5978204011917114, -1.9073486328125e-06, -1.9073486328125e-06, -2.9802276912960224e-06, 0.0, -3.1828880310058594e-05, 0.0, -0.002452850341796875, -0.032901763916015625, -2.288818359375e-05, -0.00012314319610595703, -2.3841855067985307e-07, -0.15670645236968994, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "SelfSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 238, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "<UNK>", "<EOS>", 46, 139, "7", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=<UNK>), 7), PlayerSelector(\n            players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.3915406504570598, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.5680408477783203, -0.6534576416015625, -6.103515625e-05, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -0.007373809814453125, -1.9073486328125e-06, -0.08368682861328125, -2.288818359375e-05, -3.814697265625e-06, -0.0014314651489257812, -1.9073486328125e-06, -0.0001068115234375, -3.4332275390625e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.0023040771484375, 0.0, -0.10674411058425903, -5.841255187988281e-06, -0.0006656646728515625, -1.9073486328125e-05, -0.018342018127441406, -0.00012052059173583984, -0.0029392242431640625, -3.24249267578125e-05, -0.2733449935913086, -9.5367431640625e-06, -0.09055423736572266, -5.7220458984375e-06, -0.07827189564704895, -1.1920928244535389e-07, -0.00048708339454606175, -1.9073486328125e-05, 0.0, -0.000324249267578125, -0.0036258697509765625, -1.9073486328125e-06, -0.008005142211914062, 0.0, -3.62396240234375e-05, -1.33514404296875e-05, -0.016671061515808105, -1.9073486328125e-06, -3.814697265625e-06, -7.271740287251305e-06, 0.0, -3.1709656468592584e-05, 0.0, -0.000583648681640625, -0.039005279541015625, -2.09808349609375e-05, -0.00010418891906738281, -2.3841855067985307e-07, -0.1782320737838745, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "<UNK>"}}]}, {"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.503877202381311, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -0.16876757144927979, -1.9073486328125e-06, -0.8789331912994385, -1.9073486328125e-06, 0.0, -0.0009002685546875, -0.0025196075439453125, -7.62939453125e-06, -0.08414268493652344, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -0.45886731147766113, -5.7220458984375e-06, 0.0, -1.1086402082582936e-05, 0.0, -7.295608520507812e-05, 0.0, -0.000652313232421875, -0.043392181396484375, -2.09808349609375e-05, -0.00013458728790283203, -3.576278118089249e-07, -0.15010201930999756, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "MinionSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.6078572072146855, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -0.16876757144927979, -1.9073486328125e-06, -0.6142662167549133, -9.548664093017578e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.004589080810546875, -5.7220458984375e-06, -0.06442832946777344, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.8346062898635864, -5.7220458984375e-06, 0.0, -5.602820692729438e-06, 0.0, -6.842613220214844e-05, 0.0, -0.0014801025390625, -0.04783439636230469, -2.09808349609375e-05, -0.0001232624053955078, -3.576278118089249e-07, -0.15614426136016846, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "SelfSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector\n            (players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.8790890075316256, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.8408870697021484, -0.0017910003662109375, -0.0001239776611328125, -4.00543212890625e-05, 0.0, -3.62396240234375e-05, -0.002346038818359375, -3.814697265625e-06, -0.002025604248046875, -4.57763671875e-05, -1.9073486328125e-05, -0.000453948974609375, -1.9073486328125e-06, -7.62939453125e-05, -2.6702880859375e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.003139495849609375, 0.0, -0.09731455147266388, -3.933906555175781e-06, -0.0008716583251953125, -2.09808349609375e-05, -0.02482318878173828, -0.00014340877532958984, -0.0026397705078125, -1.33514404296875e-05, -1.1951093673706055, -1.33514404296875e-05, -0.11735965311527252, -0.000354766845703125, 0.0, -0.000667572021484375, -0.001750946044921875, -3.814697265625e-06, -0.0019006729125976562, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.021575331687927246, 0.0, -3.814697265625e-06, -5.483612312673358e-06, 0.0, -2.6464460461284034e-05, 0.0, -0.0028553009033203125, -0.05131340026855469, -2.288818359375e-05, -0.0001480579376220703, -2.3841855067985307e-07, -0.2524217367172241, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "spare_part_list"}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "Aura", "<EOS>", 237, 39, 110, 21, 134, "Buff", "Until", "<EOS>", 238, 63, 205, "Add", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(GiveAura(BuffUntil(Add(),\n            PlayerSelector())), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -3.9759920988363078, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -1.1213641166687012, -8.96453857421875e-05, -0.0004730224609375, -0.6154890060424805, -0.0048923492431640625, -1.71661376953125e-05, 0.0, -0.07857799530029297, -0.000362396240234375, 0.0, -0.0001125335693359375, -0.3590402603149414, -1.33514404296875e-05, -0.04510469734668732, -0.2917900085449219, -0.058246612548828125, -5.7220458984375e-06, -0.04762372747063637, -9.72747802734375e-05, 0.0, -0.031033681705594063, -1.52587890625e-05, 0.0, -0.0001392364501953125, -0.0025806427001953125, -5.7220458984375e-06, -0.011804580688476562, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.009224295616149902, -1.9073486328125e-06, -5.7220458984375e-06, -4.172316494077677e-06, 0.0, -2.4199485778808594e-05, 0.0, -0.0012683868408203125, -0.06506061553955078, -2.09808349609375e-05, -0.0001271963119506836, -2.3841855067985307e-07, -0.15472888946533203, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "GiveAura", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template39", "hole0": "Add"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), MinionSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -4.06345526351236, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -0.16876757144927979, -1.9073486328125e-06, -0.8789331912994385, -1.9073486328125e-06, 0.0, -0.0009002685546875, -0.0025196075439453125, -7.62939453125e-06, -0.08414268493652344, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -1.0275909900665283, -1.9073486328125e-06, -1.9073486328125e-06, -7.867782187531702e-06, 0.0, -3.6358829675009474e-05, 0.0, -0.0018901824951171875, -0.0303802490234375, -2.09808349609375e-05, -0.00013649463653564453, -3.576278118089249e-07, -0.15277016162872314, -7.152555099310121e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "MinionSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "Aura", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(GiveAura(SpellDamage(1)),\n            CharacterSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -4.3585768336520445, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -1.1213641166687012, -8.96453857421875e-05, -0.0004730224609375, -1.1200647354125977, -0.008045196533203125, -0.49667274951934814, -0.18401813507080078, -0.00064849853515625, -0.006297816522419453, -2.47955322265625e-05, -0.09764650464057922, -5.91278076171875e-05, -1.9073486328125e-06, -0.0041046142578125, -0.010487556457519531, -1.1444091796875e-05, -0.00467681884765625, 0.0, -1.33514404296875e-05, -4.38690185546875e-05, -0.030834674835205078, -1.9073486328125e-06, -3.814697265625e-06, -4.291525328881107e-06, 0.0, -3.182887667207979e-05, 0.0, -0.0003814697265625, -0.033092498779296875, -2.09808349609375e-05, -0.00011587142944335938, -2.3841855067985307e-07, -0.16273319721221924, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "GiveAura", "hole5": "CharacterSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "5", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 5)\n", "score": -4.3862803921724876, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.8408870697021484, -0.0017910003662109375, -0.0001239776611328125, -4.00543212890625e-05, 0.0, -3.62396240234375e-05, -0.002346038818359375, -3.814697265625e-06, -0.002025604248046875, -4.57763671875e-05, -1.9073486328125e-05, -0.000453948974609375, -1.9073486328125e-06, -7.62939453125e-05, -2.6702880859375e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.003139495849609375, 0.0, -0.09731455147266388, -3.933906555175781e-06, -0.0008716583251953125, -2.09808349609375e-05, -0.02482318878173828, -0.00014340877532958984, -0.0026397705078125, -1.33514404296875e-05, -0.36727428436279297, -9.5367431640625e-06, -0.0019843378104269505, -0.000102996826171875, 0.0, -0.0015354156494140625, -0.006069183349609375, -3.814697265625e-06, -0.004309654235839844, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.010740876197814941, 0.0, -3.814697265625e-06, -1.0132738680113107e-05, 0.0, -2.6822088329936378e-05, 0.0, -0.0021686553955078125, -0.04937458038330078, -2.288818359375e-05, -0.00012123584747314453, -2.3841855067985307e-07, -1.7089771032333374, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "<UNK>"}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "Selector", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCardSelector(CardQuery(source\n            =CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector(players=\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -4.475041812400001, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -2.1216468811035156, 0.0, -0.43424415588378906, -0.11319160461425781, -0.009084701538085938, -3.814697265625e-05, 0.0, -3.4332275390625e-05, -0.0022783279418945312, -1.9073486328125e-06, -0.0062923431396484375, -4.1961669921875e-05, -1.33514404296875e-05, -0.0006532669067382812, -3.814697265625e-06, -6.67572021484375e-05, -2.09808349609375e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.0039043426513671875, 0.0, -0.09137842059135437, -5.841255187988281e-06, -0.0008144378662109375, -2.288818359375e-05, -0.01903820037841797, -0.00013196468353271484, -0.0024471282958984375, -1.52587890625e-05, -0.2890281677246094, -9.5367431640625e-06, -0.002085860585793853, -0.0001068115234375, 0.0, -0.00147247314453125, -0.00612640380859375, -3.814697265625e-06, -0.004038810729980469, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.010132431983947754, 0.0, -3.814697265625e-06, -9.536697689327411e-06, 0.0, -2.4795530407573096e-05, 0.0, -0.0019550323486328125, -0.04933738708496094, -2.288818359375e-05, -0.00011932849884033203, -2.3841855067985307e-07, -0.20213830471038818, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCardSelector", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "<UNK>"}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 238, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "spare_part_list", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list), PlayerSelector(\n            )), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -4.528275208917499, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.5680408477783203, -0.6534576416015625, -6.103515625e-05, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -0.007373809814453125, -1.9073486328125e-06, -0.08368682861328125, -2.288818359375e-05, -3.814697265625e-06, -0.0014314651489257812, -1.9073486328125e-06, -0.0001068115234375, -3.4332275390625e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.0023040771484375, 0.0, -0.10674411058425903, -5.841255187988281e-06, -0.0006656646728515625, -1.9073486328125e-05, -0.018342018127441406, -0.00012052059173583984, -0.0029392242431640625, -3.24249267578125e-05, -1.4486446380615234, -1.33514404296875e-05, -0.04492378234863281, -3.814697265625e-05, -0.006640195846557617, -8.96453857421875e-05, 0.0, -0.05015454441308975, -1.52587890625e-05, 0.0, -0.0002193450927734375, -0.001316070556640625, -1.9073486328125e-06, -0.004181861877441406, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.03936970233917236, 0.0, -3.814697265625e-06, -7.033323527139146e-06, 0.0, -2.4199485778808594e-05, 0.0, -0.0054035186767578125, -0.061901092529296875, -2.09808349609375e-05, -0.0001538991928100586, -2.3841855067985307e-07, -0.16294443607330322, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "spare_part_list"}}]}, {"_type": "Template39", "hole0": "PlayerSelector"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(3))]), SelfSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -4.839134762452453, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -2.4868102073669434, -1.9073486328125e-06, -0.08218911290168762, -3.4332275390625e-05, -1.9073486328125e-06, -5.53131103515625e-05, -0.0021686553955078125, -3.814697265625e-06, -0.0789804458618164, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.27908051013946533, -1.9073486328125e-06, -1.9073486328125e-06, -3.3378546504536644e-06, 0.0, -2.6106834411621094e-05, 0.0, -0.0021820068359375, -0.035175323486328125, -2.288818359375e-05, -0.00011742115020751953, -2.3841855067985307e-07, -0.15693068504333496, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "SelfSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "5", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 5)\n", "score": -5.182923654484135, "score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.776121199131012, -0.4739108085632324, -0.001148223876953125, -0.06640052795410156, -0.0007801055908203125, -0.000133514404296875, -0.0343170166015625, -5.91278076171875e-05, -0.00010120868682861328, -1.33514404296875e-05, -0.0005480051040649414, -0.0025768280029296875, 0.0, -0.05004715919494629, 0.0, -0.0012874603271484375, -0.001140594482421875, -0.000148773193359375, -5.7220458984375e-06, -0.00033593177795410156, -0.005761146545410156, -5.7220458984375e-06, -0.16876757144927979, -1.9073486328125e-06, -0.6142662167549133, -9.548664093017578e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.004589080810546875, -5.7220458984375e-06, -0.06442832946777344, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.5978204011917114, -1.9073486328125e-06, -1.9073486328125e-06, -2.9802276912960224e-06, 0.0, -3.1828880310058594e-05, 0.0, -0.002452850341796875, -0.032901763916015625, -2.288818359375e-05, -0.00012314319610595703, -2.3841855067985307e-07, -1.9819960594177246, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Give", "hole5": "SelfSelector", "hole1": 6, "hole0": "Toshley", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Toshley", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 5}], "hole4": "player"}}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -1.8054570838450132, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -0.22136878967285156, -0.19762516021728516, -0.00031173229217529297, -1.3828277587890625e-05, -3.0517578125e-05, -0.0012187957763671875, -0.0009593963623046875, -0.7486412525177002, -1.3351433153729886e-05, -0.00084686279296875, -5.7220458984375e-06, -0.00385642028413713, -3.814697265625e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -1.8139867536884964, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -0.22136878967285156, -0.19762516021728516, -0.00031173229217529297, -1.3828277587890625e-05, -3.0517578125e-05, -0.0012187957763671875, -0.0009593963623046875, -0.7232248187065125, -9.536741345073096e-06, -0.029973983764648438, -3.814697265625e-06, -0.0086522763594985, -5.9604644775390625e-06, -3.0517578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -2.658120063146413, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -0.2501645088195801, -1.1920928244535389e-07, -0.4270334243774414, -0.10361099243164062, -0.00031197071075439453, -5.9604644775390625e-05, -3.4332275390625e-05, -0.0006771087646484375, -0.0011463165283203125, -0.5310429930686951, -8.821482879284304e-06, -0.00030517578125, -3.814697265625e-06, -0.002354740398004651, -3.814697265625e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "+1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()),\n            Aura(+1(), SelfSelector())])\n", "score": -2.9924447421145857, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -0.22136878967285156, -1.7730369567871094, -0.018154263496398926, -9.775161743164062e-06, -0.0001049041748046875, -0.00061798095703125, -0.0001583099365234375, -0.20490208268165588, -1.6808508007670753e-05, -0.015777587890625, -7.62939453125e-06, -0.007066664285957813, -6.079673767089844e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.0010509490966796875, -0.000362396240234375, -0.002851247787475586, -0.00037217140197753906, -2.86102294921875e-05, -0.017368316650390625, -6.67572021484375e-05, -0.029300469905138016, -0.03299378976225853, -0.014251708984375, -2.6702880859375e-05, -0.02193991094827652, -1.5735626220703125e-05, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "+1"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -3.2058892322399117, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -0.2501645088195801, -1.1920928244535389e-07, -0.4270334243774414, -0.10361099243164062, -0.00031197071075439453, -5.9604644775390625e-05, -3.4332275390625e-05, -0.0006771087646484375, -0.0011463165283203125, -1.0592230558395386, -7.271765298355604e-06, -0.014696121215820312, -1.9073486328125e-06, -0.007525602355599403, -4.0531158447265625e-06, -3.4332275390625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "+1", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Heal(1), HeroSelector(+1())))\n", "score": -4.528743012729265, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -1.6240053176879883, -9.5367431640625e-06, -7.43865966796875e-05, -3.814697265625e-06, -0.002852297853678465, -2.1576830476988107e-05, -2.09808349609375e-05, -0.8483610153198242, -8.58306884765625e-05, -0.41489872336387634, -0.0030026251915842295, -0.025459544733166695, -1.3232186574896332e-05, -0.3789806365966797, -0.008356094360351562, -0.18534010648727417, -0.05319245159626007, -5.018585216021165e-05, -0.2967710494995117, -0.056685980409383774], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "+1"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "+1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(5), SelfSelector()),\n            Aura(+1(), SelfSelector())])\n", "score": -4.6199967303492855, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -0.22136878967285156, -1.7730369567871094, -0.018154263496398926, -9.775161743164062e-06, -0.0001049041748046875, -0.00061798095703125, -0.0001583099365234375, -1.8195581436157227, -1.990795135498047e-05, -0.0008544921875, -5.7220458984375e-06, -0.005990504752844572, -3.933906555175781e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0008087158203125, -0.0003147125244140625, -0.0038900375366210938, -0.00036835670471191406, -3.62396240234375e-05, -0.014302253723144531, -9.1552734375e-05, -0.029584532603621483, -0.04864143580198288, -0.010514259338378906, -2.6702880859375e-05, -0.040949560701847076, -1.3709068298339844e-05, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "+1"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "+1", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, deathrattle=Deathrattle(Heal(1), HeroSelector(\n            +1())))\n", "score": -4.816335911316834, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -1.5780339241027832, -5.960462772236497e-07, -3.0517578125e-05, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-06, -0.002620358020067215, -1.6212408809224144e-05, -5.7220458984375e-06, -0.10064506530761719, -3.62396240234375e-05, -0.5327006578445435, -0.0025409813970327377, -0.027550239115953445, -1.03711727206246e-05, -0.6167898178100586, -0.008358001708984375, -0.2058923840522766, -0.053158216178417206, -4.8397800128441304e-05, -0.2944161891937256, -0.052026234567165375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "+1"}]}, "hole2": "deathrattle", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 39, 109, 21, 134, "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Heal(1), CharacterSelector(\n            players=BothPlayer())))\n", "score": -4.828846328382639, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -0.2501645088195801, -1.1920928244535389e-07, -1.0747509002685547, -1.71661376953125e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.0042093414813280106, -4.6491390094161034e-05, -5.7220458984375e-06, -0.17435359954833984, -2.86102294921875e-05, -0.6078468561172485, -0.002895467448979616, -0.03103603795170784, -1.2278503163543064e-05, -0.5805501937866211, -0.20362567901611328, -2.86102294921875e-05, -1.9073486328125e-06, -0.5478619933128357, -0.005049597937613726, 0.0, -0.0014705657958984375, -2.09808349609375e-05, 0.0, -0.0032082796096801758, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011396408081054688, -7.748596544843167e-06, -0.0001068115234375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -4.883506680493511, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -3.2531826496124268, 0.0, -0.00030231475830078125, -1.1920928244535389e-07, -0.005725860595703125, 0.0, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, -5.7220458984375e-06, -0.00301361083984375, 0.0, -1.1682510375976562e-05, 0.0, -0.00020599365234375, 0.0, -0.00255584716796875, -0.0019817352294921875, -1.1444091796875e-05, -0.0009616613388061523, -1.6689286894688848e-06, -0.0016794204711914062, 0.0, -0.033905625343322754, -1.1920928244535389e-07, -0.2147541046142578, -0.19814491271972656, -0.00030982494354248047, -1.3828277587890625e-05, -3.24249267578125e-05, -0.00128173828125, -0.0009479522705078125, -0.6994402408599854, -9.655950634623878e-06, -0.0315704345703125, -3.814697265625e-06, -0.008559521287679672, -5.9604644775390625e-06, -3.0517578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -4.921666650682155, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -3.2531826496124268, 0.0, -0.00030231475830078125, -1.1920928244535389e-07, -0.005725860595703125, 0.0, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, -5.7220458984375e-06, -0.00301361083984375, 0.0, -1.1682510375976562e-05, 0.0, -0.00020599365234375, 0.0, -0.00255584716796875, -0.0019817352294921875, -1.1444091796875e-05, -0.0009616613388061523, -1.6689286894688848e-06, -0.0016794204711914062, 0.0, -0.033905625343322754, -1.1920928244535389e-07, -0.2147541046142578, -0.19814491271972656, -0.00030982494354248047, -1.3828277587890625e-05, -3.24249267578125e-05, -0.00128173828125, -0.0009479522705078125, -0.7727181315422058, -1.3470642443280667e-05, -0.0009555816650390625, -5.7220458984375e-06, -0.004079580307006836, -3.814697265625e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "+1", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Heal(1), HeroSelector(+1())))\n", "score": -5.06439643966965, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -0.2501645088195801, -1.1920928244535389e-07, -1.0747509002685547, -1.71661376953125e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.0042093414813280106, -4.6491390094161034e-05, -5.7220458984375e-06, -0.17435359954833984, -2.86102294921875e-05, -0.6078468561172485, -0.002895467448979616, -0.03103603795170784, -1.2278503163543064e-05, -0.9279851913452148, -0.007948875427246094, -0.2464672178030014, -0.05396253615617752, -5.054346183896996e-05, -0.28864672780036926, -0.05254679545760155], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "+1"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Warbot", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "1", "<EOS>", 39, 109, 21, 134, "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Damage(1), CharacterSelector\n            (players=BothPlayer())))\n", "score": -5.089094035171598, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -1.0675935745239258, -0.0009555816650390625, -3.814697265625e-05, 0.0, -2.2649765014648438e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.07088947296142578, -9.5367431640625e-06, -4.00543212890625e-05, -2.1457672119140625e-06, -1.1920928244535389e-07, 0.0, 0.0, -6.282329559326172e-05, -3.933898824470816e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.00015461443399544805, -2.0265579223632812e-06, -0.08033275604248047, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.004477024078369141, 0.0, -0.0271453857421875, -0.029479026794433594, -0.0001964569091796875, -0.05745565891265869, -1.1920928244535389e-07, -5.125997995492071e-05, 0.0, -2.622604142743512e-06, 0.0, -0.0001392364501953125, -0.0001125335693359375, -1.33514404296875e-05, -4.76837158203125e-05, -3.9219088648678735e-05, -0.0011063814163208008, -1.1920928244535389e-07, -0.2501645088195801, -1.1920928244535389e-07, -1.0747509002685547, -1.71661376953125e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.0042093414813280106, -4.6491390094161034e-05, -5.7220458984375e-06, -0.17435359954833984, -2.86102294921875e-05, -0.8782936334609985, -8.487685408908874e-05, -0.399555504322052, -5.364412118069595e-06, -0.2619190216064453, -0.1889629364013672, -4.00543212890625e-05, -1.9073486328125e-06, -0.5069890022277832, -0.0032700528390705585, 0.0, -0.0016956329345703125, -2.288818359375e-05, 0.0, -0.0030080080032348633, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00012135505676269531, -7.629387255292386e-06, -0.0001049041748046875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 1}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 39, 110, 21, 134, "Summon", "<EOS>", 238, 46, 139, "1", "<EOS>", 46, 139, "3", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Summon(1, 3), PlayerSelector()))\n", "score": -5.284487375927384, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -1.6240053176879883, -9.5367431640625e-06, -7.43865966796875e-05, -3.814697265625e-06, -0.002852297853678465, -2.1576830476988107e-05, -2.09808349609375e-05, -2.2698001861572266, -2.6702880859375e-05, -0.0011386871337890625, -2.288818359375e-05, -0.10536971688270569, -0.0007084606913849711, -0.0019588470458984375, -0.4969158172607422, 0.0, -0.056498002260923386, -2.9802276912960224e-06, -0.051055908203125, -3.24249267578125e-05, -0.03652700036764145, -7.390974587906385e-06, -0.0019989013671875, -3.0517578125e-05, -0.0048340559005737305, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 3}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "2", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "+1", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=Deathrattle(Damage(2), HeroSelector(+1())))\n", "score": -5.612120193616775, "score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -1.6240053176879883, -9.5367431640625e-06, -7.43865966796875e-05, -3.814697265625e-06, -0.002852297853678465, -2.1576830476988107e-05, -2.09808349609375e-05, -0.8483610153198242, -8.58306884765625e-05, -1.2875488996505737, -0.00013113010209053755, -0.6747639775276184, -2.0265579223632812e-06, -0.1293659210205078, -0.003856658935546875, -0.20050616562366486, -0.021332379430532455, -3.707340147229843e-05, -0.14529725909233093, -0.04328631982207298], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Warbot", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Warbot", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 2}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "+1"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "Deathlord", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(Deathlord()),\n            PlayerSelector()))\n", "score": -2.5400093662409873, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.69381183385849, -3.766942609217949e-05, -0.046319715678691864, -0.6236193776130676, -0.002780914306640625, -1.9073486328125e-06, -0.0015708208084106445, -5.7220458984375e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "Deathlord"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Minion", "Selector", "<EOS>", "Deathlord", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(MinionSelector(\n            Deathlord()), PlayerSelector()))\n", "score": -2.681211585726409, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.840043842792511, -0.005680084228515625, -1.0490362910786644e-05, -0.5824066400527954, -0.07776600122451782, -0.0014133453369140625, -1.33514404296875e-05, -0.00201261043548584, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "MinionSelector", "hole1": "Deathlord"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "Deathlord", "Deathlord", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(\n            DeathlordDeathlord()), PlayerSelector()))\n", "score": -2.7221955153017134, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.69381183385849, -3.766942609217949e-05, -0.046319715678691864, -0.7709452509880066, -0.013397715985774994, -0.016699790954589844, -1.9073486328125e-06, -0.009116411209106445, -3.814697265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "Summon", "hole1": "DeathlordDeathlord"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Minion", "Selector", "<EOS>", "puts", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(MinionSelector(puts()),\n            PlayerSelector()))\n", "score": -3.4499160000940847, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.840043842792511, -0.005680084228515625, -1.0490362910786644e-05, -1.3511110544204712, -0.07776600122451782, -0.0014133453369140625, -1.33514404296875e-05, -0.00201261043548584, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "MinionSelector", "hole1": "puts"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 39, 110, 21, 134, "Summon", "<EOS>", 238, 63, 205, "Hyena", "<EOS>", 46, 139, "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(Hyena(), 2),\n            PlayerSelector()))\n", "score": -3.5392300287693743, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.6899690628051758, -1.33514404296875e-05, -0.005222320556640625, -1.71661376953125e-05, -0.12878502905368805, -0.01968550682067871, -2.288818359375e-05, -0.00290679931640625, -4.57763671875e-05, -1.2783291339874268, -0.00037300586700439453, -0.0015125274658203125, 0.0, -0.08878210186958313, 0.0, -0.0013523101806640625, -0.000156402587890625, -0.0005265474319458008, -3.814697265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Template39", "hole0": "Hyena"}, {"_type": "Num", "n": 2}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Bounce(),\n            MinionSelector(players=EnemyPlayer(), picker=UserPicker())))\n", "score": -3.7101161728059253, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.571523666381836, 0.0, -0.42919036746025085, -1.2874597814516164e-05, -0.009037017822265625, -0.0069293975830078125, -1.71661376953125e-05, -1.33514404296875e-05, -0.42278724908828735, -7.295608520507812e-05, -1.919269561767578e-05, -0.5740690231323242, -4.38690185546875e-05, 0.0, -0.004145026206970215, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.08226132392883301, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.028741836547851562, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.2592412233352661, -0.00040793418884277344, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Bounce(),\n            MinionSelector(condition=IsMinion())))\n", "score": -3.99450876809707, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.571523666381836, 0.0, -0.42919036746025085, -1.2874597814516164e-05, -0.009037017822265625, -0.0069293975830078125, -1.71661376953125e-05, -1.33514404296875e-05, -0.42278724908828735, -7.295608520507812e-05, -1.919269561767578e-05, -0.8301229476928711, -0.0003185272216796875, -3.814697265625e-06, -0.0652167797088623, 0.0, -0.0003948211669921875, -2.86102294921875e-05, -0.04983222484588623, -0.2873985767364502, -6.4849853515625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Minion", "Selector", "<EOS>", "Your", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(MinionSelector(Your()),\n            PlayerSelector()))\n", "score": -4.12718200179544, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.840043842792511, -0.005680084228515625, -1.0490362910786644e-05, -2.028377056121826, -0.07776600122451782, -0.0014133453369140625, -1.33514404296875e-05, -0.00201261043548584, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "MinionSelector", "hole1": "Your"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, spell_targetable=True)\n", "score": -4.31302058198132, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -3.8443257808685303, 0.0, -0.24345111846923828, -5.7220458984375e-06, -0.015467047691345215, -2.622604142743512e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True)\n", "score": -4.4848610112875775, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -4.264172554016113, 0.0, -0.010776519775390625, -1.9073486328125e-06, -0.00013947486877441406, -2.2649765014648438e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Minion", "Selector", "<EOS>", "Deathlord", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(MinionSelector(\n            Deathlord()), PlayerSelector()))\n", "score": -4.533143138290946, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -1.855388879776001, -2.3841855067985307e-07, -0.14926326274871826, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.0002541542053222656, -2.1457672119140625e-06, -2.6702880859375e-05, -1.198319435119629, -3.0517578125e-05, -0.625370442867279, -0.004918575286865234, -1.0251946150674485e-05, -0.6126723885536194, -0.07764897495508194, -0.0012416839599609375, -1.52587890625e-05, -0.0020679235458374023, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole0": "MinionSelector", "hole1": "Deathlord"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 39, 110, 21, 134, "Summon", "<EOS>", 238, 63, 205, "Your", "<EOS>", 46, 139, "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(Your(), 2),\n            PlayerSelector()))\n", "score": -4.903147259863296, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.6899690628051758, -1.33514404296875e-05, -0.005222320556640625, -1.71661376953125e-05, -0.12878502905368805, -0.01968550682067871, -2.288818359375e-05, -0.00290679931640625, -4.57763671875e-05, -2.2631266117095947, -0.007615446578711271, -0.1557769775390625, -1.9073486328125e-06, -0.306073933839798, -5.960462772236497e-07, -0.0015316009521484375, -0.000209808349609375, -0.0006123781204223633, -3.814697265625e-06, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Template39", "hole0": "Your"}, {"_type": "Num", "n": 2}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Bounce(),\n            MinionSelector(condition=IsSpell())))\n", "score": -5.120422626510766, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.571523666381836, 0.0, -0.42919036746025085, -1.2874597814516164e-05, -0.009037017822265625, -0.0069293975830078125, -1.71661376953125e-05, -1.33514404296875e-05, -0.42278724908828735, -7.295608520507812e-05, -1.919269561767578e-05, -0.8301229476928711, -0.0003185272216796875, -3.814697265625e-06, -0.0652167797088623, 0.0, -0.0003948211669921875, -2.86102294921875e-05, -0.04983222484588623, -1.4133734703063965, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 39, 109, 21, 134, "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Bounce(),\n            PlayerSelector(players=EnemyPlayer())))\n", "score": -5.310271824357109, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -1.571523666381836, 0.0, -0.42919036746025085, -1.2874597814516164e-05, -0.009037017822265625, -0.0069293975830078125, -1.71661376953125e-05, -1.33514404296875e-05, -1.572188377380371, -2.6941281248582527e-05, -1.1444091796875e-05, -0.0469207763671875, -0.00026702880859375, -3.814697265625e-06, -0.6958115100860596, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.6567708253860474, -5.7220458984375e-06, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}]}, "hole2": "deathrattle", "hole1": 8}], "hole4": "player"}}, {"choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -5.925755021924388, "score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -1.855388879776001, -2.3841855067985307e-07, -4.051122665405273, 0.0, -0.013219833374023438, -3.814697265625e-06, -0.00021767616271972656, -2.2649765014648438e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Deathlord", "hole3": "RARE", "hole2": "ALL", "hole1": 3}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Deathlord", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2}], "hole4": "player"}}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), CardSelector(\n            condition=IsSpell()))])\n", "score": -0.5950871984088835, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -0.05183601379394531, -0.00029754638671875, -5.91278076171875e-05, -1.9073486328125e-06, -0.008714675903320312, -8.440017700195312e-05, -5.7220458984375e-06, -0.0006046295166015625, -1.71661376953125e-05, -9.1552734375e-05, -6.866455078125e-05, 0.0, -0.015745162963867188, -1.9073486328125e-06, -9.655952453613281e-05, -0.2906646132469177, -4.38690185546875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), CardSelector(\n            condition=IsMinion()))])\n", "score": -1.6936824003780302, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -0.05183601379394531, -0.00029754638671875, -5.91278076171875e-05, -1.9073486328125e-06, -0.008714675903320312, -8.440017700195312e-05, -5.7220458984375e-06, -0.0006046295166015625, -1.71661376953125e-05, -9.1552734375e-05, -6.866455078125e-05, 0.0, -0.015745162963867188, -1.9073486328125e-06, -9.655952453613281e-05, -1.38883638381958, -0.0004673004150390625], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-3), CardSelector(\n            condition=IsSpell()))])\n", "score": -2.862560657553523, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -2.5072426795959473, -1.3232166566012893e-05, -0.002925872802734375, -0.000881195068359375, -5.53131103515625e-05, -1.9073486328125e-06, -0.0008847711142152548, -5.9604644775390625e-05, -7.62939453125e-06, -0.000457763671875, -1.52587890625e-05, -6.103515625e-05, -8.0108642578125e-05, 0.0, -0.02293109893798828, -1.9073486328125e-06, -0.00012111663818359375, -0.25042277574539185, -4.76837158203125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "1", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])\n", "score": -3.175871608707631, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -2.8866055011749268, -6.556489552167477e-06, -0.000576019287109375, -0.0003681182861328125, -4.38690185546875e-05, -1.9073486328125e-06, -0.0011174677638337016, -4.2557716369628906e-05, -7.62939453125e-06, -0.0008907318115234375, -1.52587890625e-05, -5.53131103515625e-05, -8.0108642578125e-05, 0.0, -0.03627490997314453, -3.814697265625e-06, -0.00012683868408203125, -0.1732499897480011, -5.53131103515625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 1}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 63, 205, "Hero", "Selector", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), HeroSelector())])\n", "score": -3.555369106920999, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -3.133660316467285, -0.000148773193359375, -0.19476628303527832, -3.4332275390625e-05, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Template39", "hole0": "HeroSelector"}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-3), CardSelector(\n            condition=IsMinion()))])\n", "score": -4.132454124979823, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -2.5072426795959473, -1.3232166566012893e-05, -0.002925872802734375, -0.000881195068359375, -5.53131103515625e-05, -1.9073486328125e-06, -0.0008847711142152548, -5.9604644775390625e-05, -7.62939453125e-06, -0.000457763671875, -1.52587890625e-05, -6.103515625e-05, -8.0108642578125e-05, 0.0, -0.02293109893798828, -1.9073486328125e-06, -0.00012111663818359375, -1.5198432207107544, -0.0005207061767578125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 19, 129, 237, 52, 180, "Cant", "Attack", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(CantAttack())])\n", "score": -4.438125817171759, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -3.805325508117676, -1.33514404296875e-05, -0.35666561126708984, -0.0002155303955078125, -0.000335693359375, -0.0004863739013671875, -0.17026042938232422, -0.07965505123138428, -0.01836216449737549, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "List", "elts": [{"_type": "Template25", "hole0": "CantAttack"}]}, "hole2": "buffs", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -5.096523253313727, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -4.95572566986084, -5.7220458984375e-06, -0.13377761840820312, -1.1444091796875e-05, -0.00018143653869628906, -2.09808349609375e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.196730190872778, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -0.05183601379394531, -0.00029754638671875, -5.91278076171875e-05, -1.9073486328125e-06, -0.008714675903320312, -8.440017700195312e-05, -5.7220458984375e-06, -0.0006046295166015625, -1.71661376953125e-05, -9.1552734375e-05, -6.866455078125e-05, 0.0, -4.330214500427246, -0.0002593994140625, -2.6702880859375e-05, -7.62939453125e-06, -0.0007965561235323548, -0.0036729243583977222, 0.0, -7.62939453125e-06, -0.0003261566162109375, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.015722274780273438, -5.53131103515625e-05, -0.5570831298828125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 46, 139, "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), 4)])\n", "score": -5.351339658474181, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -5.068818092346191, -0.0002002716064453125, -0.054889194667339325, -0.0006784199504181743], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Num", "n": 4}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), PlayerSelector())])\n", "score": -5.496237484606546, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -3.133660316467285, -0.000148773193359375, -2.1356499195098877, -1.1444091796875e-05, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True)\n", "score": -7.019181577555365, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -6.985264301300049, -5.7220458984375e-05, -0.026762008666992188, -4.00543212890625e-05, -0.00021374225616455078, -4.38690185546875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "score": -7.186081258646674, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -7.140221118927002, -0.0001506805419921875, -0.034920692443847656, -3.24249267578125e-05, -0.003908276557922363, -4.76837158203125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 23, 139, "1", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "score": -7.411046160451598, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -7.174983501434326, -3.814697265625e-06, -0.007637977600097656, -0.0025177001953125, -0.21909897029399872, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Num", "n": 1}, "hole2": "spell_damage", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>", 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Give", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(AuraUntil(ManaChange(-2),\n            CardSelector(condition=IsSpell()), TurnEnded()), ActionTag(Give\n            (Frozen()), PlayerSelector()))])\n", "score": -8.112300394012173, "score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -4.469724178314209, -0.03907966613769531, -3.814697265625e-06, -0.01605987548828125, -0.049732208251953125, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -0.019301891326904297, -0.00015401840209960938, -6.198883056640625e-06, -0.00023651123046875, -0.0005702972412109375, -3.0517578125e-05, -5.53131103515625e-05, -0.00274658203125, -5.7220458984375e-06, -0.09540681540966034, -1.2874562344222795e-05, -0.0006999969482421875, -7.2479248046875e-05, -4.00543212890625e-05, 0.0, -0.00043559062760323286, -0.0001035928726196289, -3.814697265625e-06, -0.0007648468017578125, -2.09808349609375e-05, -8.58306884765625e-05, -7.05718994140625e-05, 0.0, -0.03534984588623047, -3.814697265625e-06, -8.499622344970703e-05, -0.2256060391664505, -5.14984130859375e-05, -0.000331878662109375, -1.9073486328125e-06, -1.294990062713623, -0.050241947174072266, 0.0, -0.009801864624023438, -0.009019851684570312, -0.4344034194946289, -0.0034637451171875, -3.814697265625e-06, -0.10456371307373047, -9.5367431640625e-06, -0.3649665415287018, -0.04209339618682861, -0.7893553972244263, -1.33514404296875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Nerub'ar Weblord", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Nerub'arWeblord", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}, {"_type": "Template39", "hole0": "TurnEnded"}]}, {"_type": "Template19", "hole0": "Give", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Frozen"}]}]}, "hole2": "auras", "hole1": 4}], "hole4": "player"}}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score": -0.16991876795253802, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -0.13457250595092773, 0.0, -0.009319305419921875, -1.71661376953125e-05, -0.00232088565826416, -0.0006024837493896484], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(Bounce(), SelfSelector())])\n", "score": -3.391016773716899, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -0.09349632263183594, -0.0002117156982421875, -0.6939554810523987, -0.00881338119506836, -0.0025691986083984375, -3.814697265625e-06, -0.17439675331115723, -1.3351433153729886e-05, -3.0517578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -4.651469223045922, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -4.4634833335876465, 0.0, -0.0004215240478515625, -3.814697265625e-06, -0.16418612003326416, -0.0002880096435546875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "4", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 4, spell_targetable=True)\n", "score": -4.706903055154896, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -4.614336967468262, -3.576278118089249e-07, -0.058309316635131836, 0.0, -0.01822948455810547, -1.52587890625e-05, -0.003031611442565918, -0.0004247426986694336], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(<UNK>SpellTarget(), SelfSelector())])\n", "score": -5.163328088663263, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -0.09349632263183594, -0.0002117156982421875, -1.6469793319702148, -0.026651248335838318, -0.0977332592010498, -5.7220458984375e-06, -0.15407180786132812, -7.2479248046875e-05, -0.7264582514762878, -7.271765298355604e-06, -0.00011444091796875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(<UNK>SpellTarget(), PlayerSelector())]\n            )\n", "score": -5.252605475329972, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -0.09349632263183594, -0.0002117156982421875, -1.6469793319702148, -0.026651248335838318, -0.0977332592010498, -5.7220458984375e-06, -0.15407180786132812, -7.2479248046875e-05, -0.8158394694328308, -2.384185791015625e-06, -1.5497207641601562e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(Bounce(), MinionSelector())])\n", "score": -5.397366575741387, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -0.09349632263183594, -0.0002117156982421875, -0.6939554810523987, -0.00881338119506836, -0.0025691986083984375, -3.814697265625e-06, -2.1806626319885254, -0.000125885009765625, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Template39", "hole0": "MinionSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "DRUID", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, DRUID=True)\n", "score": -5.7151762171026235, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -5.509986400604248, 0.0, -0.17204761505126953, -9.5367431640625e-06, -0.009791254997253418, -0.0002549886703491211], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "DRUID", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=[Aura(Bounce(), SelfSelector())])\n", "score": -6.09918723239133, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -0.13457250595092773, 0.0, -4.753840446472168, -0.47962379455566406, -0.04380536079406738, -0.00130462646484375, -4.00543212890625e-05, -0.09849929809570312, -0.0001544952392578125, -0.36198216676712036, -0.008502721786499023, -0.0041751861572265625, -3.814697265625e-06, -0.18954865634441376, -1.3351433153729886e-05, -3.4332275390625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "spell_targetable", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('SpectralSpectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score": -6.158622785575915, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -5.838478088378906, -0.14365899562835693, -5.960462772236497e-07, 0.0, -1.656998210819438e-05, 0.0, -0.00029468536376953125, 0.0, -8.058547973632812e-05, 0.0, -0.0009015185059979558, 0.0, -1.52587890625e-05, -0.0002765655517578125, -3.24249267578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010734940879046917, -4.768370445162873e-07, -0.14397943019866943, 0.0, -0.010105133056640625, -1.71661376953125e-05, -0.002378106117248535, -0.0006064176559448242], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "SpectralSpectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -6.282982263558722, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -2.9125137329101562, -0.000152587890625, -0.9097511172294617, -2.1696090698242188e-05, -0.0003643035888671875, -1.9073486328125e-06, -0.04255900904536247, -3.933906555175781e-06, -8.7738037109375e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -6.390725962604108, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -4.4634833335876465, 0.0, -0.0004215240478515625, -3.814697265625e-06, -1.9035240411758423, -0.00020682805916294456], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "Bounce", "<EOS>", 63, 205, "Bounce", "Selector", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, enrage=[Aura(Bounce(), BounceSelector())])\n", "score": -6.461501531147576, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -2.3399672508239746, 0.0, -0.00266265869140625, -0.0485992431640625, -0.0025010108947753906, -0.0004636049270629883, -0.0002460479736328125, -0.09349632263183594, -0.0002117156982421875, -0.6939554810523987, -0.00881338119506836, -0.0025691986083984375, -3.814697265625e-06, -3.2369673252105713, -0.007954239845275879, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Bounce"}, {"_type": "Template39", "hole0": "BounceSelector"}]}, "hole2": "enrage", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class <UNK>Knight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score": -6.518527911738204, "score_history": [-1.52587890625e-05, -0.0005645751953125, -6.344856262207031, -4.291525328881107e-06, -1.0728830375228426e-06, -1.5139463357627392e-05, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -0.0007677078247070312, -4.38690185546875e-05, 0.0, -0.013583756051957607, -0.0015010833740234375, 0.0, -1.7404403479304165e-05, 0.0, -3.194808232365176e-05, 0.0, -4.3988224206259474e-05, 0.0, -0.0007319665164686739, 0.0, -1.33514404296875e-05, -0.0002593994140625, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010137487202882767, -3.576278118089249e-07, -0.13366591930389404, 0.0, -0.009287834167480469, -1.71661376953125e-05, -0.0023093223571777344, -0.0006083250045776367], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>Knight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 6}], "hole4": "player"}}, {"choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score": -6.746749750998049, "score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -0.13457250595092773, 0.0, -0.009319305419921875, -1.71661376953125e-05, -6.57913064956665, -0.0006237028865143657], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Spectral Knight", "hole2": "ALL", "hole1": 5}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SpectralKnight", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 6}], "hole4": "player"}}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Frozen()),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -2.4544446744764485, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -0.7995152473449707, -1.1920928244535389e-07, -0.00013863694039173424, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -2.9802276912960224e-06, -0.042824503034353256, -1.8477414414519444e-05, -0.016450798138976097, -0.0006201728247106075, -0.011838912963867188, -0.66766357421875, -0.0003662109375, -0.28793084621429443, -0.006263199727982283, -0.18700607120990753, -4.649158654501662e-06, -5.960462772236497e-07, -0.000217437744140625, -0.000705718994140625, 0.0, -0.13435649871826172, 0.0, -5.7220458984375e-05, -8.58306884765625e-05, -0.008791327476501465, -5.722038622479886e-06, 0.0, -0.0013330630026757717, -1.9073486328125e-06, -7.37886075512506e-05, 0.0, -4.38690185546875e-05, -0.25470733642578125, -7.62939453125e-06, -3.814697265625e-06, -1.311301275563892e-06, -3.4332275390625e-05, -0.00012063252506777644], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(SpellDamage(1)),\n            MinionSelector(condition=IsMinion())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -2.578685132149346, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -0.7995152473449707, -1.1920928244535389e-07, -0.00013863694039173424, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -2.9802276912960224e-06, -0.042824503034353256, -1.8477414414519444e-05, -0.016450798138976097, -0.0006201728247106075, -0.011838912963867188, -1.272505760192871, -0.00041961669921875, -0.0713423490524292, -0.0014755725860595703, -0.002956867218017578, -0.009188363328576088, -3.814697265625e-06, -0.0007759826257824898, -1.7881393432617188e-05, -3.218649908376392e-06, -0.00060272216796875, -0.003078460693359375, -1.9073486328125e-06, -0.00783228874206543, -1.9073486328125e-06, -0.10019207000732422, -7.62939453125e-05, -0.169836163520813, -0.022137142717838287, -0.0004711151123046875, -0.0013106887927278876, -9.5367431640625e-06, -0.0016999829094856977, 0.0, -1.71661376953125e-05, -0.007928848266601562, -5.7220458984375e-06, -5.7220458984375e-06, -1.0728830375228426e-06, -3.4332275390625e-05, -9.047575440490618e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Silence", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Minion", "Selector", "<EOS>", 237, 63, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(3), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.003989592398135, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -2.48787784576416, -1.1920922133867862e-06, -7.462427311111242e-05, 0.0, 0.0, -1.3589859008789062e-05, -7.152555099310121e-07, -0.16963577270507812, 0.0, -0.09808143228292465, -3.4570634852570947e-06, -1.33514404296875e-05, -0.0009899139404296875, -1.9073486328125e-06, -0.7655783295631409, -5.364416665543104e-06, -0.08002270013093948, 0.0, 0.0, -0.1565074920654297, -0.025162696838378906, -1.9073486328125e-06, -0.18285632133483887, -0.00031017843866720796, 0.0, -5.1735591114265844e-05, 0.0, -4.3749765609391034e-05, 0.0, -1.9073486328125e-05, -0.0032958984375, -1.52587890625e-05, -7.62939453125e-06, -1.4305104514278355e-06, -4.57763671875e-05, -0.00012206286191940308], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole6": [{"_type": "Template39", "hole0": "EnemyPlayer"}], "hole4": [{"_type": "Num", "n": 3}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(SpellDamage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.342221005545909, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -0.7995152473449707, -1.1920928244535389e-07, -0.00013863694039173424, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -2.9802276912960224e-06, -0.042824503034353256, -1.8477414414519444e-05, -0.016450798138976097, -0.0006201728247106075, -0.011838912963867188, -1.272505760192871, -0.00041961669921875, -0.0713423490524292, -0.0014755725860595703, -0.002956867218017578, -0.009188363328576088, -3.814697265625e-06, -0.0007759826257824898, -1.7881393432617188e-05, -3.218649908376392e-06, -0.00060272216796875, -0.003078460693359375, -1.9073486328125e-06, -0.00783228874206543, -1.9073486328125e-06, -0.10019207000732422, -7.62939453125e-05, -1.9551173448562622, -0.0011011258466169238, -0.00014531017222907394, -1.9073486328125e-06, -0.0006477143033407629, 0.0, -1.33514404296875e-05, -0.009929656982421875, -5.7220458984375e-06, -5.7220458984375e-06, -1.311301275563892e-06, -3.62396240234375e-05, -7.843663479434326e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Silence", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "Adjacent"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "5", "<EOS>", "Minion", "Selector", "<EOS>", 237, 63, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(5), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.4563398709772954, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -2.48787784576416, -1.1920922133867862e-06, -7.462427311111242e-05, 0.0, 0.0, -1.3589859008789062e-05, -7.152555099310121e-07, -0.16963577270507812, 0.0, -0.09808143228292465, -3.4570634852570947e-06, -1.33514404296875e-05, -0.0009899139404296875, -1.9073486328125e-06, -1.0759319067001343, -3.623910015448928e-05, -0.10324177145957947, 0.0, 0.0, -0.29900550842285156, -0.030455589294433594, -1.9073486328125e-06, -0.15232646465301514, -0.0004203273565508425, 0.0, -6.89007283654064e-05, 0.0, -5.07830991409719e-05, 0.0, -1.33514404296875e-05, -0.00464630126953125, -1.71661376953125e-05, -7.62939453125e-06, -1.4305104514278355e-06, -4.57763671875e-05, -0.00012683063687290996], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole6": [{"_type": "Template39", "hole0": "EnemyPlayer"}], "hole4": [{"_type": "Num", "n": 5}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 237, 46, 139, "5", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(5),\n            CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.8929105368060135, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -0.7995152473449707, -1.1920928244535389e-07, -0.00013863694039173424, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -2.9802276912960224e-06, -0.042824503034353256, -1.8477414414519444e-05, -0.016450798138976097, -0.0006201728247106075, -0.011838912963867188, -2.705122947692871, -1.9073486328125e-06, -0.11276236176490784, -1.6808484360808507e-05, -0.2824832797050476, -2.741813204920618e-06, -7.152555099310121e-07, -0.8548364639282227, -0.0010833740234375, -1.9073486328125e-06, -0.004105687141418457, 0.0, -7.05718994140625e-05, -7.82012939453125e-05, -0.016890287399291992, -8.106222594506107e-06, 0.0, -0.0012706785928457975, -1.9073486328125e-06, -0.00018285545229446143, 0.0, -3.814697265625e-05, -0.0091705322265625, -7.62939453125e-06, -3.814697265625e-06, -7.152555099310121e-07, -4.00543212890625e-05, -6.675497570540756e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Silence", "hole5": "CharacterSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "Num", "n": 5}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.951509482427646, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -2.7260494232177734, -0.0005739472107961774, -8.392268500756472e-05, 0.0, 0.0, -3.933906555175781e-06, -2.50339189733495e-06, -0.003972291946411133, -4.172325134277344e-06, -0.7635326385498047, -0.0031333896331489086, -0.11463019996881485, -8.58306884765625e-06, -1.1920928244535389e-07, -0.23293685913085938, -3.24249267578125e-05, -3.814697265625e-06, -0.018043994903564453, -1.1920922133867862e-06, -7.05718994140625e-05, -9.34600830078125e-05, -0.0005036592483520508, -8.702273589733522e-06, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -1.0263128280639648, 0.0, -0.0005855560302734375, -3.814697265625e-06, -0.005741000175476074, -0.000733241147827357, -1.1920928244535389e-07, -3.90999557566829e-05, 0.0, -3.6954781535314396e-05, 0.0, -0.0001068115234375, -0.020898818969726562, -5.7220458984375e-06, -5.7220458984375e-06, -8.344646857949556e-07, -4.1961669921875e-05, -2.658331868587993e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))), Buff(\n            ChangeHealth(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            )]), battlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -5.104014566695653, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.0023748874664307, -0.0034947837702929974, -1.9073486328125e-06, -4.76837158203125e-05, -5.340576171875e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.004130244255065918, -2.0265579223632812e-06, -0.21339678764343262, 0.0, -0.029511451721191406, -0.012197494506835938, -0.014926552772521973, -0.07794821262359619, 0.0, -4.9591064453125e-05, -0.0282440185546875, -0.006411552429199219, -0.0007222890271805227, -2.825220326485578e-05, -9.5367431640625e-06, 0.0, -0.0006261421367526054, -5.7220458984375e-06, -2.288818359375e-05, -0.00382232666015625, -0.04220867156982422, -3.62396240234375e-05, -7.62939453125e-06, 0.0, -0.1585928201675415, -0.0006444138707593083, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0029555559158325195, -3.933906555175781e-06, -0.13079333305358887, 0.0, -0.30125635862350464, -0.23369371891021729, 0.0, -3.504720370983705e-05, -3.814697265625e-06, -1.4901099348207936e-05, 0.0, -0.00012969970703125, -0.025487899780273438, -1.52587890625e-05, -9.5367431640625e-06, -1.6689286894688848e-06, -4.57763671875e-05, -9.16677454370074e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecrySelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 213, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.DRAGON), players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -5.185291566470383, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -3.465956211090088, -3.981510963058099e-05, -0.00030743301613256335, 0.0, 0.0, -1.9073486328125e-06, -2.3841855067985307e-07, -0.14822161197662354, 0.0, -0.35634225606918335, -2.861018856492592e-06, -0.05759108066558838, -9.918212890625e-05, 0.0, -0.00025177001953125, -0.23560619354248047, -1.9073486328125e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.3878135681152344, -0.0017201899318024516, 0.0, -7.62939453125e-06, -0.0004940032958984375, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -0.002939462661743164, -5.745887756347656e-05, -0.31817126274108887, -1.1920928244535389e-07, -0.06269073486328125, -3.0517578125e-05, -3.814697265625e-06, -0.0016472339630126953, 0.0, -2.86102294921875e-05, -5.7220458984375e-06, -0.00019848346710205078, -1.609317769180052e-05, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -0.07581233978271484, 0.0, -0.000286102294921875, 0.0, -0.007809042930603027, -0.000594366283621639, -2.3841855067985307e-07, -2.5510509658488445e-05, 0.0, -2.7537334972294047e-05, 0.0, -0.0004596710205078125, -0.02657318115234375, -7.62939453125e-06, -9.5367431640625e-06, -8.344646857949556e-07, -4.38690185546875e-05, -3.1709168979432434e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Kill", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole6": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Attribute('<UNK>', MinionSelector(Adjacent\n            ())))))), Buff(ChangeAttack(Attribute('<UNK>', MinionSelector(\n            Adjacent()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -5.7535036016453915, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.612163782119751, -7.152543730626348e-06, -0.000591278076171875, -0.002346038818359375, -0.00057220458984375, -0.0036357503850013018, -6.079655122448457e-06, -0.0063838958740234375, -0.000152587890625, -0.6018472909927368, -5.543231964111328e-05, -1.0728830375228426e-06, -0.17569024860858917, -2.5152843591058627e-05, -0.004755973815917969, -0.0009822845458984375, -0.005014704540371895, -0.5357416868209839, -2.4318398573086597e-05, -0.000392913818359375, -0.23923873901367188, -0.0002613067626953125, -1.52587890625e-05, -9.5367431640625e-06, -0.01566886715590954, -1.2040138244628906e-05, -6.103515625e-05, -0.000408172607421875, -0.000164031982421875, -0.03950553759932518, -3.3378546504536644e-06, -0.007259368896484375, -0.0002117156982421875, -0.39575695991516113, -2.3126602172851562e-05, -4.768370445162873e-07, -0.19958490133285522, -4.207999518257566e-05, -0.09267488867044449, -7.629378160345368e-06, -2.1457672119140625e-06, -8.380178041988984e-05, -1.9073486328125e-06, -0.00013291001960169524, 0.0, -3.814697265625e-06, -0.0018749237060546875, -2.6702880859375e-05, -3.814697265625e-06, -1.311301275563892e-06, -3.62396240234375e-05, -0.00017176583060063422], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "battlecry", "<EOS>", 34, 220, 238, 49, 162, "Draw", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", "Player", "Selector", "<EOS>", 49, 161, "Silence", "<EOS>", "Weapon", "Selector", "<EOS>", 237, 63, 205, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=(Battlecry(Draw(Attribute('<UNK>',\n            MinionSelector(Adjacent()))), PlayerSelector()), Battlecry(\n            Silence(), WeaponSelector(Adjacent()))))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -6.081642011034667, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.4566221237182617, -0.0004138946533203125, -1.6689286894688848e-06, -2.872943878173828e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -8.034706115722656e-05, 0.0, -0.005796313285827637, 0.0, -0.04935741424560547, -0.000209808349609375, -0.000278472900390625, -0.0689706802368164, -0.1583423614501953, -0.4092741012573242, -4.649158654501662e-06, -1.9073486328125e-06, -0.004779815673828125, -0.0092620849609375, -3.62396240234375e-05, -1.9073486328125e-06, -0.10578453540802002, -1.9073486328125e-06, -0.00095367431640625, -0.0002899169921875, -7.82012939453125e-05, -0.040390368551015854, -3.576278118089249e-07, -0.022531509399414062, -4.38690185546875e-05, -0.04673326015472412, -2.6941299438476562e-05, -1.1920928244535389e-07, -0.17350658774375916, -6.067568756407127e-05, -0.5618656873703003, -1.33514404296875e-05, 0.0, -0.002227783203125, -0.005444526672363281, -0.0838785320520401, -0.010208101943135262, -0.2839484214782715, -0.00010025363008026034, -4.0531158447265625e-06, -5.7220458984375e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.5720469951629639, -0.006537965498864651, -0.0001852468412835151, -5.7220458984375e-06, -0.00022565145627595484, 0.0, -5.7220458984375e-06, -0.0006542205810546875, -1.9073486328125e-05, -1.9073486328125e-06, -1.1920922133867862e-06, -4.38690185546875e-05, -9.858122211880982e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template10", "hole2": "RARE", "hole3": "battlecry", "hole1": 4, "hole0": "Wailing Soul", "hole4": {"_type": "Tuple", "elts": [{"_type": "Template18", "hole0": "Draw", "hole2": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template18", "hole0": "Silence", "hole3": [{"_type": "Template39", "hole0": "Adjacent"}], "hole2": "WeaponSelector"}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 62, 202, "Is", "Spell", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Attribute('<UNK>', HeroSelector(\n            EnemyPlayer())))))), IsSpell()]), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -6.352785598796871, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.612163782119751, -7.152543730626348e-06, -0.000591278076171875, -0.002346038818359375, -0.00057220458984375, -0.0036357503850013018, -6.079655122448457e-06, -0.0063838958740234375, -0.000152587890625, -0.9224271774291992, -0.0017487173900008202, -1.4305104514278355e-06, -0.24444231390953064, -0.000132322107674554, 0.0, -1.3626909255981445, -0.004275321960449219, -0.002038881415501237, -0.1424560248851776, -0.00017547607421875, -0.23074376583099365, -1.6689286894688848e-06, -2.384185791015625e-06, -0.00026056371279992163, 0.0, -9.452951780986041e-05, 0.0, -5.7220458984375e-06, -0.005340576171875, -1.9073486328125e-05, -3.814697265625e-06, -2.7418097943154862e-06, -3.814697265625e-05, -0.00015984688070602715], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template38_expr_seq", "hole0": "IsSpell"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))), Buff(\n            ChangeHealth(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            )]), battlecry()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -6.510868480808043, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.0023748874664307, -0.0034947837702929974, -1.9073486328125e-06, -4.76837158203125e-05, -5.340576171875e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.004130244255065918, -2.0265579223632812e-06, -0.21339678764343262, 0.0, -0.029511451721191406, -0.012197494506835938, -0.014926552772521973, -0.07794821262359619, 0.0, -4.9591064453125e-05, -0.0282440185546875, -0.006411552429199219, -0.0007222890271805227, -2.825220326485578e-05, -9.5367431640625e-06, 0.0, -0.0006261421367526054, -5.7220458984375e-06, -2.288818359375e-05, -0.00382232666015625, -0.04220867156982422, -3.62396240234375e-05, -7.62939453125e-06, 0.0, -0.1585928201675415, -0.0006444138707593083, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0029555559158325195, -3.933906555175781e-06, -0.13079333305358887, 0.0, -0.30125635862350464, -1.5748869180679321, -6.663711974397302e-05, -1.9073486328125e-06, -1.3112978194840252e-05, 0.0, -0.0001316070556640625, -0.09111976623535156, -1.52587890625e-05, -1.33514404296875e-05, -1.1920922133867862e-06, -4.57763671875e-05, -8.737658936297521e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecry", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Attribute('<UNK>', MinionSelector(Adjacent\n            ())))))), Buff(ChangeHealth(Count(MinionSelector(IsType(\n            MINION_TYPE.DRAGON)))))]), battlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -6.521474718388916, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.612163782119751, -7.152543730626348e-06, -0.000591278076171875, -0.002346038818359375, -0.00057220458984375, -0.0036357503850013018, -6.079655122448457e-06, -0.0063838958740234375, -0.000152587890625, -0.6018472909927368, -5.543231964111328e-05, -1.0728830375228426e-06, -0.17569024860858917, -2.5152843591058627e-05, -0.004755973815917969, -0.0009822845458984375, -0.005014704540371895, -0.8898810148239136, -1.9073486328125e-06, -0.000843048095703125, -0.23370075225830078, -0.004352569580078125, -0.00023578584659844637, -0.00019226610311307013, -2.09808349609375e-05, 0.0, -0.004448385909199715, -1.1444091796875e-05, -4.38690185546875e-05, -0.019195556640625, -0.05739307403564453, -4.57763671875e-05, -7.62939453125e-06, 0.0, -0.3829768896102905, -0.0013270037015900016, -1.9073486328125e-06, -5.53131103515625e-05, -4.1961669921875e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.002898097038269043, -3.933906555175781e-06, -0.12527048587799072, 0.0, -0.2867419123649597, -0.26281726360321045, 0.0, -3.5881646908819675e-05, -1.9073486328125e-06, -1.4781891877646558e-05, 0.0, -0.0001239776611328125, -0.024515151977539062, -1.52587890625e-05, -9.5367431640625e-06, -1.6689286894688848e-06, -4.38690185546875e-05, -9.798523387871683e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecrySelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Attribute('<UNK>', HeroSelector(\n            EnemyPlayer())))))), Buff(ChangeHealth(Count(MinionSelector(\n            IsType(MINION_TYPE.DRAGON)))))]), battlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -6.897859019763317, "score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -1.9704813957214355, -2.5748875486897305e-05, -7.87971803219989e-05, -1.1920928244535389e-07, -4.768360213347478e-06, -3.814697265625e-06, -8.582700684200972e-05, -0.0038645262829959393, -1.2993770724278875e-05, -0.11579742282629013, -0.03167961910367012, -1.33514404296875e-05, -0.08250808715820312, -5.91278076171875e-05, -2.86102294921875e-05, -0.2770967483520508, -0.0051059722900390625, -0.013646594248712063, -0.020715460181236267, -0.00010299152199877426, -0.000377655029296875, -0.09080028533935547, -0.09902286529541016, -0.0005200316663831472, -0.001729065552353859, -0.0001773834228515625, 0.0, -0.0004570246674120426, -2.7060508728027344e-05, -6.29425048828125e-05, -0.003208160400390625, -0.058875083923339844, -3.814697265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.612163782119751, -7.152543730626348e-06, -0.000591278076171875, -0.002346038818359375, -0.00057220458984375, -0.0036357503850013018, -6.079655122448457e-06, -0.0063838958740234375, -0.000152587890625, -0.9224271774291992, -0.0017487173900008202, -1.4305104514278355e-06, -0.24444231390953064, -0.000132322107674554, 0.0, -0.3438606262207031, -0.0031766891479492188, -0.0007157677318900824, -0.614943265914917, 0.0, -0.0001983642578125, -0.18295669555664062, -0.006209373474121094, -0.00025165016995742917, -8.630380034446716e-05, -1.52587890625e-05, 0.0, -0.004253351129591465, -1.1444091796875e-05, -4.1961669921875e-05, -0.019140243530273438, -0.04717063903808594, -4.9591064453125e-05, -7.62939453125e-06, 0.0, -0.330346941947937, -0.0014582107542082667, -1.9073486328125e-06, -5.340576171875e-05, -3.814697265625e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0031502246856689453, -2.0265579223632812e-06, -0.1280890703201294, 0.0, -0.28683218359947205, -0.2949110269546509, 0.0, -3.445117181399837e-05, -1.9073486328125e-06, -1.4305060176411644e-05, 0.0, -0.0001239776611328125, -0.025056838989257812, -1.52587890625e-05, -9.5367431640625e-06, -1.6689286894688848e-06, -4.38690185546875e-05, -9.953480184776708e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecrySelector", "hole1": 4, "hole0": "Wailing Soul", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WailingSoul", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 5}], "hole4": "player"}}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "+3", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()),\n            Aura(+3(), SelfSelector())])\n", "score": -1.7101161261804734, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -1.045994758605957, -0.0020371675491333008, -1.3232223864179105e-05, -5.53131103515625e-05, -0.0068225860595703125, -0.000194549560546875, -0.25870728492736816, -6.794924956921022e-06, -0.000186920166015625, 0.0, -0.010709496214985847, -1.1324880688334815e-05, -0.006831765174865723, -1.9073486328125e-06, -0.0007305145263671875, -0.0001220703125, -0.018204687163233757, -0.00013434559514280409, -0.0007114410400390625, -0.004756927490234375, -6.29425048828125e-05, -0.07790442556142807, -0.08711155503988266, -0.01602649688720703, -5.53131103515625e-05, -0.060880325734615326, -3.600099080358632e-05, -3.5643577575683594e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "+3"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), WeaponSelector())])\n", "score": -1.7456694583385612, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -0.713499128818512, -9.179088920063805e-06, -0.0003032684326171875, -1.9073486328125e-06, -0.4493708312511444, -4.2557716369628906e-05, -0.00031363964080810547], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -2.2261838841447386, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -1.6177374124526978, -4.29153169534402e-06, -0.0016345977783203125, 0.0, -0.016187716275453568, -1.7285345165873878e-05, -0.008473634719848633], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "score": -2.582818273717457, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -0.713499128818512, -9.179088920063805e-06, -0.0003032684326171875, -1.9073486328125e-06, -1.2796549797058105, -2.646444772835821e-05, -0.007194399833679199], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "6", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(6), SelfSelector())])\n", "score": -2.7087998737549057, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -2.1085422039031982, -1.3112994565744884e-05, -0.000293731689453125, 0.0, -0.012269706465303898, -1.8358230590820312e-05, -0.005533814430236816], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 6}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -2.727018051143368, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -2.1342437267303467, -6.318082796497038e-06, -4.1961669921875e-05, -1.9073486328125e-06, -0.00817786529660225, -9.894371032714844e-06, -0.0024074316024780273], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "3", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -3.512007071006046, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -2.9086382389068604, -1.001357759378152e-05, -0.000274658203125, -1.9073486328125e-06, -0.013211140409111977, -1.633167266845703e-05, -0.007725834846496582], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 3}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "+3", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(+3(), SelfSelector())])\n", "score": -3.5497012148477367, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -1.045994758605957, -0.0020371675491333008, -1.3232223864179105e-05, -5.53131103515625e-05, -0.0068225860595703125, -0.000194549560546875, -1.6470359563827515, -1.4305078366305679e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.42996543645858765, -2.4199445761041716e-05, -0.008958101272583008, -1.9073486328125e-06, -0.0025186538696289062, -0.0001850128173828125, -0.019515274092555046, -0.00014483457198366523, -0.0004749298095703125, -0.0036830902099609375, -5.53131103515625e-05, -0.10496068000793457, -0.09078754484653473, -0.014310836791992188, -5.7220458984375e-05, -0.06000601127743721, -2.884855530282948e-05, -4.315376281738281e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "+3"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 201, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 237, 62, 204, "Aura", "<EOS>", 238, 63, 205, "Attack", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()),\n            Aura(Attack(), SelfSelector())])\n", "score": -4.1253768483172095, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -1.045994758605957, -0.0020371675491333008, -1.3232223864179105e-05, -5.53131103515625e-05, -0.0068225860595703125, -0.000194549560546875, -0.25870728492736816, -6.794924956921022e-06, -0.000186920166015625, 0.0, -0.010709496214985847, -1.1324880688334815e-05, -0.006831765174865723, -1.9073486328125e-06, -0.0007305145263671875, -0.0001220703125, -0.018204687163233757, -0.00013434559514280409, -0.0007114410400390625, -0.004756927490234375, -6.29425048828125e-05, -2.6067962646484375, -0.0035470621660351753, -0.00293731689453125, -1.9073486328125e-06, -0.04391980916261673, -1.7046921129804105e-05, -9.107589721679688e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, deathrattle=Deathrattle(Damage(2),\n            PlayerSelector()))\n", "score": -4.552568829605256, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -2.554358720779419, -2.0265558760002023e-06, -0.0001678466796875, -9.5367431640625e-06, -7.2479248046875e-05, -7.62939453125e-06, -0.0009126659133471549, -2.4914475943660364e-05, -1.71661376953125e-05, -0.006670951843261719, -2.86102294921875e-05, -0.6928306818008423, -0.001016889582388103, -0.29683178663253784, -1.9073468138230965e-06, -0.9905109405517578, -7.43865966796875e-05, -0.005607126746326685, -0.00012791156768798828, -0.0003402233123779297], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 2}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Heal", "<EOS>", "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, deathrattle=Deathrattle(Heal(2), PlayerSelector()))\n", "score": -4.962023641422597, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -2.554358720779419, -2.0265558760002023e-06, -0.0001678466796875, -9.5367431640625e-06, -7.2479248046875e-05, -7.62939453125e-06, -0.0009126659133471549, -2.4914475943660364e-05, -1.71661376953125e-05, -0.006670951843261719, -2.86102294921875e-05, -1.4080597162246704, -0.02512991428375244, -0.06748496741056442, -1.6212332411669195e-05, -0.8084840774536133, -8.392333984375e-05, -0.08690568804740906, -5.936622619628906e-05, -0.0005728006362915039], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Heal", "hole1": 2}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "2", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "+3", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, deathrattle=Deathrattle(Damage(2),\n            MinionSelector(+3())))\n", "score": -5.089367119669582, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -2.554358720779419, -2.0265558760002023e-06, -0.0001678466796875, -9.5367431640625e-06, -7.2479248046875e-05, -7.62939453125e-06, -0.0009126659133471549, -2.4914475943660364e-05, -1.71661376953125e-05, -0.006670951843261719, -2.86102294921875e-05, -0.6928306818008423, -0.001016889582388103, -0.29683178663253784, -1.9073468138230965e-06, -0.5131340026855469, -0.004307746887207031, -0.4503263235092163, -0.00010895622835960239, -0.00013326735643204302, -0.3924557566642761, -0.17299282550811768], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 2}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "+3"}]}, "hole2": "deathrattle", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True)\n", "score": -6.982624829624733, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -6.6714701652526855, 0.0, -0.30793094635009766, -9.5367431640625e-06, -0.00017595288227312267, -8.380092913284898e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 19, 129, 237, 52, 180, "Attack", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Buff(Attack())])\n", "score": -7.360456634627262, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -5.591437339782715, -0.000507354736328125, -0.0002155303955078125, -0.0001506805419921875, -0.018924713134765625, -0.16595719754695892, -1.4911296367645264], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "List", "elts": [{"_type": "Template25", "hole0": "Attack"}]}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 198, "Aura", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura()])\n", "score": -7.623531405197063, "score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -7.367364883422852, -0.1408025026321411, -0.0035936832427978516], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Amani Berserker", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "AmaniBerserker", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura"}, "hole2": "enrage", "hole1": 3}], "hole4": "player"}}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 175, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -3.5837167713907974, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -2.4222640991210938, -0.061544984579086304, -0.001617431640625, -0.029378890991210938, -3.4332275390625e-05, -0.025786399841308594, -0.000415802001953125, -0.0054111480712890625, -0.004471778869628906, -0.0001468658447265625, -0.005061671137809753, -1.9073486328125e-06, -0.0001239776611328125, -5.14984130859375e-05, -0.000125885009765625, -0.005272865295410156, -2.300739288330078e-05, -0.2461080551147461, -3.24249267578125e-05, -9.72747802734375e-05, -0.000301361083984375, -2.6702880859375e-05, -1.9073486328125e-06, -0.0006045100744813681, -0.00151824951171875, -9.5367431640625e-06, -0.008495330810546875, -0.000484466552734375, -0.0006885528564453125, -0.009060025215148926, -0.00026702880859375, -0.001804351806640625, -0.02808094024658203, -0.0010012388229370117, -0.019656537100672722, -3.814697265625e-06, -0.000659942626953125, -0.0001773834228515625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021839141845703125, -2.09808349609375e-05, -0.02236020565032959, 0.0, -0.0009588003158569336, -7.05718994140625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 175, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -4.488163367912463, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -1.4949268102645874, 0.0, -0.021443843841552734, -1.9073486328125e-06, -2.491474151611328e-05, -6.67572021484375e-05, -4.172325134277344e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.002056121826171875, -3.24249267578125e-05, -2.264974000354414e-06, -7.43865966796875e-05, -3.62396240234375e-05, -0.00027640812913887203, -0.004463791847229004, -7.748573807475623e-06, -5.53131103515625e-05, -9.1552734375e-05, -2.361262321472168, -0.06408974528312683, -0.00170135498046875, -0.028072357177734375, -3.4332275390625e-05, -0.024697303771972656, -0.0004062652587890625, -0.005496025085449219, -0.004489898681640625, -0.0001392364501953125, -0.005092545412480831, -1.9073486328125e-06, -0.0001239776611328125, -5.14984130859375e-05, -0.0001220703125, -0.0051975250244140625, -2.300739288330078e-05, -0.23984146118164062, -3.24249267578125e-05, -9.918212890625e-05, -0.000301361083984375, -2.6702880859375e-05, -1.9073486328125e-06, -0.0006047484930604696, -0.00151824951171875, -9.5367431640625e-06, -0.008453369140625, -0.000484466552734375, -0.0006866455078125, -0.009060144424438477, -0.0002689361572265625, -0.0018062591552734375, -0.028038978576660156, -0.001002192497253418, -0.019660351797938347, -3.814697265625e-06, -0.0006618499755859375, -0.0001773834228515625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021820068359375, -2.09808349609375e-05, -0.022343039512634277, 0.0, -0.0009607076644897461, -7.05718994140625e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "PALADIN", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's hand\")), EnemyPlayer()), ActionTag(AddCard(\n            CardQuery(conditions=[IsType(MINION_TYPE.MECH)])),\n            PlayerSelector(<UNK>Player())))])\n", "score": -4.8221164277565975, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8312839865684509, -0.020900726318359375, -0.42338353395462036, -0.0003108978271484375, -0.0026397705078125, 0.0, -0.15233910083770752, -0.0003604888916015625, 0.0, -8.0108642578125e-05, -0.01900482177734375, -0.012211203575134277, -0.000102996826171875, -0.00012969970703125, -9.5367431640625e-06, -0.01908397674560547, -0.0001735687255859375, -5.7220458984375e-06, 0.0, -0.00014901161193847656, -0.002490997314453125, -0.0004520416259765625, -0.0007686614990234375, -7.05718994140625e-05, -0.0003833770751953125, -0.12053465843200684, -5.7220458984375e-05, -0.0010051727294921875, -0.033476829528808594, -0.0004706382751464844, -0.011405467055737972, -3.814697265625e-06, -0.000530242919921875, -9.1552734375e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0023822784423828125, -2.09808349609375e-05, -0.021309256553649902, 0.0, -0.0015347003936767578, -6.866455078125e-05, 0.0, -2.09808349609375e-05, -0.000988006591796875, -1.9073486328125e-06, -0.0053339991718530655, -0.0035051354207098484, -0.00015425682067871094], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Gallywix's hand"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 174, "Spell", "Cast", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            CardQuery(conditions=[IsType(MINION_TYPE.MECH)])),\n            PlayerSelector())), ActionTag(AddCard(CardQuery(conditions=[\n            IsType(MINION_TYPE.MECH)])), PlayerSelector())])\n", "score": -4.901625159953298, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -1.7820863723754883, -0.23213088512420654, -0.0034618377685546875, -0.0023174285888671875, -7.43865966796875e-05, -0.057862281799316406, -0.000156402587890625, -0.058823585510253906, -5.340576171875e-05, -0.1280984878540039, -2.09808349609375e-05, -0.000164031982421875, -0.000263214111328125, -2.288818359375e-05, 0.0, -0.0006026029004715383, -0.0016021728515625, -7.62939453125e-06, -0.0066967010498046875, -0.0004558563232421875, -0.00060272216796875, -0.011290431022644043, -0.0002155303955078125, -0.0013561248779296875, -0.031783103942871094, -0.0009667873382568359, -0.017097948119044304, -3.814697265625e-06, -0.000644683837890625, -0.0001506805419921875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.002376556396484375, -2.47955322265625e-05, -0.023764967918395996, 0.0, -0.001154184341430664, -4.38690185546875e-05, 0.0, 0.0, -1.6319732666015625, -0.02236461639404297, -0.09069538116455078, -7.62939453125e-05, -0.00011444091796875, -1.71661376953125e-05, -0.0004978179931640625, -0.00026702880859375, -2.09808349609375e-05, -1.9073486328125e-06, -0.0008113382500596344, -0.0012874603271484375, -5.7220458984375e-06, -0.0052089691162109375, -0.0004253387451171875, -0.0008258819580078125, -0.01084983255714178, -0.00019073486328125, -0.0018768310546875, -0.03627777099609375, -0.0007833242416381836, -0.0181045513600111, -3.814697265625e-06, -0.0005855560302734375, -0.0001506805419921875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0022716522216796875, -2.6702880859375e-05, -0.031090378761291504, 0.0, -0.0010921955108642578, -3.24249267578125e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 175, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCardCard(CardQuery(conditions=[IsType(MINION_TYPE.\n            MECH)])), PlayerSelector()))])\n", "score": -4.9155395234120505, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -2.4222640991210938, -0.061544984579086304, -0.001617431640625, -0.029378890991210938, -3.4332275390625e-05, -0.025786399841308594, -0.000415802001953125, -0.0054111480712890625, -0.004471778869628906, -0.0001468658447265625, -0.005061671137809753, -1.9073486328125e-06, -0.0001239776611328125, -5.14984130859375e-05, -0.000125885009765625, -0.005272865295410156, -2.300739288330078e-05, -1.5599470138549805, -0.008963584899902344, -5.7220458984375e-05, -5.14984130859375e-05, -0.00026702880859375, -3.4332275390625e-05, -1.9073486328125e-06, -0.0007548329886049032, -0.0017633438110351562, -1.1444091796875e-05, -0.0163421630859375, -0.00063323974609375, -0.00098419189453125, -0.008631943725049496, -0.0002899169921875, -0.0019073486328125, -0.02263164520263672, -0.0010350942611694336, -0.022455571219325066, -3.814697265625e-06, -0.0006923675537109375, -0.000217437744140625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021209716796875, -2.288818359375e-05, -0.025637030601501465, 0.0, -0.0009665489196777344, -7.2479248046875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole2": [{"_type": "Template19", "hole0": "AddCardCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Minion", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            'Minion')), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -5.025405703047042, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.9990578889846802, -0.5063447952270508, -0.030759811401367188, -3.814697265625e-06, -0.1374291181564331, -0.0002595186233520508, 0.0, -0.000118255615234375, -0.028331756591796875, -0.008699655532836914, -9.34600830078125e-05, -0.00011444091796875, -1.33514404296875e-05, -0.010928153991699219, -0.000133514404296875, -7.62939453125e-06, 0.0, -0.00011897087097167969, -0.0021686553955078125, -0.000415802001953125, -0.0013751983642578125, -9.918212890625e-05, -0.0006103515625, -0.08446967601776123, -6.29425048828125e-05, -0.0009613037109375, -0.031928062438964844, -0.0004742145538330078, -0.011005758307874203, -3.814697265625e-06, -0.00057220458984375, -0.0001087188720703125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0024051666259765625, -2.09808349609375e-05, -0.021545767784118652, 0.0, -0.001423954963684082, -0.000141143798828125, 0.0, -2.09808349609375e-05, -0.0011730194091796875, -1.9073486328125e-06, -0.005584461148828268, -0.003359105670824647, -0.00017333030700683594], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Minion"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's hand\")), EnemyPlayer()), ActionTag(AddCard(\n            CardQuery(conditions=[IsType(MINION_TYPE.MECH)])),\n            PlayerSelector(<UNK>Player())))])\n", "score": -5.7917035621958775, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -1.4949268102645874, 0.0, -0.021443843841552734, -1.9073486328125e-06, -2.491474151611328e-05, -6.67572021484375e-05, -4.172325134277344e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.002056121826171875, -3.24249267578125e-05, -2.264974000354414e-06, -7.43865966796875e-05, -3.62396240234375e-05, -0.00027640812913887203, -0.004463791847229004, -7.748573807475623e-06, -5.53131103515625e-05, -9.1552734375e-05, -0.4074983596801758, -0.20709097385406494, -0.0023345947265625, -0.0005207061767578125, -0.0050449371337890625, -0.2317209243774414, -5.91278076171875e-05, -0.004488945007324219, -0.04780149459838867, -2.47955322265625e-05, -0.0398649200797081, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034637451171875, -3.063678741455078e-05, -0.029953956604003906, -5.340576171875e-05, -0.000152587890625, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006740090320818126, -0.0014858245849609375, -9.5367431640625e-06, -0.00637054443359375, -0.0004673004150390625, -0.0007572174072265625, -0.009595274925231934, -0.0002841949462890625, -0.00179290771484375, -0.02614879608154297, -0.0009733438491821289, -0.020384667441248894, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.02251565456390381, 0.0, -0.0007894039154052734, -4.9591064453125e-05, 0.0, 0.0, -0.030941009521484375, -0.00035858154296875, -0.002633571159094572, -1.1801719665527344e-05, -0.0001697540283203125, -0.008510589599609375, -0.0006771087646484375, -1.1444091796875e-05, 0.0, -0.023709416389465332, -0.014909744262695312, -2.86102294921875e-05, -0.4630002975463867, -0.09277153015136719, -0.011397361755371094, -0.1205325797200203, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5756752490997314, -0.002570216078311205, -0.0317535400390625, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8283004760742188, -0.021040916442871094, -0.4229127764701843, -0.0003108978271484375, -0.0026378631591796875, 0.0, -0.15263092517852783, -0.0003604888916015625, 0.0, -7.82012939453125e-05, -0.01900196075439453, -0.012215018272399902, -0.000102996826171875, -0.00012969970703125, -9.5367431640625e-06, -0.019097328186035156, -0.0001735687255859375, -5.7220458984375e-06, 0.0, -0.00014901161193847656, -0.0024919509887695312, -0.0004520416259765625, -0.000766754150390625, -7.05718994140625e-05, -0.0003833770751953125, -0.12058329582214355, -5.7220458984375e-05, -0.0010051727294921875, -0.033478736877441406, -0.0004706382751464844, -0.011405467055737972, -3.814697265625e-06, -0.000530242919921875, -8.96453857421875e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0023822784423828125, -2.09808349609375e-05, -0.02130734920501709, 0.0, -0.0015347003936767578, -6.866455078125e-05, 0.0, -2.09808349609375e-05, -0.000988006591796875, -1.9073486328125e-06, -0.0053357877768576145, -0.0035047787241637707, -0.00015425682067871094], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "PALADIN", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Gallywix's hand"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Minion", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            'Minion hand')), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -5.912756377998491, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.9990578889846802, -0.9359722137451172, -0.3441312909126282, -0.0009126663208007812, -0.02567577362060547, -1.9073486328125e-06, -0.18391704559326172, -0.000385284423828125, 0.0, -7.2479248046875e-05, -0.02083301544189453, -0.011327743530273438, -8.7738037109375e-05, -0.0001354217529296875, -9.5367431640625e-06, -0.03086376190185547, -0.000171661376953125, -5.7220458984375e-06, 0.0, -0.00016796588897705078, -0.0028095245361328125, -0.000377655029296875, -0.000553131103515625, -5.91278076171875e-05, -0.000293731689453125, -0.13830959796905518, -5.340576171875e-05, -0.0010528564453125, -0.03438758850097656, -0.0005033016204833984, -0.01196205522865057, -3.814697265625e-06, -0.000507354736328125, -8.392333984375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0023746490478515625, -2.09808349609375e-05, -0.021245360374450684, 0.0, -0.0015707015991210938, -9.72747802734375e-05, 0.0, -1.9073486328125e-05, -0.0010623931884765625, -1.9073486328125e-06, -0.005088781006634235, -0.003554672934114933, -0.00015044212341308594], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Minion hand"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Minion", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            'Minion')), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -5.9977397177736265, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -1.4949268102645874, 0.0, -0.021443843841552734, -1.9073486328125e-06, -2.491474151611328e-05, -6.67572021484375e-05, -4.172325134277344e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.002056121826171875, -3.24249267578125e-05, -2.264974000354414e-06, -7.43865966796875e-05, -3.62396240234375e-05, -0.00027640812913887203, -0.004463791847229004, -7.748573807475623e-06, -5.53131103515625e-05, -9.1552734375e-05, -0.4074983596801758, -0.20709097385406494, -0.0023345947265625, -0.0005207061767578125, -0.0050449371337890625, -0.2317209243774414, -5.91278076171875e-05, -0.004488945007324219, -0.04780149459838867, -2.47955322265625e-05, -0.0398649200797081, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034637451171875, -3.063678741455078e-05, -0.029953956604003906, -5.340576171875e-05, -0.000152587890625, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006740090320818126, -0.0014858245849609375, -9.5367431640625e-06, -0.00637054443359375, -0.0004673004150390625, -0.0007572174072265625, -0.009595274925231934, -0.0002841949462890625, -0.00179290771484375, -0.02614879608154297, -0.0009733438491821289, -0.020384667441248894, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.02251565456390381, 0.0, -0.0007894039154052734, -4.9591064453125e-05, 0.0, 0.0, -0.030941009521484375, -0.00035858154296875, -0.002633571159094572, -1.1801719665527344e-05, -0.0001697540283203125, -0.008510589599609375, -0.0006771087646484375, -1.1444091796875e-05, 0.0, -0.023709416389465332, -0.014909744262695312, -2.86102294921875e-05, -0.4630002975463867, -0.09277153015136719, -0.011397361755371094, -0.1205325797200203, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5756752490997314, -0.002570216078311205, -0.0317535400390625, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -1.0015114545822144, -0.5034313201904297, -0.03082275390625, -3.814697265625e-06, -0.13751769065856934, -0.0002595186233520508, 0.0, -0.000118255615234375, -0.02837371826171875, -0.008701443672180176, -9.34600830078125e-05, -0.00011444091796875, -1.33514404296875e-05, -0.010943412780761719, -0.000133514404296875, -7.62939453125e-06, 0.0, -0.00011897087097167969, -0.0021686553955078125, -0.000415802001953125, -0.001373291015625, -9.918212890625e-05, -0.0006103515625, -0.08449923992156982, -6.29425048828125e-05, -0.0009613037109375, -0.03193092346191406, -0.0004742145538330078, -0.011005877517163754, -3.814697265625e-06, -0.00057220458984375, -0.0001087188720703125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0024051666259765625, -2.09808349609375e-05, -0.02154386043548584, 0.0, -0.001423954963684082, -0.0001430511474609375, 0.0, -2.09808349609375e-05, -0.0011730194091796875, -1.9073486328125e-06, -0.0055863684974610806, -0.003358272835612297, -0.00017333030700683594], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "PALADIN", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Minion"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "'", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's '\")), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -6.16304803190728, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8312839865684509, -0.020900726318359375, -1.309000015258789, -1.52587890625e-05, -0.07952308654785156, 0.0, -0.5051486492156982, -9.357929229736328e-05, 0.0, -0.00011444091796875, -0.01596355438232422, -0.014422893524169922, -9.918212890625e-05, -0.00012969970703125, -9.5367431640625e-06, -0.043211936950683594, -0.0001983642578125, -5.7220458984375e-06, 0.0, -0.00016045570373535156, -0.0024328231811523438, -0.0004425048828125, -0.000720977783203125, -6.866455078125e-05, -0.00038909912109375, -0.12398397922515869, -5.7220458984375e-05, -0.0009899139404296875, -0.03290557861328125, -0.0004858970642089844, -0.011367796920239925, -3.814697265625e-06, -0.0005397796630859375, -8.96453857421875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00243377685546875, -2.09808349609375e-05, -0.02107846736907959, 0.0, -0.0014507770538330078, -8.96453857421875e-05, 0.0, -2.09808349609375e-05, -0.0009002685546875, -1.9073486328125e-06, -0.0058275265619158745, -0.0034209825098514557, -0.00015997886657714844], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Gallywix's '"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Count(CardSelector(\n            condition=IsType(MINION_TYPE.MECH)))), PlayerSelector())])\n", "score": -6.318336526288974, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -1.3944177627563477, -0.15064048767089844, -1.3146400451660156, -0.17668527364730835, -2.741813204920618e-06, -7.62939453125e-06, 0.0, -0.0004107562417630106, -0.39041709899902344, 0.0, -2.47955322265625e-05, -0.0006008148193359375, -5.7220458984375e-06, -0.6595996618270874, 0.0, -0.05654621124267578, -0.0038700103759765625, -1.1444091796875e-05, -1.9073486328125e-06, -0.07229399681091309, -2.5272369384765625e-05, 0.0, -0.0007915496826171875, -3.814697265625e-06, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -0.003082275390625, -7.62939453125e-06, -0.12135255336761475, 0.0, -0.08335113525390625, -0.0008983612060546875, -0.012928234413266182, -0.046984076499938965, -6.437280717364047e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Archmage", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            'Archmage')), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -6.568693414963533, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -2.4559388160705566, -0.27200257778167725, -0.41993236541748047, -1.9073486328125e-06, -0.05592381954193115, -0.00024235248565673828, 0.0, -7.43865966796875e-05, -0.01611328125, -0.011922357603907585, -9.34600830078125e-05, -0.0001468658447265625, -1.1444091796875e-05, -0.008091926574707031, -0.000202178955078125, -7.62939453125e-06, 0.0, -0.0001493692398071289, -0.002277374267578125, -0.000705718994140625, -0.0011653900146484375, -0.000102996826171875, -0.000499725341796875, -0.10540199279785156, -6.866455078125e-05, -0.0009746551513671875, -0.03336143493652344, -0.0004826784133911133, -0.011813758872449398, -3.814697265625e-06, -0.0005664825439453125, -9.34600830078125e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0024623870849609375, -2.09808349609375e-05, -0.022243857383728027, 0.0, -0.001700758934020996, -4.1961669921875e-05, 0.0, -2.47955322265625e-05, -0.0010833740234375, -1.9073486328125e-06, -0.006350623443722725, -0.0033441600389778614, -0.00015985965728759766], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Archmage"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's hand\")), EnemyPlayer()), ActionTag(AddCard(\n            CardQuery(source=CARD_SOURCE.<UNK>)), PlayerSelector(\n            <UNK>Player())))])\n", "score": -6.942188858221968, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8312839865684509, -0.020900726318359375, -0.42338353395462036, -0.0003108978271484375, -0.0026397705078125, 0.0, -0.15233910083770752, -0.0003604888916015625, 0.0, -8.0108642578125e-05, -0.01900482177734375, -0.012211203575134277, -0.000102996826171875, -0.00012969970703125, -9.5367431640625e-06, -0.01908397674560547, -0.0001735687255859375, -5.7220458984375e-06, 0.0, -0.00014901161193847656, -0.002490997314453125, -0.0004520416259765625, -0.0007686614990234375, -7.05718994140625e-05, -0.0003833770751953125, -2.266181707382202, 0.0, -0.0019588470458984375, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.01831638813018799, 0.0, -0.017780661582946777, 0.0, -0.0009789052419364452, -3.933906555175781e-06, 0.0, -3.814697265625e-06, -0.012149810791015625, 0.0, -0.0026414624880999327, -0.002776114037260413, -0.00011742115020751953], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Gallywix's hand"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>"}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "'", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's '\")), EnemyPlayer()), ActionTag(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector(\n            <UNK>Player())))])\n", "score": -7.13366716070054, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -1.4949268102645874, 0.0, -0.021443843841552734, -1.9073486328125e-06, -2.491474151611328e-05, -6.67572021484375e-05, -4.172325134277344e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.002056121826171875, -3.24249267578125e-05, -2.264974000354414e-06, -7.43865966796875e-05, -3.62396240234375e-05, -0.00027640812913887203, -0.004463791847229004, -7.748573807475623e-06, -5.53131103515625e-05, -9.1552734375e-05, -0.4074983596801758, -0.20709097385406494, -0.0023345947265625, -0.0005207061767578125, -0.0050449371337890625, -0.2317209243774414, -5.91278076171875e-05, -0.004488945007324219, -0.04780149459838867, -2.47955322265625e-05, -0.0398649200797081, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034637451171875, -3.063678741455078e-05, -0.029953956604003906, -5.340576171875e-05, -0.000152587890625, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006740090320818126, -0.0014858245849609375, -9.5367431640625e-06, -0.00637054443359375, -0.0004673004150390625, -0.0007572174072265625, -0.009595274925231934, -0.0002841949462890625, -0.00179290771484375, -0.02614879608154297, -0.0009733438491821289, -0.020384667441248894, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.02251565456390381, 0.0, -0.0007894039154052734, -4.9591064453125e-05, 0.0, 0.0, -0.030941009521484375, -0.00035858154296875, -0.002633571159094572, -1.1801719665527344e-05, -0.0001697540283203125, -0.008510589599609375, -0.0006771087646484375, -1.1444091796875e-05, 0.0, -0.023709416389465332, -0.014909744262695312, -2.86102294921875e-05, -0.4630002975463867, -0.09277153015136719, -0.011397361755371094, -0.1205325797200203, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5756752490997314, -0.002570216078311205, -0.0317535400390625, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8283004760742188, -0.021040916442871094, -1.309950351715088, -1.52587890625e-05, -0.07962226867675781, 0.0, -0.5049464702606201, -9.357929229736328e-05, 0.0, -0.00011444091796875, -0.01595783233642578, -0.014429569244384766, -9.918212890625e-05, -0.00012969970703125, -9.5367431640625e-06, -0.04323291778564453, -0.0001983642578125, -5.7220458984375e-06, 0.0, -0.00016045570373535156, -0.00243377685546875, -0.0004425048828125, -0.0007190704345703125, -6.866455078125e-05, -0.00038909912109375, -0.12402689456939697, -5.7220458984375e-05, -0.0009899139404296875, -0.03290748596191406, -0.0004858970642089844, -0.01136684324592352, -3.814697265625e-06, -0.0005397796630859375, -8.96453857421875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00243377685546875, -2.09808349609375e-05, -0.021076560020446777, 0.0, -0.0014507770538330078, -8.96453857421875e-05, 0.0, -2.09808349609375e-05, -0.0009002685546875, -1.9073486328125e-06, -0.00582836102694273, -0.003420625813305378, -0.00015997886657714844], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "PALADIN", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Not", "hole2": [{"_type": "Str", "s": "Gallywix's '"}], "hole1": {"_type": "Name", "id": "HasCardName"}}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Count(MinionSelector\n            (HasCardName(\"Gallywix's hand\")))), EnemyPlayer())])\n", "score": -7.735034853902604, "score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -1.3944177627563477, -0.15064048767089844, -0.33367061614990234, -1.2244610786437988, -5.602820692729438e-06, -5.7220458984375e-06, 0.0, -0.4152427911758423, -0.03477191925048828, -1.9073486328125e-06, -0.0001621246337890625, -0.015979766845703125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.5174027681350708, -0.0005160556174814701, -0.11945629119873047, -0.000926971435546875, -0.002727508544921875, -0.21408557891845703, -0.0004177093505859375, -0.4402121305465698, -0.6039199829101562, -0.278200626373291, -0.0004634857177734375, -0.006122589111328125, 0.0, -0.15228474140167236, -0.000217437744140625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Archmage Antonidas", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ArchmageAntonidas", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "SpellCast", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "HasCardName"}, "args": [{"_type": "Str", "s": "Gallywix's hand"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}], "hole2": [{"_type": "Template19", "hole0": "AddCard", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "Template38", "hole0": "IsType", "hole1": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}]}]}], "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": 7, "hole1": 5}], "hole4": "player"}}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -0.39207358817894544, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -0.059581875801086426, -2.0265579223632812e-06, -0.03767271712422371, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "+1/+1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(+1/+1()))\n", "score": -2.270166207766003, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -1.6567401885986328, -0.000118255615234375, -1.33514404296875e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.622600959512056e-06, -0.04994320869445801, 0.0, -0.000148773193359375, -0.07105541229248047, -0.0027904510498046875, -0.3975803554058075, -0.012304029427468777], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "+1/+1"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -3.5844666638537177, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -3.157809257507324, 0.0, -0.13184043765068054, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -3.604925749080273, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -1.6567401885986328, -0.000118255615234375, -1.33514404296875e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.622600959512056e-06, -0.04994320869445801, 0.0, -0.000148773193359375, -0.07105541229248047, -0.0027904510498046875, -1.7446074485778809, -3.647756966529414e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "Spell", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(0)\n", "score": -4.36558481750636, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -0.059581875801086426, -2.0265579223632812e-06, -4.010829448699951, -0.00035449775168672204], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 0, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "score": -4.677918670432163, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -0.059581875801086426, -2.0265579223632812e-06, -4.323517799377441, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.708345492100186, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -1.6567401885986328, -0.000118255615234375, -1.33514404296875e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.622600959512056e-06, -0.04994320869445801, 0.0, -0.000148773193359375, -0.07105541229248047, -0.0027904510498046875, -2.8357596397399902, -0.012304029427468777], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Bananas", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Bananas()))\n", "score": -4.729784805988736, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -1.6567401885986328, -0.000118255615234375, -1.33514404296875e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.622600959512056e-06, -0.04994320869445801, 0.0, -0.000148773193359375, -0.07105541229248047, -0.0027904510498046875, -2.85719895362854, -0.012304029427468777], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Bananas"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(ChangeAttack(1)))\n", "score": -4.820194295671961, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -1.6567401885986328, -0.000118255615234375, -1.33514404296875e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.622600959512056e-06, -0.04994320869445801, 0.0, -0.000148773193359375, -2.762859344482422, -0.000125885009765625, -9.751213656272739e-05, -1.9073486328125e-06, -0.0019803442992269993, -0.08610379695892334, 0.0, -0.1825895458459854, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -4.963680019335342, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -4.6354169845581055, 0.0, -0.033446066081523895, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "self", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.other_player.draw()\n        self.target.bounce()\n", "score": -5.801232046478056, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -3.584589958190918, -0.0001049041748046875, -6.67572021484375e-05, -0.0002574920654296875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.450514385709539e-05, 0.0, -3.063674012082629e-05, -2.3841855067985307e-07, -0.00020134449005126953, 0.0, -1.3709036466025282e-05, -1.9073486328125e-06, -0.03283119201660156, -0.000354766845703125, -7.62939453125e-06, -1.33514404296875e-05, -5.340576171875e-05, 0.0, -2.0265579223632812e-06, -1.9073486328125e-06, -3.814697265625e-06, -4.291525328881107e-06, -1.0526055097579956, -1.1920928244535389e-07, -8.20159912109375e-05, -0.02788543701171875, -5.7220458984375e-06, -5.340576171875e-05, 0.0, -0.02047443389892578, -1.71661376953125e-05, -0.003917694091796875, -0.0001544952392578125, -0.005321502685546875, -5.7220458984375e-06, -0.00038909912109375, -1.9073486328125e-06, -0.18975067138671875, 0.0, -0.013223646208643913, 0.0, -0.02828974649310112, -1.1920928244535389e-07, -0.66351318359375, -5.7220458984375e-06, -0.0045604705810546875, -2.47955322265625e-05, -0.0006122589111328125, -1.9073486328125e-06, -0.005077362060546875, -7.62939453125e-06, -0.0075550079345703125, -1.9073486328125e-06, -0.000202178955078125, -5.960462772236497e-07, -0.11281466484069824, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "self"}], "hole1": "die"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "hole1": "draw"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "bounce"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "score": -6.032106755034405, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -5.729928016662598, -0.0003032684326171875, -9.1552734375e-05, -5.7220458984375e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0002117156982421875, -1.9073486328125e-06, -0.0001010894775390625, -4.768370445162873e-07, -0.010100245475769043, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "bounce"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, CARD_RARITY.COMMON, True)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -6.3370616576370224, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -5.89090633392334, -0.000152587890625, -0.04404640197753906, -1.9073486328125e-06, -0.0002193450927734375, 0.0, -0.00027167797088623047, 0.0, -0.001163482666015625, -7.62939453125e-06, -0.0005379915237426758, 0.0, -0.0050048828125, 0.0, -0.000221848429646343, 0.0, -0.000339508056640625, -0.0019588470458984375, -0.00046052385005168617, -3.933898824470816e-06, -0.030389785766601562, -2.6702880859375e-05, -0.0013980865478515625, -8.58306884765625e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.6570091247558594e-05, 0.0, -1.3232229321147315e-05, -1.1920928244535389e-07, -0.0004571676254272461, -1.9073486328125e-06, -9.417526598554105e-06, -1.9073486328125e-06, -0.23772144317626953, 0.0, -0.004913330078125, -0.000141143798828125, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -0.05725288391113281, -2.0265579223632812e-06, -0.040732771158218384, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "self", "<EOS>", 79, 115, 31, 195, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.other_player.draw()\n        self.target.card.add_buff(Buff(ChangeAttack(1)))\n", "score": -6.7669881629486355, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -3.584589958190918, -0.0001049041748046875, -6.67572021484375e-05, -0.0002574920654296875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.450514385709539e-05, 0.0, -3.063674012082629e-05, -2.3841855067985307e-07, -0.00020134449005126953, 0.0, -1.3709036466025282e-05, -1.9073486328125e-06, -0.03283119201660156, -0.000354766845703125, -7.62939453125e-06, -1.33514404296875e-05, -5.340576171875e-05, 0.0, -2.0265579223632812e-06, -1.9073486328125e-06, -3.814697265625e-06, -4.291525328881107e-06, -1.0526055097579956, -1.1920928244535389e-07, -8.20159912109375e-05, -0.02788543701171875, -5.7220458984375e-06, -5.340576171875e-05, 0.0, -0.02047443389892578, -1.71661376953125e-05, -0.003917694091796875, -0.0001544952392578125, -0.005321502685546875, -5.7220458984375e-06, -0.00038909912109375, -1.9073486328125e-06, -0.18975067138671875, 0.0, -0.013223646208643913, 0.0, -0.02828974649310112, -1.1920928244535389e-07, -1.1961021423339844, -9.5367431640625e-06, -4.00543212890625e-05, -9.5367431640625e-06, -0.1564769744873047, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.016037940979003906, -1.9073486328125e-06, -7.700920104980469e-05, -2.7179348762729205e-05, -0.08057868480682373, -8.821448318485636e-06, -0.10987627506256104, 0.0, -9.5367431640625e-06, -0.09387588500976562, -0.0010318756103515625, -9.417531691724434e-05, 0.0, -0.002497351262718439, -0.014174699783325195, 0.0, -0.08919479697942734, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "self"}], "hole1": "die"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "hole1": "draw"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "card"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -7.020738265103169, "score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -6.6495866775512695, -0.0004253387451171875, -1.9073486328125e-06, -3.695487521326868e-06, -3.814697265625e-06, -5.7220458984375e-05, -9.5367431640625e-06, -5.519233309314586e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00045108795166015625, -1.9073486328125e-06, -0.0008208618964999914, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00012743438128381968, 0.0, -0.000637054443359375, -1.52587890625e-05, -9.357929229736328e-05, 0.0, -0.007423520088195801, 0.0, -0.00028538701008073986, 0.0, -0.0038909912109375, -0.0005168914794921875, -0.0006430597859434783, -5.483612312673358e-06, -0.009571075439453125, -2.09808349609375e-05, -0.0011425018310546875, -0.0001983642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.3736214390955865e-05, -1.9073486328125e-06, -8.618831634521484e-05, -1.9073486328125e-06, -0.0009121894836425781, -1.9073486328125e-06, -1.2874589629063848e-05, -1.9073486328125e-06, -0.2410888671875, 0.0, -0.008510589599609375, -0.0001621246337890625, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, -2.3841855067985307e-07, -0.04349541664123535, -1.1920928244535389e-07, -0.04514420032501221, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Bananas", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 45, 136, "Null", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "score": -1.2473520889594454, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -0.3209896981716156, -2.1457672119140625e-06, -2.288818359375e-05, -0.7367620468139648, -0.0041942596435546875, -4.220008850097656e-05, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n", "score": -1.9874811562236516, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -0.3209896981716156, -2.1457672119140625e-06, -2.288818359375e-05, -1.3934383392333984, -0.0011844635009765625, -0.000774383544921875, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.008978843688964844, 0.0, -2.47955322265625e-05, -5.34045320819132e-05, -0.07663317024707794, -2.861022494471399e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "health"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(<UNK>)\n", "score": -2.5167897596676028, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -0.3209896981716156, -2.1457672119140625e-06, -2.288818359375e-05, -1.3168087005615234, -7.62939453125e-06, -0.6936225891113281, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "<UNK>"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 237, 37, 105, 23, 139, "1", "<EOS>", 72, 31, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "score": -3.305021108747802, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -2.279003143310547, -1.1920928244535389e-07, -0.000293731689453125, -0.6008872985839844, -0.0035152435302734375, -0.000324249267578125, -0.0001392364501953125, -0.0012927097268402576, 0.0, -0.19384193420410156, -0.0323944091796875, -0.0001430511474609375, -5.91278076171875e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -0.0003032684326171875, 0.0, -0.000996708869934082, -2.622600959512056e-06, -0.006446780636906624, -3.218649908376392e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}, "op": {"_type": "Sub"}}], "hole1": "change_attack"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "Attack", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>Attack()))\n", "score": -3.314713708283392, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -2.6622142791748047, 0.0, -1.1444091796875e-05, -0.032909393310546875, -0.001804351806640625, -0.0348503552377224, -0.3975834846496582, -4.291534423828125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>Attack"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "temp_attack", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(temp_attack)\n", "score": -3.5165546789486086, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -0.3209896981716156, -2.1457672119140625e-06, -2.288818359375e-05, -1.3168087005615234, -7.62939453125e-06, -1.693387508392334, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "temp_attack"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 45, 136, "Null", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "score": -3.566286887205564, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -2.477084159851074, -3.62396240234375e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -3.814697265625e-06, -0.0004947185516357422, 0.0, -0.0001277923583984375, -4.38690185546875e-05, -2.288818359375e-05, -0.0006085634231567383, -4.0531158447265625e-06, -4.76837158203125e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001430511474609375, -5.7220458984375e-06, -1.7523765563964844e-05, -1.0132789611816406e-05, -0.0006234645843505859, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -3.24249267578125e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.0017852783203125, -0.000301361083984375, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.1113624572753906e-05, -3.4332275390625e-05, -6.43729799776338e-06, -4.9591064453125e-05, -0.008283615112304688, -0.000194549560546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4199192921514623e-05, -0.32121023535728455, -2.1457672119140625e-06, -2.288818359375e-05, -0.7364282608032227, -0.0041961669921875, -4.220008850097656e-05, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.health)\n", "score": -3.8205435220885136, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -3.5449280738830566, 0.0, -0.00508880615234375, -0.008752822875976562, -0.0004863739013671875, -0.0029430389404296875, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.000942230224609375, 0.0, -4.57763671875e-05, -4.8874793719733134e-05, -0.0719144344329834, -3.576277322281385e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "health"}], "hole1": "increase_health"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.2952641166467345, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -2.6622142791748047, 0.0, -1.1444091796875e-05, -0.032909393310546875, -0.001804351806640625, -0.0348503552377224, -1.3781381845474243], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "<UNK>"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n", "score": -4.3099426420918405, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -2.477084159851074, -3.62396240234375e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -3.814697265625e-06, -0.0004947185516357422, 0.0, -0.0001277923583984375, -4.38690185546875e-05, -2.288818359375e-05, -0.0006085634231567383, -4.0531158447265625e-06, -4.76837158203125e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001430511474609375, -5.7220458984375e-06, -1.7523765563964844e-05, -1.0132789611816406e-05, -0.0006234645843505859, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -3.24249267578125e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.0017852783203125, -0.000301361083984375, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.1113624572753906e-05, -3.4332275390625e-05, -6.43729799776338e-06, -4.9591064453125e-05, -0.008283615112304688, -0.000194549560546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4199192921514623e-05, -0.32121023535728455, -2.1457672119140625e-06, -2.288818359375e-05, -1.396580696105957, -0.001190185546875, -0.0007724761962890625, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.008980751037597656, 0.0, -2.47955322265625e-05, -5.34045320819132e-05, -0.07667990028858185, -2.861022494471399e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "health"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -4.525864921649912, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -4.06504487991333, -4.887569048150908e-06, -0.0003376007080078125, -0.000408172607421875, -7.62939453125e-06, -0.0039043426513671875, -6.103515625e-05, -3.814697265625e-06, 0.0, -0.006159782409667969, -1.71661376953125e-05, -0.0817318856716156, 0.0, -4.1961669921875e-05, -0.09521484375, -4.57763671875e-05, -0.0004558563232421875, -1.1444091796875e-05, -0.0002765655517578125, 0.0, -0.047084808349609375, 0.0, -1.52587890625e-05, -3.6954811548639555e-06, -0.003159281797707081, 0.0, -0.001117706298828125, -1.33514404296875e-05, -0.035407066345214844, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "heal"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Blessed", " ", "Champion", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 45, 136, "Null", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "score": -6.323435416113796, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -4.377881050109863, -0.0001659393310546875, -1.311301275563892e-06, -4.112720489501953e-05, -2.3841855067985307e-07, -4.6491513785440475e-06, -3.576272320060525e-06, -0.00027891082572750747, -0.6744623184204102, 0.0, -0.043598566204309464, 0.0, -0.0010160207748413086, 0.0, -4.971027374267578e-05, -1.9073486328125e-06, -0.0003757476806640625, -6.103515625e-05, -4.410743713378906e-06, -1.1086402082582936e-05, -0.002651214599609375, -4.76837158203125e-05, -1.52587890625e-05, -3.24249267578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -6.079673767089844e-06, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928955078125e-05, -3.62396240234375e-05, -5.602834789897315e-06, -4.57763671875e-05, -0.12726116180419922, -0.0002956390380859375, -1.52587890625e-05, -2.288818359375e-05, -0.000118255615234375, 0.0, -4.017353057861328e-05, 0.0, -1.9073486328125e-06, -1.8715683836489916e-05, -0.31395792961120605, -2.0265579223632812e-06, -1.9073486328125e-05, -0.7768373489379883, -0.00362396240234375, -4.220008850097656e-05, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Blessed Champion", "hole3": "RARE", "hole2": "PRIEST", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Blessed", " ", "Champion", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 45, 136, "Null", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "score": -6.844061093068092, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -4.377881050109863, -0.0001659393310546875, -1.311301275563892e-06, -4.112720489501953e-05, -2.3841855067985307e-07, -4.6491513785440475e-06, -3.576272320060525e-06, -0.00027891082572750747, -1.1470108032226562, 0.0, -0.09361767768859863, 0.0, -0.001323103904724121, 0.0, -6.699562072753906e-05, -1.9073486328125e-06, -0.000339508056640625, -5.7220458984375e-05, -4.410743713378906e-06, -1.2040065485052764e-05, -0.002742767333984375, -4.1961669921875e-05, -1.33514404296875e-05, -3.24249267578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -5.9604644775390625e-06, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928955078125e-05, -3.4332275390625e-05, -5.7220440794480965e-06, -4.38690185546875e-05, -0.12532711029052734, -0.0002918243408203125, -1.52587890625e-05, -2.288818359375e-05, -0.000118255615234375, 0.0, -4.017353057861328e-05, 0.0, -1.9073486328125e-06, -1.8358061424805783e-05, -0.3176572322845459, -2.0265579223632812e-06, -1.9073486328125e-05, -0.7727518081665039, -0.0036411285400390625, -4.220008850097656e-05, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Blessed Champion", "hole3": "RARE", "hole2": "PALADIN", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Blessed", " ", "Champion", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n", "score": -6.934357706544404, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -4.377881050109863, -0.0001659393310546875, -1.311301275563892e-06, -4.112720489501953e-05, -2.3841855067985307e-07, -4.6491513785440475e-06, -3.576272320060525e-06, -0.00027891082572750747, -0.6744623184204102, 0.0, -0.043598566204309464, 0.0, -0.0010160207748413086, 0.0, -4.971027374267578e-05, -1.9073486328125e-06, -0.0003757476806640625, -6.103515625e-05, -4.410743713378906e-06, -1.1086402082582936e-05, -0.002651214599609375, -4.76837158203125e-05, -1.52587890625e-05, -3.24249267578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -6.079673767089844e-06, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928955078125e-05, -3.62396240234375e-05, -5.602834789897315e-06, -4.57763671875e-05, -0.12726116180419922, -0.0002956390380859375, -1.52587890625e-05, -2.288818359375e-05, -0.000118255615234375, 0.0, -4.017353057861328e-05, 0.0, -1.9073486328125e-06, -1.8715683836489916e-05, -0.31395792961120605, -2.0265579223632812e-06, -1.9073486328125e-05, -1.3030881881713867, -0.00116729736328125, -0.0008068084716796875, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0077495574951171875, 0.0, -2.47955322265625e-05, -5.757664257544093e-05, -0.07849140465259552, -2.861022494471399e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Blessed Champion", "hole3": "RARE", "hole2": "PRIEST", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "health"}], "hole1": "die"}], "hole4": "player"}}, {"choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Blessed", " ", "Champion", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(<UNK>)\n", "score": -7.572737207305352, "score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -4.377881050109863, -0.0001659393310546875, -1.311301275563892e-06, -4.112720489501953e-05, -2.3841855067985307e-07, -4.6491513785440475e-06, -3.576272320060525e-06, -0.00027891082572750747, -0.6744623184204102, 0.0, -0.043598566204309464, 0.0, -0.0010160207748413086, 0.0, -4.971027374267578e-05, -1.9073486328125e-06, -0.0003757476806640625, -6.103515625e-05, -4.410743713378906e-06, -1.1086402082582936e-05, -0.002651214599609375, -4.76837158203125e-05, -1.52587890625e-05, -3.24249267578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -6.079673767089844e-06, -3.814697265625e-06, -5.841255187988281e-06, 0.0, -1.1920928955078125e-05, -3.62396240234375e-05, -5.602834789897315e-06, -4.57763671875e-05, -0.12726116180419922, -0.0002956390380859375, -1.52587890625e-05, -2.288818359375e-05, -0.000118255615234375, 0.0, -4.017353057861328e-05, 0.0, -1.9073486328125e-06, -1.8715683836489916e-05, -0.31395792961120605, -2.0265579223632812e-06, -1.9073486328125e-05, -1.334634780883789, -9.5367431640625e-06, -0.6951637268066406, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Blessed Champion", "hole3": "RARE", "hole2": "PRIEST", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "BlessedChampion", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "<UNK>"}], "hole1": "die"}], "hole4": "player"}}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "<UNK>", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(<UNK>Attack(1)),\n            MinionSelector(condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -3.374941459309241, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -1.0771719217300415, -0.1473955661058426, -0.00033283233642578125, -0.19922681152820587, -1.1563301086425781e-05, -0.0353168249130249, 0.0, -7.62939453125e-06, -0.42656421661376953, -5.53131103515625e-05, 0.0, -0.03036785125732422, -1.1444091796875e-05, -0.03528118133544922, -0.0007915496826171875, -4.00543212890625e-05, -2.384185791015625e-06, -0.00030517578125, -3.814697265625e-06, -0.0002002716064453125, -3.814697265625e-06, -0.00055694580078125, -8.392333984375e-05, -0.2896895408630371, -4.0531158447265625e-06, -1.9073486328125e-06, -5.113966471981257e-05, -1.9073486328125e-06, -6.496906280517578e-05, 0.0, -0.0001468658447265625, -0.11612224578857422, -1.52587890625e-05, -0.0028400421142578125, -3.576278118089249e-07, -1.7166130419354886e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "<UNK>Attack", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(2)),\n            MinionSelector(condition=Null)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -3.535655222465209, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -0.5100001692771912, -1.9073486328125e-06, -0.011872053146362305, 0.0, -7.62939453125e-06, -0.963313102722168, -0.000274658203125, -1.9073486328125e-06, -0.008568882942199707, 0.0, -0.0266571044921875, -0.05210399627685547, -1.9073486328125e-05, -4.768370445162873e-07, -3.838539123535156e-05, -5.7220458984375e-06, -7.069110870361328e-05, 0.0, -0.0002288818359375, -0.12076091766357422, -1.33514404296875e-05, -0.003143310546875, -3.576278118089249e-07, -1.7046912034857087e-05, -8.344646857949556e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(2)),\n            MinionSelector(condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -3.6044979897432086, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -0.5100001692771912, -1.9073486328125e-06, -0.011872053146362305, 0.0, -7.62939453125e-06, -0.49390125274658203, -4.00543212890625e-05, 0.0, -0.17218303680419922, -1.1444091796875e-05, -0.02991199493408203, -0.0008230209350585938, -4.38690185546875e-05, -2.1457672119140625e-06, -0.0003223419189453125, -1.9073486328125e-06, -0.0001392364501953125, -3.814697265625e-06, -0.0003604888916015625, -6.29425048828125e-05, -0.4140503406524658, -2.0265579223632812e-06, -1.9073486328125e-06, -5.6742221204331145e-05, -3.814697265625e-06, -7.832050323486328e-05, 0.0, -0.000141143798828125, -0.12905216217041016, -1.52587890625e-05, -0.0028362274169921875, -3.576278118089249e-07, -1.5258781786542386e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "<UNK>", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(<UNK>Attack(1)),\n            MinionSelector(condition=Null)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -3.724985591691791, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -1.0771719217300415, -0.1473955661058426, -0.00033283233642578125, -0.19922681152820587, -1.1563301086425781e-05, -0.0353168249130249, 0.0, -7.62939453125e-06, -1.0822792053222656, -0.000316619873046875, -3.814697265625e-06, -0.005416512489318848, 0.0, -0.02895069122314453, -0.043468475341796875, -2.288818359375e-05, -5.960462772236497e-07, -4.2319297790527344e-05, -5.7220458984375e-06, -5.173683166503906e-05, 0.0, -0.0004024505615234375, -0.0886068344116211, -1.71661376953125e-05, -0.003662109375, -8.344646857949556e-07, -1.8000580894295126e-05, -2.0265558760002023e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "<UNK>Attack", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(1)),\n            MinionSelector(condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.228021880598931, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -1.1884287595748901, -3.814697265625e-06, -0.11318814754486084, 0.0, -1.1444091796875e-05, -0.5268182754516602, -4.57763671875e-05, 0.0, -0.03743171691894531, -1.1444091796875e-05, -0.034259796142578125, -0.0009698867797851562, -3.814697265625e-05, -2.384185791015625e-06, -0.0003108978271484375, -3.814697265625e-06, -0.0001850128173828125, -3.814697265625e-06, -0.00038909912109375, -6.866455078125e-05, -0.3596843481063843, -3.933906555175781e-06, -1.9073486328125e-06, -5.888787200092338e-05, -3.814697265625e-06, -7.450580596923828e-05, 0.0, -0.000141143798828125, -0.12446212768554688, -1.52587890625e-05, -0.0028324127197265625, -3.576278118089249e-07, -1.7166130419354886e-05, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(1)),\n            MinionSelector(condition=Null)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.259937665988446, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -1.1884287595748901, -3.814697265625e-06, -0.11318814754486084, 0.0, -1.1444091796875e-05, -0.9133138656616211, -0.0002422332763671875, -1.9073486328125e-06, -0.005473494529724121, 0.0, -0.028740882873535156, -0.04720020294189453, -2.09808349609375e-05, -4.768370445162873e-07, -4.029273986816406e-05, -5.7220458984375e-06, -7.069110870361328e-05, 0.0, -0.0002460479736328125, -0.12117290496826172, -1.33514404296875e-05, -0.0031890869140625, -4.768370445162873e-07, -1.7166121324407868e-05, -9.536738616588991e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(2)),\n            MinionSelector(condition=Null, players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.309589940479611, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -0.5100001692771912, -1.9073486328125e-06, -0.011872053146362305, 0.0, -7.62939453125e-06, -0.49390125274658203, -4.00543212890625e-05, 0.0, -0.17218303680419922, -1.1444091796875e-05, -0.02991199493408203, -0.0008230209350585938, -4.38690185546875e-05, -2.1457672119140625e-06, -0.0003223419189453125, -1.9073486328125e-06, -0.0001392364501953125, -3.814697265625e-06, -0.0003604888916015625, -6.29425048828125e-05, -1.0896570682525635, -1.2993807104066946e-05, 0.0, -9.250247239833698e-05, -3.814697265625e-06, -6.115436553955078e-05, 0.0, -0.000164031982421875, -0.1587991714477539, -1.71661376953125e-05, -0.0025197267532348633, -3.576278118089249e-07, -1.740454899845645e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "ManaCost", "hole1": 2}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "<UNK>", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(<UNK>Attack(1)),\n            MinionSelector(condition=Null, players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.493004309902801, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -1.0771719217300415, -0.1473955661058426, -0.00033283233642578125, -0.19922681152820587, -1.1563301086425781e-05, -0.0353168249130249, 0.0, -7.62939453125e-06, -0.42656421661376953, -5.53131103515625e-05, 0.0, -0.03036785125732422, -1.1444091796875e-05, -0.03528118133544922, -0.0007915496826171875, -4.00543212890625e-05, -2.384185791015625e-06, -0.00030517578125, -3.814697265625e-06, -0.0002002716064453125, -3.814697265625e-06, -0.00055694580078125, -8.392333984375e-05, -1.3913617134094238, -2.5987585104303434e-05, 0.0, -9.655522444518283e-05, -1.9073486328125e-06, -4.780292510986328e-05, 0.0, -0.000164031982421875, -0.1327676773071289, -1.71661376953125e-05, -0.0025177001953125, -3.576278118089249e-07, -1.740454899845645e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "<UNK>Attack", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 155, "<UNK>", "<EOS>", 237, 46, 139, "2", "<EOS>", "Self", "Selector", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Minion", "<EOS>", "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(<UNK>(2), SelfSelector()))\n\n    def create_weapon(self, player):\n        return Minion(4, 5)\n", "score": -4.681606724639096, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -3.202322483062744, -0.26791417598724365, -7.62935378588736e-05, -1.71661376953125e-05, -0.02042102813720703, -9.5367431640625e-06, -0.03493927791714668, 0.0, -0.5472384691238403, -2.0265579223632812e-06, -9.5367431640625e-06, -0.1395282745361328, -0.0015020370483398438, -1.919269561767578e-05, 0.0, -0.00074005126953125, -0.02095508575439453, -0.015188217163085938, -2.0146237147855572e-05, -0.012216567993164062, -0.009410858154296875, -6.079655122448457e-06, -9.012212831294164e-05, -9.536738616588991e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "<UNK>", "hole2": "SelfSelector", "hole1": [{"_type": "Num", "n": 2}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole2": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "<UNK>", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(<UNK>Attack(1)),\n            MinionSelector(condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.045673190897844, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -2.3088760375976562, -0.014510393142700195, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -0.0009807508904486895, -1.9073486328125e-06, -5.7220458984375e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.9073486328125e-06, -7.724761962890625e-05, -5.91278076171875e-05, -0.07823097705841064, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001983642578125, -1.9073486328125e-06, -0.0004520416259765625, -0.0029582977294921875, -0.1602792739868164, -0.0035448074340820312, -9.90617845673114e-05, -1.71661376953125e-05, -0.17304420471191406, -0.00281524658203125, -1.0417581796646118, -0.15552909672260284, -0.00041687488555908203, -0.19824129343032837, -1.1563301086425781e-05, -0.02738666534423828, 0.0, -7.62939453125e-06, -0.3418407440185547, -5.7220458984375e-05, 0.0, -0.03292369842529297, -1.1444091796875e-05, -0.0364227294921875, -0.00077056884765625, -4.1961669921875e-05, -2.384185791015625e-06, -0.0003204345703125, -3.814697265625e-06, -0.0002002716064453125, -3.814697265625e-06, -0.000553131103515625, -8.20159912109375e-05, -0.25963258743286133, -4.0531158447265625e-06, -1.9073486328125e-06, -5.2689312724396586e-05, -1.9073486328125e-06, -6.687641143798828e-05, 0.0, -0.000148773193359375, -0.11666488647460938, -1.52587890625e-05, -0.0028285980224609375, -3.576278118089249e-07, -1.7285339708905667e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole0": "<UNK>Attack", "hole1": 1}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('<UNK>', MinionSelector(Adjacent())))), Buff(\n            ChangeAttack(Attribute('<UNK>', HeroSelector(EnemyPlayer()))))]\n            ), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.538277705335801, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -1.3273048400878906, -1.9073486328125e-05, -0.0004024505615234375, -0.02194499969482422, -0.0023193359375, -0.014472347684204578, -0.09175503253936768, -2.0265579223632812e-06, -0.003070831298828125, -0.17363262176513672, -3.814697265625e-06, -2.288818359375e-05, -2.6702880859375e-05, -0.0738680362701416, -1.9073486328125e-05, -4.9591064453125e-05, -0.00060272216796875, -7.62939453125e-06, -0.6707590818405151, -0.0004967450513504446, -0.0008449554443359375, -2.09808349609375e-05, -0.21131455898284912, -1.71661376953125e-05, -1.1920928244535389e-07, -0.1291263848543167, -2.5272245693486184e-05, -0.014072418212890625, -0.0006237030029296875, -0.0044649140909314156, -0.010413765907287598, -2.384185791015625e-06, -0.0007266998291015625, -0.08459091186523438, -1.9073486328125e-06, -1.33514404296875e-05, -4.9591064453125e-05, -0.5354746580123901, -4.76837158203125e-05, -3.4332275390625e-05, -0.000232696533203125, -3.814697265625e-05, -0.40648460388183594, -0.0004634857177734375, -0.0006465911865234375, -2.6702880859375e-05, -0.6491434574127197, -0.002085685497149825, -1.1920928244535389e-07, -0.20430338382720947, -0.0003541707992553711, -7.62939453125e-06, -0.027734767645597458, -3.4570634852570947e-06, -1.9073486328125e-06, -0.000110626220703125, -0.0002689361572265625, -1.9073486328125e-06, -0.027042388916015625, -5.7220458984375e-06, -0.000881195068359375, -0.0001373291015625, -0.004753828048706055, -1.1563301086425781e-05, -1.71661376953125e-05, -1.0132780516869389e-05, -9.5367431640625e-06, -4.00543212890625e-05, 0.0, -2.288818359375e-05, -0.16553688049316406, -2.6702880859375e-05, -0.0034352540969848633, -3.576278118089249e-07, -1.6808495274744928e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "PlayerSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}]}]}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('health', MinionSelector(Adjacent())))), Buff(\n            ChangeAttack(IsType(MINION_TYPE.BEAST)))]), SelfSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.7747059646283105, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -1.3273048400878906, -1.9073486328125e-05, -0.0004024505615234375, -0.02194499969482422, -0.0023193359375, -0.014472347684204578, -0.09175503253936768, -2.0265579223632812e-06, -0.003070831298828125, -0.17363262176513672, -3.814697265625e-06, -2.288818359375e-05, -2.6702880859375e-05, -0.0738680362701416, -1.9073486328125e-05, -4.9591064453125e-05, -0.00060272216796875, -7.62939453125e-06, -0.9529904127120972, -0.0013637542724609375, -0.04159355163574219, -5.7220458984375e-06, -0.013457298278808594, -1.33514404296875e-05, -1.9073486328125e-06, -0.11982428282499313, -3.683518662001006e-05, -0.006237983703613281, -0.0006961822509765625, -0.0034769284538924694, -0.009705901145935059, -2.384185791015625e-06, -0.0004749298095703125, -0.09035110473632812, -1.9073486328125e-06, -1.33514404296875e-05, -5.91278076171875e-05, -0.7698031663894653, -0.000751495361328125, -1.52587890625e-05, -0.0001888275146484375, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.12622570991516113, -9.5367431640625e-06, -0.060372352600097656, -1.9073486328125e-06, -0.06170995160937309, -8.940672159951646e-06, 0.0, -0.0002918243408203125, -0.0002689361572265625, 0.0, -0.3015880584716797, -1.9073486328125e-06, -0.00011444091796875, -9.1552734375e-05, -0.0286867618560791, -6.4373016357421875e-06, -3.814697265625e-06, -1.537795105832629e-05, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -0.000331878662109375, -0.7999906539916992, -1.71661376953125e-05, -0.002532958984375, -1.5497195136049413e-06, -1.0967253729177173e-05, -8.344646857949556e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "health"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}]}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('<UNK>', MinionSelector(Adjacent())))), Buff(\n            ChangeAttack(Attribute('<UNK>', MinionSelector(Adjacent()))))]),\n            PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.848809504189219, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -1.3273048400878906, -1.9073486328125e-05, -0.0004024505615234375, -0.02194499969482422, -0.0023193359375, -0.014472347684204578, -0.09175503253936768, -2.0265579223632812e-06, -0.003070831298828125, -0.17363262176513672, -3.814697265625e-06, -2.288818359375e-05, -2.6702880859375e-05, -0.0738680362701416, -1.9073486328125e-05, -4.9591064453125e-05, -0.00060272216796875, -7.62939453125e-06, -0.6707590818405151, -0.0004967450513504446, -0.0008449554443359375, -2.09808349609375e-05, -0.21131455898284912, -1.71661376953125e-05, -1.1920928244535389e-07, -0.1291263848543167, -2.5272245693486184e-05, -0.014072418212890625, -0.0006237030029296875, -0.0044649140909314156, -0.010413765907287598, -2.384185791015625e-06, -0.0007266998291015625, -0.08459091186523438, -1.9073486328125e-06, -1.33514404296875e-05, -4.9591064453125e-05, -0.5354746580123901, -4.76837158203125e-05, -3.4332275390625e-05, -0.000232696533203125, -3.814697265625e-05, -0.40648460388183594, -0.0004634857177734375, -0.0006465911865234375, -2.6702880859375e-05, -0.81488037109375, -1.52587890625e-05, -1.1920928244535389e-07, -0.12059219181537628, -2.0861511075054295e-05, -0.31316590309143066, -5.245195097813848e-06, 0.0, -8.58306884765625e-05, -0.00029754638671875, -1.9073486328125e-06, -0.08273136615753174, -3.814697265625e-06, -0.00079345703125, -0.0001392364501953125, -0.00830090045928955, -1.1444091796875e-05, -1.33514404296875e-05, -1.0371197276981547e-05, -7.62939453125e-06, -3.814697265625e-05, 0.0, -2.47955322265625e-05, -0.05185699462890625, -2.47955322265625e-05, -0.00345611572265625, -2.3841855067985307e-07, -1.7762164134182967e-05, -4.768370445162873e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole2": "PlayerSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}]}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "5", "<EOS>", "card", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('health', MinionSelector(Adjacent())))), Buff(\n            ChangeAttack(IsType(MINION_TYPE.BEAST)))]), SelfSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5, card=True)\n", "score": -7.01968641905637, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -1.3273048400878906, -1.9073486328125e-05, -0.0004024505615234375, -0.02194499969482422, -0.0023193359375, -0.014472347684204578, -0.09175503253936768, -2.0265579223632812e-06, -0.003070831298828125, -0.17363262176513672, -3.814697265625e-06, -2.288818359375e-05, -2.6702880859375e-05, -0.0738680362701416, -1.9073486328125e-05, -4.9591064453125e-05, -0.00060272216796875, -7.62939453125e-06, -0.9529904127120972, -0.0013637542724609375, -0.04159355163574219, -5.7220458984375e-06, -0.013457298278808594, -1.33514404296875e-05, -1.9073486328125e-06, -0.11982428282499313, -3.683518662001006e-05, -0.006237983703613281, -0.0006961822509765625, -0.0034769284538924694, -0.009705901145935059, -2.384185791015625e-06, -0.0004749298095703125, -0.09035110473632812, -1.9073486328125e-06, -1.33514404296875e-05, -5.91278076171875e-05, -0.7698031663894653, -0.000751495361328125, -1.52587890625e-05, -0.0001888275146484375, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.12622570991516113, -9.5367431640625e-06, -0.060372352600097656, -1.9073486328125e-06, -0.06170995160937309, -8.940672159951646e-06, 0.0, -0.0002918243408203125, -0.0002689361572265625, 0.0, -0.3015880584716797, -1.9073486328125e-06, -0.00011444091796875, -9.1552734375e-05, -0.0286867618560791, -6.4373016357421875e-06, -3.814697265625e-06, -1.537795105832629e-05, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -0.000331878662109375, -0.6014118194580078, -0.008767127990722656, -0.0009557008743286133, -4.172316494077677e-06, -2.4318689611391164e-05, -3.2186455882765586e-06, -1.3575708866119385, 0.0, -0.07648754119873047, -0.001354217529296875, -0.0009479522705078125, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "health"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}]}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "card", "hole1": 5}], "hole4": "player"}}, {"choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "5", "<EOS>", "card", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('<UNK>', MinionSelector(Adjacent())))), Buff(\n            ChangeAttack(IsType(MINION_TYPE.BEAST)))]), SelfSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5, card=True)\n", "score": -7.480251745623484, "score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -1.3273048400878906, -1.9073486328125e-05, -0.0004024505615234375, -0.02194499969482422, -0.0023193359375, -0.014472347684204578, -0.09175503253936768, -2.0265579223632812e-06, -0.003070831298828125, -0.17363262176513672, -3.814697265625e-06, -2.288818359375e-05, -2.6702880859375e-05, -0.0738680362701416, -1.9073486328125e-05, -4.9591064453125e-05, -0.00060272216796875, -7.62939453125e-06, -0.6707590818405151, -0.0004967450513504446, -0.0008449554443359375, -2.09808349609375e-05, -0.21131455898284912, -1.71661376953125e-05, -1.1920928244535389e-07, -0.1291263848543167, -2.5272245693486184e-05, -0.014072418212890625, -0.0006237030029296875, -0.0044649140909314156, -0.010413765907287598, -2.384185791015625e-06, -0.0007266998291015625, -0.08459091186523438, -1.9073486328125e-06, -1.33514404296875e-05, -4.9591064453125e-05, -1.3642061948776245, -0.0007183551788330078, -1.71661376953125e-05, -0.0001983642578125, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.11739087104797363, -1.1444091796875e-05, -0.06010627746582031, -1.9073486328125e-06, -0.06067884713411331, -9.059880540007725e-06, 0.0, -0.00028228759765625, -0.0002727508544921875, 0.0, -0.28881072998046875, -1.9073486328125e-06, -0.00011444091796875, -8.96453857421875e-05, -0.03110527992248535, -6.4373016357421875e-06, -3.814697265625e-06, -1.5735575288999826e-05, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -0.000335693359375, -0.6008138656616211, -0.008874893188476562, -0.0009576082229614258, -4.172316494077677e-06, -2.4318689611391164e-05, -3.2186455882765586e-06, -1.357473611831665, 0.0, -0.07648563385009766, -0.0013561248779296875, -0.000949859619140625, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template17", "hole0": "Give", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole2": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}]}, {"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}]}]}]}], "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "CabalShadow", "hole6": [{"_type": "Template22", "hole0": 4, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "card", "hole1": 5}], "hole4": "player"}}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -2.280395464843167, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26085662841796875, -9.5367431640625e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.002353668212890625, 0.0, -0.26362359523773193, 0.0, -0.00020479965314734727, 0.0, -0.04261970520019531, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0037232637405395508, -1.9073486328125e-06, -0.04256725311279297, -7.62939453125e-05, -0.008043289184570312, 0.0, -0.0002422332763671875, -0.00025177001953125, -5.7220458984375e-06, -0.000392913818359375, 0.0, -0.007630586624145508, 0.0, -0.021164536476135254, -1.9073486328125e-06, -0.0005893707275390625, -0.0021181106567382812, -3.4332275390625e-05, -4.9591064453125e-05, -0.000270843505859375, -2.6702880859375e-05, 0.0, -0.00549626350402832, -1.9073486328125e-06, -0.005029796622693539, 0.0, -9.5367431640625e-06, -0.06622600555419922, -0.0001049041748046875, -0.00885009765625, -4.57763671875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008641481399536133, 0.0, -7.62939453125e-06, 0.0, -0.02501988410949707, 0.0, -0.11750030517578125, -3.814697265625e-06, -0.0001811981201171875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -3.1041794596423813, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.5299477577209473, 0.0, -7.843971252441406e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -3.8623809814453125e-05, -5.364403477869928e-06, -0.0595855712890625, -3.814697265625e-06, -1.1444091796875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.014575958251953125, -4.38690185546875e-05, -6.29425048828125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.435988187789917, -5.7220458984375e-06, -0.02737903594970703, -0.0060482025146484375, -9.5367431640625e-06, -2.86102294921875e-05, -0.014112472534179688, -1.52587890625e-05, -0.004176497459411621, -1.9073486328125e-06, -0.0004444122314453125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001373291015625, -1.33514404296875e-05, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006276901112869382, 0.0, -0.0004558563232421875, -3.62396240234375e-05, -0.021055221557617188, -7.62939453125e-06, -0.008893251419067383, 0.0, -0.016223907470703125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26012516021728516, -9.5367431640625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.00243377685546875, 0.0, -0.2660810947418213, 0.0, -0.00020444203983061016, 0.0, -0.04424571990966797, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0034754276275634766, -1.9073486328125e-06, -0.038361549377441406, -7.2479248046875e-05, -0.00815582275390625, 0.0, -0.000240325927734375, -0.0002651214599609375, -5.7220458984375e-06, -0.00041961669921875, 0.0, -0.007753729820251465, 0.0, -0.02272188663482666, -1.9073486328125e-06, -0.0006008148193359375, -0.002117156982421875, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002689361572265625, -2.6702880859375e-05, 0.0, -0.0056688785552978516, -1.9073486328125e-06, -0.005140422843396664, 0.0, -9.5367431640625e-06, -0.06609439849853516, -0.0001049041748046875, -0.008863449096679688, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008755922317504883, 0.0, -7.62939453125e-06, 0.0, -0.02512192726135254, 0.0, -0.1184539794921875, -3.814697265625e-06, -0.0001811981201171875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -3.4967895244223826, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.9362339973449707, 0.0, -0.0004273653030395508, 0.0, -1.4781938261876348e-05, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -5.221366882324219e-05, -5.960446742392378e-06, -0.03076934814453125, -3.814697265625e-06, -1.33514404296875e-05, -7.05718994140625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.291534423828125e-06, -3.814697265625e-06, -0.012365341186523438, -4.38690185546875e-05, -6.866455078125e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.4291360378265381, -5.7220458984375e-06, -0.027077674865722656, -0.005633354187011719, -9.5367431640625e-06, -2.86102294921875e-05, -0.014194488525390625, -1.52587890625e-05, -0.005069136619567871, -1.9073486328125e-06, -0.0004634857177734375, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.000152587890625, -1.33514404296875e-05, 0.0, -0.000339508056640625, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0010071992874145508, 0.0, -0.000641033286228776, 0.0, -0.0004138946533203125, -3.4332275390625e-05, -0.02187347412109375, -7.62939453125e-06, -0.009252786636352539, 0.0, -0.016315460205078125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26271915435791016, -9.5367431640625e-06, -0.0001277923583984375, -1.9073486328125e-06, -0.002361297607421875, 0.0, -0.266002893447876, 0.0, -0.0002031307085417211, 0.0, -0.05881023406982422, -1.9073486328125e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.003552556037902832, -1.9073486328125e-06, -0.04268360137939453, -7.62939453125e-05, -0.008869171142578125, 0.0, -0.000255584716796875, -0.00025177001953125, -5.7220458984375e-06, -0.0004253387451171875, 0.0, -0.007531404495239258, 0.0, -0.02232229709625244, -1.9073486328125e-06, -0.0006122589111328125, -0.002071380615234375, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002689361572265625, -2.6702880859375e-05, 0.0, -0.00574803352355957, -1.9073486328125e-06, -0.0051748743280768394, 0.0, -9.5367431640625e-06, -0.06616878509521484, -0.0001049041748046875, -0.008853912353515625, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008717775344848633, 0.0, -7.62939453125e-06, 0.0, -0.0251009464263916, 0.0, -0.11910247802734375, -3.814697265625e-06, -0.0001811981201171875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "SHAMAN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -3.541273158133407, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26085662841796875, -9.5367431640625e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.002353668212890625, 0.0, -1.4696763753890991, 0.0, -0.0008560048299841583, 0.0, -0.10338878631591797, -1.71661376953125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.002862215042114258, -1.9073486328125e-06, -0.044666290283203125, -7.05718994140625e-05, -0.00844573974609375, 0.0, -0.0002460479736328125, -0.0002498626708984375, -7.62939453125e-06, -0.0003032684326171875, 0.0, -0.0060520172119140625, 0.0, -0.01811373233795166, -1.9073486328125e-06, -0.000514984130859375, -0.0020275115966796875, -3.4332275390625e-05, -4.76837158203125e-05, -0.0002593994140625, -2.6702880859375e-05, 0.0, -0.004361391067504883, -1.9073486328125e-06, -0.004866122268140316, 0.0, -9.5367431640625e-06, -0.06644248962402344, -0.0001049041748046875, -0.008852005004882812, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008927583694458008, 0.0, -7.62939453125e-06, 0.0, -0.02527928352355957, 0.0, -0.11496162414550781, -3.814697265625e-06, -0.000179290771484375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -4.063699681227007, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.566122055053711, -1.1444091796875e-05, -0.10008430480957031, 0.0, -0.00014507770538330078, 0.0, -0.6346359252929688, -2.09808349609375e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.004210472106933594, 0.0, -0.06976890563964844, -9.72747802734375e-05, -0.005734443664550781, 0.0, -3.24249267578125e-05, -0.0007724761962890625, -5.7220458984375e-06, -0.00087738037109375, 0.0, -0.009948492050170898, 0.0, -0.032697319984436035, -3.814697265625e-06, -0.000732421875, -0.002658843994140625, -3.62396240234375e-05, -5.7220458984375e-05, -0.0002422332763671875, -3.62396240234375e-05, 0.0, -0.010116934776306152, -1.9073486328125e-06, -0.004913925193250179, 0.0, -9.5367431640625e-06, -0.06356048583984375, -0.0001068115234375, -0.0082550048828125, -4.1961669921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0009919404983520508, 0.0, -7.62939453125e-06, 0.0, -0.02596592903137207, 0.0, -0.12654685974121094, -3.814697265625e-06, -0.000186920166015625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -4.354685944785359, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.5299477577209473, 0.0, -7.843971252441406e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -3.8623809814453125e-05, -5.364403477869928e-06, -0.0595855712890625, -3.814697265625e-06, -1.1444091796875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.014575958251953125, -4.38690185546875e-05, -6.29425048828125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.435988187789917, -5.7220458984375e-06, -0.02737903594970703, -0.0060482025146484375, -9.5367431640625e-06, -2.86102294921875e-05, -0.014112472534179688, -1.52587890625e-05, -0.004176497459411621, -1.9073486328125e-06, -0.0004444122314453125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001373291015625, -1.33514404296875e-05, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006276901112869382, 0.0, -0.0004558563232421875, -3.62396240234375e-05, -0.021055221557617188, -7.62939453125e-06, -0.008893251419067383, 0.0, -0.016223907470703125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26012516021728516, -9.5367431640625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.00243377685546875, 0.0, -1.4615623950958252, 0.0, -0.0008576738182455301, 0.0, -0.10433292388916016, -1.71661376953125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0027773380279541016, -1.9073486328125e-06, -0.04149627685546875, -6.866455078125e-05, -0.008498191833496094, 0.0, -0.000240325927734375, -0.0002613067626953125, -7.62939453125e-06, -0.0003223419189453125, 0.0, -0.006161808967590332, 0.0, -0.01948988437652588, -1.9073486328125e-06, -0.0005245208740234375, -0.0020284652709960938, -3.4332275390625e-05, -4.76837158203125e-05, -0.0002574920654296875, -2.6702880859375e-05, 0.0, -0.00453495979309082, -1.9073486328125e-06, -0.004969119094312191, 0.0, -9.5367431640625e-06, -0.06631851196289062, -0.0001049041748046875, -0.008859634399414062, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0009061098098754883, 0.0, -7.62939453125e-06, 0.0, -0.02537369728088379, 0.0, -0.11587142944335938, -3.814697265625e-06, -0.000179290771484375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "target", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self.target)\n", "score": -4.368905143683797, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26085662841796875, -9.5367431640625e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.002353668212890625, 0.0, -0.26362359523773193, 0.0, -0.00020479965314734727, 0.0, -0.04261970520019531, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0037232637405395508, -1.9073486328125e-06, -0.04256725311279297, -7.62939453125e-05, -0.008043289184570312, 0.0, -0.0002422332763671875, -0.00025177001953125, -5.7220458984375e-06, -0.000392913818359375, 0.0, -0.007630586624145508, 0.0, -0.021164536476135254, -1.9073486328125e-06, -0.0005893707275390625, -0.0021181106567382812, -3.4332275390625e-05, -4.9591064453125e-05, -0.000270843505859375, -2.6702880859375e-05, 0.0, -0.00549626350402832, -1.9073486328125e-06, -0.005029796622693539, 0.0, -9.5367431640625e-06, -0.06622600555419922, -0.0001049041748046875, -0.00885009765625, -4.57763671875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008641481399536133, 0.0, -7.62939453125e-06, 0.0, -0.02501988410949707, 0.0, -2.2043237686157227, 0.0, -8.58306884765625e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0017566680908203125, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -4.420387695678272, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -2.8378453254699707, 0.0, -0.0008374452590942383, 0.0, -1.0728831512096804e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -4.661083221435547e-05, -1.2993727978027891e-05, -0.03722858428955078, -3.814697265625e-06, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.291534423828125e-06, -3.814697265625e-06, -0.014268875122070312, -4.00543212890625e-05, -6.29425048828125e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.4377068281173706, -5.7220458984375e-06, -0.027833938598632812, -0.005738258361816406, -9.5367431640625e-06, -2.86102294921875e-05, -0.01409912109375, -1.52587890625e-05, -0.004930853843688965, -1.9073486328125e-06, -0.000461578369140625, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.0001506805419921875, -1.33514404296875e-05, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0010033845901489258, 0.0, -0.0006393654039129615, 0.0, -0.0003948211669921875, -3.24249267578125e-05, -0.025426864624023438, -7.62939453125e-06, -0.009247064590454102, 0.0, -0.016508102416992188, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26540660858154297, -9.5367431640625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.002323150634765625, 0.0, -0.2641270160675049, 0.0, -0.00020527646120171994, 0.0, -0.05853080749511719, -2.09808349609375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.003789067268371582, -1.9073486328125e-06, -0.045121192932128906, -8.0108642578125e-05, -0.008643150329589844, 0.0, -0.00025177001953125, -0.000240325927734375, -5.7220458984375e-06, -0.000400543212890625, 0.0, -0.0074503421783447266, 0.0, -0.02120649814605713, -1.9073486328125e-06, -0.0005970001220703125, -0.0020761489868164062, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002689361572265625, -2.6702880859375e-05, 0.0, -0.005566835403442383, -1.9073486328125e-06, -0.005085228942334652, 0.0, -9.5367431640625e-06, -0.06621360778808594, -0.0001049041748046875, -0.008844375610351562, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008698701858520508, 0.0, -7.62939453125e-06, 0.0, -0.025063753128051758, 0.0, -0.11800384521484375, -3.814697265625e-06, -0.0001811981201171875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "MAGE", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "DRUID", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -4.648826556804323, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -2.976497173309326, 0.0, -3.24249267578125e-05, 0.0, -1.4185905456542969e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -9.548664093017578e-05, -3.3378546504536644e-06, -0.11679267883300781, -5.7220458984375e-06, -1.1444091796875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.3589859008789062e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.291534423828125e-06, -3.814697265625e-06, -0.017873764038085938, -3.62396240234375e-05, -5.91278076171875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.4668538570404053, -3.814697265625e-06, -0.028639793395996094, -0.006375312805175781, -9.5367431640625e-06, -2.6702880859375e-05, -0.01412200927734375, -1.52587890625e-05, -0.004217386245727539, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.0003337860107421875, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009900331497192383, 0.0, -0.0006282857502810657, 0.0, -0.0004749298095703125, -3.24249267578125e-05, -0.026454925537109375, -7.62939453125e-06, -0.009103059768676758, 0.0, -0.01639270782470703, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.26021671295166016, -9.5367431640625e-06, -0.000133514404296875, -1.9073486328125e-06, -0.0024089813232421875, 0.0, -0.26385819911956787, 0.0, -0.00020491884788498282, 0.0, -0.043700218200683594, -2.288818359375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.003889322280883789, -1.9073486328125e-06, -0.04218292236328125, -7.62939453125e-05, -0.007877349853515625, 0.0, -0.000232696533203125, -0.000255584716796875, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.0077822208404541016, 0.0, -0.02151644229888916, -1.9073486328125e-06, -0.0005970001220703125, -0.00213623046875, -3.4332275390625e-05, -4.9591064453125e-05, -0.000270843505859375, -2.6702880859375e-05, 0.0, -0.0055696964263916016, -1.9073486328125e-06, -0.005045055411756039, 0.0, -9.5367431640625e-06, -0.06623363494873047, -0.0001049041748046875, -0.008836746215820312, -4.57763671875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008660554885864258, 0.0, -7.62939453125e-06, 0.0, -0.025005578994750977, 0.0, -0.117889404296875, -3.814697265625e-06, -0.0001811981201171875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "DRUID", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "SHAMAN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score": -4.772005114853272, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.9362339973449707, 0.0, -0.0004273653030395508, 0.0, -1.4781938261876348e-05, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -5.221366882324219e-05, -5.960446742392378e-06, -0.03076934814453125, -3.814697265625e-06, -1.33514404296875e-05, -7.05718994140625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.291534423828125e-06, -3.814697265625e-06, -0.012365341186523438, -4.38690185546875e-05, -6.866455078125e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.4291360378265381, -5.7220458984375e-06, -0.027077674865722656, -0.005633354187011719, -9.5367431640625e-06, -2.86102294921875e-05, -0.014194488525390625, -1.52587890625e-05, -0.005069136619567871, -1.9073486328125e-06, -0.0004634857177734375, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.000152587890625, -1.33514404296875e-05, 0.0, -0.000339508056640625, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0010071992874145508, 0.0, -0.000641033286228776, 0.0, -0.0004138946533203125, -3.4332275390625e-05, -0.02187347412109375, -7.62939453125e-06, -0.009252786636352539, 0.0, -0.016315460205078125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26271915435791016, -9.5367431640625e-06, -0.0001277923583984375, -1.9073486328125e-06, -0.002361297607421875, 0.0, -1.4618074893951416, 0.0, -0.0008508786559104919, 0.0, -0.14438533782958984, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.002828836441040039, -1.9073486328125e-06, -0.044704437255859375, -7.05718994140625e-05, -0.009260177612304688, 0.0, -0.0002536773681640625, -0.00025177001953125, -7.62939453125e-06, -0.0003261566162109375, 0.0, -0.005978584289550781, 0.0, -0.01934206485748291, -1.9073486328125e-06, -0.000530242919921875, -0.0019884109497070312, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002574920654296875, -2.6702880859375e-05, 0.0, -0.0045855045318603516, -1.9073486328125e-06, -0.004990219138562679, 0.0, -9.5367431640625e-06, -0.06630134582519531, -0.0001049041748046875, -0.008852005004882812, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0009022951126098633, 0.0, -7.62939453125e-06, 0.0, -0.025357484817504883, 0.0, -0.1163482666015625, -3.814697265625e-06, -0.000179290771484375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "SHAMAN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "target", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self.target)\n", "score": -5.184095579217875, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.5299477577209473, 0.0, -7.843971252441406e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -3.8623809814453125e-05, -5.364403477869928e-06, -0.0595855712890625, -3.814697265625e-06, -1.1444091796875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.014575958251953125, -4.38690185546875e-05, -6.29425048828125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.435988187789917, -5.7220458984375e-06, -0.02737903594970703, -0.0060482025146484375, -9.5367431640625e-06, -2.86102294921875e-05, -0.014112472534179688, -1.52587890625e-05, -0.004176497459411621, -1.9073486328125e-06, -0.0004444122314453125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001373291015625, -1.33514404296875e-05, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006276901112869382, 0.0, -0.0004558563232421875, -3.62396240234375e-05, -0.021055221557617188, -7.62939453125e-06, -0.008893251419067383, 0.0, -0.016223907470703125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26012516021728516, -9.5367431640625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.00243377685546875, 0.0, -0.2660810947418213, 0.0, -0.00020444203983061016, 0.0, -0.04424571990966797, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0034754276275634766, -1.9073486328125e-06, -0.038361549377441406, -7.2479248046875e-05, -0.00815582275390625, 0.0, -0.000240325927734375, -0.0002651214599609375, -5.7220458984375e-06, -0.00041961669921875, 0.0, -0.007753729820251465, 0.0, -0.02272188663482666, -1.9073486328125e-06, -0.0006008148193359375, -0.002117156982421875, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002689361572265625, -2.6702880859375e-05, 0.0, -0.0056688785552978516, -1.9073486328125e-06, -0.005140422843396664, 0.0, -9.5367431640625e-06, -0.06609439849853516, -0.0001049041748046875, -0.008863449096679688, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008755922317504883, 0.0, -7.62939453125e-06, 0.0, -0.02512192726135254, 0.0, -2.196685791015625, 0.0, -8.58306884765625e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0017547607421875, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Template36", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole1": "calculate_attack"}]}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 44, 134, "<UNK>", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(<UNK>), self)\n", "score": -5.258641796058072, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26085662841796875, -9.5367431640625e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.002353668212890625, 0.0, -0.26362359523773193, 0.0, -0.00020479965314734727, 0.0, -0.04261970520019531, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0037232637405395508, -1.9073486328125e-06, -0.04256725311279297, -7.62939453125e-05, -0.008043289184570312, 0.0, -0.0002422332763671875, -0.00025177001953125, -5.7220458984375e-06, -0.000392913818359375, 0.0, -0.007630586624145508, 0.0, -0.021164536476135254, -1.9073486328125e-06, -0.0005893707275390625, -0.0021181106567382812, -3.4332275390625e-05, -4.9591064453125e-05, -0.000270843505859375, -2.6702880859375e-05, 0.0, -0.00549626350402832, -1.9073486328125e-06, -0.005029796622693539, 0.0, -9.5367431640625e-06, -3.1493654251098633, -3.814697265625e-06, -0.04411029815673828, 0.0, -0.0001392364501953125, -1.9073486328125e-05, -0.00344085693359375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        self.target.change_attack(1)\n", "score": -5.829805453223081, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.566122055053711, -1.1444091796875e-05, -0.10008430480957031, 0.0, -0.00014507770538330078, 0.0, -0.8279094696044922, -1.71661376953125e-05, -0.014312744140625, -0.000247955322265625, -1.1965560913085938, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.11628186702728271, -3.814697265625e-06, -0.6140493154525757, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 44, 134, "<UNK>", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(<UNK>), self)\n", "score": -6.083441454004259, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -1.5299477577209473, 0.0, -7.843971252441406e-05, 0.0, -1.1682508556987159e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -3.8623809814453125e-05, -5.364403477869928e-06, -0.0595855712890625, -3.814697265625e-06, -1.1444091796875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.014575958251953125, -4.38690185546875e-05, -6.29425048828125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.435988187789917, -5.7220458984375e-06, -0.02737903594970703, -0.0060482025146484375, -9.5367431640625e-06, -2.86102294921875e-05, -0.014112472534179688, -1.52587890625e-05, -0.004176497459411621, -1.9073486328125e-06, -0.0004444122314453125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001373291015625, -1.33514404296875e-05, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006276901112869382, 0.0, -0.0004558563232421875, -3.62396240234375e-05, -0.021055221557617188, -7.62939453125e-06, -0.008893251419067383, 0.0, -0.016223907470703125, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26012516021728516, -9.5367431640625e-06, -0.00012969970703125, -1.9073486328125e-06, -0.00243377685546875, 0.0, -0.2660810947418213, 0.0, -0.00020444203983061016, 0.0, -0.04424571990966797, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0034754276275634766, -1.9073486328125e-06, -0.038361549377441406, -7.2479248046875e-05, -0.00815582275390625, 0.0, -0.000240325927734375, -0.0002651214599609375, -5.7220458984375e-06, -0.00041961669921875, 0.0, -0.007753729820251465, 0.0, -0.02272188663482666, -1.9073486328125e-06, -0.0006008148193359375, -0.002117156982421875, -3.4332275390625e-05, -4.9591064453125e-05, -0.0002689361572265625, -2.6702880859375e-05, 0.0, -0.0056688785552978516, -1.9073486328125e-06, -0.005140422843396664, 0.0, -9.5367431640625e-06, -3.1515674591064453, -3.814697265625e-06, -0.04385948181152344, 0.0, -0.0001392364501953125, -1.9073486328125e-05, -0.003452301025390625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PRIEST", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage"}, "args": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Name", "id": "targets"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        self.target.change_attack(2)\n", "score": -6.092063446444364, "score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.566122055053711, -1.1444091796875e-05, -0.10008430480957031, 0.0, -0.00014507770538330078, 0.0, -0.8279094696044922, -1.71661376953125e-05, -0.014312744140625, -0.000247955322265625, -1.1965560913085938, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.11628186702728271, -3.814697265625e-06, -0.8763054013252258, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Cone of Cold", "hole2": "PALADIN", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "ConeOfCold", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}], "hole1": "extend"}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}], "hole4": "player"}}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 211, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Kill", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), Give(SpellDamage(1)))\n            )\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.744321387864133, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -2.6594948768615723, -7.986990567587782e-06, -0.0006532610859721899, -8.463859558105469e-06, -9.34600830078125e-05, -7.152556463552173e-06, -2.1457672119140625e-06, -0.0017915964126586914, -8.22540732769994e-06, -0.032479286193847656, -3.814697265625e-06, -0.2262575328350067, -2.5153110982500948e-05, -0.007880795747041702, -0.006536602973937988, -0.10144615173339844, -0.015501976013183594, -0.0009174346923828125, -0.5193361043930054, -0.05397820472717285, -0.0028973817825317383, -0.049515459686517715, -2.0265579223632812e-06, -0.008505940437316895, 0.0, -0.00017188953643199056, 0.0, -9.5367431640625e-06, -0.033211708068847656, -0.0001087188720703125, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Kill", "hole5": "Give", "hole1": 4, "hole0": "Defender of Argus", "hole6": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.822857188815746, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -0.19467735290527344, -0.0168609619140625, -1.33514404296875e-05, -0.29581084847450256, -0.011283040046691895, -0.06581151485443115, -0.0122298002243042, -0.1621255874633789, -1.9073486328125e-06, -0.6599952578544617, -0.00015568724484182894, -9.5367431640625e-06, -0.06043821573257446, -9.322063124272972e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.125993993715383e-06, 0.0, -1.9073486328125e-06, -0.2414093017578125, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 211, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Kill", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Attack", "<EOS>", "1", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), Give(Attack(1))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.882801308099246, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -2.6594948768615723, -7.986990567587782e-06, -0.0006532610859721899, -8.463859558105469e-06, -9.34600830078125e-05, -7.152556463552173e-06, -2.1457672119140625e-06, -0.0017915964126586914, -8.22540732769994e-06, -0.032479286193847656, -3.814697265625e-06, -0.2262575328350067, -2.5153110982500948e-05, -0.007880795747041702, -0.006536602973937988, -0.10144615173339844, -0.015501976013183594, -0.0009174346923828125, -1.546690821647644, -0.08051586151123047, -0.15140706300735474, -9.5367431640625e-06, -0.007349967956542969, 0.0, -0.00012385391164571047, 0.0, -7.62939453125e-06, -0.02004528045654297, -6.4849853515625e-05, -5.841255187988281e-06, 0.0, -3.933906555175781e-06, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Kill", "hole5": "Give", "hole1": 4, "hole0": "Defender of Argus", "hole6": [{"_type": "Template34", "hole0": "Attack", "hole1": 1}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.989717185593669, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -3.1538467407226562, -1.5139465176616795e-05, -0.0005341325304470956, -3.480909435893409e-05, -9.739398956298828e-05, -1.4781950994802173e-05, -5.7220458984375e-06, -0.007600903511047363, -7.390969585685525e-06, -0.0016324515454471111, -0.00020682811737060547, -0.0013158582150936127, -0.157684326171875, -0.0017681121826171875, -0.20949745178222656, -4.76837158203125e-05, -0.00067901611328125, -0.2504396438598633, -0.00089263916015625, -0.00010597702203085646, -4.00543212890625e-05, -0.0030246968381106853, -0.009977340698242188, 0.0, -0.22514964640140533, -3.814697265625e-06, -0.1254711151123047, -0.0002498626708984375, -0.000423431396484375, -1.71661376953125e-05, -7.390975224552676e-05, -0.0007649660110473633, -1.9073486328125e-06, -0.1705070436000824, -1.9073486328125e-06, -0.3252856433391571, -1.9073486328125e-06, -1.3470649719238281e-05, -0.08056449890136719, -0.0003185272216796875, 0.0, -0.003984689712524414, -3.814697265625e-06, -1.9073486328125e-06, -2.47955322265625e-05, -0.023256301879882812, -5.841255187988281e-06, 0.0, -4.649054244509898e-05, 0.0, -8.821474693831988e-06, 0.0, -9.5367431640625e-06, -0.21055030822753906, -4.1961669921875e-05, -1.1920928244535389e-07, 0.0, -3.933906555175781e-06, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), EnemyPlayer\n            ()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.012192281656084, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -0.19467735290527344, -0.0168609619140625, -1.33514404296875e-05, -0.29581084847450256, -0.011283040046691895, -0.06581151485443115, -0.0122298002243042, -0.1621255874633789, -1.9073486328125e-06, -0.7660333514213562, -0.00012028217315673828, -1.9073486328125e-06, -0.06101767718791962, -9.238602069672197e-05, -1.9073486328125e-06, -6.711483001708984e-05, -3.814697265625e-06, -8.225431884056889e-06, 0.0, -1.9073486328125e-06, -0.3241748809814453, -4.00543212890625e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), EnemyPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.254308920570097, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -1.0862630605697632, -0.00010800361633300781, -1.9073486328125e-06, -0.102691650390625, -0.009976387023925781, -0.0015397625975310802, -0.10494673252105713, -5.7220458984375e-06, -0.008185386657714844, -0.0027103424072265625, -0.0002040863037109375, -0.0005109307821840048, -0.0003297977091278881, -3.0517578125e-05, 0.0, -0.013263069093227386, -0.0001952648162841797, -5.733966827392578e-05, -0.2104511260986328, -0.01662921905517578, -1.33514404296875e-05, -0.30951979756355286, -0.01184701919555664, -0.0629262924194336, -0.010280370712280273, -0.18391036987304688, -1.9073486328125e-06, -0.6394060850143433, -0.0001555680501041934, -9.5367431640625e-06, -0.06065232306718826, -9.345903526991606e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.125993993715383e-06, 0.0, -1.9073486328125e-06, -0.2382831573486328, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), EnemyPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), EnemyPlayer\n            ()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.48500961826538, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -1.0862630605697632, -0.00010800361633300781, -1.9073486328125e-06, -0.102691650390625, -0.009976387023925781, -0.0015397625975310802, -0.10494673252105713, -5.7220458984375e-06, -0.008185386657714844, -0.0027103424072265625, -0.0002040863037109375, -0.0005109307821840048, -0.0003297977091278881, -3.0517578125e-05, 0.0, -0.013263069093227386, -0.0001952648162841797, -5.733966827392578e-05, -0.2104511260986328, -0.01662921905517578, -1.33514404296875e-05, -0.30951979756355286, -0.01184701919555664, -0.0629262924194336, -0.010280370712280273, -0.18391036987304688, -1.9073486328125e-06, -0.7866448163986206, -0.00012218952178955078, -1.9073486328125e-06, -0.06145802512764931, -9.22668186831288e-05, -1.9073486328125e-06, -6.711483001708984e-05, -1.9073486328125e-06, -8.106222594506107e-06, 0.0, -1.9073486328125e-06, -0.3209857940673828, -4.00543212890625e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            )]), battlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.960598174142426, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -1.736954689025879, -0.08723163604736328, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.14870606362819672, -0.0002379413926973939, -2.09808349609375e-05, -0.00243377685546875, -0.0013790130615234375, -9.5367431640625e-06, -1.71661376953125e-05, 0.0, -0.00027489662170410156, -2.288818359375e-05, -0.3897895812988281, -3.814697265625e-06, -0.3590530753135681, -0.016857147216796875, 0.0, -2.2888181774760596e-05, -5.7220458984375e-06, -7.748596544843167e-06, 0.0, -5.7220458984375e-06, -0.11567306518554688, -4.9591064453125e-05, -5.841255187988281e-06, 0.0, -5.9604644775390625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecrySelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Has", "adjacent", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Hasadjacent(), EnemyPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.1253380466214224, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -2.056793689727783, -0.09322965145111084, -0.0035925046540796757, -0.3773927688598633, 0.0, -0.5970278382301331, -0.0024091005325317383, -3.814697265625e-06, -0.046459197998046875, -0.012957572937011719, -0.0004429531982168555, -0.08873927593231201, -1.9073486328125e-06, -0.00922393798828125, -0.002410888671875, -0.0002079010009765625, -0.0004073379677720368, -0.00022098960471339524, -2.47955322265625e-05, 0.0, -0.014422228559851646, -0.0002353191375732422, -5.543231964111328e-05, -0.22886276245117188, -0.01986217498779297, -1.33514404296875e-05, -0.305325448513031, -0.01026010513305664, -0.06731569766998291, -0.01431894302368164, -0.18570423126220703, -1.9073486328125e-06, -0.6481128931045532, -0.00015866747708059847, -9.5367431640625e-06, -0.06119809299707413, -9.429345664102584e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.006785613659304e-06, 0.0, -1.9073486328125e-06, -0.24407291412353516, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "Hasadjacent"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Give", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(GiveTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.128149375899724, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -1.0544774532318115, -0.4627641439437866, -0.200370192527771, -0.5038528442382812, -1.9073486328125e-06, -0.7535818219184875, -0.0007349245715886354, -7.62939453125e-06, -0.17370891571044922, -0.007814407348632812, -0.0018214831361547112, -0.15804123878479004, -3.814697265625e-06, -0.0052242279052734375, -0.00341796875, -0.0001888275146484375, -0.00047218779218383133, -0.0003002431185450405, -2.86102294921875e-05, 0.0, -0.013005446642637253, -0.0002218484878540039, -6.687641143798828e-05, -0.2186603546142578, -0.017238616943359375, -1.33514404296875e-05, -0.3051597774028778, -0.010883450508117676, -0.06819868087768555, -0.013410687446594238, -0.16410350799560547, -1.9073486328125e-06, -0.6554396748542786, -0.00015437594265677035, -9.5367431640625e-06, -0.060623928904533386, -9.345903526991606e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.125993993715383e-06, 0.0, -1.9073486328125e-06, -0.24028301239013672, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "GiveTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), EnemyPlayer\n            ()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True)\n", "score": -6.2136836375432125, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -0.19467735290527344, -0.0168609619140625, -1.33514404296875e-05, -0.29581084847450256, -0.011283040046691895, -0.06581151485443115, -0.0122298002243042, -0.1621255874633789, -1.9073486328125e-06, -0.7660333514213562, -0.00012028217315673828, -1.9073486328125e-06, -0.06101767718791962, -9.238602069672197e-05, -1.9073486328125e-06, -6.711483001708984e-05, -3.814697265625e-06, -8.225431884056889e-06, 0.0, -1.9073486328125e-06, -1.288844108581543, -7.62939453125e-05, -3.2186455882765586e-06, -1.1920928244535389e-07, -4.410740075400099e-06, 0.0, -0.23063230514526367, -1.33514404296875e-05, -0.0026493072509765625, -0.0005035400390625, -0.0029642581939697266, -1.9431114196777344e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), EnemyPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            )]), battlecrySelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.315135856226327, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -1.0862630605697632, -0.00010800361633300781, -1.9073486328125e-06, -0.102691650390625, -0.009976387023925781, -0.0015397625975310802, -0.10494673252105713, -5.7220458984375e-06, -0.008185386657714844, -0.0027103424072265625, -0.0002040863037109375, -0.0005109307821840048, -0.0003297977091278881, -3.0517578125e-05, 0.0, -0.013263069093227386, -0.0001952648162841797, -5.733966827392578e-05, -1.666398048400879, -0.10254192352294922, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.1562473624944687, -0.00024330582527909428, -2.09808349609375e-05, -0.0025310516357421875, -0.00138092041015625, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.00026154518127441406, -2.288818359375e-05, -0.3854255676269531, -3.814697265625e-06, -0.35534682869911194, -0.01693439483642578, 0.0, -2.2888181774760596e-05, -5.7220458984375e-06, -7.629387255292386e-06, 0.0, -5.7220458984375e-06, -0.11762619018554688, -4.9591064453125e-05, -5.841255187988281e-06, 0.0, -5.9604644775390625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "battlecrySelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True)\n", "score": -6.353269385921713, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -0.19467735290527344, -0.0168609619140625, -1.33514404296875e-05, -0.29581084847450256, -0.011283040046691895, -0.06581151485443115, -0.0122298002243042, -0.1621255874633789, -1.9073486328125e-06, -0.6599952578544617, -0.00015568724484182894, -9.5367431640625e-06, -0.06043821573257446, -9.322063124272972e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.125993993715383e-06, 0.0, -1.9073486328125e-06, -1.5434808731079102, -0.0001068115234375, -2.622600959512056e-06, -2.3841855067985307e-07, -4.52994936495088e-06, 0.0, -0.22252309322357178, -1.33514404296875e-05, -0.00217437744140625, -0.00054168701171875, -0.0030024051666259766, -2.1338462829589844e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.469475481031608, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -2.7481689453125, -0.09544754028320312, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.1887880563735962, -0.0003484483459033072, -2.09808349609375e-05, -0.0028209686279296875, -0.0004024505615234375, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -0.00025391578674316406, -2.09808349609375e-05, -0.3893613815307617, -3.814697265625e-06, -0.09334659576416016, -0.029157638549804688, -0.0006990412366576493, -0.07524979114532471, 0.0, -0.00470733642578125, -0.0057010650634765625, -0.00040435791015625, -0.0005964037263765931, -0.00013636612857226282, -2.288818359375e-05, 0.0, -0.013323699124157429, -0.00020873546600341797, -6.115436553955078e-05, -0.19732093811035156, -0.037629127502441406, -1.33514404296875e-05, -0.27192288637161255, -0.00827932357788086, -0.07516586780548096, -0.02398848533630371, -0.23948383331298828, 0.0, -0.7238399982452393, -0.000161647709319368, -9.5367431640625e-06, -0.06334629654884338, -9.655841859057546e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.245203283266164e-06, 0.0, -1.9073486328125e-06, -0.2394247055053711, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), EnemyPlayer\n            ()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.529344278622361, "score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -2.7481689453125, -0.09544754028320312, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.1887880563735962, -0.0003484483459033072, -2.09808349609375e-05, -0.0028209686279296875, -0.0004024505615234375, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -0.00025391578674316406, -2.09808349609375e-05, -0.3893613815307617, -3.814697265625e-06, -0.09334659576416016, -0.029157638549804688, -0.0006990412366576493, -0.07524979114532471, 0.0, -0.00470733642578125, -0.0057010650634765625, -0.00040435791015625, -0.0005964037263765931, -0.00013636612857226282, -2.288818359375e-05, 0.0, -0.013323699124157429, -0.00020873546600341797, -6.115436553955078e-05, -0.19732093811035156, -0.037629127502441406, -1.33514404296875e-05, -0.27192288637161255, -0.00827932357788086, -0.07516586780548096, -0.02398848533630371, -0.23948383331298828, 0.0, -0.7042410373687744, -0.00011849403381347656, -1.9073486328125e-06, -0.06357182562351227, -9.405487071489915e-05, -1.9073486328125e-06, -6.699562072753906e-05, -3.814697265625e-06, -8.225431884056889e-06, 0.0, -1.9073486328125e-06, -0.3187227249145508, -4.00543212890625e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Defender of Argus", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "DefenderOfArgus", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "score": -2.6900948739937576, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -2.1050853729248047, -0.0015912494855001569, -1.9669481844175607e-05, -0.001134037971496582, -2.622604142743512e-06, -0.00446629524230957, -2.9921526220277883e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 247, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, taunt=True, taunt=True, taunt=True)\n", "score": -3.1535787548154914, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -1.1117496490478516, -0.030280113220214844, -9.5367431640625e-06, -0.14335250854492188, -0.0002841949462890625, -0.0015697479248046875, -2.6702880859375e-05, -2.09808349609375e-05, -9.167194366455078e-05, -0.20731163024902344, -3.814697265625e-06, -0.7726030349731445, 0.0, -0.00038909912109375, -2.6702880859375e-05, -2.288818359375e-05, -2.6941299438476562e-05, -0.010271072387695312, -7.62939453125e-06, -0.03976249694824219, 0.0, -0.0001697540283203125, -2.6702880859375e-05, -2.288818359375e-05, -2.9325485229492188e-05, -0.010532379150390625, -7.62939453125e-06, -0.024713516235351562, -1.9073486328125e-06, -0.0001392364501953125, -3.62396240234375e-05, -2.288818359375e-05, -1.239776611328125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 247, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, taunt=True, taunt=True, taunt=True)\n", "score": -3.516599366495001, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -1.034153699874878, 0.0, -6.079673767089844e-06, 0.0, -4.00543212890625e-05, -0.0001049041748046875, -0.0063648223876953125, -5.817244164063595e-05, -0.0004193207423668355, -0.04037822037935257, -2.3841855067985307e-07, -0.014859557151794434, -3.588198160286993e-05, -0.9622993469238281, -0.030199050903320312, -9.5367431640625e-06, -0.17432022094726562, -0.0002384185791015625, -0.0012598037719726562, -2.47955322265625e-05, -2.09808349609375e-05, -0.00012600421905517578, -0.28904247283935547, -3.814697265625e-06, -0.7571840286254883, 0.0, -0.000408172607421875, -2.47955322265625e-05, -2.288818359375e-05, -3.266334533691406e-05, -0.009830474853515625, -7.62939453125e-06, -0.04036903381347656, 0.0, -0.0001659393310546875, -2.6702880859375e-05, -2.288818359375e-05, -3.504753112792969e-05, -0.009389877319335938, -7.62939453125e-06, -0.024374961853027344, -1.9073486328125e-06, -0.0001354217529296875, -3.62396240234375e-05, -2.47955322265625e-05, -1.4185905456542969e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "divine_shield", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, divine_shield=True, taunt=True)\n", "score": -3.6198031868070686, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -1.0802497863769531, -5.7220458984375e-06, -0.0031719207763671875, -1.71661376953125e-05, -3.0517578125e-05, -0.00011658668518066406, -1.0256843566894531, 0.0, -0.026709556579589844, 0.0, -0.000247955322265625, -2.288818359375e-05, -5.14984130859375e-05, -6.35385513305664e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "divine_shield", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 247, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "charge", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, charge=True, taunt=True, taunt=True)\n", "score": -3.79467379704419, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -1.1117496490478516, -0.030280113220214844, -9.5367431640625e-06, -0.14335250854492188, -0.0002841949462890625, -0.0015697479248046875, -2.6702880859375e-05, -2.09808349609375e-05, -9.167194366455078e-05, -0.20731163024902344, -3.814697265625e-06, -1.0019550323486328, -2.09808349609375e-05, -0.000232696533203125, -0.0002307891845703125, -4.76837158203125e-05, -0.00067138671875, -0.005828857421875, -1.52587890625e-05, -0.44795703887939453, 0.0, -0.0005235671997070312, -4.38690185546875e-05, -2.86102294921875e-05, -2.574920654296875e-05, -0.016080856323242188, -7.62939453125e-06, -0.0259857177734375, -1.9073486328125e-06, -0.00018310546875, -4.00543212890625e-05, -2.86102294921875e-05, -1.0371208190917969e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 247, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "charge", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, charge=True, taunt=True, taunt=True)\n", "score": -4.16422242862879, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -1.034153699874878, 0.0, -6.079673767089844e-06, 0.0, -4.00543212890625e-05, -0.0001049041748046875, -0.0063648223876953125, -5.817244164063595e-05, -0.0004193207423668355, -0.04037822037935257, -2.3841855067985307e-07, -0.014859557151794434, -3.588198160286993e-05, -0.9622993469238281, -0.030199050903320312, -9.5367431640625e-06, -0.17432022094726562, -0.0002384185791015625, -0.0012598037719726562, -2.47955322265625e-05, -2.09808349609375e-05, -0.00012600421905517578, -0.28904247283935547, -3.814697265625e-06, -1.0339422225952148, -2.09808349609375e-05, -0.000244140625, -0.000240325927734375, -4.76837158203125e-05, -0.00079345703125, -0.005374908447265625, -1.52587890625e-05, -0.4085731506347656, 0.0, -0.000507354736328125, -4.38690185546875e-05, -2.86102294921875e-05, -2.956390380859375e-05, -0.013980865478515625, -7.62939453125e-06, -0.02563190460205078, -1.9073486328125e-06, -0.0001735687255859375, -4.00543212890625e-05, -2.86102294921875e-05, -1.2278556823730469e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "divine_shield", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, divine_shield=True, taunt=True)\n", "score": -4.2079919074267025, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -1.034153699874878, 0.0, -6.079673767089844e-06, 0.0, -4.00543212890625e-05, -0.0001049041748046875, -0.0063648223876953125, -5.817244164063595e-05, -0.0004193207423668355, -0.04037822037935257, -2.3841855067985307e-07, -0.014859557151794434, -3.588198160286993e-05, -0.7843446731567383, -6.866455078125e-05, -3.814697265625e-05, -1.1635284423828125, -3.814697265625e-06, -0.0026302337646484375, -1.33514404296875e-05, -3.62396240234375e-05, -0.00013554096221923828, -1.0130271911621094, 0.0, -0.0268096923828125, 0.0, -0.0002593994140625, -2.09808349609375e-05, -5.340576171875e-05, -8.249282836914062e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "divine_shield", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>", 68, 227, "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, taunt=True, taunt=True)\n", "score": -4.242993589791688, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -2.599782943725586, -3.814697265625e-06, -0.0006580352783203125, -9.5367431640625e-06, -9.5367431640625e-06, -0.0008335113525390625, -0.12575912475585938, -1.9073486328125e-06, -0.03220176696777344, 0.0, -0.0001659393310546875, -1.71661376953125e-05, -2.86102294921875e-05, -9.000301361083984e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 238, 63, 205, "Has", "Windfury", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(HasWindfury(),\n            BothPlayer())), UserPicker(), SelfSelector()))])\n", "score": -4.319907827348736, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -0.6722726821899414, -0.00022125244140625, -0.0004787445068359375, -3.0517578125e-05, -2.288818359375e-05, -0.00029754638671875, -0.0791168212890625, -0.028478622436523438, -0.14370107650756836, -5.7220458984375e-06, -2.09808349609375e-05, -0.07710838317871094, -7.62939453125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -0.07971334457397461, -0.0035800933837890625, -7.62939453125e-06, -0.22267723083496094, -0.23187732696533203, -5.7220458984375e-05, -0.004906177520751953, -0.013847075402736664, -5.722038622479886e-06, -0.0001373291015625, 0.0, -0.0019762159790843725, -7.641315460205078e-05, -1.9073486328125e-06, -0.2752046585083008, -0.1661996841430664, -1.9073486328125e-06, -0.27485892176628113, -0.3830362856388092, -1.33514404296875e-05, -0.020877838134765625, -1.9073486328125e-06, -0.004395604133605957, -0.0003116130828857422, -0.001644134521484375, -0.0022258758544921875, -1.9073486328125e-06, -0.11837506294250488, -0.0013854503631591797, -5.483612312673358e-06, -0.000202178955078125, -2.09808349609375e-05, -0.027046680450439453, -5.7220458984375e-06, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "HasWindfury"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "UserPicker"}, {"_type": "Template39", "hole0": "SelfSelector"}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "1", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=1)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "score": -4.574720054089994, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -3.736553907394409, 0.0, -0.0340501070022583, -0.0003185272216796875, -7.843971252441406e-05, 0.0, -7.43865966796875e-05, -1.52587890625e-05, -0.697657585144043, -0.004099409561604261, -1.2993811651540454e-05, -0.0013058185577392578, -2.2649765014648438e-06, -0.006376147270202637, -2.6702879040385596e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 1}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 238, 63, 205, "Has", "Windfury", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(HasWindfury(),\n            BothPlayer())), UserPicker(), SelfSelector()))])\n", "score": -4.85091041613893, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -1.034153699874878, 0.0, -6.079673767089844e-06, 0.0, -4.00543212890625e-05, -0.0001049041748046875, -0.0063648223876953125, -5.817244164063595e-05, -0.0004193207423668355, -0.04037822037935257, -2.3841855067985307e-07, -0.014859557151794434, -3.588198160286993e-05, -0.7843446731567383, -6.866455078125e-05, -3.814697265625e-05, -0.5417394638061523, -0.0003032684326171875, -0.0004329681396484375, -2.47955322265625e-05, -2.6702880859375e-05, -0.0004024505615234375, -0.06588363647460938, -0.027759552001953125, -0.13445425033569336, -5.7220458984375e-06, -1.9073486328125e-05, -0.06394195556640625, -7.62939453125e-06, -9.5367431640625e-06, -1.52587890625e-05, -0.12244105339050293, -0.003935813903808594, -7.62939453125e-06, -0.3317432403564453, -0.23661231994628906, -5.53131103515625e-05, -0.0052901506423950195, -0.013735935091972351, -5.245203283266164e-06, -0.000152587890625, 0.0, -0.0019864703062921762, -8.022785186767578e-05, -1.9073486328125e-06, -0.28342247009277344, -0.17385101318359375, -1.9073486328125e-06, -0.28734472393989563, -0.3772844076156616, -1.33514404296875e-05, -0.0203094482421875, -1.9073486328125e-06, -0.004471898078918457, -0.00031554698944091797, -0.0016422271728515625, -0.002315521240234375, -1.9073486328125e-06, -0.1187889575958252, -0.0013759136199951172, -5.483612312673358e-06, -0.000213623046875, -2.09808349609375e-05, -0.027046680450439453, -5.7220458984375e-06, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "HasWindfury"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "UserPicker"}, {"_type": "Template39", "hole0": "SelfSelector"}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 239, 63, 205, "Not", "Current", "Target", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 39, 110, 21, 134, "And", "<EOS>", 238, 59, 193, "One", "In", "<EOS>", "2", "<EOS>", 59, 193, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(),\n            BothPlayer(), UserPicker())), SelfSelector(), And(OneIn(2),\n            OpponentMinionCountIsGreaterThan(0))))])\n", "score": -5.39460589892132, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -0.6722726821899414, -0.00022125244140625, -0.0004787445068359375, -3.0517578125e-05, -2.288818359375e-05, -0.00029754638671875, -0.0791168212890625, -0.028478622436523438, -0.14370107650756836, -5.7220458984375e-06, -2.09808349609375e-05, -0.07710838317871094, -7.62939453125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -0.07971334457397461, -0.0035800933837890625, -7.62939453125e-06, -0.22267723083496094, -0.23187732696533203, -5.7220458984375e-05, -0.004906177520751953, -0.013847075402736664, -5.722038622479886e-06, -0.0001373291015625, 0.0, -0.0019762159790843725, -7.641315460205078e-05, -1.9073486328125e-06, -1.4575462341308594, -0.059042930603027344, -1.9073486328125e-06, -0.010661125183105469, -0.012185691855847836, -0.005136966705322266, -2.288818359375e-05, -8.58306884765625e-05, 0.0, -0.1100466251373291, -0.00016498564218636602, -2.09808349609375e-05, -6.67572021484375e-05, 0.0, -0.45618724822998047, -0.0003732442855834961, -1.6689286894688848e-06, -0.00023651123046875, -1.9073486328125e-05, -0.06989216804504395, -1.1444091796875e-05, -1.1444091796875e-05, -0.00174713134765625, -7.82012939453125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -0.007055521011352539, -4.76837158203125e-05, -0.0001583099365234375, -0.003711700439453125, -1.33514404296875e-05, -0.029571175575256348, -0.004289150238037109, -6.4849853515625e-05, -0.026991795748472214, -3.814697265625e-06, -0.05453014373779297, -0.0024328231811523438, -0.014473557472229004, -6.675719760096399e-06, -0.007343292236328125, -0.001659989240579307, -0.0031916045118123293, -0.0031727547757327557, -4.7922130761435255e-05, -0.008003966882824898, -0.000194549560546875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "NotCurrentTarget"}, {"_type": "Template39", "hole0": "BothPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "SelfSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "And"}, "args": [{"_type": "Template34", "hole0": "OneIn", "hole1": 2}, {"_type": "Template34", "hole0": "OpponentMinionCountIsGreaterThan", "hole1": 0}]}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 238, 63, 205, "Has", "(", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(Has((), BothPlayer())),\n            UserPicker(), SelfSelector()))])\n", "score": -5.508160127362309, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -0.6722726821899414, -0.00022125244140625, -0.0004787445068359375, -3.0517578125e-05, -2.288818359375e-05, -0.00029754638671875, -0.0791168212890625, -0.028478622436523438, -0.14370107650756836, -5.7220458984375e-06, -2.09808349609375e-05, -0.07710838317871094, -7.62939453125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -0.07971334457397461, -0.0035800933837890625, -7.62939453125e-06, -0.22267723083496094, -0.23187732696533203, -5.7220458984375e-05, -0.004906177520751953, -0.013847075402736664, -5.722038622479886e-06, -0.0001373291015625, 0.0, -0.0019762159790843725, -7.641315460205078e-05, -1.9073486328125e-06, -0.2752046585083008, -0.1661996841430664, -1.9073486328125e-06, -0.27485892176628113, -1.205661416053772, -0.00022387503122445196, -0.31807804107666016, -1.9073486328125e-06, -0.032598018646240234, -0.0004611015319824219, -0.002552032470703125, -0.0027751922607421875, -1.9073486328125e-06, -0.15010499954223633, -0.0012292861938476562, -4.6491513785440475e-06, -0.00020599365234375, -1.71661376953125e-05, -0.03387916088104248, -5.7220458984375e-06, -1.33514404296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "Has("}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "UserPicker"}, {"_type": "Template39", "hole0": "SelfSelector"}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "divine_shield", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 238, 63, 205, "Has", "Windfury", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, divine_shield=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(HasWindfury(),\n            BothPlayer())), UserPicker(), SelfSelector()))])\n", "score": -5.617086395426661, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -1.0802497863769531, -5.7220458984375e-06, -0.0031719207763671875, -1.71661376953125e-05, -3.0517578125e-05, -0.00011658668518066406, -0.44463348388671875, -0.018503189086914062, -0.23124253749847412, -2.1219253540039062e-05, -1.1444091796875e-05, -0.056830406188964844, -2.47955322265625e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.31761741638183594, -0.0052490234375, -7.62939453125e-06, -0.5401134490966797, -0.1937389373779297, -0.0001068115234375, -0.008659124374389648, -0.015568558126688004, -4.6491513785440475e-06, -0.00017547607421875, 0.0, -0.0025675143115222454, -8.594989776611328e-05, 0.0, -0.2081165313720703, -0.17175006866455078, -1.9073486328125e-06, -0.2957180142402649, -0.36293303966522217, -1.537799835205078e-05, -0.0189361572265625, -1.9073486328125e-06, -0.005522966384887695, -0.00033843517303466797, -0.001983642578125, -0.0015392303466796875, -1.9073486328125e-06, -0.120993971824646, -0.001410365104675293, -6.198863957251888e-06, -0.0002117156982421875, -2.288818359375e-05, -0.025358915328979492, -5.7220458984375e-06, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "divine_shield", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "HasWindfury"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "UserPicker"}, {"_type": "Template39", "hole0": "SelfSelector"}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}, {"choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 239, 63, 205, "Not", "Current", "Target", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 39, 110, 21, 134, "And", "<EOS>", 238, 59, 193, "One", "In", "<EOS>", "2", "<EOS>", 59, 193, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(),\n            BothPlayer(), UserPicker())), SelfSelector(), And(OneIn(2),\n            OpponentMinionCountIsGreaterThan(0))))])\n", "score": -5.870340309715829, "score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -1.034153699874878, 0.0, -6.079673767089844e-06, 0.0, -4.00543212890625e-05, -0.0001049041748046875, -0.0063648223876953125, -5.817244164063595e-05, -0.0004193207423668355, -0.04037822037935257, -2.3841855067985307e-07, -0.014859557151794434, -3.588198160286993e-05, -0.7843446731567383, -6.866455078125e-05, -3.814697265625e-05, -0.5417394638061523, -0.0003032684326171875, -0.0004329681396484375, -2.47955322265625e-05, -2.6702880859375e-05, -0.0004024505615234375, -0.06588363647460938, -0.027759552001953125, -0.13445425033569336, -5.7220458984375e-06, -1.9073486328125e-05, -0.06394195556640625, -7.62939453125e-06, -9.5367431640625e-06, -1.52587890625e-05, -0.12244105339050293, -0.003935813903808594, -7.62939453125e-06, -0.3317432403564453, -0.23661231994628906, -5.53131103515625e-05, -0.0052901506423950195, -0.013735935091972351, -5.245203283266164e-06, -0.000152587890625, 0.0, -0.0019864703062921762, -8.022785186767578e-05, -1.9073486328125e-06, -1.4312305450439453, -0.057483673095703125, -1.9073486328125e-06, -0.010278074070811272, -0.011968757025897503, -0.005026340484619141, -2.288818359375e-05, -8.58306884765625e-05, 0.0, -0.11201584339141846, -0.00016498564218636602, -2.09808349609375e-05, -6.67572021484375e-05, 0.0, -0.46045029163360596, -0.0003714561462402344, -1.7881377516459906e-06, -0.000247955322265625, -1.9073486328125e-05, -0.07077622413635254, -1.1444091796875e-05, -1.1444091796875e-05, -0.0017242431640625, -7.82012939453125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -0.0070230960845947266, -4.76837158203125e-05, -0.000156402587890625, -0.0036792755126953125, -1.33514404296875e-05, -0.027686595916748047, -0.004090666770935059, -5.53131103515625e-05, -0.02802177518606186, -3.814697265625e-06, -0.04614830017089844, -0.00223541259765625, -0.013820528984069824, -6.556510470545618e-06, -0.00699615478515625, -0.0015158652095124125, -0.003088979050517082, -0.0031678671948611736, -4.7922130761435255e-05, -0.007793324999511242, -0.0001983642578125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Num", "n": 2}}], "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "WeaponCard", "hole0": "Doomhammer", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Template20", "hole0": "Attack", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole0": "ChangeTarget", "hole2": [{"_type": "Template39", "hole0": "NotCurrentTarget"}, {"_type": "Template39", "hole0": "BothPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}}, {"_type": "Template39", "hole0": "SelfSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "And"}, "args": [{"_type": "Template34", "hole0": "OneIn", "hole1": 2}, {"_type": "Template34", "hole0": "OpponentMinionCountIsGreaterThan", "hole1": 0}]}]}]}], "hole2": 8, "hole1": 2}], "hole4": "player"}}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -2.221017259761716, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -1.0502768754959106, 0.0, -0.004777694586664438, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "score": -2.730900877278323, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6328755617141724, -5.7220458984375e-06, -0.9320549964904785, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -2.9832504835260423, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.4628374576568604, 0.0, -0.0013030767440795898, -1.1920928244535389e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0010585784912109375, 0.0, -3.159045081702061e-05, -7.62939453125e-06, -0.0004165172576904297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0005016326904296875, -6.4373016357421875e-06, -5.960462772236497e-07, -0.11911964416503906, -5.7220458984375e-05, -0.000118255615234375, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.3245811462402344e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.2954425811767578, -1.9073486328125e-06, -0.012953758239746094, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -1.0492230653762817, 0.0, -0.004784694407135248, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "score": -3.0336886580400417, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6328755617141724, -5.7220458984375e-06, -1.2348427772521973, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -3.1680048640184353, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6328755617141724, -5.7220458984375e-06, -1.3691608905792236, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -3.324826490255141, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.808345079421997, 0.0, -0.0011600255966186523, -1.1920928244535389e-07, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0004634857177734375, -1.9073486328125e-06, -2.9325474315555766e-05, -9.5367431640625e-06, -0.00038623809814453125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00046539306640625, -6.4373016357421875e-06, -7.152555099310121e-07, -0.11751556396484375, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29206085205078125, -1.9073486328125e-06, -0.012812614440917969, -6.4849853515625e-05, -3.4332275390625e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -1.051198124885559, 0.0, -0.004804152064025402, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "MAGE", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -3.383463491808648, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -1.3767766952514648, -0.0001678466796875, -4.1961669921875e-05, -7.43865966796875e-05, -8.58306884765625e-05, -1.9073486328125e-06, 0.0, 0.0, -1.71661376953125e-05, 0.0, -1.091059684753418, 0.0, -1.1444091796875e-05, -0.028474807739257812, -0.011442184448242188, -0.01629459485411644, -6.961822509765625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "score": -3.4949138100539656, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.4628374576568604, 0.0, -0.0013030767440795898, -1.1920928244535389e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0010585784912109375, 0.0, -3.159045081702061e-05, -7.62939453125e-06, -0.0004165172576904297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0005016326904296875, -6.4373016357421875e-06, -5.960462772236497e-07, -0.11911964416503906, -5.7220458984375e-05, -0.000118255615234375, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.3245811462402344e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.2954425811767578, -1.9073486328125e-06, -0.012953758239746094, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6337748765945435, -5.7220458984375e-06, -0.9318885803222656, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "score": -3.797838919917247, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.4628374576568604, 0.0, -0.0013030767440795898, -1.1920928244535389e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0010585784912109375, 0.0, -3.159045081702061e-05, -7.62939453125e-06, -0.0004165172576904297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0005016326904296875, -6.4373016357421875e-06, -5.960462772236497e-07, -0.11911964416503906, -5.7220458984375e-05, -0.000118255615234375, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.3245811462402344e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.2954425811767578, -1.9073486328125e-06, -0.012953758239746094, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6337748765945435, -5.7220458984375e-06, -1.2348136901855469, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "score": -3.832212084094131, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.808345079421997, 0.0, -0.0011600255966186523, -1.1920928244535389e-07, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0004634857177734375, -1.9073486328125e-06, -2.9325474315555766e-05, -9.5367431640625e-06, -0.00038623809814453125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00046539306640625, -6.4373016357421875e-06, -7.152555099310121e-07, -0.11751556396484375, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29206085205078125, -1.9073486328125e-06, -0.012812614440917969, -6.4849853515625e-05, -3.4332275390625e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6329079866409302, -5.7220458984375e-06, -0.9304722547531128, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "MAGE", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "score": -3.926503402303929, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -2.7088241577148438, 0.0, -0.051716554909944534, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "score": -3.932714932719371, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.4628374576568604, 0.0, -0.0013030767440795898, -1.1920928244535389e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0010585784912109375, 0.0, -3.159045081702061e-05, -7.62939453125e-06, -0.0004165172576904297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0005016326904296875, -6.4373016357421875e-06, -5.960462772236497e-07, -0.11911964416503906, -5.7220458984375e-05, -0.000118255615234375, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.3245811462402344e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.2954425811767578, -1.9073486328125e-06, -0.012953758239746094, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6337748765945435, -5.7220458984375e-06, -1.3696916103363037, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "change_attack"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -4.141668309578797, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -1.4628374576568604, 0.0, -0.0013030767440795898, -1.1920928244535389e-07, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0010585784912109375, 0.0, -3.159045081702061e-05, -7.62939453125e-06, -0.0004165172576904297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0005016326904296875, -6.4373016357421875e-06, -5.960462772236497e-07, -0.11911964416503906, -5.7220458984375e-05, -0.000118255615234375, -4.76837158203125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.3245811462402344e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -8.225440979003906e-06, -7.62939453125e-06, -1.3723077774047852, -0.0001697540283203125, -4.1961669921875e-05, -7.43865966796875e-05, -8.7738037109375e-05, -1.9073486328125e-06, 0.0, 0.0, -1.71661376953125e-05, 0.0, -1.0922002792358398, 0.0, -1.1444091796875e-05, -0.02835845947265625, -0.011354446411132812, -0.016321536153554916, -6.961822509765625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.divine_shield)\n", "score": -4.255554073613162, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -1.3767766952514648, -0.0001678466796875, -4.1961669921875e-05, -7.43865966796875e-05, -8.58306884765625e-05, -1.9073486328125e-06, 0.0, 0.0, -1.71661376953125e-05, 0.0, -1.6386165618896484, 0.0, -0.0011043548583984375, -0.009200096130371094, -3.4332275390625e-05, -0.0050373077392578125, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -0.0124664306640625, 0.0, -0.011722683906555176, -9.655952453613281e-06, -0.34118473529815674, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole1": 1, "hole0": "Earth Shock", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "attr": "divine_shield"}], "hole1": "increase_health"}], "hole4": "player"}}, {"choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", "1", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "score": -5.266679007516792, "score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -3.4091014862060547, -0.00030517578125, -4.529942543740617e-06, -2.7894973754882812e-05, -1.1920928244535389e-07, -1.1920928244535389e-07, -8.34504135127645e-07, -2.1815061700181104e-05, -0.44028520584106445, 0.0, -0.00011718271707650274, 0.0, -0.00010585735435597599, 0.0, -1.71661376953125e-05, -0.0001010894775390625, -1.2278503163543064e-05, -4.410734163684538e-06, -0.0027713775634765625, -5.53131103515625e-05, -0.0001125335693359375, -1.33514404296875e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -3.826618194580078e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -1.1920928955078125e-05, -3.814697265625e-06, -0.4633769989013672, -1.9073486328125e-06, -0.012681007385253906, -7.05718994140625e-05, -3.62396240234375e-05, -3.814697265625e-06, -7.82012939453125e-05, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.93390953540802, 0.0, -0.0030246577225625515, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Earth Shock", "hole2": "PRIEST", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "EarthShock", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 1, "hole1": "set_health_to"}}], "hole4": "player"}}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -6.8216476456954, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.625361442565918, 0.0, -5.7220458984375e-06, -0.000152587890625, -0.00014495849609375, -0.2692173719406128, -0.03355693817138672, -0.00040435791015625, 0.0, -2.288818359375e-05, 0.0, -0.0007162094116210938, -1.9073486328125e-06, -0.0010986328125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -7.029451371891689, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.8040949106216431, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.625361442565918, 0.0, -5.7220458984375e-06, -0.000152587890625, -0.00014495849609375, -0.2692173719406128, -0.03355693817138672, -0.00040435791015625, 0.0, -2.288818359375e-05, 0.0, -0.0007162094116210938, -1.9073486328125e-06, -0.0010986328125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye an Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.034627200825405, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.8050136566162109, 0.0, -1.9073486328125e-05, -0.000213623046875, -7.82012939453125e-05, -0.2948676347732544, -0.04132366180419922, -0.0002269744873046875, 0.0, -2.288818359375e-05, 0.0, -0.0008058547973632812, -1.9073486328125e-06, -0.0010890960693359375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -7.115134836895656, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.8744058609008789, 0.0, -1.9073486328125e-05, -0.00025177001953125, -7.2479248046875e-05, -0.34088611602783203, -0.03910636901855469, -0.0002384185791015625, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0008363723754882812, -1.9073486328125e-06, -0.001140594482421875, 0.0, -0.000156402587890625, -6.29425048828125e-05, -0.002227783203125, 0.0, -0.0001068115234375, -2.47955322265625e-05, -1.266526222229004, -2.6702880859375e-05, -0.0013685226440429688, -1.9073486328125e-06, -1.9073486328125e-06, -0.09499073028564453, 0.0, -0.000213623046875, -2.09808349609375e-05, -3.814697265625e-05, -0.009143829345703125, -6.103515625e-05, -0.000759124755859375, -0.001239776611328125, -0.0002346038818359375, -3.814697265625e-06, -8.285044896183535e-05, -3.814697265625e-06, -0.0003113746643066406, 0.0, -0.04316878318786621, 0.0, -0.6243829727172852, 0.0, -5.7220458984375e-06, -0.0001506805419921875, -0.0001468658447265625, -0.2693634033203125, -0.033637046813964844, -0.0004024505615234375, 0.0, -2.288818359375e-05, 0.0, -0.0007171630859375, -1.9073486328125e-06, -0.0010986328125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.242430927021694, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.8040949106216431, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.8050136566162109, 0.0, -1.9073486328125e-05, -0.000213623046875, -7.82012939453125e-05, -0.2948676347732544, -0.04132366180419922, -0.0002269744873046875, 0.0, -2.288818359375e-05, 0.0, -0.0008058547973632812, -1.9073486328125e-06, -0.0010890960693359375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye an Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.332397224171352, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.8744058609008789, 0.0, -1.9073486328125e-05, -0.00025177001953125, -7.2479248046875e-05, -0.34088611602783203, -0.03910636901855469, -0.0002384185791015625, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0008363723754882812, -1.9073486328125e-06, -0.001140594482421875, 0.0, -0.000156402587890625, -6.29425048828125e-05, -0.002227783203125, 0.0, -0.0001068115234375, -2.47955322265625e-05, -1.266526222229004, -2.6702880859375e-05, -0.0013685226440429688, -1.9073486328125e-06, -1.9073486328125e-06, -0.09499073028564453, 0.0, -0.000213623046875, -2.09808349609375e-05, -3.814697265625e-05, -0.009143829345703125, -6.103515625e-05, -0.000759124755859375, -0.001239776611328125, -0.0002346038818359375, -3.814697265625e-06, -8.285044896183535e-05, -3.814697265625e-06, -0.0003113746643066406, 0.0, -0.04316878318786621, 0.0, -0.8064098358154297, 0.0, -1.9073486328125e-05, -0.0002117156982421875, -7.82012939453125e-05, -0.2974787950515747, -0.040828704833984375, -0.0002288818359375, 0.0, -2.09808349609375e-05, 0.0, -0.0008153915405273438, -1.9073486328125e-06, -0.0010986328125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n", "score": -8.37600326703329, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.625361442565918, 0.0, -5.7220458984375e-06, -0.000152587890625, -0.00014495849609375, -1.8509691953659058, -0.0068225860595703125, -0.0005245208740234375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.00030040740966796875, 0.0, -0.0007228851318359375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n", "score": -8.430959941609096, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.8050136566162109, 0.0, -1.9073486328125e-05, -0.000213623046875, -7.82012939453125e-05, -1.7239943742752075, -0.009371757507324219, -0.00025177001953125, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.00029754638671875, 0.0, -0.0007152557373046875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n", "score": -8.58380699322958, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.8040949106216431, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -1.285689353942871, -3.24249267578125e-05, -0.0013818740844726562, -1.9073486328125e-06, -1.9073486328125e-06, -0.12566757202148438, 0.0, -0.0001983642578125, -2.09808349609375e-05, -4.00543212890625e-05, -0.010028839111328125, -6.103515625e-05, -0.0007762908935546875, -0.0012531280517578125, -0.0002498626708984375, -3.814697265625e-06, -8.296965825138614e-05, -3.814697265625e-06, -0.00031125545501708984, 0.0, -0.044281721115112305, 0.0, -0.625361442565918, 0.0, -5.7220458984375e-06, -0.000152587890625, -0.00014495849609375, -1.8509691953659058, -0.0068225860595703125, -0.0005245208740234375, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.00030040740966796875, 0.0, -0.0007228851318359375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye an Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "targets", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if len(game.other_player.minions) > 0:\n            mirror = game.random_choice(targets)\n", "score": -11.138188453071841, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.2029657363891602, -5.7220458984375e-06, -0.06876659393310547, -4.57763671875e-05, -3.814697265625e-05, 0.0, -0.09425163269042969, 0.0, -1.52587890625e-05, -0.0062732696533203125, -0.011327743530273438, -0.28609275817871094, -7.82012939453125e-05, -3.62396240234375e-05, 0.0, -0.26510024070739746, 0.0, -0.006209015846252441, 0.0, -0.17943188548088074, 0.0, -1.9073486328125e-06, -0.1388263702392578, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005705355433747172, -7.62939453125e-06, -0.03754234313964844, -1.4669313430786133, -7.62939453125e-06, -0.0001316070556640625, -0.0004978179931640625, 0.0, -0.6880860328674316, -1.33514404296875e-05, -0.006737709045410156, -9.5367431640625e-05, -6.103515625e-05, -3.814697265625e-06, -0.0042819976806640625, -7.62939453125e-06, -0.39902591705322266, 0.0, -0.14817428588867188, 0.0, -0.003757476806640625, -0.06258773803710938, -2.09808349609375e-05, -0.0065021514892578125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 93, 196, 21, 134, "player", "<EOS>", "add_effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "Secret", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if len(game.other_player.minions) > 0:\n            player.add_effect(Effect(TurnEnded(), ActionTag(Summon(\n                BlackSecret()), PlayerSelector())))\n", "score": -11.936841027491816, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.2029657363891602, -5.7220458984375e-06, -0.06876659393310547, -4.57763671875e-05, -3.814697265625e-05, 0.0, -0.09425163269042969, 0.0, -1.52587890625e-05, -0.0062732696533203125, -0.011327743530273438, -0.28609275817871094, -7.82012939453125e-05, -3.62396240234375e-05, 0.0, -0.26510024070739746, 0.0, -0.006209015846252441, 0.0, -0.17943188548088074, 0.0, -1.9073486328125e-06, -0.1388263702392578, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005705355433747172, -7.62939453125e-06, -0.03754234313964844, -0.37537384033203125, -0.0011692047119140625, -0.013220787048339844, 0.0, -0.45356178283691406, -3.814697265625e-06, -0.3179759979248047, 0.0, -0.20949935913085938, -0.0031290054321289062, -0.0013074874877929688, -0.03387451171875, 0.0, -0.002217531204223633, -0.00012969970703125, -9.5367431640625e-06, -0.018289566040039062, -7.62939453125e-06, -0.21529553830623627, -0.0019216537475585938, 0.0, -0.0038204193115234375, -0.002414703369140625, -0.2924346923828125, 0.0, -1.33514404296875e-05, -0.000255584716796875, -1.9073486328125e-06, -0.9817343354225159, -0.6571972370147705, -5.841255187988281e-06, -0.0007038116455078125, -7.62939453125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BlackSecret"}]}]}], "hole1": "add_effect"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "targets", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if player.<UNK>():\n            if len(game.other_player.minions) > 0:\n                mirror = game.random_choice(targets)\n", "score": -12.127222229290844, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.0324287414550781, -0.000553131103515625, -0.0052165985107421875, 0.0, -0.06762349605560303, 0.0, -0.05150270462036133, 0.0, -0.012574195861816406, -0.02567005157470703, -0.017055511474609375, -0.00028228759765625, -4.1961669921875e-05, -1.2438488006591797, -0.000213623046875, -0.00038909912109375, 0.0, -0.011415827088057995, 0.0, -6.67572021484375e-05, -0.011869430541992188, -0.017961502075195312, -0.3129711151123047, -1.9073486328125e-05, -4.00543212890625e-05, 0.0, -0.012220621109008789, 0.0, -0.004797577857971191, 0.0, -0.7194085717201233, 0.0, -1.9073486328125e-06, -0.13500404357910156, -5.340576171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0009945628698915243, -9.5367431640625e-06, -0.009106636047363281, -1.0546598434448242, -1.33514404296875e-05, -0.0001239776611328125, -0.0005016326904296875, 0.0, -0.7204633951187134, -1.52587890625e-05, -0.005509376525878906, -7.82012939453125e-05, -7.43865966796875e-05, -3.814697265625e-06, -0.002552032470703125, -9.5367431640625e-06, -0.3683891296386719, 0.0, -0.1466970443725586, 0.0, -0.00415802001953125, -0.07083320617675781, -2.288818359375e-05, -0.006142616271972656, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}, "args": [{"_type": "Name", "id": "targets"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 93, 196, 21, 134, "player", "<EOS>", "add_effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "Secret", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if len(game.other_player.minions) > 0:\n            player.add_effect(Effect(TurnEnded(), ActionTag(Summon(\n                BlackSecret()), PlayerSelector())))\n", "score": -12.144644753688105, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.8040949106216431, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.2029657363891602, -5.7220458984375e-06, -0.06876659393310547, -4.57763671875e-05, -3.814697265625e-05, 0.0, -0.09425163269042969, 0.0, -1.52587890625e-05, -0.0062732696533203125, -0.011327743530273438, -0.28609275817871094, -7.82012939453125e-05, -3.62396240234375e-05, 0.0, -0.26510024070739746, 0.0, -0.006209015846252441, 0.0, -0.17943188548088074, 0.0, -1.9073486328125e-06, -0.1388263702392578, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005705355433747172, -7.62939453125e-06, -0.03754234313964844, -0.37537384033203125, -0.0011692047119140625, -0.013220787048339844, 0.0, -0.45356178283691406, -3.814697265625e-06, -0.3179759979248047, 0.0, -0.20949935913085938, -0.0031290054321289062, -0.0013074874877929688, -0.03387451171875, 0.0, -0.002217531204223633, -0.00012969970703125, -9.5367431640625e-06, -0.018289566040039062, -7.62939453125e-06, -0.21529553830623627, -0.0019216537475585938, 0.0, -0.0038204193115234375, -0.002414703369140625, -0.2924346923828125, 0.0, -1.33514404296875e-05, -0.000255584716796875, -1.9073486328125e-06, -0.9817343354225159, -0.6571972370147705, -5.841255187988281e-06, -0.0007038116455078125, -7.62939453125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye an Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BlackSecret"}]}]}], "hole1": "add_effect"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 93, 196, 21, 134, "player", "<EOS>", "add_effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Add", "Card", "<EOS>", 237, 46, 139, "Secret", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if len(game.other_player.minions) > 0:\n            player.add_effect(Effect(TurnEnded(), ActionTag(AddCard(0),\n                HeroSelector())))\n", "score": -12.298375085520881, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.2029657363891602, -5.7220458984375e-06, -0.06876659393310547, -4.57763671875e-05, -3.814697265625e-05, 0.0, -0.09425163269042969, 0.0, -1.52587890625e-05, -0.0062732696533203125, -0.011327743530273438, -0.28609275817871094, -7.82012939453125e-05, -3.62396240234375e-05, 0.0, -0.26510024070739746, 0.0, -0.006209015846252441, 0.0, -0.17943188548088074, 0.0, -1.9073486328125e-06, -0.1388263702392578, -4.1961669921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005705355433747172, -7.62939453125e-06, -0.03754234313964844, -0.37537384033203125, -0.0011692047119140625, -0.013220787048339844, 0.0, -0.45356178283691406, -3.814697265625e-06, -0.3179759979248047, 0.0, -0.20949935913085938, -0.0031290054321289062, -0.0013074874877929688, -0.03387451171875, 0.0, -0.002217531204223633, -0.00012969970703125, -9.5367431640625e-06, -0.018289566040039062, -7.62939453125e-06, -0.21529553830623627, -0.0019216537475585938, 0.0, -0.0038204193115234375, -0.002414703369140625, -1.9396495819091797, -0.0002079010009765625, -5.7220458984375e-06, -7.2479248046875e-05, -0.2049398422241211, -5.7220458984375e-06, -0.012348650954663754, -1.704684109427035e-05, -0.13663768768310547, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "AddCard", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 0}]}]}], "hole1": "add_effect"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}, {"choice_history": [70, 148, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "<UNK>", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 93, 196, 21, 134, "player", "<EOS>", "add_effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "Secret", "<EOS>", "Player", "Selector", "<EOS>"], "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion, <UNK>):\n        if player.<UNK>():\n            if len(game.other_player.minions) > 0:\n                player.add_effect(Effect(TurnEnded(), ActionTag(Summon(\n                    BlackSecret()), PlayerSelector())))\n", "score": -13.74974546258533, "score_history": [-9.5367431640625e-06, -1.0620145797729492, -0.00044682412408292294, -0.3567372262477875, -0.006647829432040453, -0.0003420113935135305, -1.609325045137666e-05, -1.1920928244535389e-07, -0.10105133056640625, -0.001194000244140625, -0.0001354217529296875, -1.4305104514278355e-06, -5.376338231144473e-05, -0.596291184425354, -0.26566123962402344, -0.0412217378616333, 0.0, -3.635883331298828e-05, -5.006777428206988e-06, -0.4696401357650757, 0.0, -0.005326271057128906, 0.0, -0.00036394596099853516, 0.0, -0.0009975433349609375, -0.01355743408203125, -0.000888824462890625, -0.0014629364013671875, -6.866455078125e-05, -0.0013179779052734375, -0.0003833770751953125, -0.0001735687255859375, 0.0, -0.0022565126419067383, -7.62939453125e-06, -0.00041413275175727904, 0.0, -0.09534883499145508, 0.0, -0.1724853515625, 0.0, -1.52587890625e-05, -0.0001277923583984375, -7.62939453125e-05, -0.22020232677459717, -0.036797523498535156, -0.0003757476806640625, 0.0, -2.6702880859375e-05, 0.0, -0.0007677078247070312, -1.9073486328125e-06, -0.0011444091796875, 0.0, -0.007069587707519531, -4.57763671875e-05, -3.24249267578125e-05, -0.0037953853607177734, -1.9073486328125e-06, -0.0001583099365234375, -0.000194549560546875, -0.000804901123046875, -0.0001964569091796875, -0.0001697540283203125, 0.0, -7.62939453125e-06, -0.00031566619873046875, -1.9073486328125e-06, -5.91278076171875e-05, -0.0001373291015625, -8.392333984375e-05, -0.0013828277587890625, -6.4849853515625e-05, -0.0002346038818359375, -0.0022296905517578125, -0.0001506805419921875, -5.7220458984375e-06, -5.78165017941501e-05, -3.814697265625e-06, -0.0003226995177101344, 0.0, -0.033824920654296875, 0.0, -0.5867786407470703, 0.0, -5.7220458984375e-06, -0.000164031982421875, -0.00012969970703125, -0.2882838249206543, -0.03343963623046875, -0.00035858154296875, 0.0, -2.09808349609375e-05, 0.0, -0.0006866455078125, -1.9073486328125e-06, -0.0010852813720703125, 0.0, -0.0001468658447265625, -5.91278076171875e-05, -0.00214385986328125, 0.0, -0.0001010894775390625, -2.47955322265625e-05, -0.3267040252685547, -1.9073486328125e-05, -0.0008525848388671875, -3.814697265625e-06, -1.9073486328125e-05, -0.8255033493041992, -5.53131103515625e-05, -2.288818359375e-05, -0.4520130157470703, 0.0, -0.008543014526367188, -0.018642425537109375, -0.000370025634765625, -1.0324287414550781, -0.000553131103515625, -0.0052165985107421875, 0.0, -0.06762349605560303, 0.0, -0.05150270462036133, 0.0, -0.012574195861816406, -0.02567005157470703, -0.017055511474609375, -0.00028228759765625, -4.1961669921875e-05, -1.2438488006591797, -0.000213623046875, -0.00038909912109375, 0.0, -0.011415827088057995, 0.0, -6.67572021484375e-05, -0.011869430541992188, -0.017961502075195312, -0.3129711151123047, -1.9073486328125e-05, -4.00543212890625e-05, 0.0, -0.012220621109008789, 0.0, -0.004797577857971191, 0.0, -0.7194085717201233, 0.0, -1.9073486328125e-06, -0.13500404357910156, -5.340576171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0009945628698915243, -9.5367431640625e-06, -0.009106636047363281, -0.49763965606689453, -0.001682281494140625, -0.0042514801025390625, 0.0, -0.48402976989746094, -3.814697265625e-06, -0.3747749328613281, 0.0, -0.4131593704223633, -0.0026769638061523438, -0.0010128021240234375, -0.04015350341796875, 0.0, -0.0023467540740966797, -0.0001468658447265625, -5.7220458984375e-06, -0.015524864196777344, -7.62939453125e-06, -0.23333941400051117, -0.0018243789672851562, 0.0, -0.003116607666015625, -0.0020275115966796875, -0.28467369079589844, 0.0, -1.33514404296875e-05, -0.000301361083984375, -1.9073486328125e-06, -0.963242769241333, -0.6761000752449036, -5.841255187988281e-06, -0.0006999969482421875, -7.62939453125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Eye for Eye", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "EyeEye", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "If", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Summon", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "BlackSecret"}]}]}], "hole1": "add_effect"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "<UNK>"}]}}]}}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "Stealth", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "score": -1.9518279871844584, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -0.3761758804321289, -1.9073486328125e-06, -0.03446781635284424, -1.9073486328125e-06, -0.0005645751953125, -6.4849853515625e-05, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.003223419189453125, 0.0, -0.005859494209289551, 0.0, -0.000450011866632849, 0.0, -0.08456635475158691, -3.814697265625e-06, -2.86102294921875e-05, -0.010042190551757812, -3.814697265625e-06, -0.00038909912109375, 0.0, -0.049360036849975586, -1.9073486328125e-06, -0.0018968582153320312, -3.814697265625e-06, -1.1444091796875e-05, -0.06805419921875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.7523765563964844e-05, 0.0, -0.00097835052292794, -1.0728830375228426e-06, -0.33889251947402954, -1.7881377516459906e-06, -0.0002307891845703125, 0.0, -6.866455078125e-05, 0.0, -0.0060634613037109375, -4.76837158203125e-05, -0.0007076263427734375, -3.814697265625e-06, -0.00096893310546875, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.06676971912384033, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 0, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        player.draw()\n", "score": -2.1608915800753152, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -1.4454145431518555, -0.0003070831298828125, -0.0012493133544921875, -1.71661376953125e-05, -6.103515625e-05, -1.9073486328125e-06, -0.016895294189453125, -1.9073486328125e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.5259013175964355, -4.088878631591797e-05, -6.103515625e-05, -0.008093833923339844, -1.9073486328125e-06, -0.002086639404296875, -3.814697265625e-06, -0.040767669677734375, -1.52587890625e-05, -3.4332275390625e-05, -9.5367431640625e-06, -0.0021038055419921875, -1.9073486328125e-06, -0.0015583038330078125, -7.62939453125e-06, -0.019423842430114746, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Name", "id": "self"}], "hole1": "die"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -3.0922625503459926, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -0.3761758804321289, -1.9073486328125e-06, -0.03446781635284424, -1.9073486328125e-06, -0.0005645751953125, -6.4849853515625e-05, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.003223419189453125, 0.0, -0.005859494209289551, 0.0, -0.000450011866632849, 0.0, -0.08456635475158691, -3.814697265625e-06, -2.86102294921875e-05, -0.010042190551757812, -3.814697265625e-06, -0.00038909912109375, 0.0, -0.049360036849975586, -1.9073486328125e-06, -0.0018968582153320312, -3.814697265625e-06, -1.1444091796875e-05, -0.06805419921875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.7523765563964844e-05, 0.0, -0.00097835052292794, -1.0728830375228426e-06, -1.4746311902999878, 0.0, -0.0003509521484375, 0.0, -3.24249267578125e-05, 0.0, -0.009662628173828125, -0.0001010894775390625, -0.0006656646728515625, -3.814697265625e-06, -0.0007648468017578125, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.06797707080841064, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 46, 139, "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.draw()\n", "score": -3.153240251034788, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -1.4454145431518555, -0.0003070831298828125, -0.0012493133544921875, -1.71661376953125e-05, -6.103515625e-05, -1.9073486328125e-06, -0.016895294189453125, -1.9073486328125e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -1.381213665008545, -3.814697265625e-06, -9.5367431640625e-06, -0.1525421142578125, -1.33514404296875e-05, -0.007912755012512207, 0.0, -0.002197265625, -3.814697265625e-06, -0.000331878662109375, 0.0, -0.002887725830078125, -0.0001621246337890625, -0.0006847381591796875, -3.814697265625e-06, -0.000339508056640625, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.04413723945617676, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "Stealth", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "score": -3.3301282693565213, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -1.825204849243164, -1.1444091796875e-05, -0.023616790771484375, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.008188247680664062, 0.0, -0.006344199180603027, 0.0, -0.006133615504950285, 0.0, -8.0108642578125e-05, -0.009552001953125, -1.9073486328125e-06, -0.000701904296875, 0.0, -0.27147388458251953, 0.0, -0.02013552188873291, -3.933906555175781e-06, -7.62939453125e-06, -0.057231903076171875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.1801719665527344e-05, 0.0, -0.0009343623532913625, -1.311301275563892e-06, -0.33270761370658875, -2.0265558760002023e-06, -0.0002574920654296875, 0.0, -8.392333984375e-05, 0.0, -0.008098602294921875, -5.53131103515625e-05, -0.000606536865234375, -5.7220458984375e-06, -0.0008487701416015625, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.0788576602935791, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 0, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        player.draw()\n", "score": -3.8280951633640186, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -1.4454145431518555, -0.0003070831298828125, -0.0012493133544921875, -1.71661376953125e-05, -6.103515625e-05, -1.9073486328125e-06, -0.016895294189453125, -1.9073486328125e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -2.037473201751709, -2.622604142743512e-06, -3.814697265625e-06, -0.08445167541503906, -0.008779525756835938, -0.009855737909674644, -0.0009749406017363071, -0.03804302215576172, -1.52587890625e-05, -0.0008449554443359375, -2.47955322265625e-05, -0.06791496276855469, -3.814697265625e-06, -0.000293731689453125, -3.814697265625e-06, -0.018631339073181152, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "append", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(game.other_player.hero)\n", "score": -4.236307710673131, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -2.234323501586914, -5.7220458984375e-06, -1.1444091796875e-05, -4.57763671875e-05, -9.5367431640625e-06, -0.08808932453393936, -6.103515625e-05, -0.06944084167480469, -6.866455078125e-05, -5.7220458984375e-06, 0.0, -0.1628437042236328, 0.0, -0.0007628196035511792, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -2.288818359375e-05, -9.918212890625e-05, -1.9073486328125e-05, -5.340576171875e-05, 0.0, -0.007963180541992188, 0.0, -0.03459179401397705, 0.0, -0.0005978255649097264, -1.1920928244535389e-07, -0.1819702535867691, -1.9073486328125e-06, -0.03520488739013672, -9.34600830078125e-05, -0.0016193389892578125, -5.7220458984375e-06, -0.002859354019165039, -1.9073486328125e-06, -0.28707218170166016, -1.1920928244535389e-07, 0.0, -0.00031280517578125, -4.38690185546875e-05, -0.0007724761962890625, -1.9073486328125e-06, -0.0030231475830078125, 0.0, -0.010381698608398438, 0.0, -0.5620103478431702, 0.0, -0.45448994636535645, -3.576278118089249e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}], "hole1": "append"}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "range", "<EOS>", "random_choice", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "Stealth", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in range.random_choice(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "score": -4.258256253815198, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -1.215876579284668, 0.0, -0.6852781772613525, 0.0, -0.05249786376953125, -0.36583518981933594, -1.52587890625e-05, -0.001064300537109375, 0.0, -0.000629425048828125, 0.0, -0.03057873249053955, 0.0, -0.0010346868075430393, -1.1920928244535389e-07, -0.4534651041030884, -3.814697265625e-06, -2.47955322265625e-05, -0.008060455322265625, -3.814697265625e-06, -0.0003757476806640625, 0.0, -0.05399274826049805, -2.0265579223632812e-06, -0.0021065473556518555, -3.933906555175781e-06, -9.5367431640625e-06, -0.06601905822753906, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.5616416931152344e-05, 0.0, -0.0009672640589997172, -1.0728830375228426e-06, -0.3374212384223938, -1.9073468138230965e-06, -0.000247955322265625, 0.0, -7.2479248046875e-05, 0.0, -0.0062847137451171875, -5.14984130859375e-05, -0.0007476806640625, -3.814697265625e-06, -0.0009860992431640625, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.07274937629699707, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 0, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "range"}, "attr": "random_choice"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "append", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(game.current_player.hero)\n", "score": -4.455162227417745, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -2.234323501586914, -5.7220458984375e-06, -1.1444091796875e-05, -4.57763671875e-05, -9.5367431640625e-06, -0.08808932453393936, -6.103515625e-05, -0.06944084167480469, -6.866455078125e-05, -5.7220458984375e-06, 0.0, -0.1628437042236328, 0.0, -0.0007628196035511792, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -2.288818359375e-05, -9.918212890625e-05, -1.9073486328125e-05, -5.340576171875e-05, 0.0, -0.007963180541992188, 0.0, -0.03459179401397705, 0.0, -0.0005978255649097264, -1.1920928244535389e-07, -0.1819702535867691, -1.9073486328125e-06, -0.03520488739013672, -9.34600830078125e-05, -0.0016193389892578125, -5.7220458984375e-06, -0.002859354019165039, -1.9073486328125e-06, -0.28707218170166016, -1.1920928244535389e-07, 0.0, -0.00031280517578125, -4.38690185546875e-05, -0.0007724761962890625, -1.9073486328125e-06, -0.0030231475830078125, 0.0, -0.010381698608398438, 0.0, -0.8518443703651428, -3.576278118089249e-07, -0.3835082948207855, -2.1457672119140625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "hero"}], "hole1": "append"}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -4.504172192974977, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -1.825204849243164, -1.1444091796875e-05, -0.023616790771484375, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.008188247680664062, 0.0, -0.006344199180603027, 0.0, -0.006133615504950285, 0.0, -8.0108642578125e-05, -0.009552001953125, -1.9073486328125e-06, -0.000701904296875, 0.0, -0.27147388458251953, 0.0, -0.02013552188873291, -3.933906555175781e-06, -7.62939453125e-06, -0.057231903076171875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.1801719665527344e-05, 0.0, -0.0009343623532913625, -1.311301275563892e-06, -1.49758780002594, 0.0, -0.000408172607421875, 0.0, -3.814697265625e-05, 0.0, -0.011797904968261719, -0.0001201629638671875, -0.000640869140625, -5.7220458984375e-06, -0.0006771087646484375, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.08429360389709473, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "lose", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "score": -4.537574692716532, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -0.3761758804321289, -1.9073486328125e-06, -0.03446781635284424, -1.9073486328125e-06, -0.0005645751953125, -6.4849853515625e-05, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.003223419189453125, 0.0, -0.005859494209289551, 0.0, -0.000450011866632849, 0.0, -0.08456635475158691, -3.814697265625e-06, -2.86102294921875e-05, -0.010042190551757812, -3.814697265625e-06, -0.00038909912109375, 0.0, -0.049360036849975586, -1.9073486328125e-06, -0.0018968582153320312, -3.814697265625e-06, -1.1444091796875e-05, -0.06805419921875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.7523765563964844e-05, 0.0, -0.00097835052292794, -1.0728830375228426e-06, -2.91032075881958, -1.7881377516459906e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000133514404296875, 0.0, -0.0053119659423828125, -0.000614166259765625, -0.0028533935546875, -1.9073486328125e-06, -0.000843048095703125, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.07940793037414551, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 0, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "Stealth", "Stealth", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "Stealth", "Stealth", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            <UNK> = StealthStealth()\n            <UNK>.summon(player, game, len(player.minions))\n        for i in range(0, 2):\n            <UNK> = StealthStealth()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -4.555918525643293, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -2.683579206466675, 0.0, -0.00196075439453125, -0.000705718994140625, -0.000171661376953125, 0.0, -0.0001093149185180664, -5.7220458984375e-06, -2.09808349609375e-05, -0.00026702880859375, -3.814697265625e-06, -0.004384544212371111, -2.47955322265625e-05, -0.00040435791015625, -2.288818359375e-05, -0.03192605823278427, -2.0265579223632812e-06, -0.07980155944824219, -4.38690185546875e-05, -0.000766754150390625, -2.47955322265625e-05, -0.000274658203125, -4.00543212890625e-05, -0.008014202117919922, -2.3841855067985307e-07, -0.2031259536743164, -0.000263214111328125, -0.21824245154857635, -0.03778029978275299, -0.008309552446007729, -4.38690185546875e-05, -7.05718994140625e-05, -0.0209808349609375, -5.7220458984375e-06, -8.928770694183186e-05, -1.311301275563892e-06, -0.0145186185836792, -1.9073486328125e-06, -0.0009326934814453125, -0.00116729736328125, -1.9073486328125e-06, -7.867813110351562e-06, -9.5367431640625e-06, -0.0004100799560546875, -1.9073486328125e-06, -0.0007916688919067383, 0.0, -0.0009174346923828125, -3.62396240234375e-05, -0.000324249267578125, 0.0, -9.5367431640625e-05, -3.814697265625e-06, -7.82012939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -9.5367431640625e-06, 0.0, -7.259845733642578e-05, -3.814697265625e-06, -0.003665924072265625, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0038167238235473633, -1.1920928244535389e-07, -0.02024555206298828, -0.0020275115966796875, -7.62939453125e-06, 0.0, -0.0004405975341796875, -2.1457672119140625e-06, -6.866455078125e-05, -0.00012969970703125, -1.1444091796875e-05, -0.00046626306721009314, -0.00011646747589111328, -0.01018524169921875, -3.0517578125e-05, -0.06995227187871933, 0.0, -0.12628746032714844, -0.00035858154296875, -0.0015583038330078125, -0.000301361083984375, -7.05718994140625e-05, -3.814697265625e-06, -0.0006164312362670898, -1.1920928244535389e-07, -0.039542198181152344, -0.0002002716064453125, -0.29402586817741394, -0.03328953683376312, -0.007403683383017778, -4.9591064453125e-05, -8.0108642578125e-05, -0.01798248291015625, -3.814697265625e-06, -6.413456139853224e-05, -8.344646857949556e-07, -0.017184138298034668, -1.9073486328125e-06, -0.001071929931640625, -0.0011463165283203125, -1.9073486328125e-06, -7.867813110351562e-06, -9.5367431640625e-06, -0.0003948211669921875, -1.9073486328125e-06, -0.0007840394973754883, 0.0, -0.0009260177612304688, -4.1961669921875e-05, -0.0003528594970703125, 0.0, -9.34600830078125e-05, -3.814697265625e-06, -8.7738037109375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -1.1444091796875e-05, 0.0, -7.450580596923828e-05, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "StealthStealth"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "StealthStealth"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "Stealth", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.<UNK>()\n", "score": -4.6289217314624125, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -0.3761758804321289, -1.9073486328125e-06, -0.03446781635284424, -1.9073486328125e-06, -0.0005645751953125, -6.4849853515625e-05, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.003223419189453125, 0.0, -0.005859494209289551, 0.0, -0.000450011866632849, 0.0, -0.08456635475158691, -3.814697265625e-06, -2.86102294921875e-05, -0.010042190551757812, -3.814697265625e-06, -0.00038909912109375, 0.0, -0.049360036849975586, -1.9073486328125e-06, -0.0018968582153320312, -3.814697265625e-06, -1.1444091796875e-05, -0.06805419921875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.7523765563964844e-05, 0.0, -0.00097835052292794, -1.0728830375228426e-06, -0.33889251947402954, -1.7881377516459906e-06, -0.0002307891845703125, 0.0, -6.866455078125e-05, 0.0, -0.0060634613037109375, -4.76837158203125e-05, -0.0007076263427734375, -3.814697265625e-06, -0.00096893310546875, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.743849754333496, -1.5735626220703125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 0, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "iter": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n", "score": -4.823015243078821, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -2.234323501586914, -5.7220458984375e-06, -1.1444091796875e-05, -4.57763671875e-05, -9.5367431640625e-06, -0.08808932453393936, -6.103515625e-05, -0.06944084167480469, -6.866455078125e-05, -5.7220458984375e-06, 0.0, -0.1628437042236328, 0.0, -0.0007628196035511792, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -2.288818359375e-05, -9.918212890625e-05, -1.9073486328125e-05, -5.340576171875e-05, 0.0, -0.007963180541992188, 0.0, -0.03459179401397705, 0.0, -0.0005978255649097264, -1.1920928244535389e-07, -0.1819702535867691, -1.9073486328125e-06, -0.03520488739013672, -9.34600830078125e-05, -0.0016193389892578125, -5.7220458984375e-06, -0.002859354019165039, -1.9073486328125e-06, -1.4207077026367188, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, -7.62939453125e-06, -0.014172554016113281, -1.9073486328125e-06, -0.0011920928955078125, 0.0, -0.003925323486328125, 0.0, -0.4282487630844116, -7.152555099310121e-07, -0.03643953800201416, -3.24249267578125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "current_player"}, "attr": "minions"}], "hole1": "extend"}], "hole4": "player"}}, {"choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "append", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "Stealth", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(game.other_player.Stealth)\n", "score": -5.045983165766572, "score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -2.234323501586914, -5.7220458984375e-06, -1.1444091796875e-05, -4.57763671875e-05, -9.5367431640625e-06, -0.08808932453393936, -6.103515625e-05, -0.06944084167480469, -6.866455078125e-05, -5.7220458984375e-06, 0.0, -0.1628437042236328, 0.0, -0.0007628196035511792, -1.9073486328125e-06, -0.000606536865234375, -1.9073486328125e-06, -2.288818359375e-05, -9.918212890625e-05, -1.9073486328125e-05, -5.340576171875e-05, 0.0, -0.007963180541992188, 0.0, -0.03459179401397705, 0.0, -0.0005978255649097264, -1.1920928244535389e-07, -0.1819702535867691, -1.9073486328125e-06, -0.03520488739013672, -9.34600830078125e-05, -0.0016193389892578125, -5.7220458984375e-06, -0.002859354019165039, -1.9073486328125e-06, -0.28707218170166016, -1.1920928244535389e-07, 0.0, -0.00031280517578125, -4.38690185546875e-05, -0.0007724761962890625, -1.9073486328125e-06, -0.0030231475830078125, 0.0, -0.010381698608398438, 0.0, -0.5620103478431702, 0.0, -1.2641657590866089, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Flare", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Flare", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "Stealth"}], "hole1": "append"}], "hole4": "player"}}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 175, "Character", "Attack", "<EOS>", 237, 63, 205, "Is", "Hero", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.776984040096437, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -2.017040252685547, -0.25742489099502563, -0.02072465419769287, -4.57763671875e-05, -0.00362396240234375, -0.0720224380493164, -0.000171661376953125, -0.0007833846611902118, -0.06134061887860298, -1.9073486328125e-05, -5.7220458984375e-06, -0.0054645538330078125, -0.008525848388671875, -0.022389531135559082, -0.0002689361572265625, 0.0, -0.15050697326660156, -0.011182785034179688, -0.002085343236103654, 0.0, -0.0012331008911132812, -1.537799835205078e-05, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "CharacterAttack", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsHero"}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -3.883996710879188, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -1.0143004655838013, -4.184173667454161e-05, -0.1350398063659668, -1.3589857189799659e-05, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeAttack(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -4.03224105652626, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.8798666000366211, -8.392333984375e-05, -0.05176746845245361, -2.09808349609375e-05, -0.0677034854888916, -0.000701904296875, -1.9073486328125e-06, -0.0001773834228515625, -0.1809225082397461, -0.00091552734375, -0.03098154067993164, -9.059905096364673e-06, -0.0020542144775390625, -0.0057277679443359375, 0.0, -0.020993249490857124, -0.46143150329589844, -1.3589840818895027e-05, -0.004619598388671875, -0.06899166107177734, -1.047027587890625, -3.957684384658933e-05, -0.13763633370399475, -1.3709065569855738e-05, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Minion", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), MinionSelector()))])\n", "score": -4.531601270920305, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -0.7260361909866333, -0.0028552755247801542, -2.3841855067985307e-07, -1.0681105852127075, 0.0, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "MinionSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Minion", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeAttack(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), MinionSelector()))])\n", "score": -4.608352229727984, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.8798666000366211, -8.392333984375e-05, -0.05176746845245361, -2.09808349609375e-05, -0.0677034854888916, -0.000701904296875, -1.9073486328125e-06, -0.0001773834228515625, -0.1809225082397461, -0.00091552734375, -0.03098154067993164, -9.059905096364673e-06, -0.0020542144775390625, -0.0057277679443359375, 0.0, -0.020993249490857124, -0.46143150329589844, -1.3589840818895027e-05, -0.004619598388671875, -0.06899166107177734, -0.706085205078125, -0.0030072976369410753, -2.3841855067985307e-07, -1.051737666130066, 0.0, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "MinionSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector())), Effect(TurnEnded(),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.649747746700456, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -3.567859649658203, -0.0042724609375, -0.0013016313314437866, -1.9073486328125e-06, -0.002748473547399044, -7.867813110351562e-06, -5.7220458984375e-06, 0.0, -0.000286102294921875, -0.000835418701171875, -0.037813425064086914, -6.115436553955078e-05, -0.003894805908203125, -0.0865945816040039, 0.0, -0.12976579368114471, -0.023714423179626465, 0.0, -0.0023670196533203125, -0.004695892333984375, -0.0019031761912629008, -8.225440979003906e-05, -1.9073486328125e-06, -0.012472152709960938, -0.0006103515625, -0.002132896799594164, -1.9073486328125e-06, -0.00046443939208984375, -1.1682510375976562e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 52, 180, "Durability", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(Durability())]), SelfSelector\n            ())), Effect(TurnEnded(), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "score": -4.724422399353358, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -3.116973876953125, -0.0001964569091796875, -0.001358986715786159, -0.001750991796143353, -0.364605575799942, -0.00011491775512695312, -8.20159912109375e-05, -1.9073486328125e-06, -0.0002956390380859375, -0.009752273559570312, -0.034020185470581055, -4.0531158447265625e-06, -0.011411666870117188, -0.007892608642578125, 0.0, -0.12092515081167221, -0.008625268936157227, 0.0, -0.0015583038330078125, -0.008640289306640625, -0.002344965934753418, -8.356571197509766e-05, -1.9073486328125e-06, -0.013579368591308594, -0.0005550384521484375, -0.0016342407325282693, -1.9073486328125e-06, -0.0005769729614257812, -9.775161743164062e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template25", "hole0": "Durability"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), SelfSelector()))])\n", "score": -4.7707403509660935, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -0.7260361909866333, -0.0028552755247801542, -2.3841855067985307e-07, -1.3072301149368286, -1.752376374497544e-05, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 175, "Turn", "Ended", "<EOS>", 237, 63, 205, "Is", "Hero", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(TurnEnded(IsHero()), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.84786009327982, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -2.017040252685547, -1.8488421440124512, -0.02646481990814209, -1.9073486328125e-06, -0.008541107177734375, -0.06958866119384766, -0.0017566680908203125, -0.012502807192504406, -0.4583882689476013, -2.2649763195659034e-05, -1.9073486328125e-06, -0.0030460357666015625, -0.02768993377685547, -0.027885794639587402, -0.0005702972412109375, 0.0, -0.1680765151977539, -0.03144073486328125, -0.002781071700155735, 0.0, -0.0010859963949769735, -2.1457672119140625e-05, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsHero"}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeAttack(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), SelfSelector()))])\n", "score": -4.8561344601033625, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.8798666000366211, -8.392333984375e-05, -0.05176746845245361, -2.09808349609375e-05, -0.0677034854888916, -0.000701904296875, -1.9073486328125e-06, -0.0001773834228515625, -0.1809225082397461, -0.00091552734375, -0.03098154067993164, -9.059905096364673e-06, -0.0020542144775390625, -0.0057277679443359375, 0.0, -0.020993249490857124, -0.46143150329589844, -1.3589840818895027e-05, -0.004619598388671875, -0.06899166107177734, -0.706085205078125, -0.0030072976369410753, -2.3841855067985307e-07, -1.2995022535324097, -1.561641511216294e-05, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), HeroSelector()))])\n", "score": -5.024025997311895, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -0.7260361909866333, -0.0028552755247801542, -2.3841855067985307e-07, -1.5604926347732544, -4.243841249262914e-05, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "HeroSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeAttack(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), HeroSelector()))])\n", "score": -5.137444779896526, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.8798666000366211, -8.392333984375e-05, -0.05176746845245361, -2.09808349609375e-05, -0.0677034854888916, -0.000701904296875, -1.9073486328125e-06, -0.0001773834228515625, -0.1809225082397461, -0.00091552734375, -0.03098154067993164, -9.059905096364673e-06, -0.0020542144775390625, -0.0057277679443359375, 0.0, -0.020993249490857124, -0.46143150329589844, -1.3589840818895027e-05, -0.004619598388671875, -0.06899166107177734, -0.706085205078125, -0.0030072976369410753, -2.3841855067985307e-07, -1.5807865858078003, -4.339207225712016e-05, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "HeroSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(Minion(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -5.146104659554474, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -1.5862751007080078, -0.020563125610351562, -0.12609195709228516, -0.8277484178543091, -0.0004228745528962463, -0.4667251706123352, -1.2755393072438892e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "Minion"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Selector", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSelector(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -5.186735228753065, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -2.711677074432373, 0.0, -0.03912925720214844, -0.12139034271240234, -0.0855797529220581, -3.57623903255444e-05, -0.1106400191783905, -1.7881393432617188e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Weapon", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "score": -5.345432600266008, "score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -0.7260361909866333, -0.0028552755247801542, -2.3841855067985307e-07, -1.881913185119629, -2.872943878173828e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Gorehowl", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7}], "hole3": "create_weapon", "hole1": "WeaponCard", "hole0": "Gorehowl", "hole6": [{"_type": "Template30", "hole0": "Weapon", "hole3": [{"_type": "Template20", "hole0": "MinionSummoned", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole0": "IncreaseDurability", "hole3": "WeaponSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Give", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}]}], "hole2": 1, "hole1": 7}], "hole4": "player"}}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -0.34868773470315517, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -0.021944046020507812, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -0.00875389389693737, -1.9073486328125e-06, -0.0002231597900390625, -9.5367431640625e-06, -0.00017750263214111328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -1.8112784289614794, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -1.6924750804901123, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.4332275390625e-05, 0.0, -2.300739288330078e-05, 0.0, -7.2479248046875e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -3.814697265625e-06, -0.00023651123046875, -6.866455078125e-05, -0.0011701583862304688, 0.0, -7.11679458618164e-05, 0.0, -1.8477303456165828e-05, 0.0, -7.62939453125e-06, -0.013790130615234375, -5.14984130859375e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.3496279027312994e-05, 0.0, -0.008802531287074089, -1.9073486328125e-06, -0.000225067138671875, -9.5367431640625e-06, -0.00017750263214111328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -2.794186284642244, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -2.5011215209960938, -2.86102294921875e-05, -1.9073486328125e-06, -1.0728830375228426e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011394500732421875, -0.000152587890625, -9.34600830078125e-05, -2.300739288330078e-05, -0.00271524116396904, -1.71661376953125e-05, 0.0, -0.00022192797041498125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9550323486328125e-05, -1.9073486328125e-06, -0.1466156244277954, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -3.62396240234375e-05, 0.0, -0.000293731689453125, -2.47955322265625e-05, -9.5367431640625e-06, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0007649660110473633, -1.52587890625e-05, -0.06216621398925781, 0.0, -3.814697265625e-06, 0.0, -0.004238247871398926, 0.0, -1.1444091796875e-05, -0.053905487060546875, -7.62939453125e-05, -1.7881393432617188e-06, 0.0, -7.251763599924743e-05, 0.0, -0.008051272481679916, -1.9073486328125e-06, -0.000202178955078125, -7.62939453125e-06, -0.00010883808135986328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -4.153509096376858, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -3.8358192443847656, -0.000125885009765625, -1.7881418443721486e-06, -1.1920928244535389e-07, -6.377699901349843e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -4.613801684504317, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -4.488933086395264, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -2.47955322265625e-05, 0.0, -2.300739288330078e-05, 0.0, -6.67572021484375e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.0002384185791015625, -6.866455078125e-05, -0.0011692047119140625, 0.0, -7.30752944946289e-05, 0.0, -1.9788581994362175e-05, 0.0, -5.7220458984375e-06, -0.019914627075195312, -5.14984130859375e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.4092543753795326e-05, 0.0, -0.00875377468764782, -1.9073486328125e-06, -0.00022125244140625, -9.5367431640625e-06, -0.00017750263214111328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -5.208865933375243, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -2.5011215209960938, -2.86102294921875e-05, -1.9073486328125e-06, -1.0728830375228426e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011394500732421875, -0.000152587890625, -9.34600830078125e-05, -2.300739288330078e-05, -0.00271524116396904, -1.71661376953125e-05, 0.0, -0.00022192797041498125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9550323486328125e-05, -1.9073486328125e-06, -2.5866808891296387, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -5.340576171875e-05, 0.0, -0.000263214111328125, -2.288818359375e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0015717744827270508, -1.1444091796875e-05, -0.04469585418701172, 0.0, -5.7220458984375e-06, 0.0, -0.0029355287551879883, 0.0, -1.1444091796875e-05, -0.046665191650390625, -7.62939453125e-05, -1.7881393432617188e-06, 0.0, -7.168448064476252e-05, 0.0, -0.007876870222389698, -1.9073486328125e-06, -0.0002079010009765625, -7.62939453125e-06, -0.00010883808135986328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.686344835056147, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -2.5011215209960938, -2.86102294921875e-05, -1.9073486328125e-06, -1.0728830375228426e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011394500732421875, -0.000152587890625, -9.34600830078125e-05, -2.300739288330078e-05, -0.00271524116396904, -1.71661376953125e-05, 0.0, -0.00022192797041498125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9550323486328125e-05, -1.9073486328125e-06, -0.1466156244277954, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -3.62396240234375e-05, 0.0, -0.000293731689453125, -2.47955322265625e-05, -9.5367431640625e-06, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0007649660110473633, -1.52587890625e-05, -0.06216621398925781, 0.0, -3.814697265625e-06, 0.0, -0.004238247871398926, 0.0, -1.1444091796875e-05, -2.954435348510742, -4.00543212890625e-05, -1.9073485191256623e-06, -1.1920928244535389e-07, -0.00011094141518697143, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.DREAM, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -5.940372279896444, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -2.5011215209960938, -2.86102294921875e-05, -1.9073486328125e-06, -1.0728830375228426e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011394500732421875, -0.000152587890625, -9.34600830078125e-05, -2.300739288330078e-05, -0.00271524116396904, -1.71661376953125e-05, 0.0, -0.00022192797041498125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9550323486328125e-05, -1.9073486328125e-06, -3.3101067543029785, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, 0.0, -0.0002536773681640625, -2.47955322265625e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0012799501419067383, -1.1444091796875e-05, -0.049945831298828125, 0.0, -5.7220458984375e-06, 0.0, -0.0032368898391723633, 0.0, -1.1444091796875e-05, -0.0495147705078125, -7.62939453125e-05, -1.7881393432617188e-06, 0.0, -7.2399532655254e-05, 0.0, -0.007860895246267319, -1.9073486328125e-06, -0.00020599365234375, -7.62939453125e-06, -0.00010883808135986328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DREAM"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -6.001639774236871, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -2.5011215209960938, -2.86102294921875e-05, -1.9073486328125e-06, -1.0728830375228426e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011394500732421875, -0.000152587890625, -9.34600830078125e-05, -2.300739288330078e-05, -0.00271524116396904, -1.71661376953125e-05, 0.0, -0.00022192797041498125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9550323486328125e-05, -1.9073486328125e-06, -0.1466156244277954, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -3.62396240234375e-05, 0.0, -0.000293731689453125, -2.47955322265625e-05, -9.5367431640625e-06, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0007649660110473633, -1.52587890625e-05, -3.079751968383789, 0.0, -1.9073486328125e-06, 0.0, -0.0016957521438598633, 0.0, -1.33514404296875e-05, -0.2479095458984375, -0.000141143798828125, -1.7881393432617188e-06, 0.0, -6.679774378426373e-05, 0.0, -0.006386870518326759, -1.9073486328125e-06, -0.0001964569091796875, -7.62939453125e-06, -0.00012600421905517578, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.086866700695957, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -1.6924750804901123, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.4332275390625e-05, 0.0, -2.300739288330078e-05, 0.0, -7.2479248046875e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -3.814697265625e-06, -0.00023651123046875, -6.866455078125e-05, -0.0011701583862304688, 0.0, -7.11679458618164e-05, 0.0, -1.8477303456165828e-05, 0.0, -7.62939453125e-06, -4.298473358154297, -0.00012969970703125, -1.7881418443721486e-06, -1.1920928244535389e-07, -6.879167631268501e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -6.188326444725128, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -6.063989162445068, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -4.1961669921875e-05, 0.0, -2.300739288330078e-05, 0.0, -7.43865966796875e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.0002346038818359375, -6.866455078125e-05, -0.001178741455078125, 0.0, -7.486343383789062e-05, 0.0, -2.038461752817966e-05, 0.0, -7.62939453125e-06, -0.019365310668945312, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -0.008738873526453972, -1.9073486328125e-06, -0.00022125244140625, -9.5367431640625e-06, -0.00017750263214111328, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, windfury=True)\n", "score": -6.238096801812382, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -0.021944046020507812, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -5.8978986740112305, 0.0, -0.0006084442138671875, -3.814697265625e-06, -6.413459777832031e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, taunt=True)\n", "score": -6.510053364804655, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -0.021944046020507812, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -6.170040130615234, 0.0, -0.000446319580078125, -1.9073486328125e-06, -3.945827120332979e-05, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('HoundHound', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -6.706466533617451, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -6.315874099731445, -0.007847709581255913, -7.62939453125e-06, -1.9073486328125e-06, -6.99758529663086e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.838538395939395e-05, -1.9073486328125e-06, -0.2577533721923828, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -4.1961669921875e-05, 0.0, -2.491474151611328e-05, 0.0, -6.4849853515625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.0002231597900390625, -6.866455078125e-05, -0.001239776611328125, 0.0, -7.295608520507812e-05, 0.0, -1.9311753931106068e-05, 0.0, -5.7220458984375e-06, -0.021753311157226562, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.337737532798201e-05, 0.0, -0.008757589384913445, -1.9073486328125e-06, -0.00022125244140625, -9.5367431640625e-06, -0.00017940998077392578, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "HoundHound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "divine_shield", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, divine_shield=True)\n", "score": -7.025219647462102, "score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -0.021944046020507812, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -6.685075759887695, 0.0, -0.000492095947265625, -1.9073486328125e-06, -0.00013005733489990234, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Hound", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 1}], "hole4": "player"}}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7),\n            CharacterSelector(players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -1.346403389831977, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -0.5396714210510254, -2.50339189733495e-06, -6.473017856478691e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -4.768370445162873e-07, -0.04044473171234131, -0.002718210220336914, -0.6824966669082642, -0.00012600158515851945, -0.000396728515625, -2.288818359375e-05, 0.0, -0.006774455308914185, -0.000202178955078125, -0.010929303243756294, -0.0001068115234375, -1.71661376953125e-05, -0.003253936767578125, -0.000324249267578125, -1.9073486328125e-06, -0.0025408267974853516, -1.9073486328125e-06, -0.000186920166015625, -8.20159912109375e-05, -0.021242141723632812, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -9.5367431640625e-06, -0.014196395874023438, 0.0, -0.001949310302734375, -1.33514404296875e-05, -0.004016876220703125, -5.125999450683594e-05, 0.0, -1.4781950994802173e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.09808349609375e-05, -0.012234687805175781, -3.4332275390625e-05, -0.00021731853485107422, -2.3841855067985307e-07, -7.87973403930664e-05, -1.3708974620385561e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "4", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(4(7), CharacterSelector(\n            players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -1.5965439681579312, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -0.5396714210510254, -2.50339189733495e-06, -6.473017856478691e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -4.768370445162873e-07, -0.04044473171234131, -0.002718210220336914, -0.8645687699317932, -0.0314791202545166, -0.017889022827148438, -0.0069103240966796875, -1.9073486328125e-06, -0.003376191481947899, -0.00013935565948486328, -0.023846635594964027, -5.7220458984375e-05, -2.288818359375e-05, -0.0040798187255859375, -0.000408172607421875, -1.9073486328125e-06, -0.0032846927642822266, -1.9073486328125e-06, -0.000213623046875, -8.58306884765625e-05, -0.01971435546875, -2.09808349609375e-05, 0.0, -6.29425048828125e-05, -9.5367431640625e-06, -0.016542434692382812, 0.0, -0.0018138885498046875, -1.33514404296875e-05, -0.00420379638671875, -5.328655242919922e-05, 0.0, -1.4901160284352954e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.09808349609375e-05, -0.012601852416992188, -3.4332275390625e-05, -0.00021541118621826172, -2.3841855067985307e-07, -7.87973403930664e-05, -1.3708974620385561e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "4", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "4", "<EOS>", "Minion", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(4), MinionSelector(\n            Null, EnemyPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -2.53096676579635, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -0.3766867518424988, -1.537799835205078e-05, -0.05176854133605957, 0.0, 0.0, -0.009901046752929688, -0.0063381195068359375, -0.0002002716064453125, -0.0001392364501953125, -6.19888032815652e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.024477005004882812, -1.71661376953125e-05, 0.0, -0.0010318756103515625, -3.814697265625e-06, -0.25245869159698486, -0.0009808540344238281, -3.933898824470816e-06, -6.4373016357421875e-06, 0.0, -0.0003873109817504883, 0.0, -1.1444091796875e-05, -0.007945060729980469, -4.9591064453125e-05, -0.00022304058074951172, -1.1920928244535389e-07, -6.377696263371035e-05, -7.629365427419543e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole4": [{"_type": "Num", "n": 4}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "4", "<EOS>", "Minion", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(4), MinionSelector(\n            Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -3.787401206425514, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -0.3766867518424988, -1.537799835205078e-05, -0.05176854133605957, 0.0, 0.0, -0.009901046752929688, -0.0063381195068359375, -0.0002002716064453125, -0.0001392364501953125, -6.19888032815652e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.024477005004882812, -1.71661376953125e-05, 0.0, -0.0010318756103515625, -3.814697265625e-06, -1.5166255235671997, -0.00014638900756835938, -9.536738616588991e-07, -1.9669532775878906e-05, 0.0, -0.00017189979553222656, 0.0, -1.71661376953125e-05, -0.0011577606201171875, -6.866455078125e-05, -0.0002897977828979492, -1.1920928244535389e-07, -6.699562072753906e-05, -7.390948667307384e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "RandomPicker"}], "hole4": [{"_type": "Num", "n": 4}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(7),\n            CharacterSelector(Null, EnemyPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -3.9005267094805305, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -1.1600483655929565, -1.52587890625e-05, -0.5838083028793335, -1.9073486328125e-06, 0.0, -0.010545730590820312, -0.025804519653320312, -0.0002765655517578125, -6.4849853515625e-05, -2.145764938177308e-06, -9.34600830078125e-05, -7.62939453125e-06, -0.015211105346679688, -9.5367431640625e-06, 0.0, -0.0009899139404296875, -3.814697265625e-06, -0.29226696491241455, -0.0011543035507202148, -3.933898824470816e-06, -7.987022399902344e-06, 0.0, -0.000308990478515625, 0.0, -9.5367431640625e-06, -0.011343955993652344, -5.14984130859375e-05, -0.000232696533203125, -1.1920928244535389e-07, -6.127356755314395e-05, -6.556489552167477e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7),\n            CharacterSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.030069466907634, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -3.290900707244873, -0.00038389943074434996, -8.153894304996356e-05, -9.536738616588991e-07, -2.861018856492592e-06, -6.16312026977539e-05, -1.0490362910786644e-05, -0.002201793482527137, -0.000990152359008789, -0.25313228368759155, -0.0006915349513292313, -0.002918243408203125, -0.005898475646972656, -5.340576171875e-05, -0.001175045152194798, -2.5868412194540724e-05, -0.38397809863090515, -1.060962586052483e-05, -4.57763671875e-05, -0.002337571932002902, 0.0, -0.00011551317584235221, 0.0, -1.33514404296875e-05, -0.08288002014160156, -0.0001735687255859375, -0.0001811981201171875, -3.576272320060525e-06, -4.0411949157714844e-05, -2.5629668016335927e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Minion", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(7), MinionSelector(\n            Null, EnemyPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.283544964705655, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -1.1600483655929565, -1.52587890625e-05, -0.9315429925918579, 0.0, 0.0, -0.009189605712890625, -0.006083488464355469, -0.000186920166015625, -0.0001201629638671875, -5.364416665543104e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.05788421630859375, -1.33514404296875e-05, 0.0, -0.000858306884765625, -3.814697265625e-06, -0.309606671333313, -0.0009217262268066406, -4.172316494077677e-06, -8.344650268554688e-06, 0.0, -0.00039398670196533203, 0.0, -1.1444091796875e-05, -0.008052825927734375, -5.14984130859375e-05, -0.0002269744873046875, -1.1920928244535389e-07, -6.41345905023627e-05, -7.748573807475623e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "4", "<EOS>", "Minion", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.411206511863568, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -1.9648163318634033, -1.9073486328125e-06, -0.004734853748232126, 0.0, -0.000141143798828125, -4.38690185546875e-05, -1.52587890625e-05, -0.496052622795105, -1.1444091796875e-05, -0.03903365507721901, 0.0, 0.0, -0.0106658935546875, -0.0064792633056640625, -0.000194549560546875, -0.0001392364501953125, -6.0796710386057384e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.028509140014648438, -1.52587890625e-05, 0.0, -0.001041412353515625, -3.814697265625e-06, -0.26075756549835205, -0.0008969306945800781, -4.0531076592742465e-06, -6.318092346191406e-06, 0.0, -0.0003815889358520508, 0.0, -1.1444091796875e-05, -0.007929801940917969, -4.9591064453125e-05, -0.0002231597900390625, -1.1920928244535389e-07, -6.389617192326114e-05, -7.629365427419543e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}], "hole4": [{"_type": "Num", "n": 4}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(7),\n            CharacterSelector(Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.9899402331607945, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -1.1600483655929565, -1.52587890625e-05, -0.5838083028793335, -1.9073486328125e-06, 0.0, -0.010545730590820312, -0.025804519653320312, -0.0002765655517578125, -6.4849853515625e-05, -2.145764938177308e-06, -9.34600830078125e-05, -7.62939453125e-06, -0.015211105346679688, -9.5367431640625e-06, 0.0, -0.0009899139404296875, -3.814697265625e-06, -1.3925410509109497, -0.00012135505676269531, -1.0728830375228426e-06, -2.3245811462402344e-05, 0.0, -0.000148773193359375, 0.0, -1.71661376953125e-05, -0.001567840576171875, -7.62939453125e-05, -0.0002936124801635742, -1.1920928244535389e-07, -6.41345905023627e-05, -6.6756979322235566e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "RandomPicker"}], "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.994843855873739, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -4.22028923034668, -0.009418459609150887, -7.24788405932486e-05, 0.0, 0.0, -0.00013184547424316406, -2.3841855067985307e-07, -0.0058176517486572266, -7.43865966796875e-05, -0.0057563018053770065, -2.5987545086536556e-05, -0.19374699890613556, -0.04525947570800781, -2.384185791015625e-06, -0.012643814086914062, -0.00032806396484375, -2.09808349609375e-05, -0.44754886627197266, 0.0, -0.0010318756103515625, -0.0007648468017578125, -0.0063800811767578125, -5.7220458984375e-06, 0.0, -0.00054931640625, -7.2479248046875e-05, -0.0175018310546875, 0.0, -0.004024505615234375, -1.9073486328125e-05, -0.0011425018310546875, -4.363059997558594e-05, 0.0, -2.6226029149256647e-05, 0.0, -3.516674041748047e-05, 0.0, -7.43865966796875e-05, -0.019977569580078125, -3.62396240234375e-05, -0.00019252300262451172, -7.152555099310121e-07, -7.712841033935547e-05, -1.5616295058862306e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "4", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(4Damage(7),\n            CharacterSelector(players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.075074721060702, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -0.5396714210510254, -2.50339189733495e-06, -6.473017856478691e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -4.768370445162873e-07, -0.04044473171234131, -0.002718210220336914, -0.8645687699317932, -3.549173593521118, -0.00011742111382773146, -0.0002574920654296875, -0.0001163482666015625, -1.9073486328125e-06, -0.0048273163847625256, -0.0002593994140625, -0.01272643357515335, -0.0001125335693359375, -2.09808349609375e-05, -0.00322723388671875, -0.00040435791015625, -1.9073486328125e-06, -0.0023691654205322266, -1.9073486328125e-06, -0.0001964569091796875, -8.392333984375e-05, -0.01660919189453125, -2.09808349609375e-05, 0.0, -6.103515625e-05, -9.5367431640625e-06, -0.016382217407226562, 0.0, -0.0018444061279296875, -1.33514404296875e-05, -0.0044002532958984375, -5.316734313964844e-05, 0.0, -1.4781950994802173e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.09808349609375e-05, -0.012071609497070312, -3.4332275390625e-05, -0.00021731853485107422, -2.3841855067985307e-07, -7.87973403930664e-05, -1.3589766240329482e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "4Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.190007835283069, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -0.5396714210510254, -2.50339189733495e-06, -6.473017856478691e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -4.768370445162873e-07, -0.04044473171234131, -0.002718210220336914, -0.6824966669082642, -0.00012600158515851945, -0.000396728515625, -2.288818359375e-05, 0.0, -0.006774455308914185, -0.000202178955078125, -0.010929303243756294, -0.0001068115234375, -1.71661376953125e-05, -0.003253936767578125, -0.000324249267578125, -1.9073486328125e-06, -0.0025408267974853516, -1.9073486328125e-06, -0.000186920166015625, -8.20159912109375e-05, -3.8772430419921875, -9.5367431640625e-06, 0.0, -8.58306884765625e-05, -1.52587890625e-05, -0.0049190521240234375, -1.9073486328125e-06, -0.0020885467529296875, -1.33514404296875e-05, -0.0030078887939453125, -4.684925079345703e-05, 0.0, -1.7046926586772315e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.86102294921875e-05, -0.00995635986328125, -3.62396240234375e-05, -0.0002193450927734375, -2.3841855067985307e-07, -7.891654968261719e-05, -1.4066597032069694e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 213, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", "Kill", "<EOS>", 237, 46, 139, "7", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(), Kill(7, players\n            =BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.212000279265162, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -4.277034759521484, -0.0009358317474834621, -0.00019550143042579293, 0.0, -1.1920928244535389e-07, -0.0002193450927734375, -2.3841855067985307e-07, -0.016650915145874023, 0.0, -0.15023064613342285, -2.443769153614994e-05, -0.2755974531173706, -4.649158654501662e-06, -0.015964508056640625, -0.017049789428710938, -9.5367431640625e-06, -0.0013621506514027715, -7.987019671418238e-06, -0.04454326629638672, -0.009814262390136719, -5.7220458984375e-06, -0.242232084274292, 0.0, -0.014662742614746094, -7.62939453125e-06, -0.00095367431640625, -3.814697265625e-06, 0.0, -0.0003032684326171875, -7.62939453125e-06, -0.09471416473388672, -1.9073486328125e-06, -0.007905960083007812, -3.814697265625e-05, -0.0010433197021484375, -0.00012242794036865234, 0.0, -8.583065209677443e-06, 0.0, -3.123283386230469e-05, 0.0, -2.47955322265625e-05, -0.03822898864746094, -2.86102294921875e-05, -0.0002079010009765625, -4.768370445162873e-07, -6.92605972290039e-05, -1.728519782773219e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "Kill", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "Num", "n": 7}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 217, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Minion", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL, battlecry=Battlecry(Damage(7), MinionSelector(\n            Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.305366225175099, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -1.5844759941101074, -7.748573807475623e-06, -8.153785165632144e-05, -1.1920928244535389e-07, 0.0, -0.002619147300720215, -1.1920922133867862e-06, -0.16446232795715332, 0.0, -0.0443127378821373, 0.0, -0.000354766845703125, -0.0001316070556640625, -1.33514404296875e-05, -1.1600483655929565, -1.52587890625e-05, -0.9315429925918579, 0.0, 0.0, -0.009189605712890625, -0.006083488464355469, -0.000186920166015625, -0.0001201629638671875, -5.364416665543104e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.05788421630859375, -1.33514404296875e-05, 0.0, -0.000858306884765625, -3.814697265625e-06, -1.3392659425735474, -0.0001367330551147461, -1.0728830375228426e-06, -2.1576881408691406e-05, 0.0, -0.00017940998077392578, 0.0, -1.71661376953125e-05, -0.0011043548583984375, -7.2479248046875e-05, -0.0002974271774291992, 0.0, -6.723403930664062e-05, -7.510157047363464e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "ALL", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "RandomPicker"}], "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.5342352525458125, "score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -3.290900707244873, -0.00038389943074434996, -8.153894304996356e-05, -9.536738616588991e-07, -2.861018856492592e-06, -6.16312026977539e-05, -1.0490362910786644e-05, -0.002201793482527137, -0.000990152359008789, -0.25313228368759155, -0.0006915349513292313, -0.002918243408203125, -0.005898475646972656, -5.340576171875e-05, -0.001175045152194798, -2.5868412194540724e-05, -1.6097935438156128, -3.635883331298828e-05, -1.52587890625e-05, -0.00895046815276146, 0.0, -0.0003343694261275232, 0.0, -1.1444091796875e-05, -0.3543376922607422, -0.0002460479736328125, -0.00017178058624267578, -5.364403477869928e-06, -4.029273986816406e-05, -2.8490614567999728e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "MinionSelector", "hole1": 3, "hole0": "Injured Blademaster", "hole4": [{"_type": "Num", "n": 7}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "InjuredBlademaster", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 7}], "hole4": "player"}}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(condition=Null, players=EnemyPlayer())))]\n            )\n", "score": -1.407683712457235, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.7219589948654175, -0.0001087188720703125, -1.1444091796875e-05, -0.04809379577636719, -0.00016021728515625, -2.86102294921875e-05, -0.1119917631149292, -1.9073486328125e-06, -0.004055976867675781, -0.001544952392578125, -2.110004425048828e-05, -9.536738616588991e-07, -0.0003337860107421875, -3.814697265625e-06, -0.0008223056793212891, -5.7220458984375e-06, -0.0001049041748046875, -5.7220458984375e-06, -0.02013218402862549, -4.208087921142578e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -1.5370763363576927, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.6656235456466675, -1.442432312614983e-05, -3.814697265625e-06, -0.31508350372314453, -0.0004177093505859375, -0.0001678466796875, -0.029459834098815918, -9.655952453613281e-06, -0.0002880096435546875, -5.7220458984375e-06, -0.00028955936431884766, -9.5367431640625e-06, 0.0, -0.00038909912109375, -5.7220458984375e-06, -0.012567520141601562, -2.9802317840221804e-06, -0.000347137451171875, -9.5367431640625e-06, -0.01409447193145752, -3.1948089599609375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 246, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>", 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score": -2.6844627680098867, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.6656235456466675, -1.442432312614983e-05, -3.814697265625e-06, -1.3340044021606445, -0.03233146667480469, -0.000125885009765625, -0.0011789798736572266, -7.62939453125e-06, -0.001010894775390625, -3.814697265625e-06, -0.00034618377685546875, -9.5367431640625e-06, 0.0, -0.0017108917236328125, -1.1444091796875e-05, -0.011563301086425781, -5.364412118069595e-06, -0.001262664794921875, -2.09808349609375e-05, -0.019434809684753418, -3.1948089599609375e-05, 0.0, -0.0002880096435546875, -2.86102294921875e-05, -0.1073007583618164, 0.0, -0.0021848678588867188, -0.007674217224121094, -2.09808349609375e-05, -8.583032467868179e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 169, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), SelfSelector()))])\n", "score": -3.3959376631246343, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -2.785956382751465, -0.008373498916625977, -5.9604562920867465e-06, -3.814697265625e-06, -0.0002498626708984375, -3.814697265625e-06, -6.255879998207092e-05, -1.0728830375228426e-06, -0.24565857648849487, -3.933904736186378e-06, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "SelfSelector", "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -3.6059294762362057, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.7219589948654175, -0.0001087188720703125, -1.1444091796875e-05, -0.04809379577636719, -0.00016021728515625, -2.86102294921875e-05, -2.2758824825286865, -9.655952453613281e-06, -0.0005283355712890625, -3.814697265625e-06, -0.0009244680404663086, -3.0517578125e-05, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.04586029052734375, -5.960462772236497e-07, -0.0003108978271484375, -5.7220458984375e-06, -0.013561725616455078, -3.230571746826172e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Minion", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsMinion()), ActionTag\n            (Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -4.40979950877783, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -3.106975793838501, -8.20159912109375e-05, -6.103515625e-05, -2.09808349609375e-05, -0.1432170867919922, -0.00035154770012013614, -3.3259369956795126e-05, -1.9073486328125e-06, -0.0020389556884765625, -1.52587890625e-05, -8.240342140197754e-06, -6.198863957251888e-06, -0.3529059886932373, -2.9087066650390625e-05, -3.814697265625e-06, -0.5376472473144531, -0.00048065185546875, -0.000125885009765625, -0.02691173553466797, -7.748603820800781e-06, -0.000308990478515625, -7.62939453125e-06, -0.0002586841583251953, -9.5367431640625e-06, 0.0, -0.0003719329833984375, -5.7220458984375e-06, -0.017080307006835938, -2.9802317840221804e-06, -0.000331878662109375, -7.62939453125e-06, -0.011487603187561035, -2.9921531677246094e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsMinion"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 167, "Damage", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(), MinionSelector(condition=Null, players=EnemyPlayer())))])\n", "score": -4.560798234754309, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.9786972999572754, -0.004970908164978027, -0.0002225627249572426, -0.14239108562469482, -0.012906193733215332, -3.3736203477019444e-05, -0.011388778686523438, -5.91278076171875e-05, -7.62939453125e-06, -0.01591479778289795, -1.9073486328125e-06, -0.0025482177734375, -0.004151344299316406, -2.5033950805664062e-05, -2.3841830625315197e-06, -0.001377105712890625, -1.9073486328125e-06, -0.00044274330139160156, -3.933906555175781e-06, -7.62939453125e-05, -9.5367431640625e-06, -0.029909253120422363, -4.780292510986328e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 246, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>", 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score": -4.705801469279429, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.7219589948654175, -0.0001087188720703125, -1.1444091796875e-05, -3.283623695373535, -0.01854705810546875, -1.33514404296875e-05, -0.012033581733703613, -9.5367431640625e-06, -0.002010345458984375, -5.7220458984375e-06, -0.0006434917449951172, -3.4332275390625e-05, 0.0, -0.000919342041015625, -3.814697265625e-06, -0.04524803161621094, -4.29153169534402e-06, -0.0006427764892578125, -5.7220458984375e-06, -0.015002250671386719, -3.409385681152344e-05, 0.0, -0.000331878662109375, -2.6702880859375e-05, -0.09964942932128906, 0.0, -0.0026721954345703125, -0.003978729248046875, -2.09808349609375e-05, -6.198863957251888e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Minion", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 246, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>", 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsMinion()), ActionTag\n            (Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score": -4.845673017193455, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -3.106975793838501, -8.20159912109375e-05, -6.103515625e-05, -2.09808349609375e-05, -0.1432170867919922, -0.00035154770012013614, -3.3259369956795126e-05, -1.9073486328125e-06, -0.0020389556884765625, -1.52587890625e-05, -8.240342140197754e-06, -6.198863957251888e-06, -0.3529059886932373, -2.9087066650390625e-05, -3.814697265625e-06, -0.89569091796875, -0.021615982055664062, -0.0001010894775390625, -0.001074075698852539, -5.7220458984375e-06, -0.001087188720703125, -5.7220458984375e-06, -0.00029265880584716797, -1.1444091796875e-05, 0.0, -0.0014801025390625, -9.5367431640625e-06, -0.014866828918457031, -5.245203283266164e-06, -0.0009365081787109375, -1.1444091796875e-05, -0.01260232925415039, -2.9921531677246094e-05, 0.0, -0.0002727508544921875, -3.62396240234375e-05, -0.07297325134277344, 0.0, -0.0021200180053710938, -0.0056915283203125, -2.09808349609375e-05, -8.106198947643861e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsMinion"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Hero", "<EOS>", 237, 50, 169, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsHero()), ActionTag(\n            Damage(1), SelfSelector()))])\n", "score": -4.9160167971509665, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -3.5502800941467285, -2.741813204920618e-06, -3.814697265625e-06, -6.4849853515625e-05, -0.9778223037719727, -0.016953706741333008, -7.390960945485858e-06, -3.814697265625e-06, -0.00020599365234375, -1.9073486328125e-06, -5.133636295795441e-05, -9.536738616588991e-07, -0.16163896024227142, -2.861022494471399e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "SelfSelector", "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsHero"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Minion", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsMinion()), ActionTag\n            (Damage(1), MinionSelector(condition=Null, players=EnemyPlayer(\n            ))))])\n", "score": -4.944272927967056, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -3.106975793838501, -8.20159912109375e-05, -6.103515625e-05, -2.09808349609375e-05, -0.1432170867919922, -0.00035154770012013614, -3.3259369956795126e-05, -1.9073486328125e-06, -0.0020389556884765625, -1.52587890625e-05, -8.240342140197754e-06, -6.198863957251888e-06, -1.2141733169555664, -0.000202178955078125, -7.62939453125e-06, -0.03834247589111328, -0.000141143798828125, -2.288818359375e-05, -0.19990813732147217, -1.9073486328125e-06, -0.0036802291870117188, -0.00147247314453125, -2.110004425048828e-05, -1.1920922133867862e-06, -0.00038909912109375, -3.814697265625e-06, -0.0007956027984619141, -5.7220458984375e-06, -0.000125885009765625, -5.7220458984375e-06, -0.023149609565734863, -3.826618194580078e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsMinion"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Hero", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsHero()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -4.953729169396063, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -3.5502800941467285, -2.741813204920618e-06, -3.814697265625e-06, -6.4849853515625e-05, -0.5285396575927734, -0.00010394820856163278, -5.1021401304751635e-05, -1.9073486328125e-06, -0.00045013427734375, -3.814697265625e-06, -9.607523679733276e-06, -3.4570634852570947e-06, -0.17486467957496643, -1.1920928955078125e-05, -3.814697265625e-06, -0.43777942657470703, -0.0003681182861328125, -0.0001621246337890625, -0.024141788482666016, -1.1563301086425781e-05, -0.0002593994140625, -3.814697265625e-06, -0.00026035308837890625, -9.5367431640625e-06, 0.0, -0.000408172607421875, -5.7220458984375e-06, -0.012041091918945312, -2.861022494471399e-06, -0.00030517578125, -9.5367431640625e-06, -0.014560818672180176, -3.1948089599609375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsHero"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 169, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Hero", "Selector", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), HeroSelector()))])\n", "score": -5.249998134184345, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -2.785956382751465, -0.008373498916625977, -5.9604562920867465e-06, -3.814697265625e-06, -0.0002498626708984375, -3.814697265625e-06, -6.255879998207092e-05, -1.0728830375228426e-06, -2.0997025966644287, -2.9921531677246094e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "HeroSelector", "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 171, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 239, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, EnemyPlayer(), RandomPicker(\n            ))))])\n", "score": -5.2987181376943155, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -4.332798957824707, -7.772212848067284e-05, -2.1219222617219202e-05, -1.9073486328125e-06, -0.001323699951171875, -5.7220458984375e-06, -0.0001389831304550171, -2.1457672119140625e-06, -0.09928154200315475, -0.0043447017669677734, -3.814697265625e-06, -0.023268699645996094, -0.10802650451660156, -0.00029754638671875, -7.259845733642578e-05, -8.344646857949556e-07, -0.000812530517578125, -7.62939453125e-06, -0.0019550323486328125, -1.52587890625e-05, 0.0, -0.0028400421142578125, -3.814697265625e-06, -0.3677579164505005, -4.8398935177829117e-05, -2.264974000354414e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "CharacterSelector", "hole4": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "RandomPicker"}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(condition=Null, players=BothPlayer())))])\n", "score": -5.416546446298177, "score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.7219589948654175, -0.0001087188720703125, -1.1444091796875e-05, -0.04809379577636719, -0.00016021728515625, -2.86102294921875e-05, -0.1119917631149292, -1.9073486328125e-06, -0.004055976867675781, -0.001544952392578125, -2.110004425048828e-05, -9.536738616588991e-07, -0.0003337860107421875, -3.814697265625e-06, -0.0008223056793212891, -5.7220458984375e-06, -0.0001049041748046875, -5.7220458984375e-06, -4.028993606567383, -4.3392181396484375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Knife Juggler", "hole3": "RARE", "hole2": "ALL", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "KnifeJuggler", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "CardUsed", "hole2": [{"_type": "Template19", "hole0": "Damage", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole1": [{"_type": "Num", "n": 1}]}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}]}], "hole2": 2, "hole1": 3}], "hole4": "player"}}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n", "score": -2.4915219685703462, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.8486366271972656, -2.47955322265625e-05, -0.0024280548095703125, -0.000881195068359375, -4.38690185546875e-05, -1.728534698486328e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -2.9428151671367644, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.6235532760620117, -0.000550834636669606, -0.0002002716064453125, 0.0, -0.6787890195846558, -0.00023162364959716797, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            MinionSelector(condition=Null)))])\n", "score": -3.1526358938485615, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.8156412839889526, -2.2649765014648438e-06, -0.29755306243896484, -1.1444091796875e-05, -1.9073486328125e-06, -0.001453399658203125, -0.0001621246337890625, -3.814697265625e-06, -0.9921261072158813, -2.09808349609375e-05, -0.0024042129516601562, -0.0008220672607421875, -4.00543212890625e-05, -1.3470649719238281e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 3}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -3.259268645814224, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.8156412839889526, -2.2649765014648438e-06, -0.29755306243896484, -1.1444091796875e-05, -1.9073486328125e-06, -0.001453399658203125, -0.0001621246337890625, -3.814697265625e-06, -0.5445476770401001, -0.00039367153658531606, -0.0002384185791015625, 0.0, -0.5566655397415161, -0.0002143383026123047, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 3}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 174, "Turn", "Ended", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Self", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            SelfSelector())), Effect(TurnEnded(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -3.623884214612623, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -1.6028709411621094, -5.3882598876953125e-05, -0.0010814666748046875, -0.0003528594970703125, -4.76837158203125e-05, -0.0001354217529296875, -0.062256813049316406, -0.03627634048461914, -4.291534423828125e-06, -1.9073486328125e-06, -0.007925033569335938, -7.05718994140625e-05, -0.05014114826917648, 0.0, -0.4921308755874634, -2.0265579223632812e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.000972747802734375, -0.00174713134765625, -0.003373384475708008, -3.814697265625e-05, -0.00104522705078125, -0.18357372283935547, -3.814697265625e-06, -0.0005124769522808492, -0.0009849071502685547, 0.0, -0.000118255615234375, -0.25307750701904297, -0.09396100044250488, -5.4238757002167404e-05, -0.13205750286579132, -2.2292000721790828e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "SelfSelector", "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=UserPicker())))])\n", "score": -4.0806037003698705, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.6235532760620117, -0.000550834636669606, -0.0002002716064453125, 0.0, -1.8154438734054565, -0.001365303061902523, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            CharacterSelector(players=BothPlayer())))])\n", "score": -4.160700163868093, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.8156412839889526, -2.2649765014648438e-06, -1.3612514734268188, -1.5735626220703125e-05, 0.0, -0.0013427734375, -0.000331878662109375, -3.814697265625e-06, -0.9365158081054688, -3.933906555175781e-06, -0.000125885009765625, 0.0, -0.002932310104370117, -0.0001533031463623047, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}], "hole1": [{"_type": "Num", "n": 3}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n", "score": -4.274035207426955, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -1.594675064086914, 0.0, -0.48823070526123047, -1.9073486328125e-06, -2.515315827622544e-05, 0.0, -1.71661376953125e-05, -0.00037384033203125, -0.0002899169921875, -1.1920928244535389e-07, -1.1444091796875e-05, -5.7220458984375e-06, -2.3364747903542593e-05, -8.463848644169047e-06, -4.017272294731811e-05, -1.1444091796875e-05, -2.09808349609375e-05, -0.33530426025390625, -0.0003706797433551401, -0.0010149478912353516, -3.814697265625e-06, -3.62396240234375e-05, -5.91278076171875e-05, -0.07314491271972656, -0.00278627872467041, -0.000213620689464733, -1.9073486328125e-06, -0.0093536376953125, -0.000194549560546875, -0.599465012550354, -2.3841855067985307e-07, -0.005879325792193413, -9.5367431640625e-06, -1.9073486328125e-06, -0.002811431884765625, -0.0001983642578125, -3.814697265625e-06, -0.8341665267944336, -2.288818359375e-05, -0.0023508071899414062, -0.000888824462890625, -4.1961669921875e-05, -1.728534698486328e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "RARE", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=IsSpell())))])\n", "score": -4.290885311790085, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.6235532760620117, -0.000550834636669606, -0.0002002716064453125, 0.0, -1.2731236219406128, -0.7539633512496948, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "IsSpell"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 174, "Turn", "Ended", "<EOS>", 237, 50, 169, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 166, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            CharacterSelector())), Effect(TurnEnded(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -4.382215000052817, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -1.6028709411621094, -5.3882598876953125e-05, -0.0010814666748046875, -0.0003528594970703125, -4.76837158203125e-05, -0.0001354217529296875, -0.062256813049316406, -0.03627634048461914, -4.291534423828125e-06, -1.9073486328125e-06, -0.007925033569335938, -7.05718994140625e-05, -0.05014114826917648, 0.0, -1.2131448984146118, -3.814697265625e-06, -7.62939453125e-06, -1.71661376953125e-05, -0.0130615234375, -0.0007839202880859375, -0.013224005699157715, -1.1444091796875e-05, -0.0024166107177734375, -0.1464710235595703, -1.9073486328125e-06, -0.0006984222563914955, -0.001033782958984375, 0.0, -0.00011444091796875, -0.28870582580566406, -0.10096383094787598, -6.19869097135961e-05, -0.14126664400100708, -2.2888036255608313e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole3": [{"_type": "Template38_expr_seq", "hole0": "Effect", "hole1": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Kill", "hole3": "SelfSelector"}]}], "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "CharacterSelector", "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            MinionSelector(picker=UserPicker())))])\n", "score": -4.413545850699371, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.8156412839889526, -2.2649765014648438e-06, -0.29755306243896484, -1.1444091796875e-05, -1.9073486328125e-06, -0.001453399658203125, -0.0001621246337890625, -3.814697265625e-06, -0.5445476770401001, -0.00039367153658531606, -0.0002384185791015625, 0.0, -1.7100592851638794, -0.0010977977653965354, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}], "hole1": [{"_type": "Num", "n": 3}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Lightwell", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n", "score": -4.4724179723802635, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -1.9775543212890625, -0.0006465911865234375, -5.7220458984375e-06, -3.814697265625e-06, -4.0531158447265625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00107574462890625, -5.340576171875e-05, -4.1961669921875e-05, -7.033347174001392e-06, -1.9073486328125e-06, -1.52587890625e-05, -7.62939453125e-06, -6.854526873212308e-05, -4.291534423828125e-06, -5.7220458984375e-06, -3.814697265625e-06, -8.7738037109375e-05, -1.9073486328125e-06, -1.680839886830654e-05, 0.0, -0.13485360145568848, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.04460334777832031, 0.0, -3.814697265625e-06, -0.018828392028808594, -0.000133514404296875, -0.2912806272506714, -1.1920928244535389e-07, -0.001759648323059082, 0.0, -8.058542880462483e-05, 0.0, -0.000133514404296875, -0.00011444091796875, -6.4849853515625e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -8.976056415122002e-05, -4.768371127283899e-06, -0.00010132275929208845, -1.1444091796875e-05, -2.47955322265625e-05, -0.4273033142089844, -0.0017996999667957425, -0.0008107423782348633, -5.7220458984375e-06, -3.814697265625e-05, -6.103515625e-05, -0.07677555084228516, -0.0031375885009765625, -0.00020467862486839294, -1.9073486328125e-06, -0.009537696838378906, -0.0001983642578125, -0.6127283573150635, -2.3841855067985307e-07, -0.006099963095039129, -1.1444091796875e-05, -1.9073486328125e-06, -0.0029649734497070312, -0.0001926422119140625, -3.814697265625e-06, -0.8321619033813477, -1.9073486328125e-05, -0.0017213821411132812, -0.000957489013671875, -4.38690185546875e-05, -1.537799835205078e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Lightwell"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "3", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            CharacterSelector(picker=RandomPicker())))])\n", "score": -4.543453952448978, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.8156412839889526, -2.2649765014648438e-06, -1.3612514734268188, -1.5735626220703125e-05, 0.0, -0.0013427734375, -0.000331878662109375, -3.814697265625e-06, -0.6893606185913086, -0.00034958039759658277, -0.0004177093505859375, 0.0, -0.6320360898971558, -0.0003210306167602539, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "CharacterSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 3}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Is", "Minion", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=IsMinion())))])\n", "score": -4.619323474593735, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.6235532760620117, -0.000550834636669606, -0.0002002716064453125, 0.0, -1.2731236219406128, -1.0824034214019775, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Lightwell", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 2}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "IsMinion"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}, {"choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Lightwell", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -4.9135451866699995, "score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -1.9775543212890625, -0.0006465911865234375, -5.7220458984375e-06, -3.814697265625e-06, -4.0531158447265625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00107574462890625, -5.340576171875e-05, -4.1961669921875e-05, -7.033347174001392e-06, -1.9073486328125e-06, -1.52587890625e-05, -7.62939453125e-06, -6.854526873212308e-05, -4.291534423828125e-06, -5.7220458984375e-06, -3.814697265625e-06, -8.7738037109375e-05, -1.9073486328125e-06, -1.680839886830654e-05, 0.0, -0.13485360145568848, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.04460334777832031, 0.0, -3.814697265625e-06, -0.018828392028808594, -0.000133514404296875, -0.2912806272506714, -1.1920928244535389e-07, -0.001759648323059082, 0.0, -8.058542880462483e-05, 0.0, -0.000133514404296875, -0.00011444091796875, -6.4849853515625e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -8.976056415122002e-05, -4.768371127283899e-06, -0.00010132275929208845, -1.1444091796875e-05, -2.47955322265625e-05, -0.4273033142089844, -0.0017996999667957425, -0.0008107423782348633, -5.7220458984375e-06, -3.814697265625e-05, -6.103515625e-05, -0.07677555084228516, -0.0031375885009765625, -0.00020467862486839294, -1.9073486328125e-06, -0.009537696838378906, -0.0001983642578125, -0.6127283573150635, -2.3841855067985307e-07, -0.006099963095039129, -1.1444091796875e-05, -1.9073486328125e-06, -0.0029649734497070312, -0.0001926422119140625, -3.814697265625e-06, -0.6219158172607422, -0.0004165504942648113, -0.000194549560546875, 0.0, -0.6532876491546631, -0.00023174285888671875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole2": [{"_type": "Str", "s": "Lightwell"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Lightwell", "hole6": [{"_type": "Template30", "hole0": "Minion", "hole3": [{"_type": "Template20", "hole0": "TurnEnded", "hole2": [{"_type": "Template19", "hole0": "Heal", "hole3": "MinionSelector", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "RandomPicker"}}], "hole1": [{"_type": "Num", "n": 1}]}]}], "hole2": 5, "hole1": 0}], "hole4": "player"}}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -0.21424137021251255, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -0.0382034070789814, -0.0012704133987426758, -0.0004962682723999023, -0.0003147125244140625, -0.000255584716796875, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.0022597312927246094, -0.00011407979764044285, -1.9073486328125e-06, -2.86102294921875e-05, -0.0001277923583984375, -4.208087921142578e-05, -0.0001759525912348181, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.003915547858923674, -2.0265579223632812e-06, -0.0002900361141655594, -0.00022292137145996094, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "Minion", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, Minion=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.087267594623718, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -2.7885570526123047, -0.0026025772094726562, -0.0638265609741211, -0.003978729248046875, -0.002569675212725997, -4.88758041683468e-06, -0.014678955078125, -7.43865966796875e-05, -0.00217437744140625, -0.0001621246337890625, -1.33514404296875e-05, -0.10744965076446533, -0.0014001131057739258, -0.00012481212615966797, -0.0001621246337890625, -0.0002307891845703125, -3.814697265625e-06, -7.009506225585938e-05, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -0.004613757133483887, -9.596133895684034e-05, -1.9073486328125e-06, -3.814697265625e-05, -0.0001239776611328125, -4.017353057861328e-05, -0.00017261484754271805, -1.9073486328125e-06, -0.000213623046875, -0.0001010894775390625, -0.003149389522150159, -2.0265579223632812e-06, -0.00027084341854788363, -0.0002378225326538086, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "Minion", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.8251456206006154, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -3.67268705368042, 0.0, -0.0006854534149169922, -1.9073486328125e-06, -1.7881371604744345e-05, 0.0, -3.814697265625e-06, -0.003032684326171875, -0.0004138946533203125, -1.9073486328125e-06, -1.2278503163543064e-05, -3.3020973205566406e-05, -4.768370445162873e-07, -0.06330074369907379, -7.152543730626348e-06, -0.00481414794921875, -0.0023937225341796875, -0.002382750390097499, -5.364412118069595e-06, -0.0005168914794921875, -7.43865966796875e-05, -0.0014591217041015625, -0.0004119873046875, -2.47955322265625e-05, -0.03866034001111984, -0.0012704133987426758, -0.0004866122908424586, -0.0003108978271484375, -0.0002536773681640625, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.002364516258239746, -0.00011503339192131534, -1.9073486328125e-06, -2.6702880859375e-05, -0.00012969970703125, -4.208087921142578e-05, -0.00017797914915718138, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.0038430686108767986, -2.0265579223632812e-06, -0.0002919434627983719, -0.00022292137145996094, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "HUNTER", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.1916809439457055, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -4.044801235198975, 0.0, -8.988378976937383e-05, 0.0, -4.982938844477758e-05, 0.0, -1.33514404296875e-05, -0.00104522705078125, -0.0003108978271484375, -1.9073486328125e-06, -6.675708846159978e-06, -4.076957702636719e-05, -3.576278118089249e-07, -0.06285002827644348, -8.106212590064388e-06, -0.0033321380615234375, -0.002197265625, -0.0026059092488139868, -5.364412118069595e-06, -0.0004940032958984375, -7.43865966796875e-05, -0.001499176025390625, -0.0004024505615234375, -2.288818359375e-05, -0.037618573755025864, -0.0012627840042114258, -0.0005153417587280273, -0.0003032684326171875, -0.00025177001953125, -9.5367431640625e-06, -6.92605972290039e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.0022978782653808594, -0.00011586778418859467, -1.9073486328125e-06, -2.6702880859375e-05, -0.00012969970703125, -4.208087921142578e-05, -0.00017607180052436888, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.0039058916736394167, -2.0265579223632812e-06, -0.0002900361141655594, -0.00022292137145996094, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "SHAMAN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.279209621049922, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -4.067050933837891, -0.022506117820739746, -0.004463449120521545, -0.009033203125, -0.0002193450927734375, -1.1444091796875e-05, -0.0006078481674194336, 0.0, -3.814697265625e-06, -3.814697265625e-05, -0.0026974647771567106, -0.0008742174250073731, -2.0265579223632812e-06, -4.1961669921875e-05, -0.000133514404296875, -4.792213439941406e-05, -0.0001616475492483005, -1.9073486328125e-06, -0.0002155303955078125, -0.000102996826171875, -0.004309772979468107, -2.0265579223632812e-06, -0.0004173514316789806, -0.00018787382578011602, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Minion", "Died", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionDied(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.962459139412495, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -4.737732410430908, -0.0500260591506958, -6.079673767089844e-06, -0.00017547607421875, -0.0004367828369140625, -3.814697265625e-06, -0.0001176595687866211, 0.0, -5.7220458984375e-06, -3.814697265625e-05, -0.001918673049658537, -0.00015043560415506363, -1.9073486328125e-06, -2.86102294921875e-05, -0.0001201629638671875, -3.826618194580078e-05, -0.00014603108866140246, -1.9073486328125e-06, -0.0002269744873046875, -0.0001087188720703125, -0.004577040206640959, -2.0265579223632812e-06, -0.0002946852473542094, -0.0002224445343017578, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "MinionDied"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Turn", "Ended", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(TurnEnded(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.133598736111992, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -4.938597679138184, -0.004741906654089689, -1.1920928244535389e-07, -7.62939453125e-05, -0.00028228759765625, -3.62396240234375e-05, -9.07182547962293e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-05, -0.017801759764552116, -0.00013791979290544987, -3.814697265625e-06, -2.6702880859375e-05, -0.0001087188720703125, -4.780292510986328e-05, -0.00014388527779374272, -1.9073486328125e-06, -0.0002231597900390625, -0.000118255615234375, -0.004504918120801449, -2.0265579223632812e-06, -0.0002901553234551102, -0.00025093555450439453, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "TurnEnded"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "3", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n", "score": -5.779098615220683, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -0.0382034070789814, -0.0012704133987426758, -0.0004962682723999023, -0.0003147125244140625, -0.000255584716796875, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.0022597312927246094, -0.00011407979764044285, -1.9073486328125e-06, -2.86102294921875e-05, -0.0001277923583984375, -4.208087921142578e-05, -0.0001759525912348181, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -5.5690460205078125, -3.814697265625e-05, -8.64267349243164e-05, -0.0001190900438814424, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 3}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.838418049996456, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -5.695303440093994, 0.0, -0.0004864931106567383, 0.0, -1.6570085790590383e-05, 0.0, -5.7220458984375e-06, -0.0018291473388671875, -0.0003948211669921875, -1.9073486328125e-06, -1.025196434056852e-05, -4.267692565917969e-05, -3.576278118089249e-07, -0.056055471301078796, -6.437291176553117e-06, -0.00482940673828125, -0.002033233642578125, -0.0021843849681317806, -5.6028297876764555e-06, -0.0005092620849609375, -7.62939453125e-05, -0.0014247894287109375, -0.00041961669921875, -2.288818359375e-05, -0.038365889340639114, -0.0012780427932739258, -0.0005173683166503906, -0.0003147125244140625, -0.000255584716796875, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.002477288246154785, -0.00011336444003973156, -1.9073486328125e-06, -2.6702880859375e-05, -0.0001277923583984375, -4.208087921142578e-05, -0.00017607180052436888, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.0038831226993352175, -2.0265579223632812e-06, -0.0002900361141655594, -0.00022292137145996094, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "WARRIOR", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "Minion", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, Minion=[Effect(Character<UNK>(player=BothPlayer\n            ()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.973311040980498, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -2.7885570526123047, -0.0026025772094726562, -0.0638265609741211, -0.003978729248046875, -0.002569675212725997, -4.88758041683468e-06, -0.014678955078125, -7.43865966796875e-05, -0.00217437744140625, -0.0001621246337890625, -1.33514404296875e-05, -2.97011661529541, -0.01562941074371338, -0.0018210186390206218, -0.0027904510498046875, -0.0002288818359375, -5.7220458984375e-06, -0.0007722377777099609, 0.0, -3.814697265625e-06, -3.4332275390625e-05, -0.007339344825595617, -0.0008732585702091455, -2.0265579223632812e-06, -6.103515625e-05, -0.0001316070556640625, -4.410743713378906e-05, -0.00015723689284641296, -1.9073486328125e-06, -0.000217437744140625, -9.72747802734375e-05, -0.0036636588629335165, -2.0265579223632812e-06, -0.00038456887705251575, -0.00019681452249642462, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "Minion", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "minions", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.minions,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.987043659748743, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -5.83179235458374, 0.0, -0.00015854835510253906, -1.9073486328125e-06, -5.483620952873025e-06, 0.0, -1.9073486328125e-06, -0.00226593017578125, -0.0002593994140625, -3.814697265625e-06, -2.264958675368689e-05, -4.839897155761719e-05, -4.768370445162873e-07, -0.07107751071453094, -1.728522875055205e-05, -0.0040493011474609375, -0.0018224716186523438, -0.001660699606873095, -5.125993993715383e-06, -0.00041961669921875, -7.43865966796875e-05, -0.0014781951904296875, -0.000408172607421875, -2.288818359375e-05, -0.03760544955730438, -0.0012894868850708008, -0.0005365610122680664, -0.0003204345703125, -0.0002536773681640625, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.0015867948532104492, -0.00011288780660834163, -1.9073486328125e-06, -2.86102294921875e-05, -0.0001277923583984375, -4.208087921142578e-05, -0.00017440285591874272, -1.9073486328125e-06, -0.0002193450927734375, -0.0001087188720703125, -0.004182338248938322, -2.0265579223632812e-06, -0.00029170504421927035, -0.00022280216217041016, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "minions", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -6.019817031595188, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -5.877983570098877, 0.0, -0.0029050111770629883, 0.0, -4.649158654501662e-06, 0.0, -3.814697265625e-06, -0.0011043548583984375, -0.0001659393310546875, -1.9073486328125e-06, -1.4662661669717636e-05, -5.424022674560547e-05, -2.3841855067985307e-07, -0.05445292219519615, -1.2874562344222795e-05, -0.0027284622192382812, -0.0018978118896484375, -0.0024617828894406557, -5.364412118069595e-06, -0.0005588531494140625, -7.2479248046875e-05, -0.0012760162353515625, -0.0004425048828125, -2.47955322265625e-05, -0.04000598564743996, -0.0012646913528442383, -0.0005077123641967773, -0.00031280517578125, -0.0002593994140625, -9.5367431640625e-06, -6.92605972290039e-05, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -0.0017174482345581055, -0.00011646361963357776, -1.9073486328125e-06, -2.6702880859375e-05, -0.0001316070556640625, -4.208087921142578e-05, -0.00018012490181718022, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.0038945667911320925, -2.0265579223632812e-06, -0.0002939700207207352, -0.00021910667419433594, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "Minion", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, Minion=True)\n", "score": -6.066650232139928, "score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -2.7885570526123047, -0.0026025772094726562, -3.1847829818725586, -0.00035858154296875, -0.0002551078796386719, -4.172316494077677e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "Minion", "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 150, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 76, 104, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "Minion", "<EOS>", "<UNK>", "<EOS>", 71, 23, 139, "1", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", "increase_armor", "<EOS>", "3", "<EOS>", 82, 120, 17, 113, 13, 103, 21, 134, "player", "<EOS>", "cards_played", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.Minion.<UNK> += 1\n        player.hand.increase_armor(3)\n        if player.cards_played > 0:\n            <UNK> = <UNK>()\n            self.target.add_buff(Buff(ChangeAttack(1)))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            len(player.minions) < 7)\n", "score": -13.672028716223295, "score_history": [-3.814697265625e-06, -3.824883460998535, -9.536738616588991e-07, -5.14984130859375e-05, -8.4638240878121e-06, -4.255681051290594e-05, -1.9073486328125e-06, -3.11136209347751e-05, -2.6702880859375e-05, -0.00507354736328125, -3.24249267578125e-05, -4.768370445162873e-07, -0.0002577236737124622, -2.861018856492592e-06, 0.0, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.06462752819061279, 0.0, -0.00104522705078125, 0.0, -0.00032889842987060547, 0.0, -0.0002002716064453125, -1.71661376953125e-05, -4.2319297790527344e-05, -4.887569048150908e-06, -0.1414480209350586, -4.57763671875e-05, -1.1444091796875e-05, -0.00043487548828125, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.3007127310847864e-05, -2.2649765014648438e-06, -4.1961669921875e-05, -3.814697265625e-06, -3.0517578125e-05, -3.814697265625e-06, -4.57763671875e-05, -2.86102294921875e-05, -0.32657432556152344, -0.0007476806640625, -0.6128654479980469, -0.0007476806640625, -0.02263355255126953, 0.0, -3.0517578125e-05, 0.0, -0.4410053491592407, -5.7220458984375e-06, -0.33945268392562866, -0.0002079010009765625, -0.5929956436157227, -2.3841855067985307e-07, -0.018502235412597656, -0.02378082275390625, -0.00096893310546875, -0.002323008142411709, -1.1920928244535389e-07, -0.5391302108764648, -0.000240325927734375, -0.1421642303466797, -0.0005664825439453125, -0.01668834686279297, -2.09808349609375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.006092071533203125, 0.0, -0.3161807060241699, -3.099436753473128e-06, -0.5451455116271973, 0.0, -0.5773251056671143, 0.0, -0.29926204681396484, -0.006565093994140625, -0.005722999572753906, -6.67572021484375e-05, -0.4822273254394531, -5.7220458984375e-06, -0.0004425048828125, -5.7220458984375e-06, -0.04789936542510986, 0.0, -0.3313624858856201, -2.3841855067985307e-07, -1.9073486328125e-06, -0.047740936279296875, -2.86102294921875e-05, -0.0016231536865234375, -7.05718994140625e-05, -0.000440168019849807, -8.7738037109375e-05, -0.29553890228271484, -0.000946044921875, -0.0009613037109375, -0.000667572021484375, -0.0001773834228515625, -1.1444091796875e-05, -0.28925812244415283, 0.0, -0.7885465621948242, -0.0023813247680664062, -0.033491261303424835, -0.0012808424653485417, -0.03578662872314453, -0.0004329681396484375, -0.08949947357177734, -1.9073486328125e-05, -0.000335693359375, 0.0, -0.15909361839294434, 0.0, -0.056777238845825195, -2.3841855067985307e-07, -0.6341973543167114, -4.768370445162873e-07, 0.0, -0.1255016326904297, -0.00055694580078125, -6.055826088413596e-05, -1.823902130126953e-05, -0.07940348237752914, -0.004937410354614258, -8.940695806813892e-06, -0.014269445091485977, -3.814697265625e-06, -0.028008460998535156, -0.06202888488769531, -4.38690185546875e-05, -0.04130280017852783, -6.914137884450611e-06, -0.0002117156982421875, -0.00043487548828125, -0.00018310546875, -1.9073486328125e-06, -0.0002962350845336914, -3.0994415283203125e-05, -5.7220458984375e-06, -0.0001544952392578125, 0.0, -3.814697265625e-06, -0.001299142837524414, -4.52994936495088e-06, -0.0004596710205078125, -0.21482181549072266, -0.02099609375, -0.16002368927001953, -0.0038318634033203125, -0.0008497238159179688, -0.005162239074707031, -0.001567840576171875, -9.5367431640625e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.0003157463506795466, -1.1444084520917386e-05, -0.11451053619384766, 0.0, -3.814697265625e-05, 0.0, -3.254413604736328e-05, 0.0, -0.20669937133789062, -0.017255783081054688, -0.05121803283691406, -0.004573822021484375, -0.0027952194213867188, -8.7738037109375e-05, -0.0010251998901367188, -0.0018177032470703125, -9.5367431640625e-06, 0.0, -0.00032782554626464844, -4.649161837733118e-06, -5.7220458984375e-06, -0.00014495849609375, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -0.0015106201171875, 0.0, -0.01416921615600586, 0.0, -0.0005340576171875, -0.009113311767578125, -2.09808349609375e-05, -0.00042629241943359375, -2.09808349609375e-05, -0.01365151721984148, -0.0004138946533203125, -0.16064929962158203, -9.5367431640625e-06, -0.085906982421875, -0.0004329681396484375, -0.0200653076171875, -1.9073486328125e-06, -0.0007028579711914062, -6.198883056640625e-06, -3.0517578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0008144378662109375, 0.0, -0.0016880035400390625, 0.0, -0.002416130853816867, 0.0, -0.001064300537109375, -0.006130218505859375, -5.7220458984375e-06, -0.0002040863037109375, -3.814697265625e-06, -0.005284302402287722, -0.001018524169921875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "AugAssign", "target": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "Minion"}, "attr": "<UNK>"}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Add"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}, "hole2": 3, "hole1": "increase_armor"}}, {"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "test": {"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "cards_played"}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 76, 104, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "Minion", "<EOS>", "<UNK>", "<EOS>", 71, 23, 139, "1", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", "increase_armor", "<EOS>", "3", "<EOS>", 82, 120, 17, 113, 13, 103, 21, 134, "player", "<EOS>", "cards_played", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.Minion.<UNK> += 1\n        player.hand.increase_armor(3)\n        if player.cards_played > 0:\n            <UNK> = <UNK>()\n            self.target.add_buff(Buff(ChangeAttack(1)))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "score": -15.107896444655367, "score_history": [-3.814697265625e-06, -3.824883460998535, -9.536738616588991e-07, -5.14984130859375e-05, -8.4638240878121e-06, -4.255681051290594e-05, -1.9073486328125e-06, -3.11136209347751e-05, -2.6702880859375e-05, -0.00507354736328125, -3.24249267578125e-05, -4.768370445162873e-07, -0.0002577236737124622, -2.861018856492592e-06, 0.0, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.06462752819061279, 0.0, -0.00104522705078125, 0.0, -0.00032889842987060547, 0.0, -0.0002002716064453125, -1.71661376953125e-05, -4.2319297790527344e-05, -4.887569048150908e-06, -0.1414480209350586, -4.57763671875e-05, -1.1444091796875e-05, -0.00043487548828125, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.3007127310847864e-05, -2.2649765014648438e-06, -4.1961669921875e-05, -3.814697265625e-06, -3.0517578125e-05, -3.814697265625e-06, -4.57763671875e-05, -2.86102294921875e-05, -0.32657432556152344, -0.0007476806640625, -0.6128654479980469, -0.0007476806640625, -0.02263355255126953, 0.0, -3.0517578125e-05, 0.0, -0.4410053491592407, -5.7220458984375e-06, -0.33945268392562866, -0.0002079010009765625, -0.5929956436157227, -2.3841855067985307e-07, -0.018502235412597656, -0.02378082275390625, -0.00096893310546875, -0.002323008142411709, -1.1920928244535389e-07, -0.5391302108764648, -0.000240325927734375, -0.1421642303466797, -0.0005664825439453125, -0.01668834686279297, -2.09808349609375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.006092071533203125, 0.0, -0.3161807060241699, -3.099436753473128e-06, -0.5451455116271973, 0.0, -0.5773251056671143, 0.0, -0.29926204681396484, -0.006565093994140625, -0.005722999572753906, -6.67572021484375e-05, -0.4822273254394531, -5.7220458984375e-06, -0.0004425048828125, -5.7220458984375e-06, -0.04789936542510986, 0.0, -0.3313624858856201, -2.3841855067985307e-07, -1.9073486328125e-06, -0.047740936279296875, -2.86102294921875e-05, -0.0016231536865234375, -7.05718994140625e-05, -0.000440168019849807, -8.7738037109375e-05, -0.29553890228271484, -0.000946044921875, -0.0009613037109375, -0.000667572021484375, -0.0001773834228515625, -1.1444091796875e-05, -0.28925812244415283, 0.0, -0.7885465621948242, -0.0023813247680664062, -0.033491261303424835, -0.0012808424653485417, -0.03578662872314453, -0.0004329681396484375, -0.08949947357177734, -1.9073486328125e-05, -0.000335693359375, 0.0, -0.15909361839294434, 0.0, -0.056777238845825195, -2.3841855067985307e-07, -0.6341973543167114, -4.768370445162873e-07, 0.0, -0.1255016326904297, -0.00055694580078125, -6.055826088413596e-05, -1.823902130126953e-05, -0.07940348237752914, -0.004937410354614258, -8.940695806813892e-06, -0.014269445091485977, -3.814697265625e-06, -0.028008460998535156, -0.06202888488769531, -4.38690185546875e-05, -0.04130280017852783, -6.914137884450611e-06, -0.0002117156982421875, -0.00043487548828125, -0.00018310546875, -1.9073486328125e-06, -0.0002962350845336914, -3.0994415283203125e-05, -5.7220458984375e-06, -0.0001544952392578125, 0.0, -3.814697265625e-06, -0.001299142837524414, -4.52994936495088e-06, -0.0004596710205078125, -0.21482181549072266, -0.02099609375, -0.16002368927001953, -0.0038318634033203125, -0.0008497238159179688, -0.005162239074707031, -0.001567840576171875, -9.5367431640625e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.0003157463506795466, -1.1444084520917386e-05, -0.11451053619384766, 0.0, -3.814697265625e-05, 0.0, -3.254413604736328e-05, 0.0, -1.9107599258422852, -1.9073486328125e-06, -0.08611392974853516, -0.0012989044189453125, -2.86102294921875e-05, 0.0, -0.0003770589828491211, -1.4305104514278355e-06, -7.62939453125e-06, -0.000213623046875, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.009657859802246094, 0.0, -0.011067032814025879, 0.0, -0.0005512237548828125, -0.009699821472167969, -5.7220458984375e-06, -7.43865966796875e-05, -9.5367431640625e-06, -0.01774187758564949, -0.0005970001220703125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mana Wyrm", "hole2": "PALADIN", "hole1": 1}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "ManaWyrm", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "AugAssign", "target": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "Minion"}, "attr": "<UNK>"}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Add"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}, "hole2": 3, "hole1": "increase_armor"}}, {"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}], "hole1": "add_buff"}], "test": {"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "cards_played"}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -0.003151171028754618, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -0.0003733634948730469, -1.9073486328125e-06, -0.0006780624389648438, -1.52587890625e-05, -9.691700688563287e-05, -2.586841583251953e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 150, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "Mogu'shan", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Mogu'shan().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "score": -8.500538780990865, "score_history": [-5.7220458984375e-06, -6.987628936767578, -8.70227722771233e-06, -3.576278118089249e-07, -6.079655122448457e-06, -0.0026477454230189323, -9.1552734375e-05, -2.622600959512056e-06, -2.288818359375e-05, -0.000186920166015625, -5.14984130859375e-05, 0.0, -4.088878631591797e-05, -2.3841855067985307e-07, 0.0, -6.556510925292969e-05, -1.5497195136049413e-06, -0.000301361083984375, 0.0, -0.007235527038574219, -1.9073486328125e-06, -0.0005893707275390625, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -8.237358997575939e-05, -1.001357759378152e-05, -0.14476299285888672, -3.814697265625e-06, -3.814697265625e-06, -0.000171661376953125, -0.0008983612060546875, -5.7220458984375e-06, 0.0, -0.0006299018859863281, -3.814697265625e-06, -0.0001201629638671875, 0.0, -0.001888275146484375, -3.814697265625e-06, -0.00017189979553222656, -9.5367431640625e-06, -0.15308666229248047, -0.000102996826171875, -2.6702880859375e-05, -7.62939453125e-06, -0.002434253692626953, 0.0, -0.001560211181640625, -5.91278076171875e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.0003380760899744928, -3.4570680327306036e-06, -0.0002880096435546875, -9.5367431640625e-05, -1.9073486328125e-06, -0.000896560843102634, -0.00014495849609375, -0.00072479248046875, 0.0, -0.08522453159093857, -3.814697265625e-06, -0.0012226104736328125, -0.005748748779296875, -0.001033782958984375, -0.000278472900390625, -0.0025844573974609375, -0.006270302459597588, -0.36168694496154785, -0.30964335799217224, -5.841255187988281e-06, -0.00205230712890625, -0.010281562805175781, -3.814697265625e-06, -0.23411297798156738, -1.9073486328125e-06, -0.013689041137695312, -2.288818359375e-05, -0.0007578134536743164, -8.106231689453125e-06, -0.027991294860839844, -1.1444091796875e-05, -6.4849853515625e-05, 0.0, -0.0023881196975708008, -7.62939453125e-06, -0.000396728515625, -0.00016021728515625, -2.09808349609375e-05, -4.38690185546875e-05, 0.0, -0.00017368793487548828, 0.0, -0.0008299350738525391, 0.0, -1.9073486328125e-06, -0.000453948974609375, -0.0022125244140625, -0.011015892028808594, 0.0, -0.005489349365234375, -0.000213623046875, -0.0035943984985351562, -8.392333984375e-05, -1.71661376953125e-05, -1.9311904907226562e-05, -0.0044116973876953125, -0.00012028217315673828, 0.0, -2.6702880859375e-05, -4.649161837733118e-06, -6.556507287314162e-06, -0.0001220703125, -0.010534286499023438, -0.0004024505615234375, -0.00279998779296875, -0.0011730194091796875, -0.0024690628051757812, -9.5367431640625e-06, -0.003002166748046875, -4.1961669921875e-05, -0.000217437744140625, -7.62939453125e-06, -0.022455811500549316, -3.814697265625e-06, -0.004694938659667969, 0.0, -0.023819923400878906, -3.814697265625e-06, -0.001150369644165039, -4.38690185546875e-05, -0.0028467178344726562, -0.0003795623779296875, -0.0002346038818359375, -0.0002288818359375, -5.7220458984375e-06, 0.0, -0.0046292501501739025, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0009552239789627492, 0.0, -0.006895780563354492, -1.9073486328125e-06, -0.00225067138671875, -0.0020160675048828125, -3.24249267578125e-05, -0.00093841552734375, -1.33514404296875e-05, -0.004080275073647499, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "Mogu'shan"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -8.943594567589642, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -8.939330101013184, 0.0, -3.814697265625e-06, 0.0, -0.0012487173080444336, 0.0, -3.814697265625e-06, -7.62939453125e-05, -4.57763671875e-05, -7.62939453125e-06, -1.4305104514278355e-06, -8.463857375318184e-05, -2.3841855067985307e-07, -0.0003626346297096461, -3.814697265625e-06, -0.000713348388671875, -1.52587890625e-05, -0.00012326227442827076, -2.586841583251953e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "WARRIOR", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "<UNK>", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class <UNK>Warden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.154878614626092, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -9.151833534240723, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -0.0003733634948730469, -1.9073486328125e-06, -0.0006780624389648438, -1.52587890625e-05, -9.691700688563287e-05, -2.586841583251953e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "<UNK>Warden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 150, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "Mogu'shan", "Warden", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Mogu'shanWarden().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "score": -9.368422039955732, "score_history": [-5.7220458984375e-06, -6.987628936767578, -8.70227722771233e-06, -3.576278118089249e-07, -6.079655122448457e-06, -0.0026477454230189323, -9.1552734375e-05, -2.622600959512056e-06, -2.288818359375e-05, -0.000186920166015625, -5.14984130859375e-05, 0.0, -4.088878631591797e-05, -2.3841855067985307e-07, 0.0, -6.556510925292969e-05, -1.5497195136049413e-06, -0.000301361083984375, 0.0, -0.007235527038574219, -1.9073486328125e-06, -0.0005893707275390625, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -8.237358997575939e-05, -1.001357759378152e-05, -0.14476299285888672, -3.814697265625e-06, -3.814697265625e-06, -0.000171661376953125, -0.0008983612060546875, -5.7220458984375e-06, 0.0, -0.0006299018859863281, -3.814697265625e-06, -0.0001201629638671875, 0.0, -0.001888275146484375, -3.814697265625e-06, -0.00017189979553222656, -9.5367431640625e-06, -0.15308666229248047, -0.000102996826171875, -2.6702880859375e-05, -7.62939453125e-06, -0.002434253692626953, 0.0, -0.001560211181640625, -5.91278076171875e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.0003380760899744928, -3.4570680327306036e-06, -0.0002880096435546875, -9.5367431640625e-05, -1.9073486328125e-06, -0.000896560843102634, -0.00014495849609375, -0.00072479248046875, 0.0, -0.08522453159093857, -3.814697265625e-06, -0.0012226104736328125, -0.005748748779296875, -0.001033782958984375, -0.000278472900390625, -0.0025844573974609375, -0.006270302459597588, -1.193319320678711, -0.0067417253740131855, -0.2896367907524109, -3.814697265625e-06, -0.001209259033203125, -0.016241073608398438, -1.9073486328125e-06, -0.25233757495880127, -1.9073486328125e-06, -0.01796245574951172, -2.47955322265625e-05, -0.0006622076034545898, -7.987022399902344e-06, -0.051593780517578125, -1.1444091796875e-05, -6.67572021484375e-05, 0.0, -0.0024324655532836914, -9.5367431640625e-06, -0.0004024505615234375, -0.0001544952392578125, -1.52587890625e-05, -4.00543212890625e-05, 0.0, -0.00011265277862548828, 0.0, -0.0007441043853759766, 0.0, -1.9073486328125e-06, -0.0003108978271484375, -0.00189971923828125, -0.009833693504333496, 0.0, -0.0056324005126953125, -0.0002117156982421875, -0.003543853759765625, -8.20159912109375e-05, -1.52587890625e-05, -1.9311904907226562e-05, -0.0049114227294921875, -0.00010883808135986328, 0.0, -2.86102294921875e-05, -4.649161837733118e-06, -8.34464663057588e-06, -0.0001125335693359375, -0.010143280029296875, -0.00040435791015625, -0.00287628173828125, -0.0011501312255859375, -0.0024890899658203125, -9.5367431640625e-06, -0.00299835205078125, -4.38690185546875e-05, -0.00020599365234375, -5.7220458984375e-06, -0.02198195457458496, -3.814697265625e-06, -0.004523277282714844, 0.0, -0.02471637725830078, -3.814697265625e-06, -0.001062631607055664, -4.1961669921875e-05, -0.0028657913208007812, -0.00037384033203125, -0.0002307891845703125, -0.0002346038818359375, -5.7220458984375e-06, 0.0, -0.004457470029592514, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.000881791056599468, 0.0, -0.006860256195068359, -1.9073486328125e-06, -0.002277374267578125, -0.002079010009765625, -3.24249267578125e-05, -0.0008649826049804688, -1.33514404296875e-05, -0.004070858005434275, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "Mogu'shanWarden"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.501566162428823, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -9.498268127441406, -3.933898824470816e-06, -0.00011658627045108005, 0.0, -1.990795135498047e-05, 0.0, -0.00014805691898800433, 0.0, -5.7220458984375e-06, -0.000125885009765625, -4.57763671875e-05, -7.62939453125e-06, -1.9073468138230965e-06, -5.2213657909305766e-05, -1.1920928244535389e-07, -0.0004092454619240016, -1.9073486328125e-06, -0.0006437301635742188, -2.09808349609375e-05, -0.00022458971943706274, -2.574920654296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 7}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.665621750291258, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -9.575809478759766, -0.0001220703125, 0.0, -4.529951547738165e-05, 0.0, 0.0, -0.000118255615234375, -6.079665126890177e-06, -0.0003529787063598633, 0.0, -0.08646297454833984, 0.0, -4.5299530029296875e-06, 0.0, -0.0001232624053955078, 0.0, -1.9073486328125e-06, -6.29425048828125e-05, -5.91278076171875e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -6.306168506853282e-05, -1.1920928244535389e-07, -0.0004467964172363281, -1.9073486328125e-06, -0.0006628036499023438, -1.33514404296875e-05, -2.1696079784305766e-05, -2.574920654296875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Mogu'shan Warden", "hole3": "COMMON", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, taunt=True)\n", "score": -9.679391970635365, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -9.67629337310791, 0.0, -0.00030243248329497874, -1.9073486328125e-06, -0.0006847381591796875, -2.288818359375e-05, -0.00017380625649821013, -2.014636993408203e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, charge=True)\n", "score": -9.682410590615497, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -9.677628517150879, -6.67572021484375e-05, -0.0025377273559570312, -1.52587890625e-05, -0.00019073486328125, -1.1801719665527344e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "enrage", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, enrage=True)\n", "score": -9.688320748714638, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -9.6265287399292, -1.9073486328125e-06, -0.059513092041015625, -1.52587890625e-05, -0.0002858638181351125, -1.609325408935547e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "enrage", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.703535549607501, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -0.0003733634948730469, -1.9073486328125e-06, -0.0006780624389648438, -1.52587890625e-05, -9.700432777404785, -7.43865966796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, auras=True)\n", "score": -9.75201176872654, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -9.327339172363281, -4.76837158203125e-05, -0.4224052429199219, -2.09808349609375e-05, -0.00022232526680454612, -1.6570091247558594e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "auras", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWardenWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.808431562789544, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -9.805041313171387, -0.0003369478799868375, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.000152587890625, -1.1444091796875e-05, 0.0, -4.172325134277344e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00011456012725830078, -2.3841830625315197e-06, -0.00011467933654785156, 0.0, -5.841255187988281e-06, 0.0, -5.197524296818301e-05, 0.0, -3.814697265625e-06, -8.392333984375e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.1920922133867862e-06, -6.735322676831856e-05, -1.1920928244535389e-07, -0.0003788471221923828, -1.9073486328125e-06, -0.0006799697875976562, -1.52587890625e-05, -9.48904562392272e-05, -2.586841583251953e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWardenWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "players", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, players=True)\n", "score": -9.822571389641986, "score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -9.807905197143555, -0.0002117156982421875, -0.012247085571289062, -1.52587890625e-05, -0.0001938343048095703, -3.8504600524902344e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "players", "hole1": 7}], "hole4": "player"}}, {"choice_history": [70, 150, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 93, 196, 33, 205, "Mogu'shan", "<EOS>", "summon", "<EOS>", 239, 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 44, 134, "game", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Mogu'shan().summon(game, len(player.minions), game)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "score": -11.591995668285023, "score_history": [-5.7220458984375e-06, -6.987628936767578, -8.70227722771233e-06, -3.576278118089249e-07, -6.079655122448457e-06, -0.0026477454230189323, -9.1552734375e-05, -2.622600959512056e-06, -2.288818359375e-05, -0.000186920166015625, -5.14984130859375e-05, 0.0, -4.088878631591797e-05, -2.3841855067985307e-07, 0.0, -6.556510925292969e-05, -1.5497195136049413e-06, -0.000301361083984375, 0.0, -0.007235527038574219, -1.9073486328125e-06, -0.0005893707275390625, -1.9073486328125e-06, -0.0001659393310546875, -2.09808349609375e-05, -8.237358997575939e-05, -1.001357759378152e-05, -0.14476299285888672, -3.814697265625e-06, -3.814697265625e-06, -0.000171661376953125, -0.0008983612060546875, -5.7220458984375e-06, 0.0, -0.0006299018859863281, -3.814697265625e-06, -0.0001201629638671875, 0.0, -0.001888275146484375, -3.814697265625e-06, -0.00017189979553222656, -9.5367431640625e-06, -0.15308666229248047, -0.000102996826171875, -2.6702880859375e-05, -7.62939453125e-06, -0.002434253692626953, 0.0, -0.001560211181640625, -5.91278076171875e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.0003380760899744928, -3.4570680327306036e-06, -0.0002880096435546875, -9.5367431640625e-05, -1.9073486328125e-06, -0.000896560843102634, -0.00014495849609375, -0.00072479248046875, 0.0, -0.08522453159093857, -3.814697265625e-06, -0.0012226104736328125, -0.005748748779296875, -0.001033782958984375, -0.000278472900390625, -0.0025844573974609375, -0.006270302459597588, -0.36168694496154785, -0.30964335799217224, -5.841255187988281e-06, -0.00205230712890625, -0.010281562805175781, -3.814697265625e-06, -1.5970604419708252, -3.814697265625e-06, -1.0426721572875977, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.06376159191131592, -2.47955322265625e-05, -0.0004405975341796875, -7.2479248046875e-05, -1.33514404296875e-05, -3.62396240234375e-05, 0.0, -6.4849853515625e-05, 0.0, -0.0009377002716064453, 0.0, -0.3329648971557617, -0.0001926422119140625, -0.00551605224609375, 0.0, -0.0016918182373046875, -0.007538795471191406, -0.00075531005859375, -0.3169896602630615, -8.344646857949556e-07, -0.001800537109375, -0.0007343292236328125, -0.0032148361206054688, -0.0001583099365234375, -2.288818359375e-05, -4.0650367736816406e-05, -0.00139617919921875, -0.00015652179718017578, -1.9073486328125e-06, -1.9073486328125e-05, -4.52994936495088e-06, -1.7285328794969246e-05, -0.013050079345703125, -0.015432357788085938, -0.0003490447998046875, -0.008344650268554688, -0.0016803741455078125, -0.00739288330078125, -9.5367431640625e-06, -0.004116058349609375, -4.9591064453125e-05, -0.0004329681396484375, -5.7220458984375e-06, -0.010972857475280762, -3.814697265625e-06, -0.0064945220947265625, 0.0, -0.026233673095703125, -3.814697265625e-06, -0.0012134313583374023, -4.57763671875e-05, -0.002613067626953125, -0.0002918243408203125, -0.000270843505859375, -0.000213623046875, -5.7220458984375e-06, 0.0, -0.004564161412417889, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.0007724761380814016, 0.0, -0.006325721740722656, -1.9073486328125e-06, -0.0021152496337890625, -0.0019464492797851562, -3.24249267578125e-05, -0.0009088516235351562, -1.52587890625e-05, -0.004019356798380613, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Mogu'shan Warden", "hole2": "ALL", "hole1": 4}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard", "hole0": "Mogu'shanWarden", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "Mogu'shan"}, "hole2": [{"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, {"_type": "Name", "id": "game"}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -2.7850022610336964, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -0.35050392150878906, -0.00032806396484375, -0.0003376007080078125, 0.0, -0.00044739246368408203, 0.0, -0.0001010894775390625, -5.91278076171875e-05, 0.0, -0.004351671785116196, -1.5497207641601562e-05, -0.0002841949462890625, -1.52587890625e-05, -0.02742491289973259, -3.921916140825488e-05, -0.5122365951538086, -2.288818359375e-05, -6.29425048828125e-05, -9.72747802734375e-05, -0.000457763671875, -5.7220458984375e-06, -0.001407623291015625, 0.0, -0.0013093948364257812, -4.57763671875e-05, -0.040204256772994995, -0.003659481881186366, -0.001361846923828125, -8.7738037109375e-05, -0.0010547637939453125, -3.814697265625e-06, -0.0018329618033021688, -2.0265579223632812e-06, -0.09815430641174316, -1.9073486328125e-06, -0.000545501708984375, -0.0001201629638671875, 0.0, -8.20159912109375e-05, 0.0, -0.06489181518554688, -3.814697265625e-06, -0.0007476806640625, -1.9073486328125e-06, -0.0002155303955078125, -4.38690185546875e-05, -4.76837158203125e-05, 0.0, -0.0011082887649536133, -1.9073486328125e-06, -0.0005130767822265625, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -2.288818359375e-05, 0.0, -0.0002841949462890625, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 30, 193, "range", "<EOS>", "3", "<EOS>", 249, 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(3):\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -4.381104340401123, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -1.2437000274658203, -0.001880645751953125, -0.023076802492141724, -0.0002428293228149414, -0.2300204634666443, -3.576278118089249e-07, -0.042942047119140625, -0.17660140991210938, -1.52587890625e-05, -0.08241844177246094, -1.9073486328125e-06, -0.44066178798675537, -2.7537107598618604e-05, -0.10529076308012009, -3.814697265625e-06, -0.06987667083740234, -0.000255584716796875, 0.0, -0.00011479854583740234, 0.0, -0.27713584899902344, -3.814697265625e-06, -0.0013437271118164062, -2.0265579223632812e-06, -0.0001583099365234375, -0.0001125335693359375, -4.9591064453125e-05, 0.0, -0.013648152351379395, 0.0, -0.0007114410400390625, -5.7220458984375e-06, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -3.4332275390625e-05, 0.0, -0.0002918243408203125, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Template34", "hole0": "range", "hole1": 3}}], "hole4": "player"}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 83, 122, "<UNK>", "<EOS>", 228, 223, "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        from <UNK> import <UNK>\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -4.551292390206747, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.92010498046875, -0.23735523223876953, -0.007056236267089844, -0.05252265930175781, -1.9073486328125e-06, -0.0039386749267578125, -0.00028228759765625, -0.005324247293174267, -0.003357410430908203, -0.016973521560430527, 0.0, -0.22177410125732422, -0.000232696533203125, -5.7220458984375e-06, 0.0, -0.06950688362121582, -1.9073486328125e-06, -0.020705223083496094, -0.00018310546875, -0.000202178955078125, 0.0, -0.0011535882949829102, 0.0, -0.0001201629638671875, -3.4332275390625e-05, -1.9073486328125e-06, -0.002402543555945158, -1.1563301086425781e-05, -0.00025177001953125, -5.7220458984375e-06, -0.037290822714567184, -6.007979027344845e-05, -0.072967529296875, -9.5367431640625e-06, -7.82012939453125e-05, -8.96453857421875e-05, -0.0003299713134765625, -7.62939453125e-06, -0.0009354352951049805, -1.1920928244535389e-07, -0.0022335052490234375, -5.14984130859375e-05, -0.03336196765303612, -0.0036599594168365, -0.0018672943115234375, -0.0001277923583984375, -0.000713348388671875, -3.814697265625e-06, -0.0019506214885041118, -2.0265579223632812e-06, -0.11940062046051025, -1.9073486328125e-06, -0.00064849853515625, -0.0001277923583984375, -1.9073486328125e-06, -9.250640869140625e-05, 0.0, -0.06243324279785156, -1.9073486328125e-06, -0.0007724761962890625, -1.9073486328125e-06, -0.0002307891845703125, -4.00543212890625e-05, -4.76837158203125e-05, 0.0, -0.0010739564895629883, -1.9073486328125e-06, -0.00048828125, -1.9073486328125e-06, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -2.288818359375e-05, 0.0, -0.000270843505859375, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 249, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n", "score": -5.073615735728708, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -0.35050392150878906, -0.00032806396484375, -0.0003376007080078125, 0.0, -0.00044739246368408203, 0.0, -0.0001010894775390625, -5.91278076171875e-05, 0.0, -0.004351671785116196, -1.5497207641601562e-05, -0.0002841949462890625, -1.52587890625e-05, -0.02742491289973259, -3.921916140825488e-05, -0.9177284240722656, -2.0019569396972656, -5.340576171875e-05, -0.000583648681640625, -0.000438690185546875, -3.0517578125e-05, -0.07696402072906494, -1.9073486328125e-06, -0.0006694793701171875, -7.62939453125e-05, -0.01718294993042946, -0.0035990450996905565], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player"}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 36, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 83, 122, "<UNK>", "<EOS>", 228, 223, "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(player.game, \n            lambda t: t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        from <UNK> import <UNK>\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.summon(player, game, len(player.minions))\n", "score": -5.515015235068738, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -1.0080070495605469, -0.0001506805419921875, -0.0014505386352539062, 0.0, -0.0008881092071533203, 0.0, -0.07156705856323242, -1.9073486328125e-06, -0.000152587890625, -2.47955322265625e-05, -7.05718994140625e-05, -3.814697265625e-05, -0.44147640466690063, -0.0002027548325713724, -0.00946807861328125, -9.5367431640625e-06, -0.00041961669921875, -1.9073486328125e-06, -0.029801197350025177, -4.768370445162873e-07, -0.02491425909101963, -7.152531907195225e-06, -8.392333984375e-05, -0.037306785583496094, -1.33514404296875e-05, -0.024181365966796875, -3.62396240234375e-05, -5.9723854064941406e-05, -2.0503914129221812e-05, -0.0114898681640625, -0.0023441314697265625, -9.918212890625e-05, -0.0006261419039219618, -1.2397689715726301e-05, -0.0008869171142578125, -0.00025177001953125, -8.96453857421875e-05, -5.7220458984375e-06, -0.00012218952178955078, 0.0, -0.00115966796875, -0.00024127960205078125, 0.0, -6.866455078125e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.9249649047851562, -0.22415542602539062, -0.006907463073730469, -0.05252528190612793, -3.814697265625e-06, -0.003924369812011719, -0.0002841949462890625, -0.005281058605760336, -0.0033745765686035156, -0.01681480184197426, 0.0, -0.21942901611328125, -0.000232696533203125, -5.7220458984375e-06, 0.0, -0.06939339637756348, -1.9073486328125e-06, -0.02068614959716797, -0.00018310546875, -0.000202178955078125, 0.0, -0.0011535882949829102, 0.0, -0.0001201629638671875, -3.4332275390625e-05, -1.9073486328125e-06, -0.0024055172689259052, -1.1563301086425781e-05, -0.00025177001953125, -5.7220458984375e-06, -0.03730977699160576, -5.9960588259855285e-05, -0.07291221618652344, -9.5367431640625e-06, -7.82012939453125e-05, -8.96453857421875e-05, -0.000331878662109375, -7.62939453125e-06, -0.0009344816207885742, -1.1920928244535389e-07, -0.0022335052490234375, -5.14984130859375e-05, -0.03334759920835495, -0.003657932858914137, -0.00186920166015625, -0.0001277923583984375, -0.000713348388671875, -3.814697265625e-06, -0.001951575162820518, -2.0265579223632812e-06, -0.11941492557525635, -1.9073486328125e-06, -0.00064849853515625, -0.0001277923583984375, -1.9073486328125e-06, -9.250640869140625e-05, 0.0, -0.06243896484375, -1.9073486328125e-06, -0.0007724761962890625, -1.9073486328125e-06, -0.0002307891845703125, -4.00543212890625e-05, -4.76837158203125e-05, 0.0, -0.0010739564895629883, -1.9073486328125e-06, -0.00048828125, -1.9073486328125e-06, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -2.288818359375e-05, 0.0, -0.000270843505859375, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 36, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.summon(player, player.game, len(player.minions))\n", "score": -5.5209713276535695, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -0.35050392150878906, -0.00032806396484375, -0.0003376007080078125, 0.0, -0.00044739246368408203, 0.0, -0.0001010894775390625, -5.91278076171875e-05, 0.0, -0.004351671785116196, -1.5497207641601562e-05, -0.0002841949462890625, -1.52587890625e-05, -0.02742491289973259, -3.921916140825488e-05, -0.5122365951538086, -2.288818359375e-05, -6.29425048828125e-05, -9.72747802734375e-05, -0.000457763671875, -5.7220458984375e-06, -0.001407623291015625, 0.0, -0.0013093948364257812, -4.57763671875e-05, -0.040204256772994995, -0.003659481881186366, -0.001361846923828125, -8.7738037109375e-05, -0.0010547637939453125, -3.814697265625e-06, -0.0018329618033021688, -2.0265579223632812e-06, -0.09815430641174316, -1.9073486328125e-06, -0.000545501708984375, -0.0001201629638671875, 0.0, -8.20159912109375e-05, 0.0, -2.779599189758301, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, -0.0069904327392578125, 0.0, -0.014107346534729004, -1.71661376953125e-05, -0.0012416839599609375, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -0.00078582763671875, 0.0, -0.000316619873046875, -1.9073486328125e-06, -1.9073486328125e-06, -0.0003223419189453125, 0.0, -1.1444091796875e-05, 0.0, -0.0004119873046875, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player"}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n", "score": -5.715184477954381, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -4.1054863929748535, -1.1003665924072266, -7.2479248046875e-05, -0.003997802734375, -1.9073486328125e-06, -1.52587890625e-05, -9.5367431640625e-06, -3.8146954466355965e-06, 0.0, -1.728534698486328e-05, 0.0, -2.622604142743512e-06, -9.5367431640625e-06, -1.4066696166992188e-05, -0.0002193450927734375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 249, 75, 102, 237, 44, 134, "option", "<EOS>", 33, 205, "Wisps5", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            if len(player.minions) < 7:\n                option = Wisps5()\n", "score": -5.987611309490603, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -0.35050392150878906, -0.00032806396484375, -0.0003376007080078125, 0.0, -0.00044739246368408203, 0.0, -0.0001010894775390625, -5.91278076171875e-05, 0.0, -0.004351671785116196, -1.5497207641601562e-05, -0.0002841949462890625, -1.52587890625e-05, -0.02742491289973259, -3.921916140825488e-05, -0.9177284240722656, -0.41866016387939453, -0.009274482727050781, -0.15259456634521484, -5.7220458984375e-06, -0.03184223175048828, -0.000118255615234375, -0.0043201446533203125, 0.0, -0.0016247034072875977, 0.0, -1.71661376953125e-05, -0.000865936279296875, -2.09808349609375e-05, -0.4830799102783203, 0.0, -6.079673767089844e-06, 0.0, -0.004801511764526367, -7.62939453125e-06, -3.814697265625e-05, -0.0011196136474609375, -0.00011444091796875, -2.47955322265625e-05, -1.9073486328125e-05, -0.030597034841775894, -7.033347174001392e-06, -1.1271343231201172, -0.00836944580078125, -1.52587890625e-05, -0.0003681182861328125, -0.005681037902832031, -2.6702880859375e-05, -0.04484478384256363, -3.814697265625e-06, -0.3481636047363281, -0.000194549560546875, -0.33996614813804626, -0.0016250608023256063], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "Wisps5"}, "targets": [{"_type": "Name", "id": "option"}]}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player"}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 83, 122, "<UNK>", "<EOS>", 228, 223, "<UNK>", "<EOS>", "0", "<EOS>", 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        from <UNK> import <UNK>\n        <UNK> = <UNK>()\n", "score": -6.01336739683461, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.92010498046875, -0.23735523223876953, -0.007056236267089844, -0.05252265930175781, -1.9073486328125e-06, -0.0039386749267578125, -0.00028228759765625, -0.005324247293174267, -0.003357410430908203, -0.016973521560430527, 0.0, -1.894582748413086, -0.002719879150390625, -5.7220458984375e-06, -0.012456893920898438, -2.47955322265625e-05, -0.06149101257324219, 0.0, -0.11240291595458984, -0.0001220703125, -0.03305144980549812, -0.003241413738578558], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "<UNK>"}]}, {"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        return len(player.minions) < 7\n", "score": -6.229465015680034, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -2.8358583450317383, -0.18259906768798828, -0.0009593963623046875, -0.0711526870727539, -0.0004405975341796875, -0.036070823669433594, -0.000270843505859375, -0.24561405181884766, 0.0, -0.04437575116753578, 0.0, -9.918212890625e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.11205768585205078, 0.0, -2.5510715204291046e-05, 0.0, -0.02248227596282959, -1.9073486328125e-06, -2.47955322265625e-05, -0.0006084442138671875, -0.000133514404296875, -0.0001850128173828125, -1.71661376953125e-05, -0.030123982578516006, -3.099440846199286e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "Return", "value": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 249, 75, 102, 237, 44, 134, "option", "<EOS>", 33, 205, "<UNK>", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            if len(player.minions) < 7:\n                option = <UNK>()\n", "score": -7.0195129363382875, "score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -1.088521957397461, -0.0013971328735351562, -1.52587890625e-05, -0.000591278076171875, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -4.887576324108522e-06, 0.0, -7.62939453125e-06, 0.0, -4.291534423828125e-06, -9.5367431640625e-06, -1.4185905456542969e-05, -0.0002689361572265625, -0.04934883117675781, -0.0001354217529296875, -1.52587890625e-05, 0.0, -0.025097131729125977, 0.0, -0.35050392150878906, -0.00032806396484375, -0.0003376007080078125, 0.0, -0.00044739246368408203, 0.0, -0.0001010894775390625, -5.91278076171875e-05, 0.0, -0.004351671785116196, -1.5497207641601562e-05, -0.0002841949462890625, -1.52587890625e-05, -0.02742491289973259, -3.921916140825488e-05, -0.9177284240722656, -0.41866016387939453, -0.009274482727050781, -0.15259456634521484, -5.7220458984375e-06, -0.03184223175048828, -0.000118255615234375, -0.0043201446533203125, 0.0, -0.0016247034072875977, 0.0, -1.71661376953125e-05, -0.000865936279296875, -2.09808349609375e-05, -0.4830799102783203, 0.0, -6.079673767089844e-06, 0.0, -0.004801511764526367, -7.62939453125e-06, -3.814697265625e-05, -0.0011196136474609375, -0.00011444091796875, -2.47955322265625e-05, -1.9073486328125e-05, -0.030597034841775894, -7.033347174001392e-06, -1.1271343231201172, -0.00836944580078125, -1.52587890625e-05, -0.0003681182861328125, -0.005681037902832031, -2.6702880859375e-05, -0.04484478384256363, -3.814697265625e-06, -0.3481636047363281, -0.000194549560546875, -1.370806097984314, -0.0026867378037422895], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "option"}]}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "hole4": "player"}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 83, 122, "<UNK>", "<EOS>", 228, 223, "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        from <UNK> import <UNK>\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.<UNK>(len(player.minions))\n", "score": -7.1711673444301525, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.92010498046875, -0.23735523223876953, -0.007056236267089844, -0.05252265930175781, -1.9073486328125e-06, -0.0039386749267578125, -0.00028228759765625, -0.005324247293174267, -0.003357410430908203, -0.016973521560430527, 0.0, -0.22177410125732422, -0.000232696533203125, -5.7220458984375e-06, 0.0, -0.06950688362121582, -1.9073486328125e-06, -0.020705223083496094, -0.00018310546875, -0.000202178955078125, 0.0, -0.0011535882949829102, 0.0, -0.0001201629638671875, -3.4332275390625e-05, -1.9073486328125e-06, -0.002402543555945158, -1.1563301086425781e-05, -0.00025177001953125, -5.7220458984375e-06, -0.037290822714567184, -6.007979027344845e-05, -0.072967529296875, -9.5367431640625e-06, -7.82012939453125e-05, -8.96453857421875e-05, -0.0003299713134765625, -7.62939453125e-06, -0.0009354352951049805, -1.1920928244535389e-07, -0.0022335052490234375, -5.14984130859375e-05, -0.03336196765303612, -0.0036599594168365, -0.0018672943115234375, -0.0001277923583984375, -0.000713348388671875, -3.814697265625e-06, -0.0019506214885041118, -2.0265579223632812e-06, -2.2395529747009277, -2.503394853192731e-06, -0.010717391967773438, -0.4086904525756836, -0.0003108978271484375, -0.000457763671875, 0.0, -0.09149277210235596, -1.9073486328125e-06, -0.011724472045898438, -7.62939453125e-06, -1.9073486328125e-06, -0.027881622314453125, 0.0, -0.00017380714416503906, 0.0, -0.014548540115356445, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 83, 122, "<UNK>", "<EOS>", 228, 223, "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "3", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "<UNK>", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 36, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        from <UNK> import <UNK>\n        for i in range(0, 3):\n            <UNK> = <UNK>()\n            <UNK>.summon(player, player.game, len(player.minions))\n", "score": -7.328811854699545, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.92010498046875, -0.23735523223876953, -0.007056236267089844, -0.05252265930175781, -1.9073486328125e-06, -0.0039386749267578125, -0.00028228759765625, -0.005324247293174267, -0.003357410430908203, -0.016973521560430527, 0.0, -0.22177410125732422, -0.000232696533203125, -5.7220458984375e-06, 0.0, -0.06950688362121582, -1.9073486328125e-06, -0.020705223083496094, -0.00018310546875, -0.000202178955078125, 0.0, -0.0011535882949829102, 0.0, -0.0001201629638671875, -3.4332275390625e-05, -1.9073486328125e-06, -0.002402543555945158, -1.1563301086425781e-05, -0.00025177001953125, -5.7220458984375e-06, -0.037290822714567184, -6.007979027344845e-05, -0.072967529296875, -9.5367431640625e-06, -7.82012939453125e-05, -8.96453857421875e-05, -0.0003299713134765625, -7.62939453125e-06, -0.0009354352951049805, -1.1920928244535389e-07, -0.0022335052490234375, -5.14984130859375e-05, -0.03336196765303612, -0.0036599594168365, -0.0018672943115234375, -0.0001277923583984375, -0.000713348388671875, -3.814697265625e-06, -0.0019506214885041118, -2.0265579223632812e-06, -0.11940062046051025, -1.9073486328125e-06, -0.00064849853515625, -0.0001277923583984375, -1.9073486328125e-06, -9.250640869140625e-05, 0.0, -2.8176708221435547, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -0.0067462921142578125, 0.0, -0.015258193016052246, -1.52587890625e-05, -0.0013055801391601562, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -0.0008029937744140625, 0.0, -0.0003070831298828125, -1.9073486328125e-06, -1.9073486328125e-06, -0.000335693359375, 0.0, -1.1444091796875e-05, 0.0, -0.0003986358642578125, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "<UNK>"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "<UNK>"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}], "hole1": "summon"}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 3}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 253, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 78, 112, "<UNK>", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "3", " ", "Damage", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class <UNK>(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 3 Damage', 0,\n                    CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, True,\n                    target_func=hearthbreaker.targeting.\n                    find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2', 0, CHARACTER_CLASS.DRUID,\n                    CARD_RARITY.COMMON, True, target_func=hearthbreaker.\n                    targeting.find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2', 0, CHARACTER_CLASS.DRUID,\n                    CARD_RARITY.COMMON, True, target_func=hearthbreaker.\n                    targeting.find_minion_spell_target)\n\n            def use(self, player, game):\n                target.change_attack(2)\n        player.hero = True\n", "score": -24.517263692838853, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.6296110153198242, -0.007210731506347656, -1.1444091796875e-05, -0.018962860107421875, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -4.279529821360484e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1457672119140625e-06, -4.76837158203125e-05, -0.0001454353187000379, -0.00020611286163330078, -0.01632213592529297, -0.0001010894775390625, -0.0029800243210047483, -0.000495276297442615, -7.62939453125e-06, -0.0006923675537109375, -2.288818359375e-05, -0.007732106372714043, -0.45710182189941406, -7.62939453125e-06, -0.9497623443603516, -0.04411125183105469, -0.2488861083984375, -0.0024837199598550797, -0.013647789135575294, -0.38615143299102783, -0.06500411033630371, -1.0985647439956665, -0.01707935333251953, -0.12233348190784454, -0.0002079010009765625, -0.0004965066909790039, -3.814697265625e-06, -0.00077056884765625, -5.340576171875e-05, -0.01584768295288086, 0.0, -3.0517578125e-05, -0.00028228759765625, -0.0024204254150390625, -5.14984130859375e-05, -1.1920928244535389e-07, -0.000270843505859375, -3.0517578125e-05, -2.6702880859375e-05, -0.0001773834228515625, -8.821463779895566e-06, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000255584716796875, 0.0, -7.05718994140625e-05, -4.172325134277344e-06, -0.013957858085632324, -9.5367431640625e-06, -0.000469207763671875, -2.09808349609375e-05, -0.0004172325134277344, 0.0, -0.000762939453125, -3.62396240234375e-05, -0.00019073486328125, 0.0, -0.00013566017150878906, -9.655952453613281e-06, -0.000751495361328125, -0.000331878662109375, -1.9073486328125e-06, -9.1552734375e-05, -4.172324406681582e-05, -1.3112959095451515e-05, -0.5828227996826172, -1.0364141464233398, -7.2479248046875e-05, -0.04251289367675781, -0.0025615692138671875, -3.0517578125e-05, 0.0, -0.16225814819335938, 0.0, -0.18013381958007812, -1.1920928244535389e-07, -0.7032939195632935, 0.0, -0.009450912475585938, -5.91278076171875e-05, -0.001392364501953125, -0.0002040863037109375, -9.918212890625e-05, -0.0020961761474609375, 0.0, -0.15314018726348877, 0.0, -0.5393277406692505, 0.0, -0.027032852172851562, -6.866455078125e-05, -5.91278076171875e-05, 0.0, -0.2237253189086914, -7.82012939453125e-05, -0.1732078641653061, -4.577627987600863e-05, -5.7220458984375e-06, -0.12522029876708984, 0.0, -0.0048125977627933025, -0.10454940795898438, -7.62939453125e-06, -0.5480842590332031, -0.041764259338378906, -0.3397378921508789, -0.005733226891607046, -0.005949852988123894, -0.2693469524383545, -0.07347548007965088, -0.6717244386672974, -0.56585693359375, -0.001597403665073216, -1.52587890625e-05, -0.0015012025833129883, -5.340576171875e-05, -0.0164564847946167, 0.0, -2.47955322265625e-05, -0.0004024505615234375, -0.0043849945068359375, -4.9591064453125e-05, -1.1920928244535389e-07, -0.000171661376953125, -2.6702880859375e-05, -2.288818359375e-05, -0.00019073486328125, -9.298297300119884e-06, -6.67572021484375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014593124389648438, -9.5367431640625e-06, -0.0004329681396484375, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.0007953643798828125, -3.814697265625e-05, -0.000179290771484375, 0.0, -0.00014710426330566406, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034236907958984375, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.347058241663035e-05, -0.5582723617553711, -1.0680723190307617, -7.2479248046875e-05, -0.043010711669921875, -0.00255584716796875, -3.0517578125e-05, 0.0, -0.15781307220458984, 0.0, -0.17953014373779297, -1.1920928244535389e-07, -0.7050279378890991, 0.0, -0.009352684020996094, -5.91278076171875e-05, -0.00140380859375, -0.0002040863037109375, -9.918212890625e-05, -0.0020856857299804688, 0.0, -0.1528869867324829, 0.0, -0.5402117967605591, 0.0, -0.026950836181640625, -6.866455078125e-05, -5.91278076171875e-05, 0.0, -0.22424030303955078, -7.82012939453125e-05, -0.17285500466823578, -4.565707058645785e-05, -5.7220458984375e-06, -0.12514972686767578, 0.0, -0.004813432227820158, -0.10457611083984375, -7.62939453125e-06, -0.5480728149414062, -0.04176807403564453, -0.3397970199584961, -0.005733226891607046, -0.0059516411274671555, -0.26937389373779297, -0.07347166538238525, -0.671739935874939, -0.565943717956543, -0.001597284572198987, -1.52587890625e-05, -0.0015012025833129883, -5.340576171875e-05, -0.016460299491882324, 0.0, -2.47955322265625e-05, -0.0004024505615234375, -0.0043849945068359375, -4.9591064453125e-05, -1.1920928244535389e-07, -0.000171661376953125, -2.6702880859375e-05, -2.288818359375e-05, -0.00019073486328125, -9.298297300119884e-06, -6.67572021484375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014593124389648438, -9.5367431640625e-06, -0.0004329681396484375, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.0007953643798828125, -3.814697265625e-05, -0.000179290771484375, 0.0, -0.00014710426330566406, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034332275390625, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.347058241663035e-05, -0.8715381622314453, -0.33586883544921875, -7.82012939453125e-05, -0.10838508605957031, -0.0053806304931640625, -1.9073486328125e-05, -1.9073486328125e-06, -0.01616191864013672, 0.0, -0.33205580711364746, -1.3708974620385561e-05, -0.5910717248916626, 0.0, -0.14948558807373047, -1.52587890625e-05, -0.0001983642578125, -0.20350170135498047, -4.00543212890625e-05, -0.0034389495849609375, 0.0, -0.15592217445373535, 0.0, -1.1330368518829346, 0.0, -0.5525646209716797, -1.52587890625e-05, -3.62396240234375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ClassDef", "name": "<UNK>", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 3 Damage", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "name": "Wisps5", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 2", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "name": "Wisps5", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 2", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 2, "hole1": "change_attack"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 38, 106, 3, 238, 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 40, 113, 16, 110, 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 238, 44, 134, "game", "<EOS>", 41, 127, 0, 177, "t", "<EOS>", 31, 195, 21, 134, "t", "<EOS>", "spell_targetable", "<EOS>", 234, 9, 237, 45, 136, "Null", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 253, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 78, 112, "<UNK>", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "3", " ", "Damage", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and (len(player.minions) < 7 or\n            hearthbreaker.targeting.find_minion_spell_target(game, lambda t:\n            t.spell_targetable()) is not Null)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class <UNK>(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 3 Damage', 0,\n                    CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, True,\n                    target_func=hearthbreaker.targeting.\n                    find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2', 0, CHARACTER_CLASS.DRUID,\n                    CARD_RARITY.COMMON, True, target_func=hearthbreaker.\n                    targeting.find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2', 0, CHARACTER_CLASS.DRUID,\n                    CARD_RARITY.COMMON, True, target_func=hearthbreaker.\n                    targeting.find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2', 0, CHARACTER_CLASS.DRUID,\n                    CARD_RARITY.COMMON, True, target_func=hearthbreaker.\n                    targeting.find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n", "score": -30.15081012173109, "score_history": [-9.5367431640625e-06, -1.4233627319335938, -0.0002447141450829804, -0.00017057613877113909, -1.6925856471061707e-05, -3.11136209347751e-05, -2.09808349609375e-05, -3.24249267578125e-05, -0.0001087188720703125, -0.0003490447998046875, -1.2636145584110636e-05, 0.0, -3.933906555175781e-06, -1.2159273865108844e-05, -0.0008176495903171599, 0.0, -0.024361133575439453, 0.0, -0.011576056480407715, 0.0, -0.003854630747810006, 0.0, -0.0003108978271484375, -3.814697265625e-05, -0.0024137496948242188, -7.891652785474434e-05, -0.028360366821289062, -0.07934093475341797, -8.58306884765625e-05, -0.00424957275390625, -4.57763671875e-05, -0.0001697540283203125, -2.6702880859375e-05, -0.0005855560302734375, -0.000247955322265625, 0.0, 0.0, -9.298318218498025e-06, 0.0, -0.0028591156005859375, 0.0, -1.7762184143066406e-05, 0.0, -0.00012457193224690855, 0.0, -0.013372421264648438, -0.010924339294433594, -0.0065364837646484375, -7.05718994140625e-05, -0.0013532638549804688, -5.14984130859375e-05, -0.0003452301025390625, -5.53131103515625e-05, -8.58306884765625e-05, 0.0, -0.00699925422668457, -3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-05, -0.0003757476806640625, 0.0, -7.748603820800781e-06, 0.0, -0.0009375810623168945, -1.9073486328125e-06, -5.14984130859375e-05, -0.000835418701171875, -2.86102294921875e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.0072561088018119335, -2.0265579223632812e-06, -0.0023622512817382812, -4.00543212890625e-05, -0.000537872314453125, -0.000118255615234375, -0.025690078735351562, -9.5367431640625e-06, -0.23175048828125, -4.1961669921875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.049105167388916016, -3.814697265625e-06, -0.0024768102448433638, -1.3708998267247807e-05, -0.004595272243022919, -1.33514404296875e-05, -0.0032176971435546875, -0.50653076171875, -5.340576171875e-05, -0.0013011693954467773, -4.410743713378906e-06, -0.010176658630371094, -4.38690185546875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.0527193546295166, -5.2927622164133936e-05, -0.0067386627197265625, -9.5367431640625e-06, -0.0006866455078125, -1.9073486328125e-06, -0.016270684078335762, -2.503394853192731e-06, -0.02439391240477562, -9.655922440288123e-06, -0.000118255615234375, -0.03398609161376953, -1.33514404296875e-05, -0.020574569702148438, -3.814697265625e-05, -5.7816505432128906e-05, -2.2172822355059907e-05, -0.012755393981933594, -0.002773284912109375, -9.918212890625e-05, -0.0006381839048117399, -1.1920858014491387e-05, -0.0007839202880859375, -0.000255584716796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00011837482452392578, 0.0, -0.0011653900146484375, -0.000240325927734375, 0.0, -7.05718994140625e-05, -2.1457672119140625e-05, -8.940656698541716e-06, -0.6296110153198242, -0.007210731506347656, -1.1444091796875e-05, -0.018962860107421875, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -4.279529821360484e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1457672119140625e-06, -4.76837158203125e-05, -0.0001454353187000379, -0.00020611286163330078, -0.01632213592529297, -0.0001010894775390625, -0.0029800243210047483, -0.000495276297442615, -7.62939453125e-06, -0.0006923675537109375, -2.288818359375e-05, -0.007732106372714043, -0.45710182189941406, -7.62939453125e-06, -0.9497623443603516, -0.04411125183105469, -0.2488861083984375, -0.0024837199598550797, -0.013647789135575294, -0.38615143299102783, -0.06500411033630371, -1.0985647439956665, -0.01707935333251953, -0.12233348190784454, -0.0002079010009765625, -0.0004965066909790039, -3.814697265625e-06, -0.00077056884765625, -5.340576171875e-05, -0.01584768295288086, 0.0, -3.0517578125e-05, -0.00028228759765625, -0.0024204254150390625, -5.14984130859375e-05, -1.1920928244535389e-07, -0.000270843505859375, -3.0517578125e-05, -2.6702880859375e-05, -0.0001773834228515625, -8.821463779895566e-06, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000255584716796875, 0.0, -7.05718994140625e-05, -4.172325134277344e-06, -0.013957858085632324, -9.5367431640625e-06, -0.000469207763671875, -2.09808349609375e-05, -0.0004172325134277344, 0.0, -0.000762939453125, -3.62396240234375e-05, -0.00019073486328125, 0.0, -0.00013566017150878906, -9.655952453613281e-06, -0.000751495361328125, -0.000331878662109375, -1.9073486328125e-06, -9.1552734375e-05, -4.172324406681582e-05, -1.3112959095451515e-05, -0.5828227996826172, -1.0364141464233398, -7.2479248046875e-05, -0.04251289367675781, -0.0025615692138671875, -3.0517578125e-05, 0.0, -0.16225814819335938, 0.0, -0.18013381958007812, -1.1920928244535389e-07, -0.7032939195632935, 0.0, -0.009450912475585938, -5.91278076171875e-05, -0.001392364501953125, -0.0002040863037109375, -9.918212890625e-05, -0.0020961761474609375, 0.0, -0.15314018726348877, 0.0, -0.5393277406692505, 0.0, -0.027032852172851562, -6.866455078125e-05, -5.91278076171875e-05, 0.0, -0.2237253189086914, -7.82012939453125e-05, -0.1732078641653061, -4.577627987600863e-05, -5.7220458984375e-06, -0.12522029876708984, 0.0, -0.0048125977627933025, -0.10454940795898438, -7.62939453125e-06, -0.5480842590332031, -0.041764259338378906, -0.3397378921508789, -0.005733226891607046, -0.005949852988123894, -0.2693469524383545, -0.07347548007965088, -0.6717244386672974, -0.56585693359375, -0.001597403665073216, -1.52587890625e-05, -0.0015012025833129883, -5.340576171875e-05, -0.0164564847946167, 0.0, -2.47955322265625e-05, -0.0004024505615234375, -0.0043849945068359375, -4.9591064453125e-05, -1.1920928244535389e-07, -0.000171661376953125, -2.6702880859375e-05, -2.288818359375e-05, -0.00019073486328125, -9.298297300119884e-06, -6.67572021484375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014593124389648438, -9.5367431640625e-06, -0.0004329681396484375, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.0007953643798828125, -3.814697265625e-05, -0.000179290771484375, 0.0, -0.00014710426330566406, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034236907958984375, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.347058241663035e-05, -0.5582723617553711, -1.0680723190307617, -7.2479248046875e-05, -0.043010711669921875, -0.00255584716796875, -3.0517578125e-05, 0.0, -0.15781307220458984, 0.0, -0.17953014373779297, -1.1920928244535389e-07, -0.7050279378890991, 0.0, -0.009352684020996094, -5.91278076171875e-05, -0.00140380859375, -0.0002040863037109375, -9.918212890625e-05, -0.0020856857299804688, 0.0, -0.1528869867324829, 0.0, -0.5402117967605591, 0.0, -0.026950836181640625, -6.866455078125e-05, -5.91278076171875e-05, 0.0, -0.22424030303955078, -7.82012939453125e-05, -0.17285500466823578, -4.565707058645785e-05, -5.7220458984375e-06, -0.12514972686767578, 0.0, -0.004813432227820158, -0.10457611083984375, -7.62939453125e-06, -0.5480728149414062, -0.04176807403564453, -0.3397970199584961, -0.005733226891607046, -0.0059516411274671555, -0.26937389373779297, -0.07347166538238525, -0.671739935874939, -0.565943717956543, -0.001597284572198987, -1.52587890625e-05, -0.0015012025833129883, -5.340576171875e-05, -0.016460299491882324, 0.0, -2.47955322265625e-05, -0.0004024505615234375, -0.0043849945068359375, -4.9591064453125e-05, -1.1920928244535389e-07, -0.000171661376953125, -2.6702880859375e-05, -2.288818359375e-05, -0.00019073486328125, -9.298297300119884e-06, -6.67572021484375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014593124389648438, -9.5367431640625e-06, -0.0004329681396484375, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.0007953643798828125, -3.814697265625e-05, -0.000179290771484375, 0.0, -0.00014710426330566406, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034332275390625, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.347058241663035e-05, -0.5582647323608398, -1.0681304931640625, -7.2479248046875e-05, -0.04300975799560547, -0.00255584716796875, -3.0517578125e-05, 0.0, -0.15781307220458984, 0.0, -0.17953109741210938, -1.1920928244535389e-07, -0.7050254344940186, 0.0, -0.009352684020996094, -5.91278076171875e-05, -0.00140380859375, -0.0002040863037109375, -9.918212890625e-05, -0.0020856857299804688, 0.0, -0.1528860330581665, 0.0, -0.5402079820632935, 0.0, -0.026950836181640625, -6.866455078125e-05, -5.91278076171875e-05, 0.0, -0.2242412567138672, -7.82012939453125e-05, -0.17285595834255219, -4.565707058645785e-05, -5.7220458984375e-06, -0.12514877319335938, 0.0, -0.004813432227820158, -0.10457611083984375, -7.62939453125e-06, -0.5480756759643555, -0.04176807403564453, -0.3397970199584961, -0.005733226891607046, -0.0059516411274671555, -0.26937389373779297, -0.07347166538238525, -0.671739935874939, -0.5659446716308594, -0.001597284572198987, -1.52587890625e-05, -0.0015012025833129883, -5.340576171875e-05, -0.016460299491882324, 0.0, -2.47955322265625e-05, -0.0004024505615234375, -0.0043849945068359375, -4.9591064453125e-05, -1.1920928244535389e-07, -0.000171661376953125, -2.6702880859375e-05, -2.288818359375e-05, -0.00019073486328125, -9.298297300119884e-06, -6.67572021484375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014593124389648438, -9.5367431640625e-06, -0.0004329681396484375, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.0007953643798828125, -3.814697265625e-05, -0.000179290771484375, 0.0, -0.00014710426330566406, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034332275390625, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.347058241663035e-05, -0.5582647323608398, -1.068131446838379, -7.2479248046875e-05, -0.04300975799560547, -0.00255584716796875, -3.0517578125e-05, 0.0, -0.15781307220458984, 0.0, -0.17953109741210938, -1.1920928244535389e-07, -0.7050254344940186, 0.0, -0.009352684020996094, -5.91278076171875e-05, -0.00140380859375, -0.0002040863037109375, -9.918212890625e-05, -0.0020856857299804688, 0.0, -0.1528860330581665, 0.0, -0.5402079820632935, 0.0, -0.026950836181640625, -6.866455078125e-05, -5.91278076171875e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Nourish", "hole3": "RARE", "hole2": "DRUID", "hole1": 5}], "hole3": "can_use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Nourish", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}, "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "body": {"_type": "Template36", "hole0": {"_type": "Name", "id": "t"}, "hole1": "spell_targetable"}, "args": {"_type": "Template21", "hole0": "t"}}]}, "comparators": [{"_type": "NameConstant", "value": "Null"}], "ops": [{"_type": "IsNot"}]}], "op": {"_type": "Or"}}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "ClassDef", "name": "<UNK>", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 3 Damage", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "name": "Wisps5", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 2", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "name": "Wisps5", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 2", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "name": "Wisps5", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "body": [{"_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole1": 0, "hole0": "Nourish Mana 2", "hole4": [{"_type": "NameConstant", "value": true}]}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Name", "id": "target"}, "hole2": 4, "hole1": "increase_health"}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hand"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 31, 195, 21, 134, "minion", "<EOS>", "<UNK>", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.<UNK>()\n        player.draw()\n", "score": -4.454070756890786, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.030257225036621, -6.4849853515625e-05, -0.0001068115234375, -1.9073486328125e-06, -0.10994529724121094, -1.9073486328125e-06, -0.4401674270629883, -3.814697265625e-06, -0.0001049041748046875, 0.0, -0.009943008422851562, 0.0, -0.012225508689880371, -3.814697265625e-06, -0.0015735626220703125, -0.10728263854980469, -1.9073486328125e-05, -0.1268177032470703, -4.76837158203125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.1258707046508789, -3.814697265625e-06, -0.49563753604888916, -9.536738616588991e-07, -0.4028472900390625, -1.9073486328125e-06, -0.002742767333984375, -5.7220458984375e-06, -0.0520477294921875, -1.1444091796875e-05, -0.0005807876586914062, 0.0, -0.001495361328125, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "minion"}, "hole1": "<UNK>"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "card", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 238, 47, 143, "card_drawn", "<EOS>", 44, 134, "reduce_cost", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "score": -4.461209529664728, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.8672380447387695, -0.38587093353271484, -0.018833160400390625, -0.021761534735560417, -2.682209014892578e-05, -0.000438690185546875, -0.0004024505615234375, -0.024209022521972656, 0.0, -9.1552734375e-05, -0.28157997131347656, -6.67572021484375e-05, -0.0007495880126953125, 0.0, -0.8341500759124756, 0.0, -0.0014660358428955078, -2.3841855067985307e-07, -0.001064300537109375, -0.03614044189453125, -0.019138336181640625, -0.0016480684280395508, -0.0002696514129638672, -7.05718994140625e-05, -0.00048828125, -0.0008392333984375, -0.0006427764892578125, -0.0004329681396484375, -0.0001125335693359375, -3.0517578125e-05, -0.0008443892002105713, -4.410690235090442e-05, -0.0006694793701171875, -0.0076007843017578125, -0.00014495849609375, -1.33514404296875e-05, -2.288818359375e-05, -0.0001430511474609375, -0.00012981655891053379, -0.00017750261758919805, -5.7220458984375e-06, -5.841255187988281e-06, -1.52587890625e-05, -3.814697265625e-06, -1.0848044439626392e-05, -2.6702880859375e-05, -0.05775928497314453, -0.0001239776611328125, -0.07977294921875, -7.43865966796875e-05, -0.0029821395874023438, 0.0, -0.04171445220708847, -2.861022494471399e-06, -0.6470937728881836, -0.005382537841796875, -1.1444091796875e-05, -0.05048083886504173, -3.814697265625e-06, -0.0005893707275390625, -0.001434326171875, -0.12164020538330078, 0.0, -8.20159912109375e-05, -5.7220458984375e-06, -0.0022373199462890625, -5.7220458984375e-06, -0.005481719970703125, -5.7220458984375e-06, -0.0002079010009765625, 0.0, -0.0022050142288208008, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "card"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 238, 47, 143, "card_drawn", "<EOS>", 44, 134, "reduce_cost", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "score": -4.689620758154881, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.2201309204101562, -0.0001087188720703125, -0.3661460876464844, -0.000171661376953125, -0.006622314453125, 0.0, -0.14285190403461456, -2.2649765014648438e-06, -1.174759864807129, -0.013622283935546875, -7.62939453125e-06, -0.08365511894226074, -1.9073486328125e-06, -0.000301361083984375, -0.001155853271484375, -0.1244668960571289, -1.9073486328125e-06, -0.0002899169921875, -7.62939453125e-06, -0.003871917724609375, -1.33514404296875e-05, -0.015944480895996094, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.0012292861938476562, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "card", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 238, 47, 143, "card_drawn", "<EOS>", 44, 134, "reduce_cost", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "score": -4.901752288267254, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -1.159521222114563, 0.0, -0.0001531839370727539, 0.0, -0.0024777650833129883, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.5497207641601562e-05, -0.8991422653198242, -0.3443326950073242, -0.011118888854980469, -0.020466087386012077, -3.254413604736328e-05, -0.0004520416259765625, -0.0005550384521484375, -0.017795562744140625, -1.1920928244535389e-07, -8.58306884765625e-05, -0.2610788345336914, -6.67572021484375e-05, -0.0008106231689453125, 0.0, -0.8548561334609985, 0.0, -0.0014717578887939453, -2.3841855067985307e-07, -0.001068115234375, -0.03615856170654297, -0.01861286163330078, -0.0016328096389770508, -0.0002677440643310547, -7.2479248046875e-05, -0.000484466552734375, -0.000850677490234375, -0.0006465911865234375, -0.00043487548828125, -0.0001125335693359375, -3.0517578125e-05, -0.0008560121059417725, -4.327246642787941e-05, -0.0006656646728515625, -0.0075702667236328125, -0.00014495849609375, -1.33514404296875e-05, -2.288818359375e-05, -0.0001430511474609375, -0.00013136629422660917, -0.00017750261758919805, -5.7220458984375e-06, -5.841255187988281e-06, -1.52587890625e-05, -3.814697265625e-06, -1.0848044439626392e-05, -2.6702880859375e-05, -0.05399608612060547, -0.0001220703125, -0.08227729797363281, -7.43865966796875e-05, -0.0029621124267578125, 0.0, -0.04204358905553818, -2.861022494471399e-06, -0.6432590484619141, -0.005374908447265625, -1.1444091796875e-05, -0.050475236028432846, -3.814697265625e-06, -0.00058746337890625, -0.001430511474609375, -0.12183856964111328, 0.0, -8.0108642578125e-05, -5.7220458984375e-06, -0.002269744873046875, -5.7220458984375e-06, -0.00542449951171875, -5.7220458984375e-06, -0.0002079010009765625, 0.0, -0.0022107362747192383, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "DRUID", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "card"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 31, 195, 21, 134, "minion", "<EOS>", "<UNK>", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.<UNK>()\n        player.draw()\n", "score": -4.959887694433263, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -1.159521222114563, 0.0, -0.0001531839370727539, 0.0, -0.0024777650833129883, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.5497207641601562e-05, -0.5715465545654297, -0.00034332275390625, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -3.814697265625e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.6941299438476562e-05, -2.6702880859375e-05, -1.7523747374070808e-05, -0.000335693359375, -1.0911998748779297, -6.4849853515625e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.10567092895507812, -1.9073486328125e-06, -0.42823219299316406, -3.814697265625e-06, -0.0001049041748046875, 0.0, -0.009828567504882812, 0.0, -0.012221693992614746, -3.814697265625e-06, -0.0015850067138671875, -0.10773372650146484, -1.9073486328125e-05, -0.1265707015991211, -4.76837158203125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.12603092193603516, -3.814697265625e-06, -0.4937931299209595, -9.536738616588991e-07, -0.42287254333496094, -1.9073486328125e-06, -0.0027141571044921875, -7.62939453125e-06, -0.05193042755126953, -1.1444091796875e-05, -0.0005807876586914062, 0.0, -0.001491546630859375, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "DRUID", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "minion"}, "hole1": "<UNK>"}}], "iter": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "minions"}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 238, 47, 143, "card_drawn", "<EOS>", 44, 134, "reduce_cost", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "score": -5.074217226222565, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -1.159521222114563, 0.0, -0.0001531839370727539, 0.0, -0.0024777650833129883, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.5497207641601562e-05, -0.5715465545654297, -0.00034332275390625, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -3.814697265625e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.6941299438476562e-05, -2.6702880859375e-05, -1.7523747374070808e-05, -0.000335693359375, -1.1766700744628906, -0.0001068115234375, -0.3661212921142578, -0.000171661376953125, -0.006611824035644531, 0.0, -0.14365370571613312, -2.2649765014648438e-06, -1.1598787307739258, -0.013545989990234375, -7.62939453125e-06, -0.0835191011428833, -1.9073486328125e-06, -0.0003032684326171875, -0.001148223876953125, -0.1245584487915039, -1.9073486328125e-06, -0.000278472900390625, -7.62939453125e-06, -0.0038433074951171875, -1.33514404296875e-05, -0.015489578247070312, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.0012331008911132812, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "DRUID", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n        self.target.increase_health(3)\n", "score": -5.099016482682373, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.736384391784668, -3.814697265625e-06, -0.0018243789672851562, -5.53131103515625e-05, -0.0073413848876953125, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.01646900177001953, -1.9073486328125e-06, -5.7220458984375e-06, -7.152555099310121e-07, -0.4751189947128296, -1.9073486328125e-06, -0.23430366814136505, -3.576277322281385e-06, -0.4597511291503906, -1.9073486328125e-06, -0.11759567260742188, -2.47955322265625e-05, -0.003917694091796875, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0034885406494140625, -1.9073486328125e-06, -0.000102996826171875, -3.3378546504536644e-06, -0.17111051082611084, -1.9073486328125e-06, -0.3373136818408966, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 238, 47, 143, "card_drawn", "<EOS>", 44, 134, "reduce_cost", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            minion.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "score": -5.28691890255822, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.8672380447387695, -0.38587093353271484, -0.018833160400390625, -0.021761534735560417, -2.682209014892578e-05, -0.000438690185546875, -0.0004024505615234375, -0.024209022521972656, 0.0, -9.1552734375e-05, -0.28157997131347656, -6.67572021484375e-05, -0.0007495880126953125, 0.0, -0.9400746822357178, -3.814697265625e-06, -0.4421854019165039, -1.1920928244535389e-07, -0.0004730224609375, -0.022533416748046875, -0.3416919708251953, -0.0010986328125, -0.0001512765884399414, -3.62396240234375e-05, -0.0009212493896484375, -0.00128173828125, -0.000946044921875, -0.0003299713134765625, -0.000133514404296875, -3.0517578125e-05, -0.0008074641227722168, -4.768312646774575e-05, -0.0006275177001953125, -0.007029533386230469, -0.0001506805419921875, -1.52587890625e-05, -2.288818359375e-05, -0.0001277923583984375, -0.00013065121311228722, -0.00017225740884896368, -5.7220458984375e-06, -5.841255187988281e-06, -1.71661376953125e-05, -5.7220458984375e-06, -1.072883515007561e-05, -2.86102294921875e-05, -0.051418304443359375, -0.0001163482666015625, -0.0783538818359375, -7.43865966796875e-05, -0.0030183792114257812, 0.0, -0.04246010631322861, -2.741813204920618e-06, -0.6254520416259766, -0.0053615570068359375, -1.1444091796875e-05, -0.05003606900572777, -3.814697265625e-06, -0.0005855560302734375, -0.0014133453369140625, -0.12168025970458984, 0.0, -7.82012939453125e-05, -5.7220458984375e-06, -0.0022983551025390625, -5.7220458984375e-06, -0.0054759979248046875, -5.7220458984375e-06, -0.000209808349609375, 0.0, -0.002194523811340332, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -5.473487044313622, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.736384391784668, -3.814697265625e-06, -0.0018243789672851562, -5.53131103515625e-05, -0.0073413848876953125, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.01646900177001953, -1.9073486328125e-06, -5.7220458984375e-06, -7.152555099310121e-07, -0.4751189947128296, -1.9073486328125e-06, -0.23430366814136505, -3.576277322281385e-06, -1.0607099533081055, -0.0001068115234375, -0.004429817199707031, -3.814697265625e-06, -3.24249267578125e-05, 0.0, -0.0292816162109375, -5.7220458984375e-06, -9.5367431640625e-06, -1.4305104514278355e-06, -0.011381149291992188, -1.1920928244535389e-07, -4.57763671875e-05, -0.010052680969238281, -0.10709476470947266, -0.2443760633468628, -0.00026524055283516645], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "3", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n        self.target.increase_health(3)\n", "score": -5.508928280182545, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -1.159521222114563, 0.0, -0.0001531839370727539, 0.0, -0.0024777650833129883, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.5497207641601562e-05, -0.5715465545654297, -0.00034332275390625, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -3.814697265625e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.6941299438476562e-05, -2.6702880859375e-05, -1.7523747374070808e-05, -0.000335693359375, -1.693131446838379, -3.814697265625e-06, -0.001842498779296875, -5.53131103515625e-05, -0.007519721984863281, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.016640663146972656, -1.9073486328125e-06, -5.7220458984375e-06, -7.152555099310121e-07, -0.4793970584869385, -1.9073486328125e-06, -0.2351457178592682, -3.576277322281385e-06, -0.46359920501708984, -1.9073486328125e-06, -0.11825180053710938, -2.47955322265625e-05, -0.003949165344238281, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.003513336181640625, -1.9073486328125e-06, -0.000102996826171875, -3.3378546504536644e-06, -0.17099511623382568, -1.9073486328125e-06, -0.33775365352630615, -2.741813204920618e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "DRUID", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 3, "hole1": "increase_health"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "Mana", "Change", "<EOS>", "3", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "3", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(ManaChange(3), MinionSelector(), GreaterThan\n            (Count(CardSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n        player.hero.increase_armor(3)\n", "score": -7.678961907943176, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.2201309204101562, -0.0001087188720703125, -0.3661460876464844, -0.000171661376953125, -0.006622314453125, 0.0, -0.14285190403461456, -2.2649765014648438e-06, -0.3915843963623047, -0.025020599365234375, -0.0012903213500976562, -6.4849853515625e-05, -9.5367431640625e-06, -0.43234550952911377, -0.00074005126953125, -7.62939453125e-06, -0.021684646606445312, -0.13792800903320312, -2.86102294921875e-05, -0.12048006057739258, -0.009181107394397259, -0.00015676020120736212, -0.0017926542786881328, -4.410734163684538e-06, -0.031314849853515625, 0.0, -0.17210277915000916, -0.00018310546875, 0.0, -0.02116680145263672, -0.08825302124023438, -5.7220458984375e-06, 0.0, -0.013291239738464355, -0.0050201416015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.035129547119140625, -0.05766773223876953, -0.006937861442565918, -1.4781842764932662e-05, -2.288818359375e-05, -3.814697265625e-06, -0.5508428812026978, -0.0008392333984375, 0.0, -0.006145477294921875, -0.010645866394042969, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.038726806640625, -0.0002181529998779297, -3.814697265625e-06, -3.0517578125e-05, -7.62939453125e-06, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.011228561401367188, -1.1444091796875e-05, -0.3550769090652466, 0.0, -5.91278076171875e-05, -0.00150299072265625, -1.9073486328125e-06, -0.15552997589111328, 0.0, -0.00030517578125, -9.5367431640625e-06, -0.07883232831954956, 0.0, -0.6085357666015625, -3.0517578125e-05, -0.0964813232421875, -0.00072479248046875, -0.03215217590332031, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.7006959915161133, 0.0, -0.0684971809387207, 0.0, -0.0815039873123169, -3.814697265625e-06, -0.03660479187965393, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "ManaChange", "hole1": 3}, {"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": 3, "hole1": "increase_armor"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "card", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "Mana", "Change", "<EOS>", "3", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 76, 104, 13, 103, 21, 134, "player", "<EOS>", "mana", "<EOS>", 71, 23, 139, "1", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>(AuraUntil(ManaChange(3), MinionSelector(), GreaterThan\n            (Count(CardSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n        player.mana += 1\n", "score": -7.927812687331851, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.8672380447387695, -0.38587093353271484, -0.018833160400390625, -0.021761534735560417, -2.682209014892578e-05, -0.000438690185546875, -0.0004024505615234375, -0.024209022521972656, 0.0, -9.1552734375e-05, -0.28157997131347656, -6.67572021484375e-05, -0.0007495880126953125, 0.0, -0.8341500759124756, 0.0, -0.0014660358428955078, -2.3841855067985307e-07, -0.001064300537109375, -0.03614044189453125, -0.019138336181640625, -0.0016480684280395508, -0.0002696514129638672, -7.05718994140625e-05, -0.00048828125, -0.0008392333984375, -0.0006427764892578125, -0.0004329681396484375, -0.0001125335693359375, -3.0517578125e-05, -0.0008443892002105713, -4.410690235090442e-05, -0.0006694793701171875, -0.0076007843017578125, -0.00014495849609375, -1.33514404296875e-05, -2.288818359375e-05, -0.0001430511474609375, -0.00012981655891053379, -0.00017750261758919805, -5.7220458984375e-06, -5.841255187988281e-06, -1.52587890625e-05, -3.814697265625e-06, -1.0848044439626392e-05, -2.6702880859375e-05, -0.05775928497314453, -0.0001239776611328125, -0.07977294921875, -7.43865966796875e-05, -0.0029821395874023438, 0.0, -0.04171445220708847, -2.861022494471399e-06, -0.7969446182250977, -0.01628398895263672, -0.004418373107910156, -5.53131103515625e-05, -1.33514404296875e-05, -0.28459668159484863, -0.00089263916015625, -3.814697265625e-06, -0.07762527465820312, -0.3017253875732422, -8.0108642578125e-05, -0.022603387013077736, -0.006377105135470629, -0.00020074837084393948, -0.0016963290981948376, -5.364403477869928e-06, -0.077880859375, 0.0, -0.25910380482673645, -0.0001678466796875, 0.0, -0.01387786865234375, -0.07995033264160156, -5.7220458984375e-06, 0.0, -0.015156865119934082, -0.0051631927490234375, -1.9073486328125e-06, -1.9073486328125e-06, -0.045074462890625, -0.07015323638916016, -0.010395169258117676, -2.396077979938127e-05, -2.288818359375e-05, -3.814697265625e-06, -0.578799843788147, -0.0013217926025390625, 0.0, -0.0054645538330078125, -0.00649261474609375, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.06939315795898438, -0.0002695322036743164, -7.62939453125e-06, -3.62396240234375e-05, -9.5367431640625e-06, -2.09808349609375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.0069026947021484375, -1.33514404296875e-05, -0.2557631731033325, 0.0, -4.76837158203125e-05, -0.0032711029052734375, -1.9073486328125e-06, -0.14409542083740234, 0.0, -0.0003032684326171875, -1.1444091796875e-05, -0.05812655761837959, 0.0, -0.5824079513549805, -0.0083465576171875, -0.006211280822753906, -0.0014972686767578125, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002576112747192383, -1.9073486328125e-06, -0.3662468194961548, 0.0, -0.013233184814453125, -0.06100177764892578, -0.000133514404296875, -0.04318618401885033, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "card"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "ManaChange", "hole1": 3}, {"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}], "hole1": "<UNK>"}, {"_type": "AugAssign", "target": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "mana"}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Add"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "card", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "Mana", "Change", "<EOS>", "3", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 76, 104, 13, 103, 21, 134, "player", "<EOS>", "mana", "<EOS>", 71, 23, 139, "1", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>(AuraUntil(ManaChange(3), MinionSelector(), GreaterThan\n            (Count(CardSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n        player.mana += 1\n", "score": -8.384485586449465, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -1.159521222114563, 0.0, -0.0001531839370727539, 0.0, -0.0024777650833129883, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.5497207641601562e-05, -0.8991422653198242, -0.3443326950073242, -0.011118888854980469, -0.020466087386012077, -3.254413604736328e-05, -0.0004520416259765625, -0.0005550384521484375, -0.017795562744140625, -1.1920928244535389e-07, -8.58306884765625e-05, -0.2610788345336914, -6.67572021484375e-05, -0.0008106231689453125, 0.0, -0.8548561334609985, 0.0, -0.0014717578887939453, -2.3841855067985307e-07, -0.001068115234375, -0.03615856170654297, -0.01861286163330078, -0.0016328096389770508, -0.0002677440643310547, -7.2479248046875e-05, -0.000484466552734375, -0.000850677490234375, -0.0006465911865234375, -0.00043487548828125, -0.0001125335693359375, -3.0517578125e-05, -0.0008560121059417725, -4.327246642787941e-05, -0.0006656646728515625, -0.0075702667236328125, -0.00014495849609375, -1.33514404296875e-05, -2.288818359375e-05, -0.0001430511474609375, -0.00013136629422660917, -0.00017750261758919805, -5.7220458984375e-06, -5.841255187988281e-06, -1.52587890625e-05, -3.814697265625e-06, -1.0848044439626392e-05, -2.6702880859375e-05, -0.05399608612060547, -0.0001220703125, -0.08227729797363281, -7.43865966796875e-05, -0.0029621124267578125, 0.0, -0.04204358905553818, -2.861022494471399e-06, -0.8014583587646484, -0.016086578369140625, -0.004479408264160156, -5.53131103515625e-05, -1.33514404296875e-05, -0.28490471839904785, -0.0008945465087890625, -3.814697265625e-06, -0.07822990417480469, -0.3045005798339844, -8.0108642578125e-05, -0.02251111902296543, -0.006384090520441532, -0.00020074837084393948, -0.001697638537734747, -5.364403477869928e-06, -0.07818603515625, 0.0, -0.26065006852149963, -0.0001659393310546875, 0.0, -0.013841629028320312, -0.07987308502197266, -5.7220458984375e-06, 0.0, -0.015154004096984863, -0.0051631927490234375, -1.9073486328125e-06, -1.9073486328125e-06, -0.04513359069824219, -0.0702199935913086, -0.010419011116027832, -2.407998726994265e-05, -2.288818359375e-05, -3.814697265625e-06, -0.5783311128616333, -0.0013256072998046875, 0.0, -0.00545501708984375, -0.006481170654296875, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.06945514678955078, -0.0002695322036743164, -7.62939453125e-06, -3.62396240234375e-05, -9.5367431640625e-06, -2.09808349609375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.00690460205078125, -1.33514404296875e-05, -0.25570690631866455, 0.0, -4.76837158203125e-05, -0.0032711029052734375, -1.9073486328125e-06, -0.1442394256591797, 0.0, -0.0003032684326171875, -1.1444091796875e-05, -0.05815252661705017, 0.0, -0.5852441787719727, -0.008374214172363281, -0.0061855316162109375, -0.0015087127685546875, -4.1961669921875e-05, -1.9073486328125e-06, -0.0002595186233520508, -1.9073486328125e-06, -0.36597299575805664, 0.0, -0.0131988525390625, -0.06132984161376953, -0.000133514404296875, -0.043208833783864975, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "DRUID", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "card"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "ManaChange", "hole1": 3}, {"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}], "hole1": "<UNK>"}, {"_type": "AugAssign", "target": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "mana"}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Add"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 81, 117, "reduce_cost", "<EOS>", 0, 177, "card", "<EOS>", 249, 93, 196, 21, 134, "card", "<EOS>", "add_buff", "<EOS>", 237, 52, 181, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "3", "<EOS>", 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "Mana", "Change", "<EOS>", "3", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Spell", "Card", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 76, 104, 13, 103, 21, 134, "player", "<EOS>", "mana", "<EOS>", 71, 23, 139, "1", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>(AuraUntil(ManaChange(3), MinionSelector(), GreaterThan\n            (Count(SpellCardSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n        player.mana += 1\n", "score": -8.720132845664438, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.8672380447387695, -0.38587093353271484, -0.018833160400390625, -0.021761534735560417, -2.682209014892578e-05, -0.000438690185546875, -0.0004024505615234375, -0.024209022521972656, 0.0, -9.1552734375e-05, -0.28157997131347656, -6.67572021484375e-05, -0.0007495880126953125, 0.0, -0.8341500759124756, 0.0, -0.0014660358428955078, -2.3841855067985307e-07, -0.001064300537109375, -0.03614044189453125, -0.019138336181640625, -0.0016480684280395508, -0.0002696514129638672, -7.05718994140625e-05, -0.00048828125, -0.0008392333984375, -0.0006427764892578125, -0.0004329681396484375, -0.0001125335693359375, -3.0517578125e-05, -0.0008443892002105713, -4.410690235090442e-05, -0.0006694793701171875, -0.0076007843017578125, -0.00014495849609375, -1.33514404296875e-05, -2.288818359375e-05, -0.0001430511474609375, -0.00012981655891053379, -0.00017750261758919805, -5.7220458984375e-06, -5.841255187988281e-06, -1.52587890625e-05, -3.814697265625e-06, -1.0848044439626392e-05, -2.6702880859375e-05, -0.05775928497314453, -0.0001239776611328125, -0.07977294921875, -7.43865966796875e-05, -0.0029821395874023438, 0.0, -0.04171445220708847, -2.861022494471399e-06, -0.7969446182250977, -0.01628398895263672, -0.004418373107910156, -5.53131103515625e-05, -1.33514404296875e-05, -0.28459668159484863, -0.00089263916015625, -3.814697265625e-06, -0.07762527465820312, -0.3017253875732422, -8.0108642578125e-05, -0.022603387013077736, -0.006377105135470629, -0.00020074837084393948, -0.0016963290981948376, -5.364403477869928e-06, -0.077880859375, 0.0, -0.25910380482673645, -0.0001678466796875, 0.0, -0.01387786865234375, -0.07995033264160156, -5.7220458984375e-06, 0.0, -0.015156865119934082, -0.0051631927490234375, -1.9073486328125e-06, -1.9073486328125e-06, -0.045074462890625, -0.07015323638916016, -0.010395169258117676, -2.396077979938127e-05, -2.288818359375e-05, -3.814697265625e-06, -1.1465742588043213, -0.08808040618896484, -0.0003299713134765625, -1.9073486328125e-06, -0.018492698669433594, -0.004935264587402344, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.1233530044555664, -0.00015270709991455078, -7.62939453125e-06, -4.9591064453125e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.00627899169921875, -1.1444091796875e-05, -0.27473556995391846, 0.0, -5.340576171875e-05, -0.00318145751953125, -1.9073486328125e-06, -0.1318035125732422, 0.0, -0.000286102294921875, -9.5367431640625e-06, -0.06566132605075836, 0.0, -0.602360725402832, -0.008221626281738281, -0.00603485107421875, -0.001422882080078125, -4.1961669921875e-05, -1.9073486328125e-06, -0.00028336048126220703, -1.9073486328125e-06, -0.408943772315979, 0.0, -0.013135910034179688, -0.058917999267578125, -0.000125885009765625, -0.04173373803496361, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "FunctionDef", "name": "reduce_cost", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "card"}, "hole2": [{"_type": "Template25", "hole0": "ManaChange", "hole1": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}, "op": {"_type": "USub"}}]}], "hole1": "add_buff"}], "args": {"_type": "Template21", "hole0": "card"}}, {"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "ManaChange", "hole1": 3}, {"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "SpellCardSelector"}}]}]}], "hole1": "<UNK>"}, {"_type": "AugAssign", "target": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "mana"}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Add"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 239, 59, 193, "Mana", "Change", "<EOS>", "3", "<EOS>", 63, 205, "Minion", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(ManaChange(3), MinionSelector(), GreaterThan\n            (Count(CardSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n        self.target.change_attack(2)\n", "score": -8.899272327741016, "score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.2201309204101562, -0.0001087188720703125, -0.3661460876464844, -0.000171661376953125, -0.006622314453125, 0.0, -0.14285190403461456, -2.2649765014648438e-06, -0.3915843963623047, -0.025020599365234375, -0.0012903213500976562, -6.4849853515625e-05, -9.5367431640625e-06, -0.43234550952911377, -0.00074005126953125, -7.62939453125e-06, -0.021684646606445312, -0.13792800903320312, -2.86102294921875e-05, -0.12048006057739258, -0.009181107394397259, -0.00015676020120736212, -0.0017926542786881328, -4.410734163684538e-06, -0.031314849853515625, 0.0, -0.17210277915000916, -0.00018310546875, 0.0, -0.02116680145263672, -0.08825302124023438, -5.7220458984375e-06, 0.0, -0.013291239738464355, -0.0050201416015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.035129547119140625, -0.05766773223876953, -0.006937861442565918, -1.4781842764932662e-05, -2.288818359375e-05, -3.814697265625e-06, -0.5508428812026978, -0.0008392333984375, 0.0, -0.006145477294921875, -0.010645866394042969, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.038726806640625, -0.0002181529998779297, -3.814697265625e-06, -3.0517578125e-05, -7.62939453125e-06, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.011228561401367188, -1.1444091796875e-05, -0.3550769090652466, 0.0, -5.91278076171875e-05, -0.00150299072265625, -1.9073486328125e-06, -0.15552997589111328, 0.0, -0.00030517578125, -9.5367431640625e-06, -0.07883232831954956, 0.0, -0.6085357666015625, -3.0517578125e-05, -0.0964813232421875, -0.00072479248046875, -0.03215217590332031, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.6910982131958008, 0.0, -1.71661376953125e-05, -3.576278118089249e-07, -0.8741884231567383, -3.814697265625e-06, -0.5423082113265991, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Preparation", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Preparation", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template34", "hole0": "ManaChange", "hole1": 3}, {"_type": "Template39", "hole0": "MinionSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}], "hole1": "<UNK>"}, {"_type": "Expr", "value": {"_type": "Template31", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": 2, "hole1": "change_attack"}}], "hole4": "player"}}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -2.5389087448370375, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.6919279098510742, -0.0001316070556640625, -0.0005517005920410156, -1.9073486328125e-06, -1.71661376953125e-05, -0.42135047912597656, 0.0, -0.09550285339355469, -2.09808349609375e-05, -7.2479248046875e-05, -0.0002841949462890625, -6.29425048828125e-05, -5.91278076171875e-05, -0.001590728759765625, -0.0006256103515625, -5.7220458984375e-06, -0.0010415315628051758, -5.7220458984375e-06, -0.00017559264961164445, 0.0, -0.0031089764088392258, 0.0, -0.3088982105255127, -1.9073486328125e-06, -3.4332275390625e-05, -4.1961669921875e-05, -3.814697265625e-05, -0.039595723152160645, -0.0010175704956054688, -0.0002689361572265625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.00031280517578125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -3.56869056322693, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.6919279098510742, -0.0001316070556640625, -0.0005517005920410156, -1.9073486328125e-06, -1.71661376953125e-05, -0.42135047912597656, 0.0, -0.09550285339355469, -2.09808349609375e-05, -7.2479248046875e-05, -0.0002841949462890625, -6.29425048828125e-05, -5.91278076171875e-05, -0.001590728759765625, -0.0006256103515625, -5.7220458984375e-06, -0.0010415315628051758, -5.7220458984375e-06, -0.00017559264961164445, 0.0, -0.0031089764088392258, 0.0, -1.3389027118682861, 0.0, -9.5367431640625e-06, -4.9591064453125e-05, -3.62396240234375e-05, -0.03965628147125244, -0.0006961822509765625, -0.0003108978271484375, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -0.0001010894775390625, 0.0, -0.0003337860107421875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "minion", "<EOS>", 250, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 46, 139, "Secret", "<EOS>", 45, 136, "Null", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(0, Null)\n        super().reveal()\n", "score": -3.909274603890019, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -1.183056354522705, 0.0, -1.52587890625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -0.039521217346191406, -0.0007009506225585938, -0.0003299713134765625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, -0.000324249267578125, 0.0, -0.0010013580322265625, -0.0002536773681640625, -0.0068225860595703125, 0.0, -0.006771087646484375, -0.00032806396484375, -0.7337217330932617, -0.00018310546875, -0.0008385181427001953, -1.9073486328125e-06, -1.71661376953125e-05, -0.15728092193603516, -5.53131103515625e-05, -0.025252342224121094, -0.06502532958984375, -1.52587890625e-05, -0.16553878784179688, -1.9073486328125e-06, -0.48273205757141113, -1.9073486328125e-06, -0.2576894760131836, -9.775161743164062e-06, -3.814697265625e-06, -0.0005016326904296875, -0.0001277923583984375, -0.10353744029998779, -0.00017940645921044052, -0.13079833984375, -0.00022125244140625, -0.000560760498046875, -6.330013275146484e-05, -0.0001735687255859375, -0.00045013427734375, -0.0010471343994140625, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.2159347534179688e-05, 0.0, -0.0031518936157226562, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Num", "n": 0}, {"_type": "NameConstant", "value": "Null"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "minion", "<EOS>", 250, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 46, 139, "Secret", "<EOS>", 45, 136, "Null", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(0, Null)\n        super().reveal()\n", "score": -4.221566225848157, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.6919279098510742, -0.0001316070556640625, -0.0005517005920410156, -1.9073486328125e-06, -1.71661376953125e-05, -1.2100200653076172, -0.00016307830810546875, -0.024278640747070312, -0.04219627380371094, -1.33514404296875e-05, -0.23966026306152344, 0.0, -0.5474264621734619, -1.9073486328125e-06, -0.25693321228027344, -9.894371032714844e-06, -1.9073486328125e-06, -0.0005474090576171875, -0.0001277923583984375, -0.10073232650756836, -0.00018357858061790466, -0.12891387939453125, -0.0002193450927734375, -0.00057220458984375, -6.330013275146484e-05, -0.00020599365234375, -0.000469207763671875, -0.00104522705078125, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.2159347534179688e-05, 0.0, -0.003083348274230957, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Num", "n": 0}, {"_type": "NameConstant", "value": "Null"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -4.4658710008611635, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -2.055382013320923, 0.0, -4.57763671875e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0415416955947876, -0.000484466552734375, -0.0003376007080078125, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -9.34600830078125e-05, 0.0, -0.000392913818359375, 0.0, -0.0011749267578125, -0.000995635986328125, -0.0002040863037109375, -0.0038691686931997538, -7.867813110351562e-06, -0.000156402587890625, -0.0003871917724609375, -0.000579833984375, -2.47955322265625e-05, -0.000461578369140625, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029392242431640625, 0.0, -0.012540817260742188, -1.52587890625e-05, -0.000102996826171875, -0.0001125335693359375, -5.53131103515625e-05, -9.1552734375e-05, -0.0010471343994140625, -0.000392913818359375, -3.814697265625e-06, -0.0007463693618774414, -1.1444091796875e-05, -0.0002452025655657053, 0.0, -0.0032453518360853195, 0.0, -0.37093496322631836, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03960990905761719, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.0010242462158203125, -0.0002384185791015625, -0.011445999145507812, 0.0, -0.006651878356933594, -0.0003185272216796875, -0.6951007843017578, -0.000133514404296875, -0.0005497932434082031, -1.9073486328125e-06, -1.71661376953125e-05, -0.4278745651245117, 0.0, -0.09718894958496094, -2.09808349609375e-05, -7.2479248046875e-05, -0.0002841949462890625, -6.29425048828125e-05, -5.91278076171875e-05, -0.001590728759765625, -0.0006237030029296875, -5.7220458984375e-06, -0.0010377168655395508, -5.7220458984375e-06, -0.00017595024837646633, 0.0, -0.0031051617115736008, 0.0, -0.30881428718566895, -1.9073486328125e-06, -3.4332275390625e-05, -4.1961669921875e-05, -3.814697265625e-05, -0.03959763050079346, -0.001018524169921875, -0.0002689361572265625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.0003108978271484375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "minion", "<EOS>", 250, 93, 196, 21, 134, "player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_died", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = player\n", "score": -5.488720252624709, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -1.183056354522705, 0.0, -1.52587890625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -0.039521217346191406, -0.0007009506225585938, -0.0003299713134765625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, -0.000324249267578125, 0.0, -0.0010013580322265625, -0.0002536773681640625, -0.0068225860595703125, 0.0, -0.006771087646484375, -0.00032806396484375, -0.7337217330932617, -0.00018310546875, -0.0008385181427001953, -1.9073486328125e-06, -1.71661376953125e-05, -0.15728092193603516, -5.53131103515625e-05, -0.025252342224121094, -0.06502532958984375, -1.52587890625e-05, -0.16553878784179688, -1.9073486328125e-06, -1.2050535678863525, 0.0, -0.6171536445617676, 0.0, -1.33514404296875e-05, -0.0025005340576171875, -0.00014495849609375, -0.1371885985136032, -8.7738037109375e-05, -0.0002193450927734375, -1.33514404296875e-05, -0.0004215240478515625, 0.0, -7.724761962890625e-05, -3.814697265625e-06, -0.0002593994140625, 0.0, -0.1687755584716797, -0.0051479339599609375, -0.0002994537353515625, 0.0, -1.9073486328125e-06, -0.0003299713134765625, 0.0, -5.340576171875e-05, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -0.4222259521484375, -3.814697265625e-06, -0.0007152557373046875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "minion_died"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "minion", "<EOS>", 250, 93, 196, 21, 134, "player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_died", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = player\n", "score": -5.5146406735097955, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.6919279098510742, -0.0001316070556640625, -0.0005517005920410156, -1.9073486328125e-06, -1.71661376953125e-05, -1.2100200653076172, -0.00016307830810546875, -0.024278640747070312, -0.04219627380371094, -1.33514404296875e-05, -0.23966026306152344, 0.0, -1.0474426746368408, 0.0, -0.6022475957870483, 0.0, -1.1444091796875e-05, -0.0016498565673828125, -0.000141143798828125, -0.14047439396381378, -9.34600830078125e-05, -0.0001811981201171875, -1.33514404296875e-05, -0.000408172607421875, 0.0, -7.915496826171875e-05, -3.814697265625e-06, -0.0002613067626953125, 0.0, -0.13768863677978516, -0.00464630126953125, -0.0002689361572265625, 0.0, -1.9073486328125e-06, -0.000354766845703125, 0.0, -5.53131103515625e-05, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -0.396881103515625, -3.814697265625e-06, -0.0006999969482421875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "minion_died"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, attacker, index):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n", "score": -6.198220341330369, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.7259712219238281, -2.6702880859375e-05, -8.606910705566406e-05, -6.318092346191406e-06, -6.29425048828125e-05, -0.4892148971557617, -5.7220458984375e-06, -0.0001735687255859375, -1.4292311668395996, -3.24249267578125e-05, -0.017469406127929688, -0.0003376007080078125, -0.004900932312011719, -0.2643451690673828, -3.814697265625e-06, -0.004680633544921875, -0.0001354217529296875, -5.7220458984375e-05, 0.0, -0.27142298221588135, 0.0, -3.62396240234375e-05, -0.0034170150756835938, -0.0001201629638671875, -0.13140869140625, -5.14984130859375e-05, -5.340576171875e-05, 0.0, -0.0071446895599365234, -1.1444091796875e-05, -0.0001068115234375, 0.0, -0.0450136661529541, 0.0, -3.0517578125e-05, -0.0035457611083984375, -0.0001125335693359375, -0.00060272216796875, -4.57763671875e-05, -0.0016186231514438987, -0.0001621246337890625, -0.11172962188720703, -0.0023345947265625, -2.86102294921875e-05, -0.0001010894775390625, -0.00067901611328125, -0.000362396240234375, -0.1246330738067627, -5.53131103515625e-05, -0.0026531219482421875, -0.0009593963623046875, -0.0002765655517578125, -6.29425048828125e-05, -0.004634857177734375, -3.0517578125e-05, -0.012702703475952148, -1.1920928244535389e-07, -0.004663348197937012, 0.0, -0.0013561248779296875, -0.000637054443359375, -3.814697265625e-06, -0.015576362609863281, -1.9073486328125e-06, -0.003228425979614258, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0008392333984375, -2.09808349609375e-05, -0.0092010498046875, -1.9073486328125e-06, -0.10089659690856934, -1.9073486328125e-06, -0.015946388244628906, 0.0, -0.000148773193359375, -0.24239826202392578, -4.1961669921875e-05, -1.9073486328125e-05, 0.0, -0.0002638101577758789, 0.0, -0.0002079010009765625, -0.000270843505859375, -2.86102294921875e-05, -0.010119438171386719, -1.52587890625e-05, -7.43865966796875e-05, 0.0, -4.76837158203125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008391022682189941, 0.0, -0.0005035400390625, -1.9073486328125e-05, -0.00455474853515625, 0.0, -0.008852005004882812, -1.9073486328125e-06, -0.0017741918563842773, 0.0, -0.0029872655868530273, 0.0, -0.035741567611694336, 0.0, -2.288818359375e-05, -0.001667022705078125, -6.103515625e-05, -0.21083122491836548, -3.814697265625e-06, -0.0097808837890625, -4.00543212890625e-05, -0.08101940155029297, -1.33514404296875e-05, -0.03273963928222656, -9.918212890625e-05, -0.00020599365234375, -1.33514404296875e-05, -0.0092620849609375, -9.5367431640625e-06, -0.008078694343566895, -1.9073486328125e-06, -0.0025905370712280273, 0.0, -0.041837215423583984, -1.1920928244535389e-07, -2.86102294921875e-05, -0.001979827880859375, -0.0002040863037109375, -0.13591362535953522, -1.9073486328125e-06, -0.017563819885253906, -6.4849853515625e-05, -0.10048389434814453, -1.1444091796875e-05, -0.06041908264160156, -0.00012969970703125, -0.00017547607421875, -1.71661376953125e-05, -0.015687942504882812, -5.7220458984375e-06, -0.012874722480773926, -1.9073486328125e-06, -0.0026535987854003906, 0.0, -0.04113340377807617, -1.1920928244535389e-07, -3.0517578125e-05, -0.001598358154296875, -0.0002269744873046875, -0.16940949857234955, -1.9073486328125e-06, -0.02939319610595703, -7.05718994140625e-05, -0.10598373413085938, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "minion", "<EOS>", 250, 93, 196, 21, 134, "player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_died", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 22, 136, "Null", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = Null\n", "score": -6.203000381103713, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -1.183056354522705, 0.0, -1.52587890625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -0.039521217346191406, -0.0007009506225585938, -0.0003299713134765625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, -0.000324249267578125, 0.0, -0.0010013580322265625, -0.0002536773681640625, -0.0068225860595703125, 0.0, -0.006771087646484375, -0.00032806396484375, -0.7337217330932617, -0.00018310546875, -0.0008385181427001953, -1.9073486328125e-06, -1.71661376953125e-05, -0.15728092193603516, -5.53131103515625e-05, -0.025252342224121094, -0.06502532958984375, -1.52587890625e-05, -0.16553878784179688, -1.9073486328125e-06, -1.2050535678863525, 0.0, -0.6171536445617676, 0.0, -1.33514404296875e-05, -0.0025005340576171875, -0.00014495849609375, -0.1371885985136032, -8.7738037109375e-05, -0.0002193450927734375, -1.33514404296875e-05, -0.0004215240478515625, 0.0, -7.724761962890625e-05, -3.814697265625e-06, -0.0002593994140625, 0.0, -0.1687755584716797, -0.0051479339599609375, -0.0002994537353515625, 0.0, -1.9073486328125e-06, -0.0003299713134765625, 0.0, -5.340576171875e-05, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -1.1357288360595703, -0.0013074874877929688, -0.0001888275146484375, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"_type": "Str", "s": "minion_died"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "minion", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, minion, index):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n", "score": -6.725960089456265, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.7259712219238281, -2.6702880859375e-05, -8.606910705566406e-05, -6.318092346191406e-06, -6.29425048828125e-05, -1.161585807800293, -3.814697265625e-05, -0.0010890960693359375, -0.9159631729125977, -2.288818359375e-05, -0.012729644775390625, -0.00042724609375, -0.004375457763671875, -0.5771646499633789, -3.814697265625e-06, -0.004642486572265625, -0.000125885009765625, -5.14984130859375e-05, 0.0, -0.3123633861541748, 0.0, -3.62396240234375e-05, -0.003551483154296875, -0.00011444091796875, -0.14938831329345703, -4.9591064453125e-05, -5.7220458984375e-05, 0.0, -0.009009242057800293, -5.7220458984375e-06, -0.0001049041748046875, 0.0, -0.040847063064575195, 0.0, -3.0517578125e-05, -0.0035152435302734375, -0.0001068115234375, -0.0006561279296875, -4.57763671875e-05, -0.0014932147460058331, -0.000141143798828125, -0.10733795166015625, -0.002956390380859375, -3.24249267578125e-05, -0.0001163482666015625, -0.0006923675537109375, -0.000396728515625, -0.12476277351379395, -5.53131103515625e-05, -0.0027208328247070312, -0.0009441375732421875, -0.0002899169921875, -6.67572021484375e-05, -0.0044384002685546875, -3.0517578125e-05, -0.012350678443908691, -1.1920928244535389e-07, -0.0047234296798706055, 0.0, -0.0013713836669921875, -0.000667572021484375, -3.814697265625e-06, -0.016183853149414062, -1.9073486328125e-06, -0.003214120864868164, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.000789642333984375, -2.09808349609375e-05, -0.009185791015625, -1.9073486328125e-06, -0.10034680366516113, -1.9073486328125e-06, -0.016058921813964844, 0.0, -0.0001430511474609375, -0.2518892288208008, -4.1961669921875e-05, -1.9073486328125e-05, 0.0, -0.0002657175064086914, 0.0, -0.000209808349609375, -0.000270843505859375, -2.86102294921875e-05, -0.010033607482910156, -1.52587890625e-05, -7.43865966796875e-05, 0.0, -4.76837158203125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008402466773986816, 0.0, -0.000507354736328125, -1.9073486328125e-05, -0.004741668701171875, 0.0, -0.0089569091796875, -1.9073486328125e-06, -0.001757979393005371, 0.0, -0.0029948949813842773, 0.0, -0.03561091423034668, 0.0, -2.288818359375e-05, -0.0017147064208984375, -6.103515625e-05, -0.20965224504470825, -3.814697265625e-06, -0.00958251953125, -4.00543212890625e-05, -0.08131551742553711, -1.33514404296875e-05, -0.03308868408203125, -9.918212890625e-05, -0.000213623046875, -1.1444091796875e-05, -0.008975982666015625, -9.5367431640625e-06, -0.008034825325012207, -1.9073486328125e-06, -0.0025409460067749023, 0.0, -0.0411839485168457, -1.1920928244535389e-07, -2.86102294921875e-05, -0.0019817352294921875, -0.00020599365234375, -0.13620223104953766, -1.9073486328125e-06, -0.01755523681640625, -6.4849853515625e-05, -0.1002964973449707, -1.1444091796875e-05, -0.059795379638671875, -0.0001277923583984375, -0.0001811981201171875, -1.52587890625e-05, -0.015262603759765625, -5.7220458984375e-06, -0.012865185737609863, -1.9073486328125e-06, -0.002602100372314453, 0.0, -0.04070234298706055, -1.1920928244535389e-07, -3.0517578125e-05, -0.0015773773193359375, -0.0002288818359375, -0.17007014155387878, -1.9073486328125e-06, -0.02958393096923828, -7.05718994140625e-05, -0.10608434677124023, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "minion"}, {"_type": "arg", "arg": "index"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, attacker, index):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n", "score": -6.96041545176783, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -1.183056354522705, 0.0, -1.52587890625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -0.039521217346191406, -0.0007009506225585938, -0.0003299713134765625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, -0.000324249267578125, 0.0, -0.0010013580322265625, -0.0002536773681640625, -0.0068225860595703125, 0.0, -0.006771087646484375, -0.00032806396484375, -0.6868400573730469, -4.1961669921875e-05, -0.00019752979278564453, -7.867813110351562e-06, -8.7738037109375e-05, -0.5988435745239258, -5.7220458984375e-06, -0.0001659393310546875, -1.312242031097412, -3.4332275390625e-05, -0.017431259155273438, -0.0003299713134765625, -0.004431724548339844, -0.2618141174316406, -3.814697265625e-06, -0.0043964385986328125, -0.0001316070556640625, -5.14984130859375e-05, 0.0, -0.26460325717926025, 0.0, -3.62396240234375e-05, -0.0034427642822265625, -0.000118255615234375, -0.14426803588867188, -4.9591064453125e-05, -5.340576171875e-05, 0.0, -0.006902337074279785, -1.1444091796875e-05, -0.0001087188720703125, 0.0, -0.045684099197387695, 0.0, -3.0517578125e-05, -0.0034475326538085938, -0.0001125335693359375, -0.0005970001220703125, -4.38690185546875e-05, -0.0016518826596438885, -0.0001678466796875, -0.11116218566894531, -0.002277374267578125, -2.86102294921875e-05, -9.918212890625e-05, -0.0006866455078125, -0.000362396240234375, -0.1246645450592041, -5.53131103515625e-05, -0.0026721954345703125, -0.000957489013671875, -0.000278472900390625, -6.103515625e-05, -0.004638671875, -3.0517578125e-05, -0.012706518173217773, -1.1920928244535389e-07, -0.004661440849304199, 0.0, -0.0013580322265625, -0.000621795654296875, -3.814697265625e-06, -0.015465736389160156, -1.9073486328125e-06, -0.003220796585083008, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0008392333984375, -2.09808349609375e-05, -0.009174346923828125, -1.9073486328125e-06, -0.10093092918395996, -1.9073486328125e-06, -0.015931129455566406, 0.0, -0.000148773193359375, -0.2406444549560547, -4.1961669921875e-05, -1.9073486328125e-05, 0.0, -0.0002619028091430664, 0.0, -0.0002079010009765625, -0.000270843505859375, -2.86102294921875e-05, -0.0101470947265625, -1.52587890625e-05, -7.43865966796875e-05, 0.0, -4.76837158203125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008383393287658691, 0.0, -0.0005035400390625, -1.9073486328125e-05, -0.004581451416015625, 0.0, -0.008813858032226562, -1.9073486328125e-06, -0.001769423484802246, 0.0, -0.0030101537704467773, 0.0, -0.03573298454284668, 0.0, -2.288818359375e-05, -0.001667022705078125, -6.103515625e-05, -0.21057432889938354, -3.814697265625e-06, -0.009771347045898438, -4.00543212890625e-05, -0.08096742630004883, -1.33514404296875e-05, -0.03265380859375, -9.918212890625e-05, -0.0002079010009765625, -1.33514404296875e-05, -0.009288787841796875, -9.5367431640625e-06, -0.0080949068069458, -1.9073486328125e-06, -0.0026067495346069336, 0.0, -0.041844844818115234, -1.1920928244535389e-07, -2.86102294921875e-05, -0.001995086669921875, -0.0002040863037109375, -0.1358502060174942, -1.9073486328125e-06, -0.017464637756347656, -6.4849853515625e-05, -0.10042715072631836, -1.1444091796875e-05, -0.06044197082519531, -0.0001277923583984375, -0.00017547607421875, -1.71661376953125e-05, -0.015821456909179688, -5.7220458984375e-06, -0.012912869453430176, -1.9073486328125e-06, -0.0026679039001464844, 0.0, -0.04118013381958008, -1.1920928244535389e-07, -3.0517578125e-05, -0.0016040802001953125, -0.0002269744873046875, -0.1695641130208969, -1.9073486328125e-06, -0.02938556671142578, -7.05718994140625e-05, -0.105987548828125, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}], "hole3": "activate", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 250, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 22, 136, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 250, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 250, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n        self.player = player\n", "score": -7.186760023244268, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -1.8861379623413086, -0.0067386627197265625, -0.0002231597900390625, -3.933898824470816e-06, -7.62939453125e-06, -2.980183853651397e-05, -5.960462772236497e-07, -0.309306263923645, 0.0, -0.18245601654052734, -0.0002574920654296875, -0.0005817413330078125, -8.392333984375e-05, -2.09808349609375e-05, -0.000640869140625, 0.0, -0.003635406494140625, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.19602394104003906, -0.0015153884887695312, -0.0001964569091796875, 0.0, -0.1165771484375, -1.9073486328125e-06, -0.01697981357574463, -0.00034236907958984375, -3.814697265625e-05, -0.008672714233398438, -0.0144195556640625, -0.008992195129394531, -1.1444091796875e-05, -0.008329391479492188, -0.0006628036499023438, -4.38690185546875e-05, 0.0, -0.00040924540371634066, 0.0, -1.1444091796875e-05, -0.030592918395996094, -3.62396240234375e-05, -0.0031032562255859375, -3.814697265625e-06, -0.000331878662109375, 0.0, -0.0032280683517456055, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -0.015482068061828613, 0.0, -3.24249267578125e-05, -0.0027017593383789062, -7.82012939453125e-05, -0.0011844635009765625, -7.05718994140625e-05, -0.0014179933350533247, -0.000171661376953125, -0.08710670471191406, -0.000865936279296875, -4.76837158203125e-05, -0.000164031982421875, -0.0013179779052734375, -0.000461578369140625, -0.133575439453125, -5.91278076171875e-05, -0.0025606155395507812, -0.0008897781372070312, -0.000400543212890625, -0.0001964569091796875, -0.0026836395263671875, -3.24249267578125e-05, -0.007565021049231291, -1.1920928244535389e-07, -0.006263613700866699, 0.0, -0.0024623870849609375, -0.000431060791015625, -3.814697265625e-06, -0.009184837341308594, -1.9073486328125e-06, -0.002924203872680664, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0006122589111328125, -1.9073486328125e-05, -0.0076313018798828125, -1.9073486328125e-06, -0.09701037406921387, -3.814697265625e-06, -0.015421867370605469, 0.0, -0.0001506805419921875, -0.26262378692626953, -4.1961669921875e-05, -1.71661376953125e-05, 0.0, -0.0002676248550415039, 0.0, -0.000217437744140625, -0.00026702880859375, -2.86102294921875e-05, -0.009924888610839844, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008606553077697754, 0.0, -0.0003566741943359375, -1.71661376953125e-05, -0.004634857177734375, 0.0, -0.008209228515625, -1.9073486328125e-06, -0.0018285512924194336, 0.0, -0.002890944480895996, 0.0, -0.034810781478881836, 0.0, -2.288818359375e-05, -0.0016613006591796875, -6.29425048828125e-05, -0.1985502988100052, -3.814697265625e-06, -0.009543418884277344, -4.00543212890625e-05, -0.08209514617919922, -1.33514404296875e-05, -0.03252410888671875, -0.000110626220703125, -0.000217437744140625, -1.52587890625e-05, -0.009401321411132812, -9.5367431640625e-06, -0.007515072822570801, -1.9073486328125e-06, -0.0028089284896850586, 0.0, -0.04088735580444336, -1.1920928244535389e-07, -3.0517578125e-05, -0.0019931793212890625, -0.0002117156982421875, -0.13361896574497223, -1.9073486328125e-06, -0.01768207550048828, -6.4849853515625e-05, -0.1012120246887207, -1.1444091796875e-05, -0.05703163146972656, -0.0001430511474609375, -0.0001888275146484375, -1.9073486328125e-05, -0.0156097412109375, -5.7220458984375e-06, -0.0120927095413208, -1.9073486328125e-06, -0.002822399139404297, 0.0, -0.04076433181762695, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0016021728515625, -0.00023651123046875, -0.16685685515403748, -1.9073486328125e-06, -0.02956390380859375, -7.05718994140625e-05, -0.1068735122680664, -9.5367431640625e-06, -0.08365058898925781, -0.04467296600341797, -9.5367431640625e-06, -0.18568798899650574, -3.814697265625e-06, -0.0002288818359375, -0.000545501708984375, -0.000438690185546875, -7.82012939453125e-05, -0.00030231475830078125, 0.0, -1.9073486328125e-05, -0.001064300537109375, 0.0, -0.6158895492553711, -0.0001068115234375, -8.20159912109375e-05, -0.00157928466796875, -7.05718994140625e-05, -0.00022125244140625, -0.0026330947875976562, -0.0012273788452148438, -5.7220458984375e-06, -0.00024259090423583984, -1.9073486328125e-06, -0.0002263757196487859, 0.0, -0.004581566900014877, 0.0, -0.299884557723999, 0.0, -9.5367431640625e-06, -3.814697265625e-05, -3.0517578125e-05, -0.0461573600769043, -0.0005970001220703125, -0.000263214111328125, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -8.0108642578125e-05, 0.0, -0.0002994537353515625, 0.0, -0.037952423095703125, -0.001499176025390625, -0.0005474090576171875, 0.0, -1.9073486328125e-06, -0.0005741119384765625, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -2.86102294921875e-05, 0.0, -0.1705341339111328, -1.9073486328125e-06, -0.0004558563232421875, 0.0, -0.01871490478515625, -0.00075531005859375, -0.04219317436218262, -4.5299530029296875e-06, -0.0013637542724609375, -0.00032806396484375, -0.000335693359375, -2.288818359375e-05, -0.0003358125686645508, 0.0, -2.288818359375e-05, -0.0023355484008789062, 0.0, -0.3914928436279297, -0.000118255615234375, -7.62939453125e-05, -0.0036334991455078125, -9.72747802734375e-05, -0.000194549560546875, -0.0033283233642578125, -0.00154876708984375, -7.62939453125e-06, -0.00045800209045410156, -3.814697265625e-06, -0.0001898979680845514, 0.0, -0.004272934515029192, 0.0, -0.31541430950164795, 0.0, -9.5367431640625e-06, -4.1961669921875e-05, -3.0517578125e-05, -0.045864105224609375, -0.0005645751953125, -0.00028228759765625, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -7.915496826171875e-05, 0.0, -0.000308990478515625, 0.0, -0.036147117614746094, -0.001705169677734375, -0.000400543212890625, 0.0, -1.9073486328125e-06, -0.0006427764892578125, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -2.86102294921875e-05, 0.0, -0.17528152465820312, -1.9073486328125e-06, -0.000492095947265625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "hole3": "_reveal", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "hole4": "minion", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 250, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 22, 136, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.3559468531973735, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -1.8861379623413086, -0.0067386627197265625, -0.0002231597900390625, -3.933898824470816e-06, -7.62939453125e-06, -2.980183853651397e-05, -5.960462772236497e-07, -0.309306263923645, 0.0, -0.18245601654052734, -0.0002574920654296875, -0.0005817413330078125, -8.392333984375e-05, -2.09808349609375e-05, -0.000640869140625, 0.0, -0.003635406494140625, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.19602394104003906, -0.0015153884887695312, -0.0001964569091796875, 0.0, -0.1165771484375, -1.9073486328125e-06, -0.01697981357574463, -0.00034236907958984375, -3.814697265625e-05, -0.008672714233398438, -0.0144195556640625, -0.008992195129394531, -1.1444091796875e-05, -0.008329391479492188, -0.0006628036499023438, -4.38690185546875e-05, 0.0, -0.00040924540371634066, 0.0, -1.1444091796875e-05, -0.030592918395996094, -3.62396240234375e-05, -0.0031032562255859375, -3.814697265625e-06, -0.000331878662109375, 0.0, -0.0032280683517456055, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -0.015482068061828613, 0.0, -3.24249267578125e-05, -0.0027017593383789062, -7.82012939453125e-05, -0.0011844635009765625, -7.05718994140625e-05, -0.0014179933350533247, -0.000171661376953125, -0.08710670471191406, -0.000865936279296875, -4.76837158203125e-05, -0.000164031982421875, -0.0013179779052734375, -0.000461578369140625, -0.133575439453125, -5.91278076171875e-05, -0.0025606155395507812, -0.0008897781372070312, -0.000400543212890625, -0.0001964569091796875, -0.0026836395263671875, -3.24249267578125e-05, -0.007565021049231291, -1.1920928244535389e-07, -0.006263613700866699, 0.0, -0.0024623870849609375, -0.000431060791015625, -3.814697265625e-06, -0.009184837341308594, -1.9073486328125e-06, -0.002924203872680664, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0006122589111328125, -1.9073486328125e-05, -0.0076313018798828125, -1.9073486328125e-06, -0.09701037406921387, -3.814697265625e-06, -0.015421867370605469, 0.0, -0.0001506805419921875, -0.26262378692626953, -4.1961669921875e-05, -1.71661376953125e-05, 0.0, -0.0002676248550415039, 0.0, -0.000217437744140625, -0.00026702880859375, -2.86102294921875e-05, -0.009924888610839844, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008606553077697754, 0.0, -0.0003566741943359375, -1.71661376953125e-05, -0.004634857177734375, 0.0, -0.008209228515625, -1.9073486328125e-06, -0.0018285512924194336, 0.0, -0.002890944480895996, 0.0, -0.034810781478881836, 0.0, -2.288818359375e-05, -0.0016613006591796875, -6.29425048828125e-05, -0.1985502988100052, -3.814697265625e-06, -0.009543418884277344, -4.00543212890625e-05, -0.08209514617919922, -1.33514404296875e-05, -0.03252410888671875, -0.000110626220703125, -0.000217437744140625, -1.52587890625e-05, -0.009401321411132812, -9.5367431640625e-06, -0.007515072822570801, -1.9073486328125e-06, -0.0028089284896850586, 0.0, -0.04088735580444336, -1.1920928244535389e-07, -3.0517578125e-05, -0.0019931793212890625, -0.0002117156982421875, -0.13361896574497223, -1.9073486328125e-06, -0.01768207550048828, -6.4849853515625e-05, -0.1012120246887207, -1.1444091796875e-05, -0.05703163146972656, -0.0001430511474609375, -0.0001888275146484375, -1.9073486328125e-05, -0.0156097412109375, -5.7220458984375e-06, -0.0120927095413208, -1.9073486328125e-06, -0.002822399139404297, 0.0, -0.04076433181762695, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0016021728515625, -0.00023651123046875, -0.16685685515403748, -1.9073486328125e-06, -0.02956390380859375, -7.05718994140625e-05, -0.1068735122680664, -9.5367431640625e-06, -0.08365058898925781, -0.04467296600341797, -9.5367431640625e-06, -0.18568798899650574, -3.814697265625e-06, -0.0002288818359375, -0.000545501708984375, -0.000438690185546875, -7.82012939453125e-05, -0.00030231475830078125, 0.0, -1.9073486328125e-05, -0.001064300537109375, 0.0, -0.7814064025878906, -2.09808349609375e-05, -8.0108642578125e-05, -0.0001373291015625, -7.43865966796875e-05, -0.0001049041748046875, -0.0015010833740234375, -0.0004329681396484375, -1.9073486328125e-06, -0.0004278421401977539, -7.62939453125e-06, -0.0002238688466604799, 0.0, -0.0038039658684283495, 0.0, -0.3734220266342163, -1.9073486328125e-06, -6.866455078125e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.039357781410217285, -0.0009889602661132812, -0.0003223419189453125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010013580322265625, -1.9073486328125e-06, -0.000293731689453125, 0.0, -0.00537109375, -0.0001068115234375, -0.02020561695098877, 0.0, -0.01129913330078125, -0.000308990478515625, -0.3985776901245117, -7.05718994140625e-05, -0.0005706548690795898, -1.9073486328125e-06, -1.52587890625e-05, -0.35274410247802734, 0.0, -0.055545806884765625, -2.09808349609375e-05, -7.2479248046875e-05, -0.000263214111328125, -6.4849853515625e-05, -5.7220458984375e-05, -0.0015354156494140625, -0.00060272216796875, -5.7220458984375e-06, -0.0010892152786254883, -7.62939453125e-06, -0.0001693943195277825, 0.0, -0.0031119566410779953, 0.0, -0.3081066608428955, -1.9073486328125e-06, -3.814697265625e-05, -4.1961669921875e-05, -3.62396240234375e-05, -0.039623260498046875, -0.00104522705078125, -0.0002727508544921875, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.000308990478515625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "hole3": "_reveal", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "hole4": "minion", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 250, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 22, 136, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 250, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.752551628663049, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -1.8861379623413086, -0.0067386627197265625, -0.0002231597900390625, -3.933898824470816e-06, -7.62939453125e-06, -2.980183853651397e-05, -5.960462772236497e-07, -0.309306263923645, 0.0, -0.18245601654052734, -0.0002574920654296875, -0.0005817413330078125, -8.392333984375e-05, -2.09808349609375e-05, -0.000640869140625, 0.0, -0.003635406494140625, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.19602394104003906, -0.0015153884887695312, -0.0001964569091796875, 0.0, -0.1165771484375, -1.9073486328125e-06, -0.01697981357574463, -0.00034236907958984375, -3.814697265625e-05, -0.008672714233398438, -0.0144195556640625, -0.008992195129394531, -1.1444091796875e-05, -0.008329391479492188, -0.0006628036499023438, -4.38690185546875e-05, 0.0, -0.00040924540371634066, 0.0, -1.1444091796875e-05, -0.030592918395996094, -3.62396240234375e-05, -0.0031032562255859375, -3.814697265625e-06, -0.000331878662109375, 0.0, -0.0032280683517456055, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -0.015482068061828613, 0.0, -3.24249267578125e-05, -0.0027017593383789062, -7.82012939453125e-05, -0.0011844635009765625, -7.05718994140625e-05, -0.0014179933350533247, -0.000171661376953125, -0.08710670471191406, -0.000865936279296875, -4.76837158203125e-05, -0.000164031982421875, -0.0013179779052734375, -0.000461578369140625, -0.133575439453125, -5.91278076171875e-05, -0.0025606155395507812, -0.0008897781372070312, -0.000400543212890625, -0.0001964569091796875, -0.0026836395263671875, -3.24249267578125e-05, -0.007565021049231291, -1.1920928244535389e-07, -0.006263613700866699, 0.0, -0.0024623870849609375, -0.000431060791015625, -3.814697265625e-06, -0.009184837341308594, -1.9073486328125e-06, -0.002924203872680664, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0006122589111328125, -1.9073486328125e-05, -0.0076313018798828125, -1.9073486328125e-06, -0.09701037406921387, -3.814697265625e-06, -0.015421867370605469, 0.0, -0.0001506805419921875, -0.26262378692626953, -4.1961669921875e-05, -1.71661376953125e-05, 0.0, -0.0002676248550415039, 0.0, -0.000217437744140625, -0.00026702880859375, -2.86102294921875e-05, -0.009924888610839844, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008606553077697754, 0.0, -0.0003566741943359375, -1.71661376953125e-05, -0.004634857177734375, 0.0, -0.008209228515625, -1.9073486328125e-06, -0.0018285512924194336, 0.0, -0.002890944480895996, 0.0, -0.034810781478881836, 0.0, -2.288818359375e-05, -0.0016613006591796875, -6.29425048828125e-05, -0.1985502988100052, -3.814697265625e-06, -0.009543418884277344, -4.00543212890625e-05, -0.08209514617919922, -1.33514404296875e-05, -0.03252410888671875, -0.000110626220703125, -0.000217437744140625, -1.52587890625e-05, -0.009401321411132812, -9.5367431640625e-06, -0.007515072822570801, -1.9073486328125e-06, -0.0028089284896850586, 0.0, -0.04088735580444336, -1.1920928244535389e-07, -3.0517578125e-05, -0.0019931793212890625, -0.0002117156982421875, -0.13361896574497223, -1.9073486328125e-06, -0.01768207550048828, -6.4849853515625e-05, -0.1012120246887207, -1.1444091796875e-05, -0.05703163146972656, -0.0001430511474609375, -0.0001888275146484375, -1.9073486328125e-05, -0.0156097412109375, -5.7220458984375e-06, -0.0120927095413208, -1.9073486328125e-06, -0.002822399139404297, 0.0, -0.04076433181762695, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0016021728515625, -0.00023651123046875, -0.16685685515403748, -1.9073486328125e-06, -0.02956390380859375, -7.05718994140625e-05, -0.1068735122680664, -9.5367431640625e-06, -0.08365058898925781, -0.04467296600341797, -9.5367431640625e-06, -0.18568798899650574, -3.814697265625e-06, -0.0002288818359375, -0.000545501708984375, -0.000438690185546875, -7.82012939453125e-05, -0.00030231475830078125, 0.0, -1.9073486328125e-05, -0.001064300537109375, 0.0, -0.6158895492553711, -0.0001068115234375, -8.20159912109375e-05, -0.00157928466796875, -7.05718994140625e-05, -0.00022125244140625, -0.0026330947875976562, -0.0012273788452148438, -5.7220458984375e-06, -0.00024259090423583984, -1.9073486328125e-06, -0.0002263757196487859, 0.0, -0.004581566900014877, 0.0, -0.299884557723999, 0.0, -9.5367431640625e-06, -3.814697265625e-05, -3.0517578125e-05, -0.0461573600769043, -0.0005970001220703125, -0.000263214111328125, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -8.0108642578125e-05, 0.0, -0.0002994537353515625, 0.0, -0.037952423095703125, -0.001499176025390625, -0.0005474090576171875, 0.0, -1.9073486328125e-06, -0.0005741119384765625, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -2.86102294921875e-05, 0.0, -0.1705341339111328, -1.9073486328125e-06, -0.0004558563232421875, 0.0, -0.01871490478515625, -0.00075531005859375, -0.04219317436218262, -4.5299530029296875e-06, -0.0013637542724609375, -0.00032806396484375, -0.000335693359375, -2.288818359375e-05, -0.0003358125686645508, 0.0, -2.288818359375e-05, -0.0023355484008789062, 0.0, -1.1442327499389648, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001392364501953125, -5.340576171875e-05, -6.866455078125e-05, -0.0026254653930664062, -0.00052642822265625, -1.9073486328125e-06, -0.0007960796356201172, -9.5367431640625e-06, -0.00019847908697556704, 0.0, -0.0038592787459492683, 0.0, -0.3541961908340454, -1.9073486328125e-06, -3.814697265625e-05, -3.814697265625e-05, -3.62396240234375e-05, -0.0399932861328125, -0.0009355545043945312, -0.0002956390380859375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010013580322265625, -1.9073486328125e-06, -0.0003147125244140625, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "hole3": "_reveal", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "hole4": "minion", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 250, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 22, 136, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 249, 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 253, 75, 102, 237, 44, 134, "mirror", "<EOS>", 16, 110, 13, 103, 21, 134, "minion", "<EOS>", "copy", "<EOS>", 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 93, 196, 21, 134, "mirror", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 93, 196, 13, 103, 21, 134, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 44, 134, "mirror", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 250, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 250, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n        self.player = player\n", "score": -8.191224053510076, "score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -1.8861379623413086, -0.0067386627197265625, -0.0002231597900390625, -3.933898824470816e-06, -7.62939453125e-06, -2.980183853651397e-05, -5.960462772236497e-07, -0.309306263923645, 0.0, -0.18245601654052734, -0.0002574920654296875, -0.0005817413330078125, -8.392333984375e-05, -2.09808349609375e-05, -0.000640869140625, 0.0, -0.003635406494140625, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.19602394104003906, -0.0015153884887695312, -0.0001964569091796875, 0.0, -0.1165771484375, -1.9073486328125e-06, -0.01697981357574463, -0.00034236907958984375, -3.814697265625e-05, -0.008672714233398438, -0.0144195556640625, -0.008992195129394531, -1.1444091796875e-05, -0.008329391479492188, -0.0006628036499023438, -4.38690185546875e-05, 0.0, -0.00040924540371634066, 0.0, -1.1444091796875e-05, -0.030592918395996094, -3.62396240234375e-05, -0.0031032562255859375, -3.814697265625e-06, -0.000331878662109375, 0.0, -0.0032280683517456055, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -0.015482068061828613, 0.0, -3.24249267578125e-05, -0.0027017593383789062, -7.82012939453125e-05, -0.0011844635009765625, -7.05718994140625e-05, -0.0014179933350533247, -0.000171661376953125, -0.08710670471191406, -0.000865936279296875, -4.76837158203125e-05, -0.000164031982421875, -0.0013179779052734375, -0.000461578369140625, -0.133575439453125, -5.91278076171875e-05, -0.0025606155395507812, -0.0008897781372070312, -0.000400543212890625, -0.0001964569091796875, -0.0026836395263671875, -3.24249267578125e-05, -0.007565021049231291, -1.1920928244535389e-07, -0.006263613700866699, 0.0, -0.0024623870849609375, -0.000431060791015625, -3.814697265625e-06, -0.009184837341308594, -1.9073486328125e-06, -0.002924203872680664, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0006122589111328125, -1.9073486328125e-05, -0.0076313018798828125, -1.9073486328125e-06, -0.09701037406921387, -3.814697265625e-06, -0.015421867370605469, 0.0, -0.0001506805419921875, -0.26262378692626953, -4.1961669921875e-05, -1.71661376953125e-05, 0.0, -0.0002676248550415039, 0.0, -0.000217437744140625, -0.00026702880859375, -2.86102294921875e-05, -0.009924888610839844, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -6.29425048828125e-05, 0.0, -0.008606553077697754, 0.0, -0.0003566741943359375, -1.71661376953125e-05, -0.004634857177734375, 0.0, -0.008209228515625, -1.9073486328125e-06, -0.0018285512924194336, 0.0, -0.002890944480895996, 0.0, -0.034810781478881836, 0.0, -2.288818359375e-05, -0.0016613006591796875, -6.29425048828125e-05, -0.1985502988100052, -3.814697265625e-06, -0.009543418884277344, -4.00543212890625e-05, -0.08209514617919922, -1.33514404296875e-05, -0.03252410888671875, -0.000110626220703125, -0.000217437744140625, -1.52587890625e-05, -0.009401321411132812, -9.5367431640625e-06, -0.007515072822570801, -1.9073486328125e-06, -0.0028089284896850586, 0.0, -0.04088735580444336, -1.1920928244535389e-07, -3.0517578125e-05, -0.0019931793212890625, -0.0002117156982421875, -0.13361896574497223, -1.9073486328125e-06, -0.01768207550048828, -6.4849853515625e-05, -0.1012120246887207, -1.1444091796875e-05, -0.05703163146972656, -0.0001430511474609375, -0.0001888275146484375, -1.9073486328125e-05, -0.0156097412109375, -5.7220458984375e-06, -0.0120927095413208, -1.9073486328125e-06, -0.002822399139404297, 0.0, -0.04076433181762695, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0016021728515625, -0.00023651123046875, -0.16685685515403748, -1.9073486328125e-06, -0.02956390380859375, -7.05718994140625e-05, -0.1068735122680664, -9.5367431640625e-06, -0.08365058898925781, -0.04467296600341797, -9.5367431640625e-06, -0.18568798899650574, -3.814697265625e-06, -0.0002288818359375, -0.000545501708984375, -0.000438690185546875, -7.82012939453125e-05, -0.00030231475830078125, 0.0, -1.9073486328125e-05, -0.001064300537109375, 0.0, -0.6158895492553711, -0.0001068115234375, -8.20159912109375e-05, -0.00157928466796875, -7.05718994140625e-05, -0.00022125244140625, -0.0026330947875976562, -0.0012273788452148438, -5.7220458984375e-06, -0.00024259090423583984, -1.9073486328125e-06, -0.0002263757196487859, 0.0, -0.004581566900014877, 0.0, -0.299884557723999, 0.0, -9.5367431640625e-06, -3.814697265625e-05, -3.0517578125e-05, -0.0461573600769043, -0.0005970001220703125, -0.000263214111328125, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -8.0108642578125e-05, 0.0, -0.0002994537353515625, 0.0, -0.037952423095703125, -0.001499176025390625, -0.0005474090576171875, 0.0, -1.9073486328125e-06, -0.0005741119384765625, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -2.86102294921875e-05, 0.0, -0.1705341339111328, -1.9073486328125e-06, -0.0004558563232421875, 0.0, -0.01871490478515625, -0.00075531005859375, -0.04219317436218262, -4.5299530029296875e-06, -0.0013637542724609375, -0.00032806396484375, -0.000335693359375, -2.288818359375e-05, -0.0003358125686645508, 0.0, -2.288818359375e-05, -0.0023355484008789062, 0.0, -0.3914928436279297, -0.000118255615234375, -7.62939453125e-05, -0.0036334991455078125, -9.72747802734375e-05, -0.000194549560546875, -0.0033283233642578125, -0.00154876708984375, -7.62939453125e-06, -0.00045800209045410156, -3.814697265625e-06, -0.0001898979680845514, 0.0, -0.004272934515029192, 0.0, -1.3189038038253784, 0.0, -1.9073486328125e-06, -5.53131103515625e-05, -3.24249267578125e-05, -0.04434669017791748, -0.00049591064453125, -0.00031280517578125, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -9.1552734375e-05, 0.0, -0.0003299713134765625, 0.0, -0.027551651000976562, -0.0014972686767578125, -0.000499725341796875, 0.0, -1.9073486328125e-06, -0.00051116943359375, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -3.0517578125e-05, 0.0, -0.1866006851196289, -1.9073486328125e-06, -0.00049591064453125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Repentance", "hole2": "PALADIN", "hole1": 1}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "hole3": "_reveal", "hole1": "SecretCard", "hole0": "Repentance", "hole6": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "copy"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Template37", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion"}, "attr": "player"}, "hole2": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "hole1": "trigger"}], "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 7}], "ops": [{"_type": "Lt"}]}}], "hole4": "minion", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score": -1.3259002783815887, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -0.17889976501464844, -3.814697265625e-06, -0.2602224349975586, -0.00010323524475097656, -0.0001373291015625], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score": -2.354464209908194, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -1.3959020376205444, 0.0, -0.0003050565137527883, 0.0, -0.012016654014587402, -1.9073486328125e-06, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.035877227783203125, -0.0001888275146484375, -1.1920928244535389e-07, -2.2649765014648438e-06, -5.245194188319147e-06, 0.0, -0.008463263511657715, -1.9073486328125e-06, -0.0001201629638671875, -0.016269683837890625, -0.00020825862884521484, -8.0108642578125e-05, -1.1444091796875e-05, -0.10568809509277344, -1.9073486328125e-06, -0.0180678591132164, -0.28062236309051514, -0.0003631114959716797, -0.18475341796875, -3.814697265625e-06, -0.27428948879241943, -0.00010132789611816406, -0.000133514404296875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "MAGE", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Shadow", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Shadow()))])\n", "score": -2.694957853102089, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -1.660071849822998, -0.01841890811920166, -0.0039501190185546875, -0.2046527862548828, -0.0005435943603515625, -0.003799447324126959, -0.0007575750350952148, -3.7193243770161644e-05, -0.18988528847694397, -0.012401342391967773], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Shadow"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Hero", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), HeroSelector())])\n", "score": -2.736434064201596, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -0.17889976501464844, -3.814697265625e-06, -1.6684141159057617, -0.0023576021194458008, -0.000225067138671875], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "HeroSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Shadow", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), MinionSelector(\n            Shadow()))])\n", "score": -3.3605517394371347, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -1.8166017532348633, -0.000152587890625, -0.0060012368485331535, -0.0006009340286254883, -2.4437902538920753e-05, -0.6414692997932434, -0.009167790412902832], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Shadow"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), MinionSelector(\n            Adjacent()))])\n", "score": -3.60588904689029, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -1.8166017532348633, -0.000152587890625, -0.0060012368485331535, -0.0006009340286254883, -2.4437902538920753e-05, -0.8959721326828003, -2.2649765014648438e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Hero", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), HeroSelector())])\n", "score": -3.6951289542853303, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -1.3959020376205444, 0.0, -0.0003050565137527883, 0.0, -0.012016654014587402, -1.9073486328125e-06, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.035877227783203125, -0.0001888275146484375, -1.1920928244535389e-07, -2.2649765014648438e-06, -5.245194188319147e-06, 0.0, -0.008463263511657715, -1.9073486328125e-06, -0.0001201629638671875, -0.016269683837890625, -0.00020825862884521484, -8.0108642578125e-05, -1.1444091796875e-05, -0.10568809509277344, -1.9073486328125e-06, -0.0180678591132164, -0.28062236309051514, -0.0003631114959716797, -0.18475341796875, -3.814697265625e-06, -1.6126025915145874, -0.0023652315139770508, -0.00022125244140625], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "MAGE", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "HeroSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Shadow", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Shadow()))])\n", "score": -3.7440750712853443, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -1.3959020376205444, 0.0, -0.0003050565137527883, 0.0, -0.012016654014587402, -1.9073486328125e-06, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.035877227783203125, -0.0001888275146484375, -1.1920928244535389e-07, -2.2649765014648438e-06, -5.245194188319147e-06, 0.0, -0.008463263511657715, -1.9073486328125e-06, -0.0001201629638671875, -0.016269683837890625, -0.00020825862884521484, -8.0108642578125e-05, -1.1444091796875e-05, -0.10568809509277344, -1.9073486328125e-06, -0.0180678591132164, -1.6916340589523315, -0.018430352210998535, -0.00390625, -0.20119571685791016, -0.0005435943603515625, -0.003794078715145588, -0.0007480382919311523, -3.695482882903889e-05, -0.1971932351589203, -0.012395620346069336], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "MAGE", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Shadow"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), PlayerSelector())])\n", "score": -4.149693182996991, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -1.660071849822998, -0.01841890811920166, -0.0039501190185546875, -1.7335710525512695, -6.103515625e-05, -0.13290902972221375, -0.0002027750015258789, -6.866455078125e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Shadow", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), MinionSelector(\n            Shadow()))])\n", "score": -4.360525051399684, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -1.3959020376205444, 0.0, -0.0003050565137527883, 0.0, -0.012016654014587402, -1.9073486328125e-06, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.035877227783203125, -0.0001888275146484375, -1.1920928244535389e-07, -2.2649765014648438e-06, -5.245194188319147e-06, 0.0, -0.008463263511657715, -1.9073486328125e-06, -0.0001201629638671875, -0.016269683837890625, -0.00020825862884521484, -8.0108642578125e-05, -1.1444091796875e-05, -0.10568809509277344, -1.9073486328125e-06, -0.0180678591132164, -0.28062236309051514, -0.0003631114959716797, -1.787003517150879, -0.0001430511474609375, -0.00595641415566206, -0.0005933046340942383, -2.6345251171733253e-05, -0.6623871326446533, -0.009232640266418457], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "MAGE", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Shadow"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Spell", "Target", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n", "score": -4.516415566944026, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -1.660071849822998, -0.01841890811920166, -0.0039501190185546875, -0.2046527862548828, -0.0005435943603515625, -0.003799447324126959, -0.0007575750350952148, -3.7193243770161644e-05, -2.0237395763397217, -4.768371127283899e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>SpellTarget"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 53, 182, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), MinionSelector(\n            Adjacent()))])\n", "score": -4.5609265959706065, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -1.3959020376205444, 0.0, -0.0003050565137527883, 0.0, -0.012016654014587402, -1.9073486328125e-06, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.035877227783203125, -0.0001888275146484375, -1.1920928244535389e-07, -2.2649765014648438e-06, -5.245194188319147e-06, 0.0, -0.008463263511657715, -1.9073486328125e-06, -0.0001201629638671875, -0.016269683837890625, -0.00020825862884521484, -8.0108642578125e-05, -1.1444091796875e-05, -0.10568809509277344, -1.9073486328125e-06, -0.0180678591132164, -0.28062236309051514, -0.0003631114959716797, -1.787003517150879, -0.0001430511474609375, -0.00595641415566206, -0.0005933046340942383, -2.6345251171733253e-05, -0.8720190525054932, -2.2649765014648438e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "MAGE", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template26", "hole0": "MinionSelector", "hole1": "Adjacent"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score": -4.58736302456964, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -3.635906457901001, 0.0, -0.0031245946884155273, 0.0, -0.02887749671936035, 0.0, -2.384185791015625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.047118186950683594, -0.000179290771484375, 0.0, -2.2649765014648438e-06, -5.364403023122577e-06, 0.0, -0.007833480834960938, -1.9073486328125e-06, -0.00012969970703125, -0.015630722045898438, -0.00020253658294677734, -8.58306884765625e-05, -1.1444091796875e-05, -0.08313560485839844, -1.9073486328125e-06, -0.017849570140242577, -0.3014230728149414, -0.00044906139373779297, -0.1701507568359375, -1.9073486328125e-06, -0.2540065050125122, -0.00010704994201660156, -0.0001430511474609375], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), SelfSelector())])\n", "score": -4.611190519623044, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -0.17889976501464844, -3.814697265625e-06, -3.5450172424316406, -0.00043654441833496094, -0.0002994537353515625], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score": -5.055740840124145, "score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -4.04037618637085, 0.0, -0.0038743019104003906, 0.0, -0.015535831451416016, 0.0, -3.218649908376392e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.07411861419677734, -0.0002994537353515625, 0.0, -4.172325134277344e-06, -6.0796546677011065e-06, 0.0, -0.00753474235534668, -1.9073486328125e-06, -0.0001430511474609375, -0.015687942504882812, -0.00018537044525146484, -8.96453857421875e-05, -1.33514404296875e-05, -0.1305227279663086, -1.9073486328125e-06, -0.020253770053386688, -0.27461397647857666, -0.0004317760467529297, -0.1751861572265625, -1.9073486328125e-06, -0.2756427526473999, -9.942054748535156e-05, -0.00012969970703125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Shadow of Nothing", "hole3": "EPIC", "hole2": "SHAMAN", "hole1": 0}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "ShadowOfNothing", "hole6": [{"_type": "Template22", "hole0": 0, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -1.4879767893559475, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5057382583618164, -2.86102294921875e-05, -0.020355224609375, -7.62939453125e-06, -0.013738632202148438, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.6113089323043823, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.<UNK>()\n", "score": -1.6622642277485866, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5057382583618164, -2.86102294921875e-05, -0.020355224609375, -7.62939453125e-06, -0.013738632202148438, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.7856000661849976, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 52, 180, "Frozen", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -2.593060490629462, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.941131591796875, -0.00087738037109375, -0.0011444091796875, -2.288818359375e-05, -0.02501678466796875, 0.0, -0.4605238437652588, 0.0, 0.0, -2.3841855067985307e-07, -0.7696857452392578, 0.0, -0.00012969970703125, -0.033316612243652344, -0.0020084381103515625, -0.022646188735961914, -0.00011384215031284839], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template25", "hole0": "Frozen"}], "hole1": "add_buff"}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_heal_power", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "score": -2.8528298817078905, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.941131591796875, -0.00087738037109375, -0.0011444091796875, -2.288818359375e-05, -0.02501678466796875, 0.0, -0.9973738193511963, 0.0, -0.002316594123840332, -1.9073486328125e-06, -0.5352240800857544, 0.0, -2.47955322265625e-05, -0.0007953643798828125, -3.4332275390625e-05, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-05, 0.0, -0.010974407196044922, -3.218649908376392e-06, -0.001315661589615047, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -2.09808349609375e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_heal_power"}, {"_type": "Name", "id": "self"}], "hole1": "heal"}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "score": -3.052978934978917, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.941131591796875, -0.00087738037109375, -0.0011444091796875, -2.288818359375e-05, -0.02501678466796875, 0.0, -0.4605238437652588, 0.0, 0.0, -2.3841855067985307e-07, -1.2763819694519043, 0.0, -2.47955322265625e-05, -0.007854461669921875, -7.62939453125e-06, -2.288818359375e-05, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -0.0004220005648676306, -1.4305104514278355e-06, -0.003021660028025508, 0.0, -1.33514404296875e-05, 0.0, -5.14984130859375e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -3.1779344974762935, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -1.9922258853912354, 0.0, -0.000148773193359375, 0.0, -1.52587890625e-05, -2.288818359375e-05, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -9.5367431640625e-06, -1.0848044439626392e-05, -1.9073486328125e-06, -0.002724170684814453, 0.0, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.00206756591796875, -4.38690185546875e-05, -1.9073486328125e-06, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.356571197509766e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0002957582473754883, -0.008829116821289062, -0.0003261566162109375, -0.0001010894775390625, -5.7220458984375e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012386322021484375, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014070012839511037, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5081787109375, -2.86102294921875e-05, -0.020320892333984375, -7.62939453125e-06, -0.013706207275390625, -3.814697265625e-06, -0.0003490447998046875, 0.0, -0.6114939451217651, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "ROGUE", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.<UNK>()\n", "score": -3.35181662428446, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -1.9922258853912354, 0.0, -0.000148773193359375, 0.0, -1.52587890625e-05, -2.288818359375e-05, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -9.5367431640625e-06, -1.0848044439626392e-05, -1.9073486328125e-06, -0.002724170684814453, 0.0, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.00206756591796875, -4.38690185546875e-05, -1.9073486328125e-06, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.356571197509766e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0002957582473754883, -0.008829116821289062, -0.0003261566162109375, -0.0001010894775390625, -5.7220458984375e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012386322021484375, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014070012839511037, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5081787109375, -2.86102294921875e-05, -0.020320892333984375, -7.62939453125e-06, -0.013706207275390625, -3.814697265625e-06, -0.0003490447998046875, 0.0, -0.7853797674179077, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "ROGUE", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.damage(player.effective_spell_damage(2), self)\n", "score": -3.747983174017385, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.941131591796875, -0.00087738037109375, -0.0011444091796875, -2.288818359375e-05, -0.02501678466796875, 0.0, -0.9973738193511963, 0.0, -0.002316594123840332, -1.9073486328125e-06, -1.4384747743606567, 0.0, -7.62939453125e-06, -0.0002231597900390625, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00052642822265625, 0.0, -0.0002949225890915841, -1.1920922133867862e-06, -0.004056292586028576, 0.0, -7.62939453125e-06, 0.0, -4.00543212890625e-05, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "hero"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -4.029762178540899, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -2.8479483127593994, 0.0, -0.00010693073272705078, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.103515625e-05, -1.1444091796875e-05, -1.263618378288811e-05, -1.9073486328125e-06, -0.0028804540634155273, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020666122436523438, -4.38690185546875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.153915405273438e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0002957582473754883, -0.008806228637695312, -0.0003261566162109375, -0.0001010894775390625, -5.7220458984375e-05, -0.00019073486328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012350082397460938, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014053919585421681, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5041284561157227, -2.86102294921875e-05, -0.020371437072753906, -7.62939453125e-06, -0.013759613037109375, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.6115063428878784, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.<UNK>()\n", "score": -4.203613787770941, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -2.8479483127593994, 0.0, -0.00010693073272705078, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.103515625e-05, -1.1444091796875e-05, -1.263618378288811e-05, -1.9073486328125e-06, -0.0028804540634155273, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020666122436523438, -4.38690185546875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.153915405273438e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0002957582473754883, -0.008806228637695312, -0.0003261566162109375, -0.0001010894775390625, -5.7220458984375e-05, -0.00019073486328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012350082397460938, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014053919585421681, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5041284561157227, -2.86102294921875e-05, -0.020371437072753906, -7.62939453125e-06, -0.013759613037109375, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.785361647605896, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "score": -4.213435321927733, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -3.0320379734039307, 0.0, -6.866455078125e-05, -1.1920928244535389e-07, -1.1444091796875e-05, -2.09808349609375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -1.442432312614983e-05, -1.9073486328125e-06, -0.0032541751861572266, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020647048950195312, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.963180541992188e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0490406566532329e-05, -0.0002900362014770508, -0.008581161499023438, -0.00032806396484375, -9.918212890625e-05, -5.91278076171875e-05, -0.00019073486328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019288063049316406, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012414932250976562, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014067032607272267, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5037317276000977, -2.86102294921875e-05, -0.020412445068359375, -7.62939453125e-06, -0.013753890991210938, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.6112746000289917, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARLOCK", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.<UNK>()\n", "score": -4.387793332219786, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -3.0320379734039307, 0.0, -6.866455078125e-05, -1.1920928244535389e-07, -1.1444091796875e-05, -2.09808349609375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -1.442432312614983e-05, -1.9073486328125e-06, -0.0032541751861572266, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020647048950195312, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.963180541992188e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0490406566532329e-05, -0.0002900362014770508, -0.008581161499023438, -0.00032806396484375, -9.918212890625e-05, -5.91278076171875e-05, -0.00019073486328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019288063049316406, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012414932250976562, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014067032607272267, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5037317276000977, -2.86102294921875e-05, -0.020412445068359375, -7.62939453125e-06, -0.013753890991210938, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.785636305809021, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARLOCK", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Attack", "<EOS>", 50, 168, "Draw", "<EOS>", "Player", "Selector", "<EOS>", 237, 44, 134, "draw_player", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_effect(Effect(Attack(), ActionTag(Draw(),\n            PlayerSelector(draw_player))))\n", "score": -5.226380407691643, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.941131591796875, -0.00087738037109375, -0.0011444091796875, -2.288818359375e-05, -0.02501678466796875, 0.0, -0.4605238437652588, 0.0, 0.0, -2.3841855067985307e-07, -2.1984992027282715, 0.0, -0.06573104858398438, -0.053092002868652344, -1.9073486328125e-05, -0.005428314208984375, 0.0, -0.015653610229492188, -3.24249267578125e-05, 0.0, -0.002719879150390625, -7.62939453125e-06, -0.5772688984870911, -0.0006923675537109375, -0.07505989074707031, -0.07401180267333984, -0.03039717674255371, -3.814697265625e-06, -0.0005513429641723633, -1.7404556274414062e-05, -3.933906555175781e-06, 0.0, -0.0025234222412109375, -1.9073486328125e-06, -0.35949957370758057, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Template31", "hole0": {"_type": "Name", "id": "player"}, "hole2": 2, "hole1": "effective_spell_damage"}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "Attack"}, {"_type": "Template19", "hole0": "Draw", "hole3": "PlayerSelector", "hole4": [{"_type": "Name", "id": "draw_player"}]}]}], "hole1": "add_effect"}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 46, 139, "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.draw()\n", "score": -5.509675558469937, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -4.419900894165039, -2.86102294921875e-05, -0.0004051327705383301, 0.0, -0.0003223419189453125, -5.7220458984375e-06, -7.62939453125e-05, 0.0, -0.0041713714599609375, -8.20159912109375e-05, -0.17786026000976562, -5.7220458984375e-06, -0.021070480346679688, -1.9073486328125e-06, -0.0076351165771484375, 0.0, -0.5556753873825073, -7.62939453125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "draw"}}], "hole4": "player"}}, {"choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 46, 139, "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.<UNK>()\n", "score": -5.8108498414975855, "score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -4.419900894165039, -2.86102294921875e-05, -0.0004051327705383301, 0.0, -0.0003223419189453125, -5.7220458984375e-06, -7.62939453125e-05, 0.0, -0.0041713714599609375, -8.20159912109375e-05, -0.17786026000976562, -5.7220458984375e-06, -0.021070480346679688, -1.9073486328125e-06, -0.0076351165771484375, 0.0, -0.8568552732467651, -2.0265579223632812e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole1": 2, "hole0": "Slam", "hole4": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard", "hole0": "Slam", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "hole4": "player"}}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -0.9864109829387004, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -0.2176535725593567, -0.0041234297677874565, -0.17324966192245483, -7.62939453125e-06, 0.0, -0.009798049926757812, -6.67572021484375e-05, -3.24249267578125e-05, -0.0001989603042602539, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.0022029876708984375, -1.1563301086425781e-05, -1.9073486328125e-06, -0.0002613067626953125, -1.52587890625e-05, -0.000911712646484375, -2.3841855067985307e-07, -0.0002117156982421875, -1.71661376953125e-05, -0.00010383128392277285, -0.00018227094551548362, -2.50339189733495e-06, -2.384185791015625e-06, 0.0, -5.674361455021426e-05, 0.0, -0.0002155303955078125, -0.003376007080078125, -3.62396240234375e-05, -0.0004940032958984375, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "CharacterSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -2.5496417459077563, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -2.0367431640625, -0.00016987322305794805, -0.0001510273286839947, -3.3020973205566406e-05, -3.0397906812140718e-05, -0.005278587341308594, -1.1920922133867862e-06, -0.32094475626945496, -0.0003844952443614602, -0.15564574301242828, -2.3126602172851562e-05, -4.768370445162873e-07, -0.021120071411132812, -6.67572021484375e-05, -7.62939453125e-06, -0.0015758275985717773, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007419586181640625, -9.655952453613281e-06, -1.9073486328125e-06, -0.0002307891845703125, -9.5367431640625e-06, -0.0009403228759765625, -2.3841855067985307e-07, -0.0002803802490234375, -1.33514404296875e-05, -9.620188939152285e-05, -0.00020658956782426685, -3.814689989667386e-06, -2.384185791015625e-06, 0.0, -5.6505199609091505e-05, 0.0, -0.0002460479736328125, -0.0030975341796875, -3.62396240234375e-05, -0.0004978179931640625, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "MinionSelector", "hole1": 4, "hole0": "Spellbreaker", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Silence", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Silence()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -2.618552704449314, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -2.1277341842651367, -7.748603820800781e-06, -0.0007907837862148881, -7.069113780744374e-05, -0.00013755806139670312, -0.004771828651428223, -7.152555099310121e-07, -0.026063984259963036, -0.000638769764918834, -7.2479248046875e-05, -6.103515625e-05, -3.0517578125e-05, -0.25519850850105286, -0.19988352060317993, -0.0012303590774536133, -4.1723224057932384e-06, -5.006785613659304e-06, -3.1709467293694615e-05, -3.814697265625e-06, -5.090197373647243e-05, 0.0, -5.7220458984375e-06, -0.000461578369140625, -9.34600830078125e-05, -0.000217437744140625, -8.702239938429557e-06, 0.0, -2.3841855067985307e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Silence"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -3.4480527117862536, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -0.2176535725593567, -0.0041234297677874565, -2.6098430156707764, -3.814697265625e-06, 0.0, -0.035140037536621094, -4.57763671875e-05, -1.9073486328125e-05, -0.0006663799285888672, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.0018558502197265625, -9.655952453613281e-06, 0.0, -0.0002346038818359375, -9.5367431640625e-06, -0.0007266998291015625, -2.3841855067985307e-07, -0.0002079010009765625, -1.9073486328125e-05, -0.00011217593419132754, -0.00019812575192190707, -2.861018856492592e-06, -2.384185791015625e-06, 0.0, -5.495547520695254e-05, 0.0, -0.0002384185791015625, -0.00316619873046875, -3.62396240234375e-05, -0.000507354736328125, -3.6954811548639555e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "MinionSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -3.9142119751064044, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -2.0367431640625, -0.00016987322305794805, -0.0001510273286839947, -3.3020973205566406e-05, -3.0397906812140718e-05, -0.005278587341308594, -1.1920922133867862e-06, -1.7621935606002808, -0.00011551330680958927, -0.05308187007904053, -9.739398956298828e-05, -7.152555099310121e-07, -0.04711723327636719, -6.29425048828125e-05, -9.5367431640625e-06, -0.0018391609191894531, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007325410842895508, -9.655952453613281e-06, -1.9073486328125e-06, -0.0002536773681640625, -9.5367431640625e-06, -0.0008144378662109375, -2.3841855067985307e-07, -0.0002689361572265625, -1.33514404296875e-05, -9.632109868107364e-05, -0.00019371499365661293, -3.576272320060525e-06, -2.384185791015625e-06, 0.0, -5.6505199609091505e-05, 0.0, -0.0002536773681640625, -0.0030498504638671875, -3.62396240234375e-05, -0.00049591064453125, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Bounce", "hole5": "MinionSelector", "hole1": 4, "hole0": "Spellbreaker", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.157859273022794, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -0.2176535725593567, -0.0041234297677874565, -3.0693249702453613, -7.62939453125e-06, -7.152555099310121e-07, -0.03543567657470703, -0.000598907470703125, -3.814697265625e-06, -0.24277877807617188, -1.52587890625e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.008111953735351562, -1.52587890625e-05, -1.9073486328125e-06, -3.135171573376283e-05, 0.0, -9.846685861703008e-05, 0.0, -2.86102294921875e-05, -0.0061283111572265625, -2.09808349609375e-05, -0.0002955198287963867, -2.861018856492592e-06, -1.1920928244535389e-07, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Silence", "Silence", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(SilenceSilence(\n            )), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.581409176034718, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -2.1277341842651367, -7.748603820800781e-06, -0.0007907837862148881, -7.069113780744374e-05, -0.00013755806139670312, -0.004771828651428223, -7.152555099310121e-07, -0.026063984259963036, -0.000638769764918834, -7.2479248046875e-05, -6.103515625e-05, -3.0517578125e-05, -0.25519850850105286, -2.1627140045166016, 0.0, -0.0012551546096801758, -9.059900548891164e-06, -3.4570680327306036e-06, -3.445126276346855e-05, -3.814697265625e-06, -5.066361336503178e-05, 0.0, -3.814697265625e-06, -0.000453948974609375, -9.72747802734375e-05, -0.0002193450927734375, -7.986990567587782e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "SilenceSilence"}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Battle", "Axe", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(BattleAxe()),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.854521696220061, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -2.3154332637786865, -1.3611823320388794, -4.768370445162873e-07, -0.11436525732278824, -2.2649765014648438e-06, -4.768370445162873e-07, -0.03540802001953125, -0.0005741119384765625, -1.9073486328125e-06, -0.43651485443115234, -1.52587890625e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.0103759765625, -1.52587890625e-05, -1.9073486328125e-06, -3.1470921385334805e-05, 0.0, -0.00010013578867074102, 0.0, -2.6702880859375e-05, -0.0069732666015625, -2.288818359375e-05, -0.0002936124801635742, -2.861018856492592e-06, -1.1920928244535389e-07, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "BattleAxe"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Battle", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Battle()),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.933543947496943, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -2.3154332637786865, -1.3128358125686646, -0.6898555755615234, -3.814697265625e-06, -1.1920928244535389e-07, -0.03402423858642578, -4.9591064453125e-05, -2.47955322265625e-05, -0.0008691549301147461, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0017299652099609375, -9.655952453613281e-06, 0.0, -0.000274658203125, -1.1444091796875e-05, -0.0006866455078125, -2.3841855067985307e-07, -0.0002079010009765625, -1.9073486328125e-05, -0.0001105070041376166, -0.0002057551173493266, -3.099436753473128e-06, -2.384185791015625e-06, 0.0, -5.507468449650332e-05, 0.0, -0.000232696533203125, -0.003177642822265625, -3.62396240234375e-05, -0.0005054473876953125, -3.6954811548639555e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "MinionSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Battle"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.976849626046764, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -3.614943504333496, -9.107583900913596e-05, -5.7220458984375e-06, -0.43173885345458984, -0.0001373291015625, -0.21549895405769348, -0.0013767685741186142, -0.21591928601264954, -7.748603820800781e-06, 0.0, -0.008296966552734375, -6.29425048828125e-05, -2.6702880859375e-05, -0.0002505779266357422, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.0020122528076171875, -9.655952453613281e-06, -1.9073486328125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0001964569091796875, -1.71661376953125e-05, -0.00010406970250187442, -0.00017440313240513206, -2.50339189733495e-06, -2.384185791015625e-06, 0.0, -5.674361455021426e-05, 0.0, -0.000209808349609375, -0.003406524658203125, -3.62396240234375e-05, -0.0004863739013671875, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "CharacterSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", "Bounce", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(), Bounce(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.004015805255044, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -2.0367431640625, -0.00016987322305794805, -0.0001510273286839947, -3.3020973205566406e-05, -3.0397906812140718e-05, -0.005278587341308594, -1.1920922133867862e-06, -0.32094475626945496, -0.0003844952443614602, -2.4823319911956787, -0.0014785522362217307, -0.14636993408203125, -0.000537872314453125, -1.1444091796875e-05, -0.0009634494781494141, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.001163482666015625, -9.655952453613281e-06, -3.814697265625e-06, -0.000423431396484375, -7.62939453125e-06, -0.00128936767578125, -2.3841855067985307e-07, -0.000324249267578125, -1.33514404296875e-05, -0.0001003742145258002, -0.0002120730932801962, -4.6491513785440475e-06, -2.384185791015625e-06, 0.0, -5.4478641686728224e-05, 0.0, -0.0002288818359375, -0.00323486328125, -3.62396240234375e-05, -0.000484466552734375, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "Bounce", "hole1": 4, "hole0": "Spellbreaker", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Increase", "Silence", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(IncreaseSilence\n            ()), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.249437433406015, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -3.4552786350250244, -0.09043170511722565, 0.0, -0.7110529541969299, -9.655952453613281e-06, -3.576278118089249e-07, -0.017446517944335938, -0.0005016326904296875, -1.9073486328125e-06, -0.3801708221435547, -1.33514404296875e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.013240814208984375, -1.52587890625e-05, -1.9073486328125e-06, -3.266298153903335e-05, 0.0, -9.000300633488223e-05, 0.0, -2.6702880859375e-05, -0.00762939453125, -2.09808349609375e-05, -0.0002917051315307617, -2.9802276912960224e-06, -1.1920928244535389e-07, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "IncreaseSilence"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Increase", "Silence", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(IncreaseSilence\n            ()), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.363054198259356, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -3.4552786350250244, -0.09043170511722565, 0.0, -1.1366654634475708, -2.1457672119140625e-06, 0.0, -0.09843635559082031, -5.340576171875e-05, -1.71661376953125e-05, -0.0002503395080566406, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0027408599853515625, -9.655952453613281e-06, -1.9073486328125e-06, -0.0002155303955078125, -1.33514404296875e-05, -0.0009860992431640625, -2.3841855067985307e-07, -0.0001964569091796875, -1.52587890625e-05, -0.00010585784184513614, -0.00017976756498683244, -2.50339189733495e-06, -2.384185791015625e-06, 0.0, -5.674361455021426e-05, 0.0, -0.00020599365234375, -0.0034809112548828125, -3.62396240234375e-05, -0.0004940032958984375, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "CharacterSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "IncreaseSilence"}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Battle", "Axe", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(BattleAxe()),\n            PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.463530127983077, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -2.3154332637786865, -1.3611823320388794, -4.768370445162873e-07, -0.11436525732278824, -2.2649765014648438e-06, -4.768370445162873e-07, -0.03540802001953125, -0.0005741119384765625, -1.9073486328125e-06, -1.0590410232543945, -3.576278118089249e-07, -9.918212890625e-05, -1.1444091796875e-05, -0.0002579689025878906, -5.7220451708417386e-05, -1.5497195136049413e-06, -2.384185791015625e-06, 0.0, -5.1498405809979886e-05, 0.0, -0.0001468658447265625, -0.003200531005859375, -3.0517578125e-05, -0.0004940032958984375, -3.3378546504536644e-06, -1.1920928244535389e-07, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "PlayerSelector", "hole1": 4, "hole0": "Spellbreaker", "hole4": [{"_type": "Template39", "hole0": "BattleAxe"}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 215, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -7.141814675269266, "score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -4.281503677368164, -0.00047516822814941406, -3.838502743747085e-05, -0.00023043157125357538, -1.4305104514278355e-06, -0.015511155128479004, -2.2649765014648438e-06, -0.03614010661840439, -4.362987965578213e-05, 0.0, -0.11232376098632812, -0.00127410888671875, -0.00315093994140625, -0.008080482482910156, -5.7220458984375e-05, -0.0001266002655029297, -9.775161743164062e-06, -0.001260383753105998, -0.0007650852203369141, 0.0, -0.011101383715867996, -1.9073486328125e-06, -0.015056610107421875, -0.000644683837890625, -6.103515625e-05, -1.9073486328125e-06, -6.365775334415957e-05, -0.005411267280578613, 0.0, -0.12866301834583282, 0.0, -0.26352035999298096, -1.800060272216797e-05, -1.71661376953125e-05, -4.76837158203125e-05, -0.0028514862060546875, -0.5388641357421875, -0.000270843505859375, -5.7220458984375e-06, -0.0002377033233642578, -0.0014829635620117188, -5.9604644775390625e-06, -0.0001373291015625, -0.16956520080566406, -0.30405521392822266, -0.006257765926420689, -5.2331608458189294e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.05767714977264404, -9.34600830078125e-05, -0.000133514404296875, -0.0002346038818359375, -0.0017261505126953125, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -0.01704263500869274, -0.0014334007864817977, -1.9073486328125e-06, -8.20159912109375e-05, -3.814697265625e-05, -1.33514404296875e-05, -2.6702880859375e-05, 0.0, -0.10793280601501465, -1.1682510375976562e-05, -0.012090921401977539, 0.0, -0.35477733612060547, -0.0004425048828125, -0.0001354217529296875, -0.019364356994628906, -1.9073486328125e-06, -0.0001468658447265625, -0.0001354217529296875, -0.009394139051437378, -3.814697265625e-06, -7.867813110351562e-06, -1.9073486328125e-06, -2.574920654296875e-05, 0.0, -8.96453857421875e-05, -0.64691162109375, -6.29425048828125e-05, -0.001346588134765625, -5.960462203802308e-06, -1.4305104514278355e-06, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 4, "hole0": "Spellbreaker", "hole8": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}]}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}], "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Spellbreaker", "hole6": [{"_type": "Template27", "hole0": 4, "hole1": 3}], "hole4": "player"}}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector(condition=IsSpell())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -1.6618049096910283, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -0.19754505157470703, -0.0010013580322265625, -0.012952915392816067, -0.000836491584777832, -0.008695721626281738, -0.01649000309407711, -1.9073486328125e-06, -0.021537765860557556, -1.9073486328125e-05, -0.0001379251480102539, -0.06058216094970703, -0.0005550384521484375, -3.814697265625e-06, -0.01683187484741211, -3.814697265625e-06, -0.038702964782714844, -2.09808349609375e-05, -0.4022994041442871, -0.20207852125167847, -5.91278076171875e-05, -3.933904736186378e-06, -1.9073486328125e-06, -6.234567990759388e-05, 0.0, -1.9073486328125e-06, -0.01082611083984375, -3.24249267578125e-05, -0.0018385648727416992, -1.9073486328125e-06, 0.0, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsSpell"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -2.2866522596691823, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -0.19754505157470703, -0.0010013580322265625, -0.012952915392816067, -0.000836491584777832, -0.008695721626281738, -0.01649000309407711, -1.9073486328125e-06, -0.021537765860557556, -1.9073486328125e-05, -0.0001379251480102539, -0.06058216094970703, -0.0005550384521484375, -3.814697265625e-06, -0.01683187484741211, -3.814697265625e-06, -0.038702964782714844, -2.09808349609375e-05, -1.2301478385925293, -0.0001200430269818753, -3.337859743623994e-05, 0.0, -0.00011753778380807489, 0.0, -1.9073486328125e-06, -0.010156631469726562, -3.62396240234375e-05, -0.0014380216598510742, -1.9073486328125e-06, 0.0, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "Adjacent"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector(condition=IsMinion())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.3510163812593703, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -0.19754505157470703, -0.0010013580322265625, -0.012952915392816067, -0.000836491584777832, -0.008695721626281738, -0.01649000309407711, -1.9073486328125e-06, -0.021537765860557556, -1.9073486328125e-05, -0.0001379251480102539, -0.06058216094970703, -0.0005550384521484375, -3.814697265625e-06, -0.01683187484741211, -3.814697265625e-06, -0.038702964782714844, -2.09808349609375e-05, -0.4022994041442871, -1.8919347524642944, -4.9591064453125e-05, -0.00010466123057994992, -3.814697265625e-06, -0.0017506355652585626, 0.0, -1.9073486328125e-06, -0.009571075439453125, -3.4332275390625e-05, -0.0006655454635620117, -1.9073486328125e-06, 0.0, -1.9073486328125e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "Aura", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(\n            ChangeAttack(2), SelfSelector())), MinionSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.6796411557538065, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -1.5823962688446045, -2.86099220829783e-05, -0.003337860107421875, -0.04914093017578125, -9.5367431640625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.07576858997344971, -0.00154876708984375, -1.9073486328125e-05, -0.008087158203125, -0.02560710906982422, -0.000583648681640625, -0.16106942296028137, -1.1920928244535389e-07, -0.017516136169433594, -1.9073486328125e-05, -0.8259090185165405, -8.2254373410251e-06, -0.000934600830078125, -0.25825899839401245, -2.0265579223632812e-06, -9.5367431640625e-06, -0.1949024200439453, -2.288818359375e-05, 0.0, -8.416175842285156e-05, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -0.000522613525390625, -1.990795135498047e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.007640838623046875, 0.0, -0.0004940032958984375, -5.7220458984375e-06, -0.0001291036605834961, -0.0002987384214065969, -3.576278118089249e-07, -1.4901119357091375e-05, 0.0, -2.4318680516444147e-05, 0.0, -9.5367431640625e-06, -0.0293731689453125, -1.52587890625e-05, -0.0022164583206176758, 0.0, -2.3841855067985307e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "GiveAura", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "Aura", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(\n            ChangeAttack(2), WeaponSelector())), MinionSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.223371474307378, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -1.5823962688446045, -2.86099220829783e-05, -0.003337860107421875, -0.04914093017578125, -9.5367431640625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.07576858997344971, -0.00154876708984375, -1.9073486328125e-05, -0.008087158203125, -0.02560710906982422, -0.000583648681640625, -0.16106942296028137, -1.1920928244535389e-07, -0.017516136169433594, -1.9073486328125e-05, -0.7888511419296265, -1.919269561767578e-05, -6.103515625e-05, -0.7548744678497314, -3.814697265625e-06, -7.62939453125e-06, -0.28020763397216797, -2.6702880859375e-05, 0.0, -0.00011849403381347656, 0.0, -2.09808349609375e-05, -1.9073486328125e-05, -0.00048065185546875, -2.181529998779297e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.007781982421875, 0.0, -0.000518798828125, -5.7220458984375e-06, -0.0001289844512939453, -0.00029838079353794456, -3.576278118089249e-07, -1.4662702596979216e-05, 0.0, -2.419947304588277e-05, 0.0, -9.5367431640625e-06, -0.028940200805664062, -1.52587890625e-05, -0.0022126436233520508, 0.0, -2.3841855067985307e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "GiveAura", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "Aura", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(\n            ChangeAttack(2), WeaponSelector())), SelfSelector(players=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.645826187692833, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -1.5823962688446045, -2.86099220829783e-05, -0.003337860107421875, -0.04914093017578125, -9.5367431640625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.07576858997344971, -0.00154876708984375, -1.9073486328125e-05, -0.008087158203125, -0.02560710906982422, -0.000583648681640625, -0.16106942296028137, -1.1920928244535389e-07, -0.017516136169433594, -1.9073486328125e-05, -0.7888511419296265, -1.919269561767578e-05, -6.103515625e-05, -1.0475034713745117, -1.3112994565744884e-05, -4.1961669921875e-05, -0.3288993835449219, -0.0002689361572265625, 0.0, -0.0005780458450317383, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -0.0008258819580078125, -1.9431114196777344e-05, 0.0, -5.590769796981476e-05, -1.9073486328125e-06, -1.883505319710821e-05, 0.0, -9.5367431640625e-06, -0.11972522735595703, -3.4332275390625e-05, -0.00019276142120361328, 0.0, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "GiveAura", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.671113805138603, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -1.778388500213623, -6.401333666872233e-05, -0.00013422829215414822, -1.9073486328125e-06, -3.8742269680369645e-05, -1.2517357390606776e-05, -2.9802276912960224e-06, -0.02363564632833004, -0.00017154216766357422, -0.004095137119293213, -0.07442706823348999, -0.0055389404296875, -2.438055992126465, -0.006542205810546875, -0.2670493721961975, -0.0005154609680175781, -0.0018296241760253906, -0.026755400002002716, -1.1920928244535389e-07, -0.020415842533111572, -2.2411135432776064e-05, -0.00010251998901367188, -0.0012948405928909779, 0.0, -0.0014316212618723512, 0.0, -3.814697265625e-06, -0.016336441040039062, -9.918212890625e-05, -7.2479248046875e-05, 0.0, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(AuraUntil(\n            ChangeAttack(2), WeaponSelector())), MinionSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.76485286521023, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -2.0490312576293945, -2.288818359375e-05, -2.288818359375e-05, -3.814697265625e-06, -0.1574622392654419, -0.001323699951171875, -9.5367431640625e-06, -0.025023460388183594, -0.041123390197753906, -0.00051116943359375, -0.14087532460689545, 0.0, -0.015593528747558594, -1.52587890625e-05, -0.5506728291511536, -1.919269561767578e-05, -5.53131103515625e-05, -0.7777482271194458, -1.9073486328125e-06, -7.62939453125e-06, -0.2960395812988281, -2.47955322265625e-05, 0.0, -0.00011658668518066406, 0.0, -2.09808349609375e-05, -1.9073486328125e-05, -0.0004787445068359375, -2.1696090698242188e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.007871627807617188, 0.0, -0.000522613525390625, -5.7220458984375e-06, -0.0001289844512939453, -0.0002982615842483938, -3.576278118089249e-07, -1.4662702596979216e-05, 0.0, -2.419947304588277e-05, 0.0, -9.5367431640625e-06, -0.02878570556640625, -1.52587890625e-05, -0.0022183656692504883, 0.0, -2.3841855067985307e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(AuraUntil(\n            ChangeAttack(2), SelfSelector())), MinionSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.808941616282425, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -2.0490312576293945, -2.288818359375e-05, -2.288818359375e-05, -3.814697265625e-06, -0.1574622392654419, -0.001323699951171875, -9.5367431640625e-06, -0.025023460388183594, -0.041123390197753906, -0.00051116943359375, -0.14087532460689545, 0.0, -0.015593528747558594, -1.52587890625e-05, -1.157487154006958, -9.536741345073096e-06, -0.0009899139404296875, -0.29731640219688416, -1.9073486328125e-06, -9.5367431640625e-06, -0.2125530242919922, -2.09808349609375e-05, 0.0, -8.225440979003906e-05, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -0.0005207061767578125, -1.7881393432617188e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.0077228546142578125, 0.0, -0.0004978179931640625, -5.7220458984375e-06, -0.0001291036605834961, -0.0002986192121170461, -3.576278118089249e-07, -1.4901119357091375e-05, 0.0, -2.4318680516444147e-05, 0.0, -9.5367431640625e-06, -0.029224395751953125, -1.52587890625e-05, -0.0022221803665161133, 0.0, -2.3841855067985307e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.008722258421152, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -3.520263671875, -8.392333984375e-05, -0.0076618194580078125, -0.06812858581542969, -0.00130462646484375, -0.0001801252074074, -0.0035495758056640625, -0.021399375051259995, -0.016469955444335938, -1.9073486328125e-06, -0.058072492480278015, -3.814697265625e-06, -0.4992685317993164, -0.000888824462890625, -0.0007096529006958008, -2.6702880859375e-05, -0.00042068958282470703, -0.0032502412796020508, -3.814697265625e-06, -0.003586243838071823, -3.814697265625e-06, -0.044138096272945404, 0.0, -9.655952453613281e-06, -0.05609130859375, -0.0001850128173828125, 0.0, -0.008047342300415039, -3.814697265625e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.0028228759765625, -1.7642974853515625e-05, 0.0, -4.3868138163816184e-05, 0.0, -3.7193243770161644e-05, 0.0, -1.1444091796875e-05, -0.023115158081054688, -3.4332275390625e-05, -0.00018322467803955078, 0.0, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 2, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 39, 110, 21, 134, "Aura", "Until", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(AuraUntil(\n            ChangeAttack(2), WeaponSelector())), SelfSelector(players=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.071337980247812, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -2.0490312576293945, -2.288818359375e-05, -2.288818359375e-05, -3.814697265625e-06, -0.1574622392654419, -0.001323699951171875, -9.5367431640625e-06, -0.025023460388183594, -0.041123390197753906, -0.00051116943359375, -0.14087532460689545, 0.0, -0.015593528747558594, -1.52587890625e-05, -0.5506728291511536, -1.919269561767578e-05, -5.53131103515625e-05, -0.974597156047821, -1.2516951755969785e-05, -3.814697265625e-05, -0.32485389709472656, -0.0002651214599609375, 0.0, -0.0005608797073364258, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -0.0008029937744140625, -1.9431114196777344e-05, 0.0, -5.698052336811088e-05, -1.9073486328125e-06, -1.883505319710821e-05, 0.0, -9.5367431640625e-06, -0.11939334869384766, -3.4332275390625e-05, -0.00019657611846923828, 0.0, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Has", "minions", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Adjacent", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(adjacentHasminions(), BothPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(adjacentAdjacent(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -7.323092904588428, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -1.778388500213623, -6.401333666872233e-05, -0.00013422829215414822, -1.9073486328125e-06, -3.8742269680369645e-05, -1.2517357390606776e-05, -2.9802276912960224e-06, -0.02363564632833004, -0.00017154216766357422, -0.004095137119293213, -0.07442706823348999, -0.0055389404296875, -0.1750345230102539, -4.57763671875e-05, -0.008147239685058594, -0.041034698486328125, -0.00571441650390625, -0.6918824315071106, -0.018686791881918907, -3.0517221603076905e-05, -0.0017747879028320312, -0.0064029693603515625, -0.0016231536865234375, -0.001360715483315289, -0.0023040608502924442, -0.0003070831298828125, 0.0, -0.005074129439890385, -0.0003191232681274414, -3.254413604736328e-05, -0.023233413696289062, -0.0071315765380859375, -5.340576171875e-05, -0.24525833129882812, -0.8295199275016785, -0.41626572608947754, -8.571146463509649e-05, -0.02760601043701172, 0.0, -0.1141580119729042, -0.00011885129060829058, -2.6702880859375e-05, -0.17199039459228516, -0.04787254333496094, -0.0008567252662032843, -0.14946043491363525, 0.0, -0.00287628173828125, -0.0071620941162109375, -0.0001983642578125, -0.000524162664078176, -0.0005357022164389491, -0.000141143798828125, 0.0, -0.006698627956211567, -0.0001112222671508789, -1.1563301086425781e-05, -0.06032371520996094, -0.005794525146484375, -4.38690185546875e-05, -0.25399720668792725, -1.7226574420928955, -8.988042100099847e-05, -0.0010738372802734375, -1.9073486328125e-06, -0.2794460952281952, -0.00024962410680018365, -3.814697265625e-06, -0.07249441742897034, -0.0001240946294274181, -3.814697265625e-06, -5.2213508752174675e-05, -1.9073486328125e-06, -2.193440741393715e-05, 0.0, -3.814697265625e-06, -0.024003982543945312, -6.866455078125e-05, -0.0003758668899536133, -1.9073486328125e-06, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentHasminions"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentAdjacent"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Adjacent", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Has", "minions", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(adjacentAdjacent(), EnemyPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(adjacentHasminions(),\n            BothPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -7.449517230452244, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -1.778388500213623, -6.401333666872233e-05, -0.00013422829215414822, -1.9073486328125e-06, -3.8742269680369645e-05, -1.2517357390606776e-05, -2.9802276912960224e-06, -0.02363564632833004, -0.00017154216766357422, -0.004095137119293213, -0.07442706823348999, -0.0055389404296875, -0.1750345230102539, -4.57763671875e-05, -0.008147239685058594, -0.041034698486328125, -0.00571441650390625, -0.6918824315071106, -0.018686791881918907, -3.0517221603076905e-05, -0.0017747879028320312, -0.0064029693603515625, -0.0016231536865234375, -0.001360715483315289, -0.0023040608502924442, -0.0003070831298828125, 0.0, -0.005074129439890385, -0.0003191232681274414, -3.254413604736328e-05, -0.023233413696289062, -0.0071315765380859375, -5.340576171875e-05, -0.24525833129882812, -1.3916599750518799, -0.0001708178606349975, -0.0009174346923828125, 0.0, -0.14039233326911926, -0.000272512377705425, -1.9073486328125e-06, -0.03168773651123047, -0.039610862731933594, -0.0006619978230446577, -0.10090947151184082, 0.0, -0.0052242279052734375, -0.0049304962158203125, -0.00016021728515625, -0.0004787441866938025, -0.0005034133209846914, -0.000133514404296875, 0.0, -0.006526099517941475, -0.00012087821960449219, -1.1563301086425781e-05, -0.06497383117675781, -0.0053558349609375, -4.38690185546875e-05, -0.25404542684555054, -1.6516858339309692, -0.2913026511669159, -3.7431713280966505e-05, -0.046774864196777344, 0.0, -0.05567919835448265, -0.0001238579279743135, -3.62396240234375e-05, -0.21320267021656036, -0.00014900923997629434, -3.814697265625e-06, -4.363053812994622e-05, -1.9073486328125e-06, -1.2159326615801547e-05, 0.0, -1.9073486328125e-06, -0.015087127685546875, -5.91278076171875e-05, -0.0004825592041015625, -2.0265579223632812e-06, 0.0, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentAdjacent"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentHasminions"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Has", "minions", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Has", "minions", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(adjacentHasminions(), BothPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(adjacentHasminions(),\n            BothPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -7.534050505590045, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -1.778388500213623, -6.401333666872233e-05, -0.00013422829215414822, -1.9073486328125e-06, -3.8742269680369645e-05, -1.2517357390606776e-05, -2.9802276912960224e-06, -0.02363564632833004, -0.00017154216766357422, -0.004095137119293213, -0.07442706823348999, -0.0055389404296875, -0.1750345230102539, -4.57763671875e-05, -0.008147239685058594, -0.041034698486328125, -0.00571441650390625, -0.6918824315071106, -0.018686791881918907, -3.0517221603076905e-05, -0.0017747879028320312, -0.0064029693603515625, -0.0016231536865234375, -0.001360715483315289, -0.0023040608502924442, -0.0003070831298828125, 0.0, -0.005074129439890385, -0.0003191232681274414, -3.254413604736328e-05, -0.023233413696289062, -0.0071315765380859375, -5.340576171875e-05, -0.24525833129882812, -0.8295199275016785, -0.41626572608947754, -8.571146463509649e-05, -0.02760601043701172, 0.0, -0.1141580119729042, -0.00011885129060829058, -2.6702880859375e-05, -0.17199039459228516, -0.04787254333496094, -0.0008567252662032843, -0.14946043491363525, 0.0, -0.00287628173828125, -0.0071620941162109375, -0.0001983642578125, -0.000524162664078176, -0.0005357022164389491, -0.000141143798828125, 0.0, -0.006698627956211567, -0.0001112222671508789, -1.1563301086425781e-05, -0.06032371520996094, -0.005794525146484375, -4.38690185546875e-05, -0.25399720668792725, -1.6815674304962158, -0.2981576919555664, -3.755092257051729e-05, -0.04558086395263672, 0.0, -0.05894279107451439, -0.00012552687257993966, -3.62396240234375e-05, -0.21130330860614777, -0.00014900923997629434, -3.814697265625e-06, -4.374974378151819e-05, -1.9073486328125e-06, -1.2159326615801547e-05, 0.0, -1.9073486328125e-06, -0.015127182006835938, -5.91278076171875e-05, -0.00048065185546875, -2.0265579223632812e-06, 0.0, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentHasminions"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentHasminions"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "Has", "minions", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "adjacent", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(adjacentHasminions(), BothPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(adjacent(), EnemyPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -8.228823591417402, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -1.778388500213623, -6.401333666872233e-05, -0.00013422829215414822, -1.9073486328125e-06, -3.8742269680369645e-05, -1.2517357390606776e-05, -2.9802276912960224e-06, -0.02363564632833004, -0.00017154216766357422, -0.004095137119293213, -0.07442706823348999, -0.0055389404296875, -0.1750345230102539, -4.57763671875e-05, -0.008147239685058594, -0.041034698486328125, -0.00571441650390625, -0.6918824315071106, -0.018686791881918907, -3.0517221603076905e-05, -0.0017747879028320312, -0.0064029693603515625, -0.0016231536865234375, -0.001360715483315289, -0.0023040608502924442, -0.0003070831298828125, 0.0, -0.005074129439890385, -0.0003191232681274414, -3.254413604736328e-05, -0.023233413696289062, -0.0071315765380859375, -5.340576171875e-05, -0.24525833129882812, -0.8295199275016785, -0.41626572608947754, -8.571146463509649e-05, -0.02760601043701172, 0.0, -0.1141580119729042, -0.00011885129060829058, -2.6702880859375e-05, -0.17199039459228516, -0.04787254333496094, -0.0008567252662032843, -0.14946043491363525, 0.0, -0.00287628173828125, -0.0071620941162109375, -0.0001983642578125, -0.000524162664078176, -0.0005357022164389491, -0.000141143798828125, 0.0, -0.006698627956211567, -0.0001112222671508789, -1.1563301086425781e-05, -0.06032371520996094, -0.005794525146484375, -4.38690185546875e-05, -0.25399720668792725, -1.6733062267303467, -0.3502922058105469, -3.814697265625e-06, -0.8979216814041138, -0.004518389701843262, -5.7220458984375e-06, -0.053986627608537674, -9.929935185937211e-05, -3.814697265625e-06, -6.401505379471928e-05, -1.9073486328125e-06, -2.9444456231431104e-05, 0.0, -3.814697265625e-06, -0.025690078735351562, -6.866455078125e-05, -0.0004082918167114258, -1.9073486328125e-06, -1.1920928244535389e-07, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole1": 2, "hole0": "Sunfury Protector", "hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole0": "ChangeAttack", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacentHasminions"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}, {"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template29", "hole0": "Count", "hole2": [{"_type": "Template39", "hole0": "adjacent"}, {"_type": "Template39", "hole0": "EnemyPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "SunfuryProtector", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 3}], "hole4": "player"}}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", "Transform", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(),\n            Transform(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -2.3311762793507, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.5413265228271484, -1.9788545614574105e-05, -0.00017582524742465466, 0.0, -2.0265579223632812e-06, -1.1925840226467699e-06, -1.1920928244535389e-07, -0.01637709140777588, -2.3841855067985307e-07, -0.3696368932723999, -1.7165990357170813e-05, -0.009284449741244316, -8.189342770492658e-05, -0.3237295150756836, -0.009487152099609375, -0.0002231597900390625, -0.043256163597106934, -1.311301275563892e-06, -0.0001811981201171875, -7.62939453125e-05, -0.002195104258134961, -0.010091377422213554, -6.794917680963408e-06, -4.9709542508935556e-05, 0.0, -2.2053585780668072e-05, 0.0, -9.5367431640625e-06, -0.0030651092529296875, -5.91278076171875e-05, -4.410743713378906e-06, -3.576278118089249e-07, -1.1446434655226767e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -2.7466078025467198, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -0.4059751629829407, -0.0003160351188853383, -0.0001354217529296875, -4.708558844868094e-05, -0.0001277923583984375, -3.576278118089249e-07, -0.01779460906982422, -0.0037212371826171875, -5.7220458984375e-06, -0.031395912170410156, -2.7418097943154862e-06, -5.7220458984375e-06, -2.6702880859375e-05, -0.000549553195014596, -0.0019261621637269855, -9.536714060232043e-06, -3.6954646930098534e-05, 0.0, -2.527233664295636e-05, 0.0, -1.1444091796875e-05, -0.0038814544677734375, -4.57763671875e-05, -5.9604644775390625e-06, -3.576278118089249e-07, -1.3234472135081887e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('health', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.2996363674286897, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -1.1504713296890259, -0.0003854036331176758, -0.10207748413085938, 0.0, -0.07158073037862778, -6.306171417236328e-05, -3.0517578125e-05, -0.006833076477050781, -0.047766685485839844, -0.37258198857307434, -0.0003040274605154991, -0.0001049041748046875, -4.1602241253713146e-05, -0.0001125335693359375, -3.576278118089249e-07, -0.0175018310546875, -0.00374603271484375, -5.7220458984375e-06, -0.029867172241210938, -2.7418097943154862e-06, -5.7220458984375e-06, -2.6702880859375e-05, -0.0005372746381908655, -0.0018977910513058305, -9.536714060232043e-06, -3.671622835099697e-05, 0.0, -2.515312735340558e-05, 0.0, -1.33514404296875e-05, -0.003925323486328125, -4.76837158203125e-05, -4.0531158447265625e-06, -3.576278118089249e-07, -1.2519267329480499e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "health"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", "Transform", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(),\n            Transform(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.480649645949569, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.5413265228271484, -1.9788545614574105e-05, -0.00017582524742465466, 0.0, -2.0265579223632812e-06, -1.1925840226467699e-06, -1.1920928244535389e-07, -0.01637709140777588, -2.3841855067985307e-07, -0.3696368932723999, -1.7165990357170813e-05, -0.009284449741244316, -8.189342770492658e-05, -1.5120515823364258, -0.000293731689453125, -7.62939453125e-06, -0.009548663161695004, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.011465907096862793, -2.7894961021956988e-05, -3.814697265625e-06, -0.000194549560546875, -7.62939453125e-06, -0.0033779144287109375, -3.576272320060525e-06, -5.53131103515625e-05, -1.9073486328125e-06, -0.00017297238809987903, -0.0010974360629916191, -1.1920922133867862e-06, -1.919262831506785e-05, 0.0, -1.5377996533061378e-05, 0.0, -6.103515625e-05, -0.0034046173095703125, -6.866455078125e-05, -4.0531158447265625e-06, -2.3841855067985307e-07, -1.0611976904328912e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Replace", "<EOS>", "Transform", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Replace(), Transform\n            (picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.629472912896233, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.5413265228271484, -1.9788545614574105e-05, -0.00017582524742465466, 0.0, -2.0265579223632812e-06, -1.1925840226467699e-06, -1.1920928244535389e-07, -0.01637709140777588, -2.3841855067985307e-07, -1.4236183166503906, -6.210633728187531e-05, -0.02696343883872032, -5.602820692729438e-06, -0.4689006805419922, -0.0063686370849609375, -0.000194549560546875, -0.12494313716888428, -4.172316494077677e-06, -0.0001544952392578125, -6.4849853515625e-05, -0.0025039459578692913, -0.012007267214357853, -6.794917680963408e-06, -4.649100810638629e-05, 0.0, -2.336486431886442e-05, 0.0, -9.5367431640625e-06, -0.0038356781005859375, -5.91278076171875e-05, -2.503394853192731e-06, -3.576278118089249e-07, -1.1804193491116166e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Replace", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Replace", "<EOS>", "Transform", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Replace(), Transform\n            (players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.235481691431858, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.5413265228271484, -1.9788545614574105e-05, -0.00017582524742465466, 0.0, -2.0265579223632812e-06, -1.1925840226467699e-06, -1.1920928244535389e-07, -0.01637709140777588, -2.3841855067985307e-07, -1.4236183166503906, -6.210633728187531e-05, -0.02696343883872032, -5.602820692729438e-06, -1.1889076232910156, -0.0002574920654296875, -9.5367431640625e-06, -0.0031065938528627157, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.023180723190307617, -3.2424919481854886e-05, -3.814697265625e-06, -0.000152587890625, -7.62939453125e-06, -0.004347801208496094, -2.622600959512056e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.00018739681399893016, -0.0010204273276031017, -1.1920922133867862e-06, -1.8596589143271558e-05, 0.0, -1.5377996533061378e-05, 0.0, -6.29425048828125e-05, -0.00363922119140625, -6.866455078125e-05, -4.0531158447265625e-06, -3.576278118089249e-07, -1.2280943337827921e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Replace", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "5/5", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            5/5()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.632016528875475, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -2.0496108531951904, -0.1284966766834259, -0.002042527077719569, -2.86102294921875e-05, -1.1920928244535389e-07, -0.04372596740722656, -0.0029249191284179688, -9.5367431640625e-06, -0.1186513900756836, -1.9073468138230965e-06, -7.62939453125e-06, -2.6702880859375e-05, -0.0004833917482756078, -0.001582612399943173, -4.529942543740617e-06, -3.1947878596838564e-05, 0.0, -2.741810203588102e-05, 0.0, -9.5367431640625e-06, -0.003742218017578125, -4.1961669921875e-05, -5.9604644775390625e-06, -3.576278118089249e-07, -1.2161544873379171e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "5/5"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 208, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", "Transform", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(),\n            Transform()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.835810431512819, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -4.091339111328125, -0.0005295066512189806, -0.00012957840226590633, 0.0, -3.576278118089249e-07, -3.601162461563945e-07, -2.7418097943154862e-06, -0.09924916923046112, -1.0728830375228426e-06, -0.04727603495121002, -1.9550132492440753e-05, -0.5901354551315308, -0.0001147919538198039, -8.213396358769387e-05, 0.0, -0.00022838062432128936, 0.0, -9.5367431640625e-06, -0.0048465728759765625, -5.340576171875e-05, -2.3841855067985307e-07, -1.1920928244535389e-07, -9.18305158847943e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Squirrel", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            Squirrel()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.973914493353014, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -2.3915088176727295, -0.1284966766834259, -0.002042527077719569, -2.86102294921875e-05, -1.1920928244535389e-07, -0.04372596740722656, -0.0029249191284179688, -9.5367431640625e-06, -0.1186513900756836, -1.9073468138230965e-06, -7.62939453125e-06, -2.6702880859375e-05, -0.0004833917482756078, -0.001582612399943173, -4.529942543740617e-06, -3.1947878596838564e-05, 0.0, -2.741810203588102e-05, 0.0, -9.5367431640625e-06, -0.003742218017578125, -4.1961669921875e-05, -5.9604644775390625e-06, -3.576278118089249e-07, -1.2161544873379171e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "Squirrel"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 68, 227, "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", "Transform", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.<UNK>, <UNK>=True)), Transform(player=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.131824608016139, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -2.4944143295288086, -0.0003452301025390625, 0.0, -0.0069744582287967205, -4.0531158447265625e-06, -0.000858306884765625, -2.6702880859375e-05, -0.0002346038818359375, -1.9073486328125e-06, -0.01064598560333252, 0.0, -0.003914563450962305, 0.0, -0.003360748291015625, -2.6702880859375e-05, -0.5381112098693848, 0.0, -0.30733585357666016, -0.1683797836303711, -0.0006841354188509285, -7.378782902378589e-05, -0.08803458511829376, -0.0022788047790527344, -0.002105712890625, -0.0062885284423828125, -0.0004215240478515625, -0.2147914171218872, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -0.06851385533809662, -0.00014721642946824431, -1.9073486328125e-06, -0.00016473428695462644, 0.0, -5.161726221558638e-05, 0.0, -1.9073486328125e-05, -0.0023899078369140625, -4.00543212890625e-05, -3.933906555175781e-06, -2.3841855067985307e-07, -1.5144149074330926e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>"}}, {"_type": "keyword", "arg": "<UNK>", "value": {"_type": "NameConstant", "value": true}}]}], "hole7": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "5/5", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('health', SelfSelector())),\n            5/5()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.429259737481708, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -1.1504713296890259, -0.0003854036331176758, -0.10207748413085938, 0.0, -0.07158073037862778, -6.306171417236328e-05, -3.0517578125e-05, -0.006833076477050781, -0.047766685485839844, -2.270272731781006, -0.12402524799108505, -0.0016558128409087658, -2.86102294921875e-05, -1.1920928244535389e-07, -0.04255199432373047, -0.002887725830078125, -9.5367431640625e-06, -0.11290836334228516, -1.9073468138230965e-06, -7.62939453125e-06, -2.86102294921875e-05, -0.0004762392782140523, -0.0015571017283946276, -4.529942543740617e-06, -3.182867294526659e-05, 0.0, -2.741810203588102e-05, 0.0, -9.5367431640625e-06, -0.0038890838623046875, -4.1961669921875e-05, -6.079673767089844e-06, -3.576278118089249e-07, -1.2042342859786004e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "health"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "5/5"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 213, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", "Transform", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(),\n            Transform(Attribute('health', SelfSelector()), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.430708966657363, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -2.9363017082214355, -3.2186455882765586e-06, -0.00015735355555079877, 0.0, -1.1920928244535389e-07, -1.4305451259133406e-06, 0.0, -0.004110574722290039, 0.0, -0.13054683804512024, -3.6954863844584906e-06, -0.13355058431625366, -3.4570680327306036e-06, -0.0021114349365234375, -0.07747077941894531, -0.06325340270996094, -8.96453857421875e-05, -5.7220458984375e-06, -1.4397339820861816, -2.1457672119140625e-06, -3.814697265625e-06, -0.03617382049560547, -0.000148773193359375, -0.4104456901550293, -0.0003669261932373047, -0.002666473388671875, -1.9073486328125e-06, -0.03401275351643562, -7.05718994140625e-05, -3.814697265625e-06, -0.008402824401855469, -0.0017642974853515625, -1.1444091796875e-05, -0.1290125846862793, -1.657007851463277e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.01042777206748724, -0.003987885545939207, -6.9141146923357155e-06, -3.385509626241401e-05, 0.0, -1.6093217709567398e-05, 0.0, -1.71661376953125e-05, -0.003875732421875, -6.29425048828125e-05, -5.9604644775390625e-06, -4.768370445162873e-07, -1.2042321031913161e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "Transform", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole6": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "health"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "health", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Squirrel", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('health', SelfSelector())),\n            Squirrel()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.520831545343036, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -1.1504713296890259, -0.0003854036331176758, -0.10207748413085938, 0.0, -0.07158073037862778, -6.306171417236328e-05, -3.0517578125e-05, -0.006833076477050781, -0.047766685485839844, -2.361844539642334, -0.12402524799108505, -0.0016558128409087658, -2.86102294921875e-05, -1.1920928244535389e-07, -0.04255199432373047, -0.002887725830078125, -9.5367431640625e-06, -0.11290836334228516, -1.9073468138230965e-06, -7.62939453125e-06, -2.86102294921875e-05, -0.0004762392782140523, -0.0015571017283946276, -4.529942543740617e-06, -3.182867294526659e-05, 0.0, -2.741810203588102e-05, 0.0, -9.5367431640625e-06, -0.0038890838623046875, -4.1961669921875e-05, -6.079673767089844e-06, -3.576278118089249e-07, -1.2042342859786004e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "health"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "Squirrel"}]}}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -6.441426799613197, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -0.4059751629829407, -0.0003160351188853383, -0.0001354217529296875, -4.708558844868094e-05, -0.0001277923583984375, -3.576278118089249e-07, -0.01779460906982422, -0.0037212371826171875, -5.7220458984375e-06, -3.674009323120117, 0.0, -1.9073486328125e-06, -4.9591064453125e-05, -0.05545032024383545, -0.00013458728790283203, -7.62939453125e-06, -3.1470870453631505e-05, 0.0, -2.5987601475208066e-05, 0.0, -2.6702880859375e-05, -0.0029659271240234375, -3.4332275390625e-05, -4.172325134277344e-06, -3.576278118089249e-07, -1.3473356375470757e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}, {"choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "5/5", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            5/5()])), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -6.902758719200129, "score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -2.0496108531951904, -0.1284966766834259, -0.002042527077719569, -2.86102294921875e-05, -1.1920928244535389e-07, -0.04372596740722656, -0.0029249191284179688, -9.5367431640625e-06, -2.302708625793457, 0.0, -3.814697265625e-06, -3.4332275390625e-05, -0.0895090103149414, -0.0001513957977294922, -5.7220458984375e-06, -3.09940442093648e-05, 0.0, -3.087517325184308e-05, 0.0, -1.71661376953125e-05, -0.00283050537109375, -3.0517578125e-05, -4.172325134277344e-06, -3.576278118089249e-07, -1.4426979760173708e-05, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole1": 3, "hole0": "Tinkmaster Overspark", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole0": "ManaSquirrel", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}}, {"_type": "Template38_expr_seq", "hole0": "5/5"}]}}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TinkmasterOverspark", "hole6": [{"_type": "Template27", "hole0": 3, "hole1": 3}], "hole4": "player"}}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 5, 237, 46, 139, "0", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 93, 196, 21, 134, "target", "<EOS>", "damage", "<EOS>", 238, 46, 139, "3", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 0\n\n    def use(self, player, game):\n        target.damage(3, self)\n        super().reveal()\n", "score": -5.186602507780599, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -2.649714469909668, -0.001552581787109375, -0.0005435943603515625, -9.5367431640625e-06, -0.0003032684326171875, -0.00022125244140625, -0.0058307647705078125, -8.7738037109375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.009828567504882812, 0.0, -1.9073486328125e-05, 0.0, -5.6743621826171875e-05, 0.0, -0.07594013214111328, -2.288818359375e-05, -0.0012369155883789062, -0.0001010894775390625, -2.47955322265625e-05, 0.0, -0.0011560916900634766, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, -0.21023941040039062, 0.0, -6.29425048828125e-05, 0.0, -0.04291343688964844, 0.0, -0.0014008283615112305, 0.0, -0.013095086440443993, -1.9073486328125e-06, -1.9073486328125e-05, -0.26756858825683594, -0.007834434509277344, -5.7220458984375e-06, -1.9073486328125e-06, -0.0012491941452026367, -9.5367431640625e-06, -2.288818359375e-05, -0.0014057159423828125, -0.0002002716064453125, -0.10045516490936279, -0.00041961669921875, -2.6702880859375e-05, -0.00023651123046875, -0.07080078125, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002536773681640625, -0.3220024108886719, 0.0, -3.814697265625e-06, -0.0017690658569335938, -1.1920928244535389e-07, -0.030882835388183594, -0.11469841003417969, -0.0001087188720703125, -0.00762939453125, -1.9073486328125e-06, -0.6854982376098633, -5.7220458984375e-06, -0.07318592071533203, -1.9073486328125e-06, -2.288818359375e-05, -0.16600608825683594, -3.0517578125e-05, -0.055968403816223145, -5.960462772236497e-07, -0.024623870849609375, -6.866455078125e-05, -0.05865478515625, -4.1961669921875e-05, -0.05160045623779297, -3.814697265625e-05, -0.0022039413452148438, -1.9073486328125e-06, -0.000247955322265625, -2.09808349609375e-05, -2.1457672119140625e-05, 0.0, -0.0023834705352783203, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "can_use"}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}]}, "comparators": [{"_type": "Num", "n": 0}], "ops": [{"_type": "Gt"}]}], "op": {"_type": "And"}}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "Template37", "hole0": {"_type": "Name", "id": "target"}, "hole2": [{"_type": "Num", "n": 3}, {"_type": "Name", "id": "self"}], "hole1": "damage"}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -5.212044430137318, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -0.336361289024353, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -0.2382354736328125, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.00047206878662109375, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.4605351686477661, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004730224609375, -1.71661376953125e-05, -0.00024127960205078125, 0.0, -1.9073486328125e-05, -0.004187583923339844, 0.0, -0.000949859619140625, -5.7220458984375e-06, -0.0002841949462890625, -0.0003204345703125, -5.14984130859375e-05, -0.000438690185546875, -0.002819061279296875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.00043153390288352966, 0.0, -0.0042785354889929295, 0.0, -0.3659707307815552, 0.0, -1.71661376953125e-05, -9.1552734375e-05, -0.000141143798828125, -0.2320408821105957, -0.00028228759765625, -5.14984130859375e-05, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.0004596710205078125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -6.040884670973462, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -0.336361289024353, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -0.2382354736328125, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.00047206878662109375, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.4605351686477661, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004730224609375, -1.71661376953125e-05, -0.00024127960205078125, 0.0, -1.9073486328125e-05, -0.004187583923339844, 0.0, -0.000949859619140625, -5.7220458984375e-06, -0.0002841949462890625, -0.0003204345703125, -5.14984130859375e-05, -0.000438690185546875, -0.002819061279296875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.00043153390288352966, 0.0, -0.0042785354889929295, 0.0, -1.1988202333450317, 0.0, -5.7220458984375e-06, -0.0001163482666015625, -9.34600830078125e-05, -0.22799824178218842, -0.000255584716796875, -5.7220458984375e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -0.00031566619873046875, 0.0, -0.00047779083251953125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -6.08689600007812, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -1.2699006795883179, 0.0, -7.62939453125e-06, -0.0001049041748046875, -9.5367431640625e-05, -0.2279660552740097, -0.000263214111328125, -5.53131103515625e-05, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.0003223419189453125, 0.0, -0.0005006790161132812, 0.0, -0.0005016326904296875, -2.86102294921875e-05, -0.4556695222854614, 0.0, -0.00016021728515625, -5.14984130859375e-05, -0.0005054473876953125, -1.71661376953125e-05, -0.00021457672119140625, 0.0, -2.09808349609375e-05, -0.009523391723632812, 0.0, -0.000858306884765625, -7.62939453125e-06, -0.0001773834228515625, -0.0003566741943359375, -8.392333984375e-05, -0.000457763671875, -0.0029239654541015625, -4.00543212890625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004076924524269998, 0.0, -0.004132742527872324, 0.0, -0.31917357444763184, 0.0, -1.9073486328125e-05, -8.392333984375e-05, -0.0001354217529296875, -0.23008954524993896, -0.0002994537353515625, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.000232696533203125, -1.9073486328125e-06, -0.00046062469482421875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if player.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -6.332802128917251, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -1.2006016969680786, 0.0, -0.06357133388519287, 0.0, -1.0434465408325195, -0.0063152313232421875, -0.00051116943359375, -5.91278076171875e-05, -0.013401031494140625, -5.7220458984375e-06, -0.009179115295410156, 0.0, -0.2906430959701538, 0.0, -0.025882720947265625, 0.0, -0.014070510864257812, -0.002960205078125, -0.0001068115234375, 0.0, -0.0015811920166015625, -3.814697265625e-05, -0.0049610137939453125, -1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.001661062240600586, 0.0, -0.012925148010253906, -5.91278076171875e-05, -0.0021048779599368572, 0.0, -3.4332275390625e-05, -0.0001544952392578125, -0.0007114410400390625, -6.29425048828125e-05, -0.0029412508010864258, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020885467529296875, 0.0, -0.00368499755859375, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.0006847381591796875, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004507774952799082, 0.0, -0.33652520179748535, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -0.23811829090118408, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.00047206878662109375, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.4608403444290161, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004730224609375, -1.71661376953125e-05, -0.0002422332763671875, 0.0, -1.9073486328125e-05, -0.004187583923339844, 0.0, -0.000949859619140625, -5.7220458984375e-06, -0.0002841949462890625, -0.0003204345703125, -5.14984130859375e-05, -0.000438690185546875, -0.002819061279296875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.00043153390288352966, 0.0, -0.0042785354889929295, 0.0, -0.36595165729522705, 0.0, -1.71661376953125e-05, -9.1552734375e-05, -0.000141143798828125, -0.23203802108764648, -0.00028228759765625, -5.14984130859375e-05, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.0004596710205078125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -6.9279418714260075, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -0.336361289024353, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -2.2527575492858887, -0.0002841949462890625, -4.00543212890625e-05, -3.814697265625e-06, -0.000156402587890625, 0.0, -0.0002346038818359375, 0.0, -0.000629425048828125, 0.0, -0.0008029937744140625, -2.6702880859375e-05, -0.1557551622390747, 0.0, -9.918212890625e-05, -4.38690185546875e-05, -0.0003795623779296875, -1.71661376953125e-05, -0.00020503997802734375, 0.0, -2.09808349609375e-05, -0.0032243728637695312, 0.0, -0.000896453857421875, -5.7220458984375e-06, -0.00031280517578125, -0.000324249267578125, -4.9591064453125e-05, -0.0004291534423828125, -0.0027217864990234375, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004383287450764328, 0.0, -0.004183168523013592, 0.0, -0.372064471244812, 0.0, -1.71661376953125e-05, -9.5367431640625e-05, -0.0001430511474609375, -0.2329854965209961, -0.0002803802490234375, -5.14984130859375e-05, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -0.0002288818359375, -1.9073486328125e-06, -0.0004596710205078125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -7.07554845290462, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -1.2699006795883179, 0.0, -7.62939453125e-06, -0.0001049041748046875, -9.5367431640625e-05, -0.2279660552740097, -0.000263214111328125, -5.53131103515625e-05, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.0003223419189453125, 0.0, -0.0005006790161132812, 0.0, -0.0005016326904296875, -2.86102294921875e-05, -0.4556695222854614, 0.0, -0.00016021728515625, -5.14984130859375e-05, -0.0005054473876953125, -1.71661376953125e-05, -0.00021457672119140625, 0.0, -2.09808349609375e-05, -0.009523391723632812, 0.0, -0.000858306884765625, -7.62939453125e-06, -0.0001773834228515625, -0.0003566741943359375, -8.392333984375e-05, -0.000457763671875, -0.0029239654541015625, -4.00543212890625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004076924524269998, 0.0, -0.004132742527872324, 0.0, -1.3166043758392334, 0.0, -5.7220458984375e-06, -0.000118255615234375, -8.7738037109375e-05, -0.22127972543239594, -0.0002593994140625, -5.7220458984375e-05, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.00032806396484375, 0.0, -0.0004711151123046875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if player.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -7.161699590212379, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -1.2006016969680786, 0.0, -0.06357133388519287, 0.0, -1.0434465408325195, -0.0063152313232421875, -0.00051116943359375, -5.91278076171875e-05, -0.013401031494140625, -5.7220458984375e-06, -0.009179115295410156, 0.0, -0.2906430959701538, 0.0, -0.025882720947265625, 0.0, -0.014070510864257812, -0.002960205078125, -0.0001068115234375, 0.0, -0.0015811920166015625, -3.814697265625e-05, -0.0049610137939453125, -1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.001661062240600586, 0.0, -0.012925148010253906, -5.91278076171875e-05, -0.0021048779599368572, 0.0, -3.4332275390625e-05, -0.0001544952392578125, -0.0007114410400390625, -6.29425048828125e-05, -0.0029412508010864258, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020885467529296875, 0.0, -0.00368499755859375, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.0006847381591796875, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004507774952799082, 0.0, -0.33652520179748535, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -0.23811829090118408, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.00047206878662109375, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.4608403444290161, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004730224609375, -1.71661376953125e-05, -0.0002422332763671875, 0.0, -1.9073486328125e-05, -0.004187583923339844, 0.0, -0.000949859619140625, -5.7220458984375e-06, -0.0002841949462890625, -0.0003204345703125, -5.14984130859375e-05, -0.000438690185546875, -0.002819061279296875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.00043153390288352966, 0.0, -0.0042785354889929295, 0.0, -1.1988593339920044, 0.0, -5.7220458984375e-06, -0.0001163482666015625, -9.34600830078125e-05, -0.2279944270849228, -0.000255584716796875, -5.7220458984375e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -0.00031566619873046875, 0.0, -0.00047779083251953125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "player", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if player.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.2071633910501305, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -1.2006016969680786, 0.0, -0.06357133388519287, 0.0, -1.0434465408325195, -0.0063152313232421875, -0.00051116943359375, -5.91278076171875e-05, -0.013401031494140625, -5.7220458984375e-06, -0.009179115295410156, 0.0, -0.2906430959701538, 0.0, -0.025882720947265625, 0.0, -0.014070510864257812, -0.002960205078125, -0.0001068115234375, 0.0, -0.0015811920166015625, -3.814697265625e-05, -0.0049610137939453125, -1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.001661062240600586, 0.0, -0.012925148010253906, -5.91278076171875e-05, -0.0021048779599368572, 0.0, -3.4332275390625e-05, -0.0001544952392578125, -0.0007114410400390625, -6.29425048828125e-05, -0.0029412508010864258, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020885467529296875, 0.0, -0.00368499755859375, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.0006847381591796875, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004507774952799082, 0.0, -1.2694847583770752, 0.0, -7.62939453125e-06, -0.0001049041748046875, -9.5367431640625e-05, -0.22795651853084564, -0.000263214111328125, -5.53131103515625e-05, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.0003223419189453125, 0.0, -0.000499725341796875, 0.0, -0.0005016326904296875, -2.86102294921875e-05, -0.455938458442688, 0.0, -0.00016021728515625, -5.14984130859375e-05, -0.0005054473876953125, -1.71661376953125e-05, -0.00021457672119140625, 0.0, -2.09808349609375e-05, -0.009521484375, 0.0, -0.000858306884765625, -7.62939453125e-06, -0.0001773834228515625, -0.0003566741943359375, -8.392333984375e-05, -0.000457763671875, -0.0029239654541015625, -4.00543212890625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004076924524269998, 0.0, -0.004132742527872324, 0.0, -0.31917548179626465, 0.0, -1.9073486328125e-05, -8.392333984375e-05, -0.0001354217529296875, -0.23008763790130615, -0.0002994537353515625, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.000232696533203125, -1.9073486328125e-06, -0.00046062469482421875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "player"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 31, 195, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 250, 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "<UNK>", "<EOS>", 22, 135, "True", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "character_attack", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n", "score": -7.261492920280141, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -1.183821678161621, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.578499436378479, 0.0, -0.000695347785949707, -1.1920928244535389e-07, -0.16665267944335938, -0.4293174743652344, -0.004306793212890625, -0.000171661376953125, -0.00067138671875, -1.71661376953125e-05, -0.005568504333496094, 0.0, -0.32807695865631104, 0.0, -0.013827323913574219, 0.0, -0.014736175537109375, -0.010463714599609375, -0.0001068115234375, 0.0, -0.0023479461669921875, -7.43865966796875e-05, -0.0016613006591796875, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.728534698486328e-05, 0.0, -0.0015543699264526367, 0.0, -0.012819290161132812, -5.91278076171875e-05, -0.002103805309161544, 0.0, -3.62396240234375e-05, -0.000164031982421875, -0.0007114410400390625, -6.29425048828125e-05, -0.0029097795486450195, -1.9073486328125e-06, -4.76837158203125e-05, -0.0020818710327148438, 0.0, -0.0036640167236328125, -7.62939453125e-06, -0.0004329681396484375, -0.0004215240478515625, -5.340576171875e-05, -0.00067901611328125, -0.0030765533447265625, -3.62396240234375e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00044739001896232367, 0.0, -0.004483694676309824, 0.0, -0.336361289024353, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001430511474609375, -0.2382354736328125, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.00047206878662109375, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.4605351686477661, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004730224609375, -1.71661376953125e-05, -0.00024127960205078125, 0.0, -1.9073486328125e-05, -0.004187583923339844, 0.0, -0.000949859619140625, -5.7220458984375e-06, -0.0002841949462890625, -0.0003204345703125, -5.14984130859375e-05, -0.000438690185546875, -0.002819061279296875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.00043153390288352966, 0.0, -0.0042785354889929295, 0.0, -0.3659707307815552, 0.0, -1.71661376953125e-05, -9.1552734375e-05, -0.000141143798828125, -2.2812700271606445, -0.0002880096435546875, -4.1961669921875e-05, -3.814697265625e-06, -0.00014495849609375, 0.0, -0.0002307891845703125, 0.0, -0.0006151199340820312, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "<UNK>"}]}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}], "test": {"_type": "Template36", "hole0": {"_type": "Name", "id": "card"}, "hole1": "<UNK>"}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "target", "<EOS>", 24, 145, 13, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 73, 124, 35, 222, 99, 23, 139, "1", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            self.target.<UNK>(len(self.player.minions))\n            card.target = self.player.minions[-1]\n    super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.507738304067175, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -0.39101505279541016, 0.0, -0.03719067573547363, 0.0, -0.6120643615722656, 0.0, -1.4772071838378906, -1.9073486328125e-06, -0.010410308837890625, -0.2445392608642578, -0.000179290771484375, -9.5367431640625e-06, 0.0, -0.17267227172851562, 0.0, -6.4849853515625e-05, -9.918212890625e-05, -1.52587890625e-05, -0.053050994873046875, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.02258777618408203, -3.814697265625e-06, -0.0001926422119140625, 0.0, -0.0016237497329711914, 0.0, -0.04560661315917969, -1.9073486328125e-06, -1.1444091796875e-05, -0.001171112060546875, -1.9073486328125e-06, -0.002223968505859375, 0.0, -0.5826340913772583, 0.0, -0.03631019592285156, 0.0, -0.2504558563232422, -0.00032520294189453125, -7.43865966796875e-05, -4.57763671875e-05, -0.00069427490234375, -0.000423431396484375, -0.000308990478515625, 0.0, -0.005889177322387695, 0.0, -0.000324249267578125, 0.0, -0.007369518280029297, 0.0, -0.02925395965576172, -0.0009708404541015625, -0.030420303344726562, -5.340576171875e-05, -0.0006847381591796875, -2.288818359375e-05, -4.00543212890625e-05, -0.009578940458595753, 0.0, -0.07991409301757812, -3.4332275390625e-05, -0.04688835144042969, -3.814697265625e-06, -0.0001373291015625, -3.814697265625e-06, -1.2159347534179688e-05, 0.0, -0.003962039947509766, 0.0, -0.009372711181640625, -0.000148773193359375, -0.008798948489129543, 0.0, -4.9591064453125e-05, -0.000156402587890625, -0.0024700164794921875, -4.57763671875e-05, -0.0030295848846435547, -3.814697265625e-06, -3.0517578125e-05, -0.0022020339965820312, 0.0, -0.004940032958984375, -1.52587890625e-05, -0.0005016326904296875, -0.0005130767822265625, -5.340576171875e-05, -0.0007686614990234375, -0.00315093994140625, -3.814697265625e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00047027861000970006, 0.0, -0.004713531583547592, 0.0, -0.3306725025177002, 0.0, -1.52587890625e-05, -8.96453857421875e-05, -0.000141143798828125, -0.23205125331878662, -0.0002803802490234375, -5.340576171875e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.00023746490478515625, -1.9073486328125e-06, -0.0004749298095703125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Assign", "value": {"_type": "Subscript", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "operand": {"_type": "Num", "n": 1}, "op": {"_type": "USub"}}}}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "target"}]}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            player.game.current_player.bind('minion_played', self._reveal)\n            self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -7.835354587737243, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -1.1309213638305664, -0.0002574920654296875, -7.62939453125e-06, 0.0, -0.9647409915924072, -1.9073486328125e-06, -0.07859353721141815, 0.0, -0.04217529296875, 0.0, -0.22344839572906494, 0.0, -1.33514404296875e-05, -0.0011005401611328125, -3.62396240234375e-05, -0.3619367182254791, -0.0001983642578125, -4.1961669921875e-05, -1.9073486328125e-06, -0.0001068115234375, 0.0, -0.00013065338134765625, 0.0, -0.000232696533203125, 0.0, -0.08176326751708984, -2.288818359375e-05, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.006134986877441406, -1.9073486328125e-06, -0.00046539306640625, 0.0, -0.3745298385620117, -5.7220458984375e-06, -0.0023279190063476562, 0.0, -0.014685630798339844, -0.0001544952392578125, -0.05827808380126953, -2.0265579223632812e-06, -0.0001049041748046875, -6.103515625e-05, -0.000667572021484375, -2.6702880859375e-05, -0.0005332231521606445, 0.0, -1.1444091796875e-05, -0.0006608963012695312, 0.0, -0.0034923553466796875, -7.62939453125e-06, -0.00026702880859375, -0.0004730224609375, -5.14984130859375e-05, -0.000553131103515625, -0.002620697021484375, -3.4332275390625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004436930175870657, 0.0, -0.00467728590592742, 0.0, -0.405617356300354, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001373291015625, -0.23783111572265625, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -7.62939453125e-05, 0.0, -0.0002193450927734375, -1.9073486328125e-06, -0.00045108795166015625, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.47744572162628174, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004978179931640625, -1.71661376953125e-05, -0.00022792816162109375, 0.0, -1.9073486328125e-05, -0.0044994354248046875, 0.0, -0.000942230224609375, -5.7220458984375e-06, -0.000274658203125, -0.000324249267578125, -5.14984130859375e-05, -0.000438690185546875, -0.0028362274169921875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004306994960643351, 0.0, -0.004244680050760508, 0.0, -0.363739013671875, 0.0, -1.71661376953125e-05, -9.1552734375e-05, -0.000141143798828125, -0.23200368881225586, -0.0002841949462890625, -5.14984130859375e-05, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -0.00022983551025390625, -1.9073486328125e-06, -0.0004596710205078125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 237, 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "card", "<EOS>", "target", "<EOS>", 24, 145, 13, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 73, 124, 35, 222, 99, 23, 139, "1", "<EOS>", 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 81, 117, "activate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            self.target.<UNK>(len(self.player.minions))\n            card.target = self.player.minions[-1]\n    super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -8.453803357410948, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -0.39101505279541016, 0.0, -0.03719067573547363, 0.0, -0.6120643615722656, 0.0, -1.4772071838378906, -1.9073486328125e-06, -0.010410308837890625, -0.2445392608642578, -0.000179290771484375, -9.5367431640625e-06, 0.0, -0.17267227172851562, 0.0, -6.4849853515625e-05, -9.918212890625e-05, -1.52587890625e-05, -0.053050994873046875, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.02258777618408203, -3.814697265625e-06, -0.0001926422119140625, 0.0, -0.0016237497329711914, 0.0, -0.04560661315917969, -1.9073486328125e-06, -1.1444091796875e-05, -0.001171112060546875, -1.9073486328125e-06, -0.002223968505859375, 0.0, -0.5826340913772583, 0.0, -0.03631019592285156, 0.0, -0.2504558563232422, -0.00032520294189453125, -7.43865966796875e-05, -4.57763671875e-05, -0.00069427490234375, -0.000423431396484375, -0.000308990478515625, 0.0, -0.005889177322387695, 0.0, -0.000324249267578125, 0.0, -0.007369518280029297, 0.0, -0.02925395965576172, -0.0009708404541015625, -0.030420303344726562, -5.340576171875e-05, -0.0006847381591796875, -2.288818359375e-05, -4.00543212890625e-05, -0.009578940458595753, 0.0, -0.07991409301757812, -3.4332275390625e-05, -0.04688835144042969, -3.814697265625e-06, -0.0001373291015625, -3.814697265625e-06, -1.2159347534179688e-05, 0.0, -0.003962039947509766, 0.0, -0.009372711181640625, -0.000148773193359375, -0.008798948489129543, 0.0, -4.9591064453125e-05, -0.000156402587890625, -0.0024700164794921875, -4.57763671875e-05, -0.0030295848846435547, -3.814697265625e-06, -3.0517578125e-05, -0.0022020339965820312, 0.0, -0.004940032958984375, -1.52587890625e-05, -0.0005016326904296875, -0.0005130767822265625, -5.340576171875e-05, -0.0007686614990234375, -0.00315093994140625, -3.814697265625e-05, 0.0, -7.748603820800781e-06, -3.814697265625e-06, -0.00047027861000970006, 0.0, -0.004713531583547592, 0.0, -1.2839224338531494, 0.0, -7.62939453125e-06, -0.000110626220703125, -9.5367431640625e-05, -0.2248072475194931, -0.0002593994140625, -5.7220458984375e-05, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.00032901763916015625, 0.0, -0.0005054473876953125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "target"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}]}], "hole1": "<UNK>"}, {"_type": "Assign", "value": {"_type": "Subscript", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}, "attr": "minions"}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "operand": {"_type": "Num", "n": 1}, "op": {"_type": "USub"}}}}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "target"}]}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "FunctionDef", "name": "activate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            player.game.current_player.bind('minion_played', self._reveal)\n            self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "score": -8.488546497309585, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -1.1309213638305664, -0.0002574920654296875, -7.62939453125e-06, 0.0, -0.9647409915924072, -1.9073486328125e-06, -0.07859353721141815, 0.0, -0.04217529296875, 0.0, -0.22344839572906494, 0.0, -1.33514404296875e-05, -0.0011005401611328125, -3.62396240234375e-05, -0.3619367182254791, -0.0001983642578125, -4.1961669921875e-05, -1.9073486328125e-06, -0.0001068115234375, 0.0, -0.00013065338134765625, 0.0, -0.000232696533203125, 0.0, -0.08176326751708984, -2.288818359375e-05, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.006134986877441406, -1.9073486328125e-06, -0.00046539306640625, 0.0, -0.3745298385620117, -5.7220458984375e-06, -0.0023279190063476562, 0.0, -0.014685630798339844, -0.0001544952392578125, -0.05827808380126953, -2.0265579223632812e-06, -0.0001049041748046875, -6.103515625e-05, -0.000667572021484375, -2.6702880859375e-05, -0.0005332231521606445, 0.0, -1.1444091796875e-05, -0.0006608963012695312, 0.0, -0.0034923553466796875, -7.62939453125e-06, -0.00026702880859375, -0.0004730224609375, -5.14984130859375e-05, -0.000553131103515625, -0.002620697021484375, -3.4332275390625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004436930175870657, 0.0, -0.00467728590592742, 0.0, -1.113242745399475, 0.0, -5.7220458984375e-06, -0.0001125335693359375, -9.34600830078125e-05, -0.23627756536006927, -0.000263214111328125, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -0.00030517578125, 0.0, -0.0004673004150390625, 0.0, -0.00049591064453125, -2.86102294921875e-05, -0.46691811084747314, 0.0, -0.00016021728515625, -5.340576171875e-05, -0.0005283355712890625, -1.52587890625e-05, -0.0002040863037109375, 0.0, -2.09808349609375e-05, -0.011137008666992188, 0.0, -0.0008068084716796875, -9.5367431640625e-06, -0.0001697540283203125, -0.0003681182861328125, -8.7738037109375e-05, -0.000457763671875, -0.0029392242431640625, -4.00543212890625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004054275050293654, 0.0, -0.004091376904398203, 0.0, -0.3168981075286865, 0.0, -1.9073486328125e-05, -8.58306884765625e-05, -0.0001354217529296875, -0.23005235195159912, -0.0002994537353515625, -4.9591064453125e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.000232696533203125, -1.9073486328125e-06, -0.00046062469482421875, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}, {"choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            player.game.current_player.bind('minion_played', self._reveal)\n            self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "score": -8.671398884359519, "score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -1.1309213638305664, -0.0002574920654296875, -7.62939453125e-06, 0.0, -0.9647409915924072, -1.9073486328125e-06, -0.07859353721141815, 0.0, -0.04217529296875, 0.0, -0.22344839572906494, 0.0, -1.33514404296875e-05, -0.0011005401611328125, -3.62396240234375e-05, -0.3619367182254791, -0.0001983642578125, -4.1961669921875e-05, -1.9073486328125e-06, -0.0001068115234375, 0.0, -0.00013065338134765625, 0.0, -0.000232696533203125, 0.0, -0.08176326751708984, -2.288818359375e-05, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.006134986877441406, -1.9073486328125e-06, -0.00046539306640625, 0.0, -0.3745298385620117, -5.7220458984375e-06, -0.0023279190063476562, 0.0, -0.014685630798339844, -0.0001544952392578125, -0.05827808380126953, -2.0265579223632812e-06, -0.0001049041748046875, -6.103515625e-05, -0.000667572021484375, -2.6702880859375e-05, -0.0005332231521606445, 0.0, -1.1444091796875e-05, -0.0006608963012695312, 0.0, -0.0034923553466796875, -7.62939453125e-06, -0.00026702880859375, -0.0004730224609375, -5.14984130859375e-05, -0.000553131103515625, -0.002620697021484375, -3.4332275390625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004436930175870657, 0.0, -0.00467728590592742, 0.0, -0.405617356300354, 0.0, -1.71661376953125e-05, -8.58306884765625e-05, -0.0001373291015625, -0.23783111572265625, -0.0002880096435546875, -5.14984130859375e-05, -1.9073486328125e-06, -7.62939453125e-05, 0.0, -0.0002193450927734375, -1.9073486328125e-06, -0.00045108795166015625, 0.0, -0.000492095947265625, -3.24249267578125e-05, -0.47744572162628174, 0.0, -0.00018310546875, -6.4849853515625e-05, -0.0004978179931640625, -1.71661376953125e-05, -0.00022792816162109375, 0.0, -1.9073486328125e-05, -0.0044994354248046875, 0.0, -0.000942230224609375, -5.7220458984375e-06, -0.000274658203125, -0.000324249267578125, -5.14984130859375e-05, -0.000438690185546875, -0.0028362274169921875, -3.814697265625e-05, 0.0, -1.1563301086425781e-05, -3.814697265625e-06, -0.0004306994960643351, 0.0, -0.004244680050760508, 0.0, -1.2039985656738281, 0.0, -5.7220458984375e-06, -0.000118255615234375, -9.34600830078125e-05, -0.22775410115718842, -0.000255584716796875, -5.7220458984375e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -0.000316619873046875, 0.0, -0.00047779083251953125, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template15", "hole0": "Vaporize", "hole3": "RARE", "hole2": "MAGE", "hole1": 3}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard", "hole0": "Vaporize", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": "game", "hole2": "player", "hole1": "use"}}], "hole4": "player", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole0": {"_type": "Template39", "hole0": "super"}, "hole1": "reveal"}}, {"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "player"}]}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "bind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole0": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "player"}, "attr": "game"}, "attr": "current_player"}, "hole2": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "self"}, "attr": "_reveal"}], "hole1": "unbind"}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score": -0.030308602574315557, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -0.02829134464263916, -9.5367431640625e-06, -0.00037384033203125, -1.9073486328125e-05, -0.0002372264862060547, -1.8358225133852102e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "score": -4.7948007567011715, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -4.792438983917236, -1.9073486328125e-06, -0.0007944107055664062, -3.0517578125e-05, -0.00017178058624267578, -3.933906555175781e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "2", "<EOS>", 63, 205, "Hero", "Selector", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Damage(2), HeroSelector()))\n", "score": -5.4935088586627, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -4.470085620880127, 0.0, -0.00652313232421875, -3.4332275390625e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.0024145841598510742, -2.0265579223632812e-06, -0.0457000732421875, -0.00461578369140625, -4.57763671875e-05, -0.12395475804805756, -2.0265499188099056e-05, -0.13566964864730835, -6.842606671852991e-05, -0.04308319091796875, -5.7220458984375e-05, -0.6591798067092896, -0.0006530284881591797, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 2}, {"_type": "Template39", "hole0": "HeroSelector"}]}, "hole2": "deathrattle", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 59, 193, "Damage", "<EOS>", "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Damage(2),\n            PlayerSelector()))\n", "score": -5.838123245221233, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -4.470085620880127, 0.0, -0.00652313232421875, -3.4332275390625e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.0024145841598510742, -2.0265579223632812e-06, -0.0457000732421875, -0.00461578369140625, -4.57763671875e-05, -0.12395475804805756, -2.0265499188099056e-05, -0.13566964864730835, -6.842606671852991e-05, -0.04308319091796875, -5.7220458984375e-05, -1.004243016242981, -0.00017559528350830078, -4.00543212890625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template34", "hole0": "Damage", "hole1": 2}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole2": "deathrattle", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "enrage", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, enrage=True)\n", "score": -6.530766962297868, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -6.460400104522705, -1.9073486328125e-06, -0.0686655044555664, -9.5367431640625e-06, -0.0003281831741333008, -2.503394853192731e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "enrage", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "score": -6.853206990486889, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -6.848349571228027, -1.9073486328125e-06, -0.0032901763916015625, -1.71661376953125e-05, -0.00017964839935302734, -9.298322765971534e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, MAGE=True)\n", "score": -7.469127891787231, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -7.457627296447754, -4.780292510986328e-05, -0.009158134460449219, -1.9073486328125e-05, -0.0009139776229858398, -2.384185791015625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "MAGE", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, WARLOCK=True)\n", "score": -7.598344205147534, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -7.589744567871094, -1.33514404296875e-05, -0.0070362091064453125, -1.9073486328125e-05, -0.00015866756439208984, -1.3113020031596534e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "WARLOCK", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "Damage", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, Damage=True)\n", "score": -7.780866859682739, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -7.679007530212402, 0.0, -0.10004329681396484, -1.52587890625e-05, -0.0004391670227050781, -2.384185791015625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "Damage", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "Character", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, Character=True)\n", "score": -8.069221733339965, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -8.066605567932129, -1.9073486328125e-05, -0.0009412765502929688, -1.71661376953125e-05, -0.00027489662170410156, -4.5299530029296875e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "Character", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "spare_part_list", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, spare_part_list=True)\n", "score": -8.273629544504821, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -8.218354225158691, -3.62396240234375e-05, -0.05249595642089844, -2.09808349609375e-05, -0.0013605356216430664, -2.384185791015625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spare_part_list", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "COMMON", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, COMMON=True)\n", "score": -8.331980822808056, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -8.328238487243652, 0.0, -0.001953125, -1.1444091796875e-05, -0.00041091442108154297, -7.6293927122605965e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "COMMON", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 22, 135, "False", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score": -8.848775504358947, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -0.02829134464263916, -9.5367431640625e-06, -0.00037384033203125, -1.9073486328125e-05, -8.818693161010742, -2.9325485229492188e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 22, 135, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, auras=True)\n", "score": -9.052359817751586, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -8.43984317779541, -1.9073486328125e-06, -0.6106204986572266, -1.33514404296875e-05, -0.0005171298980712891, -4.5299530029296875e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "NameConstant", "value": true}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -12.006828545228387, "score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -12.002838134765625, -0.000591278076171875, -0.002166748046875, -1.1920928244535389e-07, -1.33514404296875e-05, -5.960462772236497e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Worgen Infiltrator", "hole2": "ALL", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "WorgenInfiltrator", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 1}], "hole4": "player"}}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -1.944089305883935, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -0.11158692836761475, -1.9073486328125e-06, -0.2666134238243103, -1.9073486328125e-06, -7.62939453125e-06, -0.048648834228515625, -0.0011749267578125, 0.0, -0.20934104919433594, -3.814697265625e-06, -0.0006561279296875, -7.62939453125e-06, -0.0004960298538208008, -7.68899917602539e-05, 0.0, -3.576278118089249e-07, 0.0, -4.9591064453125e-05, 0.0, -1.33514404296875e-05, -0.00713348388671875, -3.814697265625e-06, -0.00028955936431884766, 0.0, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "MinionSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -2.5064760790414695, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -1.8083744049072266, -1.5616295058862306e-05, -0.0001454322482459247, 0.0, 0.0, -9.381782001582906e-05, 0.0, -0.0038486719131469727, 0.0, -0.09810686856508255, -1.0251998901367188e-05, -0.0008096375386230648, -1.52587890625e-05, 0.0, -0.5331010818481445, -0.0005130767822265625, -3.814697265625e-06, -0.039218902587890625, -1.9073486328125e-06, -0.018505096435546875, -2.09808349609375e-05, -0.0010223388671875, -0.00012922286987304688, 0.0, -2.1457672119140625e-06, 0.0, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, -0.0014247894287109375, -1.9073486328125e-06, -0.00014472004841081798, 0.0, -5.7220458984375e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Bounce", "hole5": "MinionSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 209, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -2.9301041708751967, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -1.8083744049072266, -1.5616295058862306e-05, -0.0001454322482459247, 0.0, 0.0, -9.381782001582906e-05, 0.0, -0.0038486719131469727, 0.0, -0.09810686856508255, -1.0251998901367188e-05, -0.0008096375386230648, -1.52587890625e-05, 0.0, -0.8902444839477539, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001392364501953125, -5.7220458984375e-06, -5.91278076171875e-05, -3.814697265625e-06, -0.0001125335693359375, -1.71661376953125e-05, 0.0, -0.0001544952392578125, -1.1444091796875e-05, -0.0005893707275390625, -1.71661376953125e-05, -0.12437629699707031, -3.814697265625e-06, -0.00025975704193115234, -7.17639850336127e-05, -1.9073486328125e-06, -2.622604142743512e-06, 0.0, -2.6702880859375e-05, 0.0, -2.09808349609375e-05, -0.001407623291015625, -1.9073486328125e-06, -0.0002224445343017578, -1.1920928244535389e-07, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Bounce", "hole5": "MinionSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "4", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(4),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.02759037682533, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -1.542301058769226, -0.00011873032053699717, -1.1444091796875e-05, -0.0001621246337890625, -1.9073486328125e-06, -0.46851545572280884, -1.52587890625e-05, -0.029985422268509865, -5.7220458984375e-06, 0.0, -0.01068115234375, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-05, -9.34600830078125e-05, -3.814697265625e-06, -0.00106048583984375, -5.7220458984375e-06, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.000278472900390625, -1.33514404296875e-05, -0.2075204849243164, -3.814697265625e-06, -0.00023877620697021484, -6.54458999633789e-05, -1.9073486328125e-06, -2.622604142743512e-06, 0.0, -1.71661376953125e-05, 0.0, -2.288818359375e-05, -0.011606216430664062, -3.814697265625e-06, -0.00025403499603271484, 0.0, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Num", "n": 4}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.2759589650025234, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -1.6865525245666504, -5.960462772236497e-07, -8.165806502802297e-05, -2.2649765014648438e-06, -1.0371186363045126e-05, -0.00013339567522052675, -5.8412379075889476e-06, -0.0002770423889160156, 0.0, -0.16050109267234802, -0.8432384729385376, -1.9073486328125e-06, -0.034576416015625, -1.71661376953125e-05, -3.24249267578125e-05, -0.026671409606933594, -0.00057220458984375, -0.00016379330190829933, -3.933906555175781e-06, -0.001524806022644043, -0.01071929931640625, 0.0, -0.1522451937198639, 0.0, -0.00144195556640625, -0.0001888275146484375, -0.0002002716064453125, -1.9073486328125e-06, -0.00015842914581298828, -0.00185394287109375, 0.0, -0.12436950206756592, 0.0, -0.06273163110017776, -1.1801719665527344e-05, -2.6702880859375e-05, -5.5432290537282825e-05, 0.0, -1.1324880688334815e-05, 0.0, -1.1444091796875e-05, -0.1662731170654297, -7.62939453125e-06, -0.0003666877746582031, 0.0, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.3004956965277614, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -0.11158692836761475, -1.9073486328125e-06, -1.4564977884292603, -2.2649765014648438e-06, -1.33514404296875e-05, -0.0003662109375, -0.00238037109375, 0.0, -0.3632841110229492, -3.24249267578125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0006542205810546875, -3.814697265625e-06, 0.0, -6.794906312279636e-06, 0.0, -7.069110870361328e-05, 0.0, -1.9073486328125e-05, -0.06734466552734375, -5.7220458984375e-06, -0.00022995471954345703, 0.0, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(players=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.4716198568125236, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -0.11158692836761475, -1.9073486328125e-06, -0.2666134238243103, -1.9073486328125e-06, -7.62939453125e-06, -0.048648834228515625, -0.0011749267578125, 0.0, -1.7012176513671875, -1.33514404296875e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.0007991790771484375, -5.7220458984375e-06, 0.0, -7.510157047363464e-06, 0.0, -6.306171417236328e-05, 0.0, -1.71661376953125e-05, -0.0431976318359375, -5.7220458984375e-06, -0.0002504587173461914, 0.0, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "MinionSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.559471651007854, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -1.542301058769226, -0.00011873032053699717, -1.1444091796875e-05, -0.0001621246337890625, -1.9073486328125e-06, -1.00089430809021, -3.814697265625e-06, -0.007425900083035231, -1.1444091796875e-05, 0.0, -0.013209342956542969, -4.00543212890625e-05, -1.9073486328125e-06, -6.29425048828125e-05, -2.86102294921875e-05, -5.7220458984375e-05, -1.9073486328125e-06, -0.0026950836181640625, -3.814697265625e-06, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002880096435546875, -1.52587890625e-05, -0.2258157730102539, -3.814697265625e-06, -0.00023686885833740234, -6.580352055607364e-05, -1.9073486328125e-06, -2.622604142743512e-06, 0.0, -1.71661376953125e-05, 0.0, -2.47955322265625e-05, -0.011240005493164062, -3.814697265625e-06, -0.0002504587173461914, 0.0, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Damage", "hole5": "CharacterSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Num", "n": 1}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "Effect", "<EOS>", 237, 39, 110, 21, 134, "Effect", "<EOS>", 238, 63, 205, "Turn", "Ended", "<EOS>", 50, 169, "Duplicate", "<EOS>", 237, 63, 205, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveEffect(Effect(\n            TurnEnded(), ActionTag(Duplicate(SelfSelector()),\n            PlayerSelector()))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.267335501269621, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -1.6865525245666504, -5.960462772236497e-07, -8.165806502802297e-05, -2.2649765014648438e-06, -1.0371186363045126e-05, -0.00013339567522052675, -5.8412379075889476e-06, -0.0002770423889160156, 0.0, -0.16050109267234802, -0.5900255441665649, -0.00010942854714812711, -5.7220458984375e-06, -0.06438541412353516, -8.7738037109375e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.13773977756500244, -5.7220458984375e-06, -0.000316619873046875, -0.3257007598876953, 0.0, -0.32989048957824707, -0.0005896091461181641, 0.0, -0.0047359466552734375, -0.0003833770751953125, -0.5162534713745117, -0.00057220458984375, 0.0, -0.0113372802734375, -1.9073486328125e-06, -0.2652202248573303, -0.0003399848937988281, 0.0, -0.005939483642578125, -5.7220458984375e-06, 0.0, -0.16418695449829102, -9.655952453613281e-06, 0.0, -0.00012433528900146484, 0.0, -1.049041748046875e-05, 0.0, -3.814697265625e-06, -0.00049591064453125, -5.7220458984375e-06, -0.0003267526626586914, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "GiveEffect", "hole5": "PlayerSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template39", "hole0": "TurnEnded"}, {"_type": "Template19", "hole0": "Duplicate", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "SelfSelector"}]}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(3))]), SelfSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.272444914384245, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -2.6479392051696777, -1.9073486328125e-05, -0.012452362105250359, -1.1920928244535389e-07, -3.4332275390625e-05, -0.0020656585693359375, -0.0018787384033203125, 0.0, -0.23172950744628906, -4.00543212890625e-05, -1.71661376953125e-05, -5.7220458984375e-06, -0.0006237030029296875, -5.7220458984375e-06, 0.0, -3.933898824470816e-06, 0.0, -4.971027374267578e-05, 0.0, -1.52587890625e-05, -0.07735443115234375, -5.7220458984375e-06, -0.0002243518829345703, 0.0, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 3, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.3130713103475244, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -3.117556571960449, -1.4066685253055766e-05, -2.288818359375e-05, -0.00038909912109375, -7.62939453125e-06, -0.1809365153312683, -1.71661376953125e-05, -0.028661319985985756, -3.814697265625e-06, 0.0, -0.009212493896484375, -4.9591064453125e-05, 0.0, -3.0517578125e-05, -2.288818359375e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.000507354736328125, -3.814697265625e-06, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.00029754638671875, -1.33514404296875e-05, -0.20968341827392578, -3.814697265625e-06, -0.00025200843811035156, -6.747245788574219e-05, -1.9073486328125e-06, -2.622604142743512e-06, 0.0, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, -0.010471343994140625, -3.814697265625e-06, -0.00024819374084472656, 0.0, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Heal", "hole5": "CharacterSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Num", "n": 4}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.32335908461242, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -0.11158692836761475, -1.9073486328125e-06, -1.4564977884292603, -2.2649765014648438e-06, -1.33514404296875e-05, -0.0003662109375, -0.00238037109375, 0.0, -1.4432621002197266, -3.24249267578125e-05, -0.00026702880859375, -5.7220458984375e-06, -0.0006467103958129883, -0.0001361370086669922, -1.9073486328125e-06, -3.576278118089249e-07, 0.0, -4.76837158203125e-05, 0.0, -1.33514404296875e-05, -0.009815216064453125, -3.814697265625e-06, -0.0002957582473754883, 0.0, -3.814697265625e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}], "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template39", "hole0": "UserPicker"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Heal", "<EOS>", 237, 46, 139, "4", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.416588487280727, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -1.6865525245666504, -5.960462772236497e-07, -8.165806502802297e-05, -2.2649765014648438e-06, -1.0371186363045126e-05, -0.00013339567522052675, -5.8412379075889476e-06, -0.0002770423889160156, 0.0, -2.561286449432373, -0.0009542204206809402, -3.62396240234375e-05, -0.0008068084716796875, -5.7220458984375e-06, -0.0011292621493339539, -4.649161837733118e-06, -0.1618925929069519, -8.201336459023878e-05, -2.0265579223632812e-06, -0.00018882748554460704, 0.0, -1.7762111383490264e-05, 0.0, -1.33514404296875e-05, -0.0020313262939453125, -3.0517578125e-05, -0.00012624263763427734, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Heal", "hole5": "HeroSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Num", "n": 4}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(SpellDamage(1)),\n            CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.601904078376194, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -2.2113876342773438, -0.0003528594970703125, -0.07108497619628906, -0.002532958984375, -0.004877448081970215, -0.0008184252073988318, -2.6702880859375e-05, -0.380064994096756, -1.1444091796875e-05, -1.9073486328125e-06, -0.04304790496826172, -0.00067901611328125, 0.0, -0.7149991989135742, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -0.00496673583984375, -7.62939453125e-06, 0.0, -1.9907753085135482e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.86102294921875e-05, -0.03531074523925781, -5.7220458984375e-06, -0.00022518634796142578, 0.0, -1.9073486328125e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "CharacterSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole4": [{"_type": "Template34", "hole0": "SpellDamage", "hole1": 1}], "hole7": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}, {"choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 215, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Self", "Selector", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.059665835606424, "score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -3.9010725021362305, -6.4373016357421875e-06, -6.127352389739826e-05, 0.0, -1.9073486328125e-06, -0.00012075965059921145, -1.1920928244535389e-07, -0.00014495849609375, 0.0, -0.07406257838010788, -0.0035805702209472656, -1.9073486328125e-06, -0.001338958740234375, -2.86102294921875e-05, -3.0517578125e-05, -0.0008411407470703125, -4.1961669921875e-05, -3.9935104723554105e-05, -3.814697265625e-06, -0.001202225685119629, -0.008508682250976562, 0.0, -0.06312558054924011, -1.9073486328125e-06, -0.001125335693359375, -0.0002079010009765625, -0.00017547607421875, -3.814697265625e-06, -0.00014328956604003906, -0.00185394287109375, 0.0, -0.12607800960540771, -1.9073486328125e-06, -0.006151108071208, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.0004673004150390625, -0.2798175811767578, -0.0001544952392578125, 0.0, -0.00045609474182128906, -0.0008029937744140625, -1.52587890625e-05, -0.0001964569091796875, -0.001834869384765625, -0.1574535369873047, -0.036586593836545944, -1.728534698486328e-05, -3.814697265625e-05, 0.0, -0.0007833216805011034, -7.748603820800781e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -7.62939453125e-06, -0.07259941101074219, 0.0, -0.000865936279296875, -0.0001068115234375, -0.0002079010009765625, -3.814697265625e-06, -0.0025327205657958984, -0.0003689527220558375, 0.0, -3.814697265625e-05, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004270672798156738, 0.0, -0.18766021728515625, 0.0, -0.000247955322265625, -5.7220458984375e-05, -5.7220458984375e-06, -0.0002231597900390625, 0.0, -3.0517578125e-05, -1.52587890625e-05, -0.001748715527355671, -1.9073486328125e-06, -0.00012981891632080078, 0.0, -1.33514404296875e-05, 0.0, -9.5367431640625e-06, -0.11850261688232422, -9.5367431640625e-06, -0.0002530810597818345, 0.0, -3.8146970382513246e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "SelfSelector", "hole1": 5, "hole0": "Blackwing Corruptor", "hole8": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}], "hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "BlackwingCorruptor", "hole6": [{"_type": "Template27", "hole0": 5, "hole1": 4}], "hole4": "player"}}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Increase", "Weapon", "Attack", "<EOS>", "1", "<EOS>", 62, 202, "Increase", "Durability", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()],\n            WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -1.8056010750352698, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.875848650932312, -0.009074815548956394, -0.018007278442382812, -2.3126602172851562e-05, -0.05262008681893349, -3.933906555175781e-06, -0.01665210723876953, -0.019556045532226562, -0.03770922124385834, -0.09108945727348328, -0.001150726922787726, -0.221954345703125, -5.14984130859375e-05, -0.009114038199186325, -1.71661376953125e-05, 0.0, -0.0025768280029296875, -0.0001163482666015625, -1.1205626833543647e-05, -2.503394853192731e-06, -0.00014805002138018608, -3.099436753473128e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "IncreaseWeaponAttack", "hole1": 1}, {"_type": "Template38_expr_seq", "hole0": "IncreaseDurability"}]}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 62, 202, "Increase", "Durability", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), IncreaseDurability()], WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -2.545550807185009, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.8152790069580078, -0.011135101318359375, -0.18550768494606018, -0.1046905592083931, -0.0003196966717951, -0.026140213012695312, -5.91278076171875e-05, -0.01008819229900837, -2.09808349609375e-05, 0.0, -0.0026025772094726562, -7.62939453125e-05, -1.0609586752252653e-05, -8.344646857949556e-07, -0.00012856489047408104, -3.2186455882765586e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template38_expr_seq", "hole0": "IncreaseDurability"}]}, {"_type": "Template39", "hole0": "WeaponSelector"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "15", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Heal(15), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -2.7104869204368924, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -2.16552734375, 0.0, -0.0002651214599609375, 0.0, -0.028761863708496094, -0.011810302734375, -0.43761420249938965, -0.00029846568941138685, -0.0056591033935546875, -0.015004158020019531, -9.5367431640625e-06, -0.00782727636396885, -0.0001399441680405289, -0.028069496154785156, -8.881022222340107e-05, -3.814697265625e-06, -0.000583648681640625, -0.000640869140625, -6.830492930021137e-05, -3.4570680327306036e-06, -0.00025869172532111406, -4.291525328881107e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 15}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "DRAGON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), Give(ChangeHealth(2))], MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.181127168020332, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.6175050735473633, -0.0005950927734375, -0.1552727073431015, -3.4689903259277344e-05, -0.2368861436843872, -0.005164146423339844, 0.0, -0.3368684649467468, 0.0, -0.2067880630493164, -0.017248153686523438, -2.86102294921875e-05, -3.814697265625e-06, -0.1402440220117569, -8.20159912109375e-05, -9.5367431640625e-06, -0.021694183349609375, -4.9591064453125e-05, 0.0, -0.044078826904296875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.008371591567993164, -1.1563283806026448e-05, -3.62396240234375e-05, -0.0003871917724609375, -0.0001697540283203125, -1.072882923836005e-06, -1.1920928244535389e-07, -0.0001037047550198622, -8.344646857949556e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeHealth"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "15", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Heal(15), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.4554485307118057, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -2.823727607727051, -0.03167533874511719, -0.31542032957077026, -0.00010394820856163278, -0.005584716796875, -0.004223823547363281, -9.5367431640625e-06, -0.011020531877875328, -0.0001442356442566961, -0.046141743659973145, -5.233271804172546e-05, -1.9073486328125e-06, -0.0006237030029296875, -0.00075531005859375, -6.246392149478197e-05, -3.4570680327306036e-06, -0.0002658657031133771, -4.291525328881107e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 15}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "15", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Heal(15), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.594893477037772, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -2.991931915283203, 0.0, -0.0010194778442382812, 0.0, -0.12088871002197266, -0.011453628540039062, -0.419863224029541, -0.00039106994518078864, -0.0004100799560546875, -0.004361152648925781, -1.33514404296875e-05, -0.009191270917654037, -0.00016414148558396846, -0.02556896209716797, -7.867759268265218e-05, -5.7220458984375e-06, -0.0006084442138671875, -0.0007534027099609375, -6.890082295285538e-05, -3.218649908376392e-06, -0.0002654982963576913, -4.410734163684538e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 15}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "BEAST", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Increase", "Weapon", "Attack", "<EOS>", "1", "<EOS>", 62, 202, "Increase", "Durability", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()],\n            HeroSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.9667661786102926, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.875848650932312, -0.009074815548956394, -0.018007278442382812, -2.3126602172851562e-05, -0.05262008681893349, -3.933906555175781e-06, -0.01665210723876953, -0.019556045532226562, -0.03770922124385834, -0.09108945727348328, -0.001150726922787726, -1.7931365966796875, -0.002407073974609375, -0.5422818660736084, -0.0006114321295171976, -1.1920928244535389e-07, -0.05146466940641403, -3.898142676916905e-05, -5.7220458984375e-06, -0.0028429031372070312, -0.0002899169921875, -0.00010561382805462927, 0.0, -0.0019750534556806087, -2.3841855067985307e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "IncreaseWeaponAttack", "hole1": 1}, {"_type": "Template38_expr_seq", "hole0": "IncreaseDurability"}]}, {"_type": "Template26", "hole0": "HeroSelector", "hole1": "EnemyPlayer"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "6", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(6), Give(ChangeHealth(2))], MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.199658808424367, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -1.9195517301559448, -6.496905552921817e-05, -0.19940185546875, -0.0002422332763671875, -0.05526967719197273, -4.0650367736816406e-05, -0.23739826679229736, -0.008600354194641113, 0.0, -0.3083339035511017, 0.0, -0.10485649108886719, -0.024351119995117188, -2.47955322265625e-05, -5.7220458984375e-06, -0.1665494441986084, -8.20159912109375e-05, -7.62939453125e-06, -0.018299102783203125, -4.9591064453125e-05, 0.0, -0.03937721252441406, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.007498264312744141, -1.1563283806026448e-05, -3.814697265625e-05, -0.0003910064697265625, -0.000171661376953125, -1.072882923836005e-06, -1.1920928244535389e-07, -0.00010322919843019918, -8.344646857949556e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 6}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeHealth"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), Give(ChangeHealth(3))], MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.243929344959092, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.6175050735473633, -0.0005950927734375, -0.1552727073431015, -3.4689903259277344e-05, -0.2368861436843872, -0.005164146423339844, 0.0, -1.54285728931427, 0.0, -0.09866523742675781, -0.0020351409912109375, -2.47955322265625e-05, -1.9073486328125e-06, -0.10139846801757812, -4.76837158203125e-05, -3.814697265625e-06, -0.05915069580078125, -1.9073486328125e-05, 0.0, -0.03109264373779297, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.003001093864440918, -8.940695806813892e-06, -8.7738037109375e-05, -0.00035858154296875, -0.0001239776611328125, -1.3113011618770543e-06, -1.1920928244535389e-07, -9.660807700129226e-05, -5.960462772236497e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 3, "hole1": "ChangeHealth"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Heal", "<EOS>", 237, 46, 139, "15", "<EOS>", "Hero", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Heal(15), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.621113050052031, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -4.120234489440918, 0.0, -0.0006513595581054688, 0.0, -0.08308696746826172, -0.010848045349121094, -0.3554609715938568, -0.0003447085910011083, -0.0004978179931640625, -0.005806922912597656, -1.1444091796875e-05, -0.00874006375670433, -0.00015901592269074172, -0.02573525905609131, -6.0558068071259186e-05, -5.7220458984375e-06, -0.0006580352783203125, -0.0006237030029296875, -6.890082295285538e-05, -3.218649908376392e-06, -0.00026333716232329607, -4.291525328881107e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Heal", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 15}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "MECH", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Health", "<EOS>", 237, 53, 182, "Count", "<EOS>", "Card", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.753660206633981, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -2.16552734375, 0.0, -0.0002651214599609375, 0.0, -0.028761863708496094, -0.011810302734375, -2.031904935836792, -0.001681758207269013, -0.016786575317382812, -0.03772735595703125, -0.038763999938964844, -0.0014147752663120627, -0.27785611152648926, 0.0, -0.0001430511474609375, -0.0928182601928711, -9.34600830078125e-05, -0.0041266679763793945, -0.00022244451974984258, -0.0007487533148378134, -0.00014685862697660923, 0.0, -0.032305002212524414, -1.6212408809224144e-05, 0.0, -0.0015544891357421875, -0.0002899169921875, -0.00011741444905055687, -2.1457672119140625e-06, -0.0007262146682478487, -9.536738616588991e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Template18", "hole0": "Give", "hole2": "SelfSelector", "hole1": [{"_type": "Template25", "hole0": "ChangeHealth", "hole1": [{"_type": "Template26", "hole0": "Count", "hole1": "CardSelector"}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "DRAGON", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Increase", "Weapon", "Attack", "<EOS>", "1", "<EOS>", 62, 202, "Increase", "Durability", "<EOS>", 53, 182, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()],\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.767072555458611, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.875848650932312, -0.009074815548956394, -0.018007278442382812, -2.3126602172851562e-05, -0.05262008681893349, -3.933906555175781e-06, -0.01665210723876953, -0.019556045532226562, -0.03770922124385834, -0.09108945727348328, -0.001150726922787726, -1.7931365966796875, -0.002407073974609375, -1.3416764736175537, -9.310142195317894e-05, 0.0, -0.05340075492858887, -4.1246410546591505e-05, -3.814697265625e-06, -0.0023508071899414062, -0.0002880096435546875, -0.0001125272101489827, 0.0, -0.0019559194333851337, -2.3841855067985307e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "IncreaseWeaponAttack", "hole1": 1}, {"_type": "Template38_expr_seq", "hole0": "IncreaseDurability"}]}, {"_type": "Template26", "hole0": "WeaponSelector", "hole1": "EnemyPlayer"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 63, 205, "Player", "Selector", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), Give(ChangeHealth(2))], PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.969444848713351, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.6175050735473633, -0.0005950927734375, -0.1552727073431015, -3.4689903259277344e-05, -0.2368861436843872, -0.005164146423339844, 0.0, -0.3368684649467468, 0.0, -1.930140495300293, -1.71661376953125e-05, -0.2966921329498291, -3.814697265625e-06, -1.9073486328125e-06, -0.0006580352783203125, -1.52587890625e-05, -6.914113328093663e-06, -4.768370445162873e-07, -9.311037138104439e-05, -1.0728830375228426e-06], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeHealth"}]}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Character", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), Give(ChangeHealth(2))], CharacterSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -5.6085202851567075, "score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.6175050735473633, -0.0005950927734375, -0.1552727073431015, -3.4689903259277344e-05, -0.2368861436843872, -0.005164146423339844, 0.0, -0.3368684649467468, 0.0, -0.2067880630493164, -0.017248153686523438, -2.86102294921875e-05, -3.814697265625e-06, -2.3867180347442627, -0.00034677982330322266, -4.00543212890625e-05, -0.1279754638671875, -0.0001010894775390625, -1.9073486328125e-06, -0.04734337329864502, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.07942986488342285, -2.193440741393715e-05, -5.53131103515625e-05, -0.0003528594970703125, -0.00012969970703125, -1.1920919860131107e-06, -1.1920928244535389e-07, -0.00011114904918940738, -7.152555099310121e-07], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole0": "Heal", "hole1": 1}, {"_type": "Template23", "hole0": "Give", "hole2": 2, "hole1": "ChangeHealth"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}]}, "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole1": 6, "hole0": "Drakonid Crusher", "hole6": "PIRATE", "hole4": "minion_type", "hole7": "battlecry"}, {"_type": "Template8", "hole0": 6, "hole1": 6}]}]}}, {"choice_history": [69, 133, 248], "inferred_code": "", "score": -21.304485321044922, "score_history": [-0.004253387451171875, -0.0001163482666015625, -21.30011558532715], "model_output": {"_type": "Module", "body": []}}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -0.1801411773278403, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -0.0036163330078125, -2.503394853192731e-06, -0.00022206350695341825, 0.0, -0.00026416522450745106, 0.0, -3.0517578125e-05, -0.0052394866943359375, -0.00012969970703125, -3.5765515349339694e-07, 0.0, -4.065246321260929e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -2.347609377633006, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -2.288607597351074, 0.0, -0.0001220703125, -8.20159912109375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -0.00074005126953125, -0.0002155303955078125, -0.0035867691040039062, -2.384185791015625e-06, -0.00020132573263254017, 0.0, -0.00024783413391560316, 0.0, -3.4332275390625e-05, -0.00553131103515625, -0.0001354217529296875, -5.960719136055559e-07, 0.0, -4.053814336657524e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            RARE, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -4.1800865768102256, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -3.9788787364959717, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0003147125244140625, -1.9073486328125e-06, -0.162994384765625, 0.0, -0.013416290283203125, -0.0003757476806640625, -4.38690185546875e-05, 0.0, -7.62939453125e-06, -0.00061798095703125, -0.000179290771484375, -0.0035400390625, -2.622604142743512e-06, -0.0002335050521651283, 0.0, -0.0002651188406161964, 0.0, -3.0517578125e-05, -0.0051746368408203125, -0.000125885009765625, -3.5765515349339694e-07, 0.0, -4.1367660742253065e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.DREAM, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -4.787459447086093, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -4.641451835632324, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.0004558563232421875, 0.0, -0.11305725574493408, 0.0, -0.00785064697265625, -0.0004329681396484375, -4.76837158203125e-05, 0.0, -9.5367431640625e-06, -0.0006237030029296875, -0.00019073486328125, -0.0035915374755859375, -2.622604142743512e-06, -0.0002715234295465052, 0.0, -0.0002660724276211113, 0.0, -2.86102294921875e-05, -0.0051593780517578125, -0.00012969970703125, -3.5765515349339694e-07, 0.0, -3.9817707147449255e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DREAM"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.076898147066657, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -4.7548418045043945, -9.5367431640625e-06, -6.29425048828125e-05, -3.814697265625e-06, -0.00667572021484375, 0.0, -0.14354610443115234, 0.0, -9.5367431640625e-05, -0.0003910064697265625, -0.0001659393310546875, -0.007427215576171875, -7.152555099310121e-07, -0.00025340731372125447, 0.0, -0.0002762041112873703, 0.0, -1.9073486328125e-05, -0.003658294677734375, -7.62939453125e-05, -7.152802936616354e-07, 0.0, -2.5247049052268267e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.93708679240828, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -3.9788787364959717, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0003147125244140625, -1.9073486328125e-06, -1.9332046508789062, 0.0, -0.0001239776611328125, -7.82012939453125e-05, -7.62939453125e-06, 0.0, -7.62939453125e-06, -0.0006866455078125, -0.0002079010009765625, -0.0035142898559570312, -2.503394853192731e-06, -0.00022242104751057923, 0.0, -0.0002508143079467118, 0.0, -3.4332275390625e-05, -0.0055370330810546875, -0.00012969970703125, -4.768635335494764e-07, 0.0, -4.125310806557536e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, MINION_TYPE.BEAST, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.9625335315097345, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -5.482382774353027, -0.0002155303955078125, -4.57763671875e-05, -2.503394853192731e-06, -2.729860534600448e-05, -1.33514404296875e-05, -7.62939453125e-06, -2.2530302885570563e-05, 0.0, -0.00090789794921875, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.0001379251480102539, 0.0, -0.17328321933746338, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -0.0003777742385864258, 0.0, -0.08701527118682861, 0.0, -0.004993438720703125, -0.0015420913696289062, -1.33514404296875e-05, -2.0265579223632812e-06, -0.001110076904296875, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -0.0018314123153686523, -3.4689903259277344e-05, -0.1721271276473999, 0.0, -0.0017185211181640625, -0.0026149749755859375, -0.0002574920654296875, -0.01910543441772461, -1.4662635294371285e-05, -0.0005324873491190374, 0.0, -0.0020735333673655987, 0.0, -2.09808349609375e-05, -0.0036869049072265625, -7.62939453125e-05, -1.0729199857451022e-06, 0.0, -1.867758692242205e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.213087522226914, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -6.0367231369018555, -1.9073486328125e-06, -2.53915750363376e-05, 0.0, -0.0002838312357198447, 0.0, -2.09808349609375e-05, -0.0052967071533203125, -0.000110626220703125, -2.3844677343731746e-07, 0.0, -2.9304414056241512e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            RARE, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.22111257304752, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -6.020258903503418, 0.0, -1.52587890625e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0002231597900390625, 0.0, -0.16431236267089844, 0.0, -0.011636734008789062, -0.0003299713134765625, -5.340576171875e-05, 0.0, -9.5367431640625e-06, -0.000621795654296875, -0.00019073486328125, -0.003711700439453125, -2.622604142743512e-06, -0.00023493524349760264, 0.0, -0.0002690527471713722, 0.0, -2.86102294921875e-05, -0.005218505859375, -0.00012969970703125, -3.5765515349339694e-07, 0.0, -4.0414335671812296e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.588403683514088, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -6.4964704513549805, -1.9073486328125e-06, -0.03116607666015625, -0.0004520416259765625, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.0010128021240234375, -0.000308990478515625, -0.004510045051574707, -2.861022494471399e-06, -0.0005084204603917897, 0.0, -0.00029504013946279883, 0.0, -3.24249267578125e-05, -0.0053730010986328125, -0.0001468658447265625, -2.3844677343731746e-07, 0.0, -4.172435728833079e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.DREAM, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.972767435777513, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -4.641451835632324, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.0004558563232421875, 0.0, -2.306065559387207, 0.0, -9.1552734375e-05, -8.392333984375e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -0.0007266998291015625, -0.000213623046875, -0.0035190582275390625, -2.503394853192731e-06, -0.0002610357478260994, 0.0, -0.0002499797847121954, 0.0, -3.4332275390625e-05, -0.0055694580078125, -0.0001354217529296875, -5.960719136055559e-07, 0.0, -3.922742325812578e-05, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DREAM"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        super().__init__('Imp', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE,\n            True, MINION_TYPE.BEAST)\n", "score": -7.405747358230627, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -0.0036163330078125, -2.503394853192731e-06, -0.00022206350695341825, 0.0, -0.00026416522450745106, 0.0, -3.0517578125e-05, -5.789250373840332, -0.0021686553955078125, -0.0017604827880859375, 0.0, -0.023581385612487793, 0.0, -0.013097763061523438, 0.0, -0.013105392456054688, -0.0041656494140625, -1.33514404296875e-05, -0.00015424491721205413, -1.1920922133867862e-06, -0.0005397796630859375, -1.52587890625e-05, -0.0029883303213864565, 0.0, -0.000263214111328125, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.00016069412231445312, 0.0, -0.9425408840179443, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -7.62939453125e-06, -0.0014972686767578125, -1.9073486328125e-06, -0.28622448444366455, 0.0, -0.0057811737060546875, -0.001659393310546875, -1.1563301086425781e-05, -2.861022494471399e-06, -0.000186920166015625, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -0.0007958412170410156, -2.3245811462402344e-05, -0.1409449577331543, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        super().__init__('Imp', 1, CHARACTER_CLASS.DREAM, CARD_RARITY.RARE,\n            True, MINION_TYPE.BEAST)\n", "score": -7.521768633750952, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -0.0036163330078125, -2.503394853192731e-06, -0.00022206350695341825, 0.0, -0.00026416522450745106, 0.0, -3.0517578125e-05, -5.789250373840332, -0.0021686553955078125, -0.0017604827880859375, 0.0, -0.023581385612487793, 0.0, -0.013097763061523438, 0.0, -0.013105392456054688, -0.0041656494140625, -1.33514404296875e-05, -0.00015424491721205413, -1.1920922133867862e-06, -0.0005397796630859375, -1.52587890625e-05, -0.0029883303213864565, 0.0, -0.000263214111328125, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.00016069412231445312, 0.0, -1.0866458415985107, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -5.91278076171875e-05, -1.33514404296875e-05, -0.002838134765625, -2.0265579223632812e-06, -0.2611600160598755, 0.0, -0.0050868988037109375, -0.0011234283447265625, -1.1563301086425781e-05, -2.9802317840221804e-06, -0.00018310546875, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -0.0007977485656738281, -2.5153160095214844e-05, -0.1377500295639038, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DREAM"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}], "hole1": "__init__"}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "5", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -8.926149376903481, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -0.0036163330078125, -2.503394853192731e-06, -0.00022206350695341825, 0.0, -0.00026416522450745106, 0.0, -3.0517578125e-05, -6.365387916564941, -0.0035228729248046875, 8.526512829121202e-14, -5.960462772236497e-07, -7.87313183536753e-06, -3.576278118089249e-07, -1.0610792636871338, -2.0265579223632812e-06, -0.017821311950683594, -0.0021190643310546875, -0.0008873729966580868, -7.62939453125e-06, -0.001064300537109375, -0.30428314208984375, -0.000507354736328125, -0.46883994340896606, -5.841255187988281e-06, -0.2133474349975586, -3.814697265625e-06, -0.31237196922302246, -1.71661376953125e-05, -0.000141143798828125], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template37", "hole0": {"_type": "Template39", "hole0": "super"}, "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE"}, {"_type": "NameConstant", "value": true}], "hole1": "__init__"}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template22", "hole0": 1, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Template32", "hole0": 5}, {"_type": "Template39", "hole0": "SelfSelector"}]}, "hole2": "enrage", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Imp", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(1, 1)\n", "score": -10.178617526563805, "score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -10.045226097106934, -0.0004863739013671875, 0.0, -0.0016193384071812034, -5.96059635427082e-07, -1.311301275563892e-06, -0.0484386682510376, 0.0, -2.5272365746786818e-05, 0.0, -0.029999373480677605, 0.0, -3.0517578125e-05, -0.050187110900878906, -0.0013751983642578125, -3.576301423890982e-07, 0.0, -6.73648901283741e-06, -1.1920928244535389e-07], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template14", "hole0": "Imp", "hole2": "DRUID", "hole1": 1}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "Imp", "hole6": [{"_type": "Template27", "hole0": 1, "hole1": 1}], "hole4": "_"}}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 19, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (1))])\n", "score": -3.0153373741043055, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.0373343229293823, -1.71661376953125e-05, -0.27425575256347656, -0.0004863739013671875, -0.15056324005126953, -0.21976184844970703, -8.7738037109375e-05, -0.0027091670781373978, -3.540512261679396e-05, -0.0023029299918562174, -0.008255600929260254, 0.0, -0.0477890744805336, -1.9073486328125e-06, -0.0023097991943359375, -2.6702880859375e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.0001194477008539252, -0.0012017488479614258, -3.814697265625e-06, -0.0770941898226738, -1.1444091796875e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}, "hole2": "buffs", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 19, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (1))])\n", "score": -3.2289645631783372, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.0334339141845703, -1.52587890625e-05, -0.30129432678222656, -0.00049591064453125, -0.15886211395263672, -0.2348461151123047, -7.82012939453125e-05, -0.002445966936647892, -3.278252188465558e-05, -0.0023042273242026567, -0.00816202163696289, 0.0, -0.047281570732593536, -1.9073486328125e-06, -0.00225830078125, -2.6702880859375e-05, -4.57763671875e-05, -1.9073486328125e-06, -0.00011742114293156192, -0.0011979341506958008, -3.814697265625e-06, -0.07722782343626022, -9.5367431640625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}, "hole2": "buffs", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.53634238414746, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2003859281539917, -1.1444091796875e-05, -0.00261688232421875, -0.0008869171142578125, -0.00035250186920166016, 0.0, -5.53131103515625e-05, -0.000156402587890625, -0.0019435882568359375, -0.0001049041748046875, -1.1444091796875e-05, -0.10154137760400772, -0.3587137460708618, -0.0001926422119140625, -0.0070934295654296875, -6.67572021484375e-05, -8.96453857421875e-05, -0.28127074241638184, 0.0, -7.62939453125e-06, -4.38690185546875e-05, -4.315376281738281e-05, -2.7894973754882812e-05, -1.9073486328125e-05, -8.0108642578125e-05, -0.000965118408203125, -0.0001544952392578125, -0.000102996826171875, 0.0, -0.0015468597412109375, -2.86102294921875e-05, -0.38664165139198303, -1.9073486328125e-06, -0.0002537965774536133, -1.9073486328125e-06, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.8000196232380716, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.2947120666503906, -1.1444091796875e-05, -0.0023593902587890625, -0.0009222030639648438, -0.00036585330963134766, 0.0, -5.91278076171875e-05, -0.000156402587890625, -0.001953125, -0.000102996826171875, -1.1444091796875e-05, -0.10319111496210098, -0.3582245111465454, -0.0001926422119140625, -0.007130622863769531, -6.67572021484375e-05, -9.1552734375e-05, -0.2809569835662842, 0.0, -7.62939453125e-06, -4.38690185546875e-05, -4.315376281738281e-05, -2.9802322387695312e-05, -1.9073486328125e-05, -8.0108642578125e-05, -0.0009632110595703125, -0.0001544952392578125, -0.000102996826171875, 0.0, -0.0015468597412109375, -2.86102294921875e-05, -0.38740721344947815, -1.9073486328125e-06, -0.0002537965774536133, -1.9073486328125e-06, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.281519364628579, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2003859281539917, -1.1444091796875e-05, -0.00261688232421875, -0.0008869171142578125, -0.00035250186920166016, 0.0, -5.53131103515625e-05, -0.000156402587890625, -0.0019435882568359375, -0.0001049041748046875, -1.1444091796875e-05, -0.10154137760400772, -1.3682619333267212, -0.00022611975145991892, -0.001861572265625, -0.0043582916259765625, -1.1444091796875e-05, -0.04497730731964111, 0.0, -7.62939453125e-06, -5.14984130859375e-05, -3.8266178307821974e-05, -2.2411340978578664e-05, -3.814697265625e-05, -7.82012939453125e-05, -0.0010652542114257812, -0.0001697540283203125, -0.0001010894775390625, 0.0, -0.00156402587890625, -2.86102294921875e-05, -0.35941529273986816, -1.9073486328125e-06, -0.00024235248565673828, -1.9073486328125e-06, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "3", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n", "score": -4.300329061078841, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2003859281539917, -1.1444091796875e-05, -0.00261688232421875, -0.0008869171142578125, -0.00035250186920166016, 0.0, -5.53131103515625e-05, -0.000156402587890625, -0.0019435882568359375, -0.0001049041748046875, -1.1444091796875e-05, -0.10154137760400772, -0.3587137460708618, -0.0001926422119140625, -0.0070934295654296875, -6.67572021484375e-05, -8.96453857421875e-05, -0.28127074241638184, 0.0, -7.62939453125e-06, -4.38690185546875e-05, -4.315376281738281e-05, -2.7894973754882812e-05, -1.9073486328125e-05, -8.0108642578125e-05, -0.000965118408203125, -0.0001544952392578125, -0.000102996826171875, 0.0, -0.0015468597412109375, -2.86102294921875e-05, -1.1507675647735596, -9.5367431640625e-06, -9.1552734375e-05, -7.748603820800781e-06, -1.52587890625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 3}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "<UNK>", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.547213147988472, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.2947120666503906, -1.1444091796875e-05, -0.0023593902587890625, -0.0009222030639648438, -0.00036585330963134766, 0.0, -5.91278076171875e-05, -0.000156402587890625, -0.001953125, -0.000102996826171875, -1.1444091796875e-05, -0.10319111496210098, -1.3694359064102173, -0.00022647730656899512, -0.001865386962890625, -0.004387855529785156, -1.1444091796875e-05, -0.04500019550323486, 0.0, -7.62939453125e-06, -5.14984130859375e-05, -3.8266178307821974e-05, -2.2411340978578664e-05, -3.814697265625e-05, -7.82012939453125e-05, -0.0010633468627929688, -0.0001697540283203125, -0.0001010894775390625, 0.0, -0.00156402587890625, -2.86102294921875e-05, -0.360204815864563, -1.9073486328125e-06, -0.00024235248565673828, -1.9073486328125e-06, -5.7220458984375e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "3", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n", "score": -4.561595053869709, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.2947120666503906, -1.1444091796875e-05, -0.0023593902587890625, -0.0009222030639648438, -0.00036585330963134766, 0.0, -5.91278076171875e-05, -0.000156402587890625, -0.001953125, -0.000102996826171875, -1.1444091796875e-05, -0.10319111496210098, -0.3582245111465454, -0.0001926422119140625, -0.007130622863769531, -6.67572021484375e-05, -9.1552734375e-05, -0.2809569835662842, 0.0, -7.62939453125e-06, -4.38690185546875e-05, -4.315376281738281e-05, -2.9802322387695312e-05, -1.9073486328125e-05, -8.0108642578125e-05, -0.0009632110595703125, -0.0001544952392578125, -0.000102996826171875, 0.0, -0.0015468597412109375, -2.86102294921875e-05, -1.149121880531311, -9.5367431640625e-06, -9.1552734375e-05, -7.748603820800781e-06, -1.52587890625e-05], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template39", "hole0": "BothPlayer"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 3}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 239, 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.6313113008154545, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -2.5627615451812744, 0.0, -0.0777897834777832, 0.0, -0.12883567810058594, -3.0517578125e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.0018351078033447266, -5.7220458984375e-06, -0.0043430328369140625, -0.029259681701660156, -0.000308990478515625, -2.6702880859375e-05, -5.7220458984375e-06, -0.08316684514284134, -0.00015353914932347834, -1.33514404296875e-05, -0.0017824172973632812, -0.0003681182861328125, -0.0005855560302734375, -0.0003204345703125, -6.29425048828125e-05, -0.00014423634274862707, -1.311301275563892e-06, -0.00015985632489901036, -0.004969120025634766, 0.0, -0.09412000328302383, 0.0, -0.00115966796875, -2.86102294921875e-05, -2.47955322265625e-05, 0.0, -0.00026166439056396484, -0.000885009765625, -3.814697265625e-06, -0.20064544677734375, -1.1444091796875e-05, -0.0051784515380859375, -2.288818359375e-05, -0.005383968353271484, -3.4332275390625e-05, -3.814697265625e-06, -0.43784141540527344, -0.01039886474609375, -7.05718994140625e-05, -7.62939453125e-06, -0.0010514259338378906, -0.0002880096435546875, -5.7220458984375e-06, -9.5367431640625e-06, -0.0052623748779296875, -0.040984153747558594, -0.003961465321481228, -2.622604142743512e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.002731903688982129, -1.52587890625e-05, 0.0, -1.9073486328125e-05, -0.0003185272216796875, -3.814697265625e-06, -0.004661917686462402, 0.0, -0.000682830810546875, -1.9073486328125e-05, -0.0008869171142578125, 0.0, -0.0022045373916625977, -1.2636180144909304e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, 0.0, -0.000820159912109375, 0.0, -0.5777363777160645, 0.0, -7.82012939453125e-05, -0.0002155303955078125, -7.62939453125e-06, -0.000545501708984375, -3.814697265625e-06, -0.000141143798828125, -0.000762939453125, -0.0054651787504553795, -1.9073486328125e-06, -4.792213439941406e-05, 0.0, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -0.04543304443359375, -5.7220458984375e-06, -0.02191925048828125, 0.0, -5.364403477869928e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "battlecry", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(condition=\n            IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.859604628610427, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2003859281539917, -1.1444091796875e-05, -0.00261688232421875, -0.0008869171142578125, -0.00035250186920166016, 0.0, -5.53131103515625e-05, -0.000156402587890625, -0.0019435882568359375, -0.0001049041748046875, -1.1444091796875e-05, -0.10154137760400772, -0.3587137460708618, -0.0001926422119140625, -0.0070934295654296875, -6.67572021484375e-05, -8.96453857421875e-05, -1.4409072399139404, -1.9073486328125e-06, -0.06331348419189453, -3.814697265625e-06, -0.035733699798583984, -0.007918775081634521, -8.0108642578125e-05, -0.0003185272216796875, -0.0015611648559570312, -0.0002849102020263672, -0.00019085407257080078, -1.9073486328125e-06, -0.002643585205078125, -4.38690185546875e-05, -0.4411827325820923, -1.9073486328125e-06, -0.00026357173919677734, -1.9073486328125e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Character", "Damaged", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CharacterDamaged(condition=\n            IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -5.124073372680172, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.2947120666503906, -1.1444091796875e-05, -0.0023593902587890625, -0.0009222030639648438, -0.00036585330963134766, 0.0, -5.91278076171875e-05, -0.000156402587890625, -0.001953125, -0.000102996826171875, -1.1444091796875e-05, -0.10319111496210098, -0.3582245111465454, -0.0001926422119140625, -0.007130622863769531, -6.67572021484375e-05, -9.1552734375e-05, -1.4419677257537842, -1.9073486328125e-06, -0.06238269805908203, -3.814697265625e-06, -0.035803794860839844, -0.007853522896766663, -8.0108642578125e-05, -0.0003185272216796875, -0.0015172958374023438, -0.0002849102020263672, -0.00019085407257080078, -1.9073486328125e-06, -0.0026531219482421875, -4.38690185546875e-05, -0.4423239231109619, -1.9073486328125e-06, -0.00026547908782958984, -1.9073486328125e-06, -3.814697265625e-06], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Effect", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template39", "hole0": "IsMinion"}}]}, {"_type": "Template19", "hole0": "Give", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}]}]}, "hole2": "effects", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "If", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, auras=[Aura(ManaChange(-0), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.258170403845028, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2650431394577026, -1.9073486328125e-06, -0.0037097930908203125, -0.018675804138183594, -0.04954838752746582, -9.5367431640625e-06, -0.18603897094726562, -0.029569625854492188, -0.6106128692626953, -0.000308990478515625, -2.86102294921875e-05, -0.12690484523773193, -0.006295369006693363, -2.384185791015625e-06, -1.1444091796875e-05, -0.000522613525390625, -0.0009250640869140625, -9.72747802734375e-05, -0.0006847381591796875, -0.0003604888916015625, -0.5414499044418335, -0.015972327440977097, -0.0003452301025390625, -0.2981405258178711, -6.29425048828125e-05, -1.9073486328125e-06, -0.02488689310848713, -0.0013163089752197266, 0.0, -8.0108642578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.003689885139465332, -1.71661376953125e-05, -0.3564767837524414, -1.9073486328125e-05, -0.0002536773681640625, -3.814697265625e-06, -0.0024490354117006063, -4.124616680201143e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0020180940628051758, 0.0, -0.5205991268157959, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 0}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}]}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "If", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, auras=[Aura(ManaChange(-0), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.360267432849682, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.9456933736801147, 0.0, -0.019457697868347168, 0.0, -0.02871990203857422, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -4.1961669921875e-05, -0.00035858154296875, -0.0037728548049926758, 0.0, -5.7220458984375e-06, 0.0, -4.9591064453125e-05, 0.0, -0.0001163482666015625, -0.018819808959960938, -0.0001354217529296875, -0.07968258857727051, 0.0, -6.58011922496371e-05, 0.0, -1.2038650512695312, 0.0, -0.0036945343017578125, -0.019548416137695312, -0.0496675968170166, -7.62939453125e-06, -0.18494510650634766, -0.031179428100585938, -0.610835075378418, -0.00030517578125, -2.86102294921875e-05, -0.12582433223724365, -0.006220157723873854, -2.384185791015625e-06, -1.1444091796875e-05, -0.0005245208740234375, -0.000919342041015625, -9.5367431640625e-05, -0.0006847381591796875, -0.0003604888916015625, -0.5340420007705688, -0.015906859189271927, -0.000339508056640625, -0.3008441925048828, -6.29425048828125e-05, -1.9073486328125e-06, -0.02460508979856968, -0.001314401626586914, 0.0, -8.0108642578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.0036755800247192383, -1.71661376953125e-05, -0.35665130615234375, -1.9073486328125e-05, -0.0002536773681640625, -3.814697265625e-06, -0.002452015643939376, -4.136537609156221e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0020200014114379883, 0.0, -0.5203254222869873, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PALADIN", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 0}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}]}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 239, 39, 110, 21, 134, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.MECH))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -5.382870937830361, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -2.5627615451812744, 0.0, -0.0777897834777832, 0.0, -0.12883567810058594, -3.0517578125e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.0018351078033447266, -5.7220458984375e-06, -0.0043430328369140625, -0.029259681701660156, -0.000308990478515625, -2.6702880859375e-05, -5.7220458984375e-06, -0.08316684514284134, -0.00015353914932347834, -1.33514404296875e-05, -0.0017824172973632812, -0.0003681182861328125, -0.0005855560302734375, -0.0003204345703125, -6.29425048828125e-05, -0.00014423634274862707, -1.311301275563892e-06, -0.00015985632489901036, -0.004969120025634766, 0.0, -0.09412000328302383, 0.0, -0.00115966796875, -2.86102294921875e-05, -2.47955322265625e-05, 0.0, -0.00026166439056396484, -0.000885009765625, -3.814697265625e-06, -0.20064544677734375, -1.1444091796875e-05, -0.0051784515380859375, -2.288818359375e-05, -0.005383968353271484, -3.4332275390625e-05, -3.814697265625e-06, -0.43784141540527344, -0.01039886474609375, -7.05718994140625e-05, -7.62939453125e-06, -0.0010514259338378906, -0.0002880096435546875, -5.7220458984375e-06, -9.5367431640625e-06, -0.0052623748779296875, -0.040984153747558594, -0.003961465321481228, -2.622604142743512e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.002731903688982129, -1.52587890625e-05, 0.0, -1.9073486328125e-05, -0.0003185272216796875, -3.814697265625e-06, -0.004661917686462402, 0.0, -0.000682830810546875, -1.9073486328125e-05, -0.0008869171142578125, 0.0, -0.0022045373916625977, -1.2636180144909304e-05, 0.0, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, 0.0, -0.000820159912109375, 0.0, -1.325289249420166, 0.0, -5.340576171875e-05, -0.0002593994140625, -7.62939453125e-06, -0.000446319580078125, -1.9073486328125e-06, -0.0001354217529296875, -0.0009441375732421875, -0.007079771254211664, -3.814697265625e-06, -4.0411949157714844e-05, 0.0, -1.33514404296875e-05, 0.0, -5.53131103515625e-05, -0.049083709716796875, -5.7220458984375e-06, -0.020545125007629395, 0.0, -6.437280717364047e-06, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "PRIEST", "hole3": "battlecry", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "List", "elts": [{"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeAttack"}, {"_type": "Template23", "hole0": "Buff", "hole2": 1, "hole1": "ChangeHealth"}]}]}, {"_type": "Template39", "hole0": "SelfSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Num", "n": 0}}], "args": [{"_type": "Template29", "hole0": "Count", "hole3": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}]}}], "hole1": {"_type": "Name", "id": "CardSelector"}}]}]}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template27", "hole0": 2, "hole1": 1}], "hole4": "player"}}, {"choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "'re", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 16, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, auras=[Aura(ManaChange(-0), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.9239228147337, "score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.2650431394577026, -1.9073486328125e-06, -0.0037097930908203125, -0.018675804138183594, -0.04954838752746582, -9.5367431640625e-06, -0.18603897094726562, -0.029569625854492188, -0.6106128692626953, -0.000308990478515625, -2.86102294921875e-05, -0.12690484523773193, -0.006295369006693363, -2.384185791015625e-06, -1.1444091796875e-05, -0.000522613525390625, -0.0009250640869140625, -9.72747802734375e-05, -0.0006847381591796875, -0.0003604888916015625, -1.2072023153305054, -0.015972327440977097, -0.0003452301025390625, -0.2981405258178711, -6.29425048828125e-05, -1.9073486328125e-06, -0.02488689310848713, -0.0013163089752197266, 0.0, -8.0108642578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.003689885139465332, -1.71661376953125e-05, -0.3564767837524414, -1.9073486328125e-05, -0.0002536773681640625, -3.814697265625e-06, -0.0024490354117006063, -4.124616680201143e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0020180940628051758, 0.0, -0.5205991268157959, 0.0], "model_output": {"_type": "Template1", "hole2": [{"_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole1": 1, "hole0": "Twilight Whelp", "hole4": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}], "hole3": "create_minion", "hole1": "MinionCard", "hole0": "TwilightWhelp", "hole6": [{"_type": "Template22", "hole0": 2, "hole3": {"_type": "Template38", "hole0": "Aura", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 0}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}]}}]}]}, "hole2": "auras", "hole1": 1}], "hole4": "player"}}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
