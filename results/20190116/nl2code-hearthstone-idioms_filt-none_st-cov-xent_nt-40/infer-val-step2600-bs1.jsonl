{"beams": [{"score": -0.6265862600990886, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -4.9591064453125e-05, -7.62939453125e-06, -5.7220458984375e-06, -0.00041692235390655696, -0.0002790385333355516, -8.344646857949556e-07, -1.9073486328125e-06, -0.000263214111328125, -0.0051784515380859375, -3.4332275390625e-05, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.14984130859375e-05, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -0.0023441314697265625, -7.62939453125e-06, -5.7220458984375e-05, -1.52587890625e-05, -0.000194549560546875, -0.00171465368475765, -2.384185791015625e-05, -5.364418029785156e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.71661376953125e-05, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.004008889198303223, 0.0, -4.38690185546875e-05, -0.00020599365234375, 0.0, -0.0008716583251953125, 0.0, -4.57763671875e-05, 0.0, -0.0003871917724609375, -1.9073486328125e-06, 0.0, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -0.3845663070678711, -2.86102294921875e-05, -6.67572021484375e-05, -0.0058611417189240456, -0.0018630019621923566, -5.91278076171875e-05, -0.0004558563232421875, -0.2172403335571289, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 8)\n", "choice_history": [93, 145, 230, 101, 125, "<UNK>", "Blade", "<EOS>", 216, 86, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "<UNK>", " ", "Blade", "<EOS>", 77, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 88, 104, 130, "create_weapon", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 123, 23, 146, "Weapon", "<EOS>", 217, 72, 84, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "<UNK>Blade", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Blade"}, {"_type": "Template22"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_weapon", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template16"}, {"_type": "Template34"}], "func": {"_type": "Name", "id": "Weapon"}}}]}], "bases": [{"_type": "Template39"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"score": -0.05988046399306057, "score_history": [0.0, -3.814697265625e-06, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -0.000336590368533507, -0.0015714927576482296, -1.311301275563892e-06, -2.6702880859375e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, 0.0, 0.0, 0.0, -4.1961669921875e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-05, -5.91278076171875e-05, -0.0006256103515625, -3.814697265625e-06, -0.0002880096435546875, -1.9073486328125e-06, -9.5367431640625e-06, -4.529942543740617e-06, -1.430511474609375e-05, -3.933906555175781e-06, -3.4570634852570947e-06, -0.0001010894775390625, -5.340576171875e-05, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -9.5367431640625e-06, 0.0, -0.000518798828125, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -2.47955322265625e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -7.748603820800781e-06, -7.62939453125e-06, 0.0, -0.004489898681640625, -2.09808349609375e-05, -0.04754555970430374, -3.814689989667386e-06, -0.003908338025212288, -1.1920928244535389e-07, 0.0], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [93, 145, 230, 101, 125, "Boulderfist", "Ogre", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Boulderfist", " ", "Ogre", "<EOS>", 81, 89, 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "6", "<EOS>", "6", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "BoulderfistOgre", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Template28"}, {"_type": "Template7"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 6, "hole1": 6}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"score": -1.1728241875713366, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -1.5497195136049413e-06, -0.007282907608896494, -1.9073486328125e-06, -4.76837158203125e-05, -4.38690185546875e-05, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -2.6702880859375e-05, -7.62939453125e-06, -0.00177764892578125, -1.9073486328125e-06, -6.103515625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -2.6225747205899097e-05, -1.2755393072438892e-05, -2.503394853192731e-06, -7.271740287251305e-06, -9.5367431640625e-06, 0.0, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.00014793872833251953, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -6.67572021484375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.00029754638671875, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -0.000179290771484375, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.728534698486328e-05, 0.0, -1.9073486328125e-06, 0.0, -2.1457672119140625e-05, -3.4570634852570947e-06, -0.4098224639892578, -0.000244140625, -0.39361572265625, -0.0001964569091796875, -0.004702568054199219, -0.000274658203125, 0.0, -0.0007171630859375, -0.0012047255877405405, 0.0, -0.0011472702026367188, -0.2424764633178711, -1.9073486328125e-06, -7.2479248046875e-05, -0.000133514404296875, -4.00543212890625e-05, -1.9073486328125e-06, -0.0012454986572265625, -0.06019722670316696, 0.0, -1.9073486328125e-06, -0.04656410217285156, -1.9073486328125e-06], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "choice_history": [93, 145, 230, 101, 125, "Deadly", "Poison", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Deadly", " ", "Poison", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 230, 108, 103, 129, 41, 15, 116, 32, "minions", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 41, "change_temp_attack", "<EOS>", 216, 69, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DeadlyPoison", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "For", "iter": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "change_temp_attack"}}}], "target": {"_type": "Template30"}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"score": -0.14088750620197743, "score_history": [-7.62939453125e-06, -1.9073486328125e-05, -2.47955322265625e-05, -1.1444091796875e-05, -9.34600830078125e-05, -0.011453942395746708, -0.0017540593398734927, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.576278118089249e-07, -1.9073486328125e-06, 0.0, -0.0006389617919921875, -3.4332275390625e-05, -0.0001392364501953125, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.7762025890988298e-05, -3.457067577983253e-05, -4.2319297790527344e-05, 0.0, -0.0001506805419921875, -7.62939453125e-06, 0.0, 0.0, -1.9073486328125e-06, -3.254413604736328e-05, 0.0, -0.0007739067077636719, 0.0, -7.05718994140625e-05, -0.07109642028808594, -2.09808349609375e-05, -0.007501721382141113, -1.9073486328125e-06, -2.6702880859375e-05, -0.0008544921875, -5.53131103515625e-05, -9.5367431640625e-06, -2.86102294921875e-05, -5.53131103515625e-05, -0.0002346038818359375, 0.0, -0.00012123426131438464, -9.035672701429576e-05, -1.1444091796875e-05, -0.0012149810791015625, -0.00030517578125, -6.67572021484375e-05, -5.7220458984375e-06, 0.0, -0.03850865364074707, -0.0009336471557617188, 0.0, -0.00012969970703125, -1.1444091796875e-05, -0.00014138221740722656, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -0.000580115825869143, -6.687641143798828e-05, -1.9073486328125e-06, -6.29425048828125e-05, -0.0002346038818359375, -1.9073486328125e-06, -0.0004100799560546875, -0.000102996826171875, -0.00016474722360726446, -0.00021374225616455078, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, 0.0, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -1.3589859008789062e-05, 0.0, -1.33514404296875e-05, -0.0003204345703125, -1.1444091796875e-05, -0.00015199178596958518, -2.825220326485578e-05, -0.0012786388397216797, -4.410734163684538e-06, 0.0], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [93, 145, 230, 101, 125, "Fire", "Elemental", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Fire", " ", "Elemental", "<EOS>", 81, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 88, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 23, 146, "Damage", "<EOS>", 216, 72, 58, 122, 23, 146, "Character", "Selector", "<EOS>", 225, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "User", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "6", "<EOS>", "5", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FireElemental", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Template28"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Name", "id": "Damage"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "UserPicker"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 6, "hole1": 5}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"score": -0.34202258618412174, "score_history": [-3.814697265625e-06, -3.4332275390625e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -5.6622808187967166e-05, -6.949660019017756e-05, -9.238360507879406e-05, -7.62939453125e-06, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -0.0021266937255859375, -2.6702880859375e-05, -3.814697265625e-06, -2.47955322265625e-05, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -5.602820692729438e-06, -1.251697449333733e-05, -2.0265579223632812e-06, 0.0, -8.7738037109375e-05, -0.0001373291015625, -2.09808349609375e-05, -0.0002307891845703125, -3.814697265625e-06, -0.0003854036331176758, -1.9073486328125e-06, -0.0659637451171875, -0.0001220703125, -0.0001010894775390625, -1.9073486328125e-05, -0.2602367401123047, -0.00144195556640625, -0.0002660415484569967, -0.00024434918304905295, -0.0088348388671875, 0.0, -0.00032162657589651644, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0001010894775390625, 0.0, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, 0.0, -7.62939453125e-06, -0.000591278076171875, -7.62939453125e-06, -1.0132769602932967e-05, -1.1920928244535389e-07, -7.355213165283203e-05, -7.152531907195225e-06, 0.0], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [93, 145, 230, 101, 125, "Gnomish", "Inventor", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Gnomish", " ", "Inventor", "<EOS>", 76, 89, 88, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 87, 193, "Draw", "<EOS>", 87, 193, "Player", "Selector", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "4", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GnomishInventor", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Template5", "hole0": "Draw"}, {"_type": "Template5", "hole0": "PlayerSelector"}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 4}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"score": -1.0243414629794643, "score_history": [-1.9073486328125e-06, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -5.7220458984375e-06, -2.3841830625315197e-06, -3.1351610232377425e-05, -7.676783570786938e-05, -9.5367431640625e-06, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -3.814697265625e-06, -6.675719760096399e-06, -3.814697265625e-06, -4.00543212890625e-05, -4.9591064453125e-05, -1.33514404296875e-05, -9.72747802734375e-05, -1.9073486328125e-06, -0.0014934539794921875, -1.71661376953125e-05, -4.57763671875e-05, -3.814697265625e-06, -1.71661376953125e-05, -4.9113114073406905e-05, -1.2040138244628906e-05, -5.125998541188892e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, 0.0, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -0.0004178285598754883, 0.0, -8.392333984375e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -0.00010883808135986328, 0.0, -5.7220458984375e-06, 0.0, -0.0001621246337890625, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.001819610595703125, -1.52587890625e-05, -7.62939453125e-06, 0.0, -7.343292236328125e-05, 0.0, -0.0003185272216796875, -0.000156402587890625, -0.00014984607696533203, -2.9802317840221804e-06, -0.011752128601074219, -9.5367431640625e-05, -0.000102996826171875, -3.4332275390625e-05, -3.0517578125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.71661376953125e-05, -0.0003833770751953125, -5.7220458984375e-06, -0.026531219482421875, -0.002485159784555435, -0.00015377969248220325, -0.048906683921813965, 0.0, -5.7220458984375e-06, -0.3566007614135742, -4.9591064453125e-05, -9.5367431640625e-06, -0.001720428466796875, -0.01865386962890625, -1.1444091796875e-05, -5.7220458984375e-06, -3.0517578125e-05, -1.71661376953125e-05, -0.0036144256591796875, -0.010301709175109863, -0.0006172657012939453, -0.3759269714355469, -1.9073486328125e-06, -5.7220458984375e-06, -0.16071224212646484, -5.7220458984375e-06], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(4)\n", "choice_history": [93, 145, 230, 101, 125, "Heroic", "Strike", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Heroic", " ", "Strike", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "change_temp_attack", "<EOS>", 216, 69, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "increase_armor", "<EOS>", 216, 76, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "HeroicStrike", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Heroic Strike"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "change_temp_attack"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template20"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "increase_armor"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"score": -1.9086594370860084, "score_history": [0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.00045932841021567583, -0.0004553949984256178, -0.0003486359491944313, -9.5367431640625e-06, -7.62939453125e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -0.0001392364501953125, -5.340576171875e-05, -3.814697265625e-06, -0.12372589111328125, -1.9073486328125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -2.288818359375e-05, -4.887573140877066e-06, -1.800059908418916e-05, -2.0265579223632812e-06, -7.62939453125e-06, -0.000667572021484375, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -0.0001759528968250379, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -5.14984130859375e-05, -2.09808349609375e-05, -0.000156402587890625, -8.7738037109375e-05, -5.7220458984375e-06, 0.0, -0.0361708402633667, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.000545501708984375, -0.000102996826171875, -0.0010280609130859375, -0.0006351470947265625, -0.0010814666748046875, -0.0003719329833984375, -0.0006561279296875, 0.0, -0.5035204887390137, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -0.028522491455078125, -2.6702880859375e-05, -2.6702880859375e-05, -7.2479248046875e-05, -0.0001068115234375, -0.0026702880859375, -0.0006313323974609375, -0.6538492441177368, -0.00015652149158995599, -0.0012607574462890625, -7.62939453125e-06, -1.1444091796875e-05, -9.1552734375e-05, -0.0001049041748046875, -3.814697265625e-06, -0.039226531982421875, 0.0, -0.014449357986450195, -2.1457672119140625e-06, -1.9073486328125e-06, -0.48242664337158203, -0.0016040802001953125, 0.0, -0.011342644691467285, -1.1920878932869527e-05, 0.0, -0.0001621246337890625, -1.9073486328125e-06], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, effects=[Effect(Damaged(), ActionTag(Heal(5),\n            HeroSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Ironbark", "Protector", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Ironbark", " ", "Protector", "<EOS>", 84, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 84, 84, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 87, 193, "Damaged", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Heal", "<EOS>", 216, 77, 87, 193, "Hero", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "IronbarkProtector", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Ironbark Protector"}, {"_type": "Template34"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template34"}, {"_type": "Template34"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Template5", "hole0": "HeroSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"score": -2.953787957245652, "score_history": [-8.96453857421875e-05, -5.340576171875e-05, -0.0003509521484375, -0.0002689361572265625, -0.000423431396484375, -7.831807306502014e-05, -0.000390528526622802, -0.01678859256207943, -0.00014460086822509766, -2.2649765014648438e-06, -2.47955322265625e-05, -6.866455078125e-05, -0.000362396240234375, -7.62939453125e-06, -5.7220458984375e-06, -4.172325134277344e-06, -1.33514404296875e-05, 0.0, -0.00026702880859375, -3.814697265625e-05, -0.0002689361572265625, -0.013883590698242188, -0.0016956329345703125, -1.33514404296875e-05, -0.000171661376953125, -1.52587890625e-05, -1.1444091796875e-05, -3.611976353568025e-05, -0.0003296109498478472, -0.0010892241261899471, -6.651869625784457e-05, -0.0023490190505981445, -0.00026082852855324745, -0.0019859815947711468, -3.933906555175781e-06, -0.0006542205810546875, -7.62939453125e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.841255187988281e-06, -0.0004980564117431641, -1.9073486328125e-06, -0.0004215240478515625, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0002002716064453125, -1.9073486328125e-06, -0.6760272979736328, 0.0, -2.288818359375e-05, 0.0, -0.0002079010009765625, -5.14984130859375e-05, -0.0002536773681640625, 0.0, -0.0001544952392578125, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -7.450580596923828e-05, -1.52587890625e-05, -0.0023156404495239258, -0.0001251697540283203, -8.96453857421875e-05, -0.0028162002563476562, -5.7220458984375e-06, -0.001239776611328125, -8.0108642578125e-05, -4.1961669921875e-05, -1.52587890625e-05, -0.0002079010009765625, -5.7220458984375e-06, -3.814697265625e-06, -0.017044782638549805, -7.83204595791176e-05, -0.00131988525390625, -0.0007534027099609375, -0.001949310302734375, -0.01104736328125, -0.014391899108886719, -0.001171112060546875, -0.004130363464355469, -0.0008220672607421875, -1.52587890625e-05, 0.0, -0.00022125244140625, 0.0, -0.0023801326751708984, -7.987022399902344e-06, -0.22051191329956055, 0.0, -1.1444091796875e-05, -0.0786905288696289, -4.57763671875e-05, -0.06792736053466797, -0.06722068786621094, -0.0006580352783203125, -9.5367431640625e-06, 0.0, -0.009467124938964844, 0.0, -0.009508848190307617, -8.225440979003906e-06, -0.006840675137937069, -5.364416665543104e-06, -3.0517578125e-05, -4.9591064453125e-05, -2.694129761948716e-05, -1.33514404296875e-05, 0.0, 0.0, -0.0001773834228515625, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, 0.0, -1.9073486328125e-06, -0.0001373291015625, -5.960462772236497e-07, -0.03460979461669922, -0.00049591064453125, -0.0122222900390625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.0077190399169921875, -0.10153079032897949, -0.00033414363861083984, -0.0002002716064453125, -0.0003204345703125, -3.62396240234375e-05, -0.00035381317138671875, -9.5367431640625e-05, -0.12365245819091797, -0.006167411804199219, 0.0, -5.7220458984375e-06, -0.6832647323608398, -0.00017547607421875, -0.5183134078979492, -5.7220458984375e-06, -1.1444091796875e-05, -0.000408172607421875, -6.103515625e-05, 0.0, -0.03547859191894531, -0.07226860523223877, -2.09808349609375e-05, -1.1444091796875e-05, -0.11192607879638672, -0.000213623046875], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(3), self)\n        self.target.increase_health(4)\n", "choice_history": [93, 145, 230, 101, 125, "Mark", "Of", "The", "Wild", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 225, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 205, "filter_func", "<EOS>", 20, 140, 3, 203, 209, 1, 202, "target", "<EOS>", 17, 119, 4, 217, 59, 126, 18, 121, 15, 116, 23, 146, "target", "<EOS>", "calculate_attack", "<EOS>", 213, 13, 216, 72, 58, 121, 15, 116, 23, 146, "target", "<EOS>", "spell_targetable", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 102, 128, 18, 123, 15, 116, 52, "heal", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_heal_power", "<EOS>", 216, 72, 74, 102, 128, 18, 123, 15, 116, 52, "increase_health", "<EOS>", 216, 76, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "MarkOfTheWild", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}, {"_type": "keyword", "arg": "filter_func", "value": {"_type": "Lambda", "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "target"}]}, "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "target"}, "attr": "calculate_attack"}}, "comparators": [{"_type": "Template16"}], "ops": [{"_type": "LtE"}]}, {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "target"}, "attr": "spell_targetable"}}], "op": {"_type": "And"}}}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_heal_power"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "heal"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template20"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "increase_health"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"score": -0.7222369636821071, "score_history": [-3.24249267578125e-05, -1.9073486328125e-06, -0.000171661376953125, -2.09808349609375e-05, -9.5367431640625e-06, -4.148419247940183e-05, -3.099436753473128e-06, -1.33514404296875e-05, -8.20159912109375e-05, -0.04590606689453125, -3.814697265625e-06, 0.0, -1.7046899301931262e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.007678985595703125, -0.00018310546875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.0994415283203125e-06, -1.3470649719238281e-05, -2.86102294921875e-05, -4.38690185546875e-05, 0.0, 0.0, 0.0, -2.1457672119140625e-06, 0.0, -0.0007421968621201813, 0.0, -0.0010833740234375, 0.0, -0.0004520416259765625, 0.0, -2.86102294921875e-05, 0.0, -0.0002518892288208008, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.059909939765930176, 0.0, -1.1444091796875e-05, 0.0, -0.0001506805419921875, 0.0, -3.814697265625e-06, 0.0, -2.384185791015625e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -4.0531158447265625e-05, -1.2516897186287679e-05, -0.03797340393066406, -0.00022125244140625, -0.000202178955078125, -7.62939453125e-06, -0.000110626220703125, -0.000308990478515625, -2.6702880859375e-05, -0.012970566749572754, -7.033323527139146e-06, -0.0004749298095703125, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0015773773193359375, 0.0, -0.0002470008039381355, -1.9073486328125e-06, -0.0007696151733398438, 0.0, -9.5367431640625e-05, -0.000209808349609375, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -0.0002002716064453125, 0.0, -6.794929504394531e-05, 0.0, -0.0003820657730102539, 0.0, -0.00024068285711109638, -3.147124880342744e-05, -0.06457328796386719, -2.288818359375e-05, -0.023923873901367188, -5.53131103515625e-05, -0.009077540598809719, -2.0265579223632812e-06, -0.00113677978515625, -1.9073486328125e-05, -2.86102294921875e-05, 0.0, -0.013555500656366348, -9.417505680175964e-06, -0.000347137451171875, -0.000133514404296875, -0.033347129821777344, -0.0043182373046875, -0.0018901824951171875, -0.0001239776611328125, -0.00379180908203125, -0.02385234832763672, -9.5367431640625e-05, -0.0004749298095703125, -0.000514984130859375, -1.9073486328125e-06, -0.000240325927734375, -1.1444091796875e-05, -0.0006891412776894867, 0.0, -0.001780390739440918, 0.0, -1.1444091796875e-05, -0.00089263916015625, -5.7220458984375e-05, -0.2506428360939026, -3.576278118089249e-07, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.00079345703125, -2.86102294921875e-05, -1.9073486328125e-06, -0.014524459838867188, -2.6702880859375e-05, -0.016491549089550972, -1.9073468138230965e-06, -0.021735141053795815, -1.4066696166992188e-05, -4.57763671875e-05, -0.009095191955566406, -9.5367431640625e-06, -7.62939453125e-06, -7.62939453125e-06, -0.003021240234375, -7.62939453125e-06, 0.0, -0.004787445068359375, -0.0005091422353871167, -2.264958675368689e-05, -3.814697265625e-06, -7.62939453125e-06, -5.91278076171875e-05, 0.0, 0.0, -8.7738037109375e-05, -9.071749809663743e-05, -4.768370445162873e-07, -3.814697265625e-06, -0.001132965087890625, -0.0001163482666015625, -0.00080108642578125, -0.0002574920654296875, -0.0005279779434204102, -0.000476837158203125, -5.91278076171875e-05, -7.62939453125e-06, -0.00018310546875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -8.225440979003906e-06, 0.0, 0.0, -1.9073486328125e-06, -6.234644388314337e-05, -1.6093124941107817e-05, -0.00112152099609375, -0.0048274993896484375, -6.29425048828125e-05, -0.0024166107177734375, -0.0003108978271484375, -0.0008983612060546875, -2.47955322265625e-05, -8.58306884765625e-05, -5.7220458984375e-05, -2.288818359375e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.00011754027946153656, -4.9591064453125e-05, -0.0002956390380859375, 0.0, -1.33514404296875e-05, -0.0001392364501953125, -0.0006551742553710938, -5.7220458984375e-06, -9.119501919485629e-05, 0.0, -0.0033550262451171875, -0.0004558563232421875, -0.000530242919921875, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -0.00241283280774951, -5.960462772236497e-07, -1.9073486328125e-06, -0.0002498626708984375, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.000759362883400172, -1.1920928244535389e-07, -0.00028777122497558594, -1.1920928244535389e-07, -0.000283555593341589, -2.503394853192731e-06, -7.43865966796875e-05, -0.015786170959472656, -2.288818359375e-05, -0.0028104782104492188, -5.14984130859375e-05], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [93, 145, 230, 101, 125, "Multi-Shot", "<EOS>", 216, 73, 231, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Multi-Shot", "<EOS>", 76, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 98, 115, 216, 63, 146, "minions", "<EOS>", 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 103, 129, 23, 146, "i", "<EOS>", 18, 123, 23, 146, "range", "<EOS>", 217, 83, 69, 231, 98, 115, 216, 82, 18, 123, 15, 116, 23, 146, "game", "<EOS>", "random_choice", "<EOS>", 216, 63, 146, "minions", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "minions", "<EOS>", "remove", "<EOS>", 216, 82, 102, 128, 18, 123, 15, 116, 41, "damage", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_spell_damage", "<EOS>", 216, 72, 74, 104, 130, "can_use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 229, 107, 153, 17, 119, 4, 217, 58, 123, 15, 116, 51, 193, "super", "<EOS>", "can_use", "<EOS>", 217, 75, 63, 146, "game", "<EOS>", 59, 126, 18, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 213, 8, 216, 69, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Multi-Shot", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Multi-Shot"}, {"_type": "Template20"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "iter": {"_type": "Call", "args": [{"_type": "Template31"}, {"_type": "Template12"}], "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}}, "targets": [{"_type": "Template30"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template30"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minions"}, "attr": "remove"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_spell_damage"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "damage"}}}], "target": {"_type": "Name", "id": "i"}}]}, {"_type": "FunctionDef", "name": "can_use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Call", "args": [{"_type": "Template19"}, {"_type": "Name", "id": "game"}], "func": {"_type": "Attribute", "value": {"_type": "Template5", "hole0": "super"}, "attr": "can_use"}}, {"_type": "Compare", "left": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template12"}], "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"score": -0.9623328433893903, "score_history": [-9.5367431640625e-06, -0.0001773834228515625, -5.7220458984375e-06, -0.00012969970703125, -7.62939453125e-06, -5.960446742392378e-06, -0.0014284721110016108, -0.001287433784455061, -8.344646857949556e-07, -4.76837158203125e-05, -1.71661376953125e-05, -0.000301361083984375, -5.7220458984375e-06, -3.814697265625e-06, -3.099440846199286e-06, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -8.58306884765625e-05, -1.52587890625e-05, -5.7220458984375e-05, -0.09116554260253906, -1.9073486328125e-06, -0.0029582977294921875, -3.814697265625e-06, -5.7220458984375e-06, -0.0014453240437433124, -4.220008850097656e-05, -0.07296576350927353, -3.886222839355469e-05, -0.00037515160511247814, -1.9073486328125e-06, -3.24249267578125e-05, -3.62396240234375e-05, -3.814697265625e-06, 0.0, 0.0, -2.09808349609375e-05, 0.0, -8.511543273925781e-05, 0.0, -9.34600830078125e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -0.07242965698242188, 0.0, -0.000164031982421875, 0.0, -3.62396240234375e-05, -3.24249267578125e-05, -5.7220458984375e-06, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-05, -1.1444091796875e-05, -0.3987131118774414, -1.1920928955078125e-05, -0.000152587890625, -1.9073486328125e-06, -5.841255187988281e-06, -0.0002269744873046875, -9.5367431640625e-06, -1.9073486328125e-06, -0.00026702880859375, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -5.936622619628906e-05, -6.318082796497038e-06, -0.15271854400634766, -0.00014495849609375, -0.0006275177001953125, -1.9073486328125e-06, -1.9073486328125e-06, -0.000438690185546875, -7.62939453125e-06, -1.9073486328125e-06, -0.0018215179443359375, -0.12819968163967133, -5.6028297876764555e-06, -7.62939453125e-06, -0.004113197326660156, -0.0006542205810546875, -1.1444091796875e-05, -8.0108642578125e-05, -0.0005168914794921875, -5.91278076171875e-05, 0.0, -0.025055885314941406, -0.002541661262512207, -1.9073486328125e-06, -2.6702880859375e-05], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        player.draw()\n", "choice_history": [93, 145, 230, 101, 125, "Power", "Word", "Shield", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Power", " ", "Word", " ", "Shield", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 102, 128, 18, 123, 15, 116, 52, "die", "<EOS>", 216, 74, 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "PowerWordShield", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "die"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"score": -0.007480113080362116, "score_history": [0.0, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.284702198579907e-05, -0.0005124724702909589, -0.00020049068552907556, -3.24249267578125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -4.00543212890625e-05, 0.0, -1.9073486328125e-05, -4.00543212890625e-05, 0.0, -0.0001506805419921875, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -2.52720492426306e-05, -1.1444089977885596e-05, -3.933906555175781e-06, -1.9073486328125e-06, -4.76837158203125e-05, -7.05718994140625e-05, -5.7220458984375e-06, 0.0, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.00035858154296875, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.0001354217529296875, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.00234222412109375, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001125335693359375, -7.62939453125e-06, -0.00130462646484375, -5.91278076171875e-05, -0.00019073486328125, -1.9073486328125e-06, -0.0009256600751541555, -1.9073486328125e-06, -0.0001544952392578125, -0.0003528594970703125, -1.2755393072438892e-05, -3.576278118089249e-07, 0.0], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [93, 145, 230, 101, 125, "Sen'jin", "Shieldmasta", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Sen'jin", " ", "Shieldmasta", "<EOS>", 76, 89, 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 72, 77, 224, 205, "taunt", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Sen'jinShieldmasta", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sen'jin Shieldmasta"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template16"}, {"_type": "Template22"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"score": -0.7926443319937562, "score_history": [-3.62396240234375e-05, -5.53131103515625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.52587890625e-05, -5.960459930065554e-06, -1.013275596051244e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.38690185546875e-05, -7.62939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -2.109989509335719e-05, 0.0, -0.0001392364501953125, -3.814697265625e-06, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.20569419860839844, -3.814697265625e-06, -0.000240325927734375, -2.86102294921875e-05, -7.62939453125e-06, -3.1947638490237296e-05, -1.454353241570061e-05, -7.987004210008308e-06, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.00013530254364013672, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.000110626220703125, 0.0, -1.9073486328125e-06, 0.0, -0.00016021728515625, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.008443832397460938, -1.9073486328125e-06, -0.0001678466796875, -1.9073486328125e-06, -6.79492904964718e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -2.6464434995432384e-05, -2.3841830625315197e-06, -0.18213558197021484, -2.6702880859375e-05, -0.0068206787109375, -8.0108642578125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -7.62939453125e-06, -7.62939453125e-06, -0.013254165649414062, -7.43865966796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.3569679260253906, -1.1444091796875e-05, -0.000579833984375, -3.814697265625e-06, -3.7789133784826845e-05, 0.0, -0.0029221978038549423, -1.2397744285408407e-05, -0.0021172761917114258, -0.00018619030015543103, -0.005404625087976456, -0.0007724206079728901, -0.0005345112876966596, -4.768370445162873e-07, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -2.6702880859375e-05, 0.0, -4.9591064453125e-05, -0.0003590491251088679, -3.933904736186378e-06, -3.814697265625e-06, -0.0043792724609375, -0.00012969970703125, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.hero.damage(player.effective_spell_damage(3),\n            self)\n", "choice_history": [93, 145, 230, 101, 125, "Sinister", "Strike", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Sinister", " ", "Strike", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 230, 108, 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_spell_damage", "<EOS>", 216, 72, 74, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "SinisterStrike", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_spell_damage"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "hero"}, "attr": "hero"}, "attr": "damage"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"score": -5.230872945467631, "score_history": [-5.7220458984375e-06, -5.7220458984375e-06, -0.000637054443359375, -3.24249267578125e-05, -1.33514404296875e-05, -0.1138756051659584, -4.88758041683468e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.960462772236497e-07, -9.5367431640625e-06, -3.814697265625e-06, -0.002719879150390625, -0.0001583099365234375, -0.000110626220703125, -6.4849853515625e-05, -0.00014495849609375, -5.7220458984375e-06, -7.2479248046875e-05, -4.38690185546875e-05, -7.62939453125e-06, -2.622600959512056e-06, -2.0265579223632812e-06, -0.0001163482666015625, -9.34600830078125e-05, 0.0, 0.0, 0.0, -7.867813110351562e-06, -2.0265579223632812e-06, -0.00023531912302132696, 0.0, -0.008515357971191406, 0.0, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.0021209716796875, -3.4332275390625e-05, -0.0012607574462890625, 0.0, -6.592273712158203e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -1.1801719665527344e-05, 0.0, -0.0034942626953125, -9.5367431640625e-06, -3.62396240234375e-05, -0.0001049041748046875, -7.62939453125e-06, -0.2109365463256836, -0.00031280517578125, -0.0027112960815429688, -2.47955322265625e-05, -3.814697265625e-06, -2.6702880859375e-05, -5.7220458984375e-06, -0.4610748291015625, -1.71661376953125e-05, -0.11005844920873642, -0.49784642457962036, -0.0002593994140625, -0.0064563751220703125, -0.62164306640625, 0.0, -0.056322574615478516, -3.24249267578125e-05, -1.33514404296875e-05, -0.20128917694091797, -1.9073486328125e-06, -0.00017750263214111328, 0.0, -5.340576171875e-05, 0.0, -0.019185418263077736, -9.655952453613281e-06, -9.5367431640625e-06, -0.003826141357421875, -0.0001697540283203125, -0.000835418701171875, -1.9073486328125e-06, -0.32434654235839844, -0.2340707778930664, -4.76837158203125e-05, 0.0, -0.7680560350418091, -0.10298743844032288, -0.0061244964599609375, -1.52587890625e-05, -0.2843095064163208, 0.0, -0.0012607574462890625, -5.7220458984375e-06, -0.693510890007019, -1.1563301086425781e-05, -5.7220458984375e-06, -0.17282390594482422, -0.043148040771484375, -0.011014938354492188, 0.0, -0.0009765625, -5.7220458984375e-06, -7.62939453125e-06, -0.1671295166015625, -3.814697265625e-06, -0.00018894672393798828, 0.0, -8.20159912109375e-05, 0.0, -0.09303402155637741, -7.748603820800781e-06, -1.1444091796875e-05, 0.0, 0.0, -9.5367431640625e-06, 0.0, -8.392333984375e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.655952453613281e-06, 0.0, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -2.2053716747905128e-05, -1.311301275563892e-06, -5.352459993446246e-05, -1.1920928244535389e-07, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=(\n            Battlecry(Discard(), PlayerSelector(players=BothPlayer())),\n            Battlecry(<UNK>(player=BothPlayer()), PlayerSelector(players=\n            BothPlayer()))))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [93, 145, 230, 101, 125, "Succubus", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Succubus", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 205, "battlecry", "<EOS>", 53, 198, 217, 58, 123, 34, 217, 87, 193, "Discard", "<EOS>", 58, 122, 23, 146, "Player", "Selector", "<EOS>", 224, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 58, 123, 34, 217, 58, 122, 23, 146, "<UNK>", "<EOS>", 224, 205, "player", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 58, 122, 23, 146, "Player", "Selector", "<EOS>", 224, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "4", "<EOS>", "3", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Succubus", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Tuple", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Discard"}, {"_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}], "func": {"_type": "Template21"}}, {"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}], "func": {"_type": "Template21"}}]}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 4, "hole1": 3}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"score": -0.14938392575504622, "score_history": [0.0, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -7.62939453125e-06, -9.30981186684221e-05, -0.0003784178989008069, -1.0848005331354216e-05, -7.62939453125e-06, -5.14984130859375e-05, -0.0001239776611328125, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.00028228759765625, -3.814697265625e-06, -0.0016689300537109375, -1.9073486328125e-06, -9.5367431640625e-06, -4.172316494077677e-06, -1.4066696166992188e-05, -1.919269561767578e-05, -5.9604644775390625e-06, -0.000308990478515625, -0.0001239776611328125, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -8.20159912109375e-05, -1.9073486328125e-06, -7.82012939453125e-05, -3.4332275390625e-05, -1.71661376953125e-05, -4.00543212890625e-05, -2.300739288330078e-05, -1.9073486328125e-06, 0.0, -0.10423851013183594, -3.24249267578125e-05, -0.040439654141664505, 0.0, -0.0011832029558718204, 0.0, 0.0], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [93, 145, 230, 101, 125, "War", "Golem", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "War", " ", "Golem", "<EOS>", 79, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "7", "<EOS>", "7", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "WarGolem", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "War Golem"}, {"_type": "Template24"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 7, "hole1": 7}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"score": -1.143315477203032, "score_history": [0.0, -5.7220458984375e-06, -4.1961669921875e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.0003719837113749236, -2.7656533347908407e-05, -3.24249267578125e-05, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, -2.6702880859375e-05, -1.2040138244628906e-05, -0.000247955322265625, -2.47955322265625e-05, -0.0019969940185546875, -3.814697265625e-05, -1.52587890625e-05, -3.814697265625e-06, -0.0001468658447265625, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.311301275563892e-06, -1.1563301086425781e-05, -0.000274658203125, -3.814697265625e-06, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.537799835205078e-05, 0.0, -0.00021374225616455078, 0.0, -0.0003509521484375, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -9.1552734375e-05, 0.0, -0.000946044921875, -5.7220458984375e-06, -0.0060939788818359375, -1.9073486328125e-06, -2.6702880859375e-05, -3.0517578125e-05, -7.62939453125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, 0.0, -0.0012264251708984375, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -5.7220458984375e-05, -7.62939453125e-06, -4.57763671875e-05, 0.0, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -1.52587890625e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.0001544952392578125, -7.2479248046875e-05, -0.008544921875, 0.0, -0.000102996826171875, 0.0, -2.47955322265625e-05, -2.09808349609375e-05, -0.0002307891845703125, -7.62939453125e-06, -0.0003490447998046875, -6.103515625e-05, -0.0001010894775390625, -0.00112152099609375, -0.000926971435546875, -0.0023338792379945517, -2.8610227673198096e-05, -0.000698089599609375, -0.0010089874267578125, -6.4849853515625e-05, -1.9073486328125e-05, -8.58306884765625e-05, -2.47955322265625e-05, -0.123504638671875, -1.9073486328125e-06, -5.543231964111328e-05, -0.0005779266357421875, -1.1444091796875e-05, -0.2836179733276367, -1.71661376953125e-05, -0.12326037138700485, -2.5272096536355093e-05, -4.1961669921875e-05, -1.33514404296875e-05, -0.583348274230957, -2.288818359375e-05, 0.0, -5.7220458984375e-05, -1.52587890625e-05], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Damage(\n            Frozen()), SelfSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Acidmaw", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Acidmaw", "<EOS>", 79, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 76, 69, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 87, 193, "Damaged", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Damage", "<EOS>", 216, 87, 193, "Frozen", "<EOS>", 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Acidmaw", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Template24"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template20"}, {"_type": "Template12"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Frozen"}], "func": {"_type": "Name", "id": "Damage"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"score": -0.37132882468677053, "score_history": [-1.1444091796875e-05, -1.71661376953125e-05, -6.103515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, -9.881961887003854e-05, -1.2278553185751662e-05, -1.9073486328125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.91278076171875e-05, -2.0623201635316946e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.62396240234375e-05, -3.814697265625e-06, -7.62939453125e-06, -0.1290721893310547, 0.0, -0.001415252685546875, -2.09808349609375e-05, -3.814697265625e-06, -9.536738616588991e-07, -4.708746200776659e-05, -0.00136566162109375, -5.340576171875e-05, -0.21023941040039062, -0.0012054443359375, -1.9073486328125e-06, 0.0, -1.5616416931152344e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.0010129213333129883, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.33514404296875e-05, -4.1961669921875e-05, 0.0, 0.0, 0.0, -0.022857666015625, 0.0, -2.09808349609375e-05, -0.000644683837890625, -2.09808349609375e-05, -1.71661376953125e-05, -0.000102996826171875, -0.0001049041748046875, -3.62396240234375e-05, -0.0001621246337890625, -1.1444091796875e-05, -0.0009098052978515625, 0.0, -0.0010963669046759605, -1.71661376953125e-05, -6.866455078125e-05, -5.53131103515625e-05, -0.00021135807037353516, -7.867811291362159e-06, -1.9073486328125e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [93, 145, 230, 101, 125, "Boar", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 220, 66, 155, "Boar", "<EOS>", 72, 89, 88, 80, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 76, 69, 224, 205, "charge", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Boar", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template16"}, {"_type": "Template7"}, {"_type": "Template6"}, {"_type": "Template27"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template20"}, {"_type": "Template12"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"score": -5.510237778613799, "score_history": [0.0, -1.9073486328125e-06, -1.9073486328125e-05, -4.00543212890625e-05, -6.67572021484375e-05, -7.402896881103516e-05, -0.0025620025116950274, -0.00031944943475537, -0.004249250516295433, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -6.914134246471804e-06, -5.364418029785156e-05, -5.7220458984375e-06, -2.86102294921875e-05, -0.0004520416259765625, -8.0108642578125e-05, -4.38690185546875e-05, -0.00048065185546875, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -0.0002443593111820519, -1.4066696166992188e-05, -0.0015678404597565532, -0.00011479854583740234, -0.00015282594540622085, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -6.198883056640625e-06, -0.0003037452697753906, -3.814697265625e-06, -1.33514404296875e-05, -3.814697265625e-05, 0.0, -0.03806507587432861, 0.0, -0.000812530517578125, -0.0002593994140625, -0.03851127624511719, -1.71661376953125e-05, -0.0001087188720703125, -0.0018215179443359375, -7.62939453125e-05, -0.0003719329833984375, -0.00013625621795654297, -2.86102294921875e-05, -0.0072078704833984375, -0.0010318756103515625, -0.5391454696655273, -0.3663295805454254, -1.9073486328125e-06, -0.3210945129394531, -0.006572723388671875, -0.003536224365234375, -0.1829814910888672, -2.6702880859375e-05, -0.0069484710693359375, -1.9073486328125e-06, -0.11259353160858154, -0.0001477002806495875, -7.522106170654297e-05, -0.000385284423828125, -0.045754432678222656, -0.007587432861328125, -0.028778076171875, -0.6393890380859375, -0.1843719482421875, -0.00014495849609375, -0.11907708644866943, -0.02809906005859375, -0.6018743515014648, -0.0002460479736328125, -0.6170158386230469, -9.5367431640625e-06, -7.2479248046875e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.00048354282625950873, -2.3841855067985307e-07, -0.4950367212295532, 0.0, -6.103515625e-05, -0.5800209045410156, 0.0, -0.018576622009277344, -1.9073486328125e-06, -0.006099531427025795, -0.0002744196681305766, -5.7220458984375e-06, -0.21901512145996094, -0.27724647521972656, -3.4332275390625e-05, -1.1444091796875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0002460479736328125, -2.47955322265625e-05, -0.000202178955078125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -4.398822784423828e-05, 0.0, -7.62939453125e-06, -0.0003681182861328125, -0.0002002716064453125, -4.172341505181976e-06, -4.410734163684538e-06, -0.0004248781770002097, -1.6927575416048057e-05, 0.0], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Mech(), Give(ChangeHealth(1\n            )), MinionSelector(condition=IsType(MINION_TYPE.MECH), players=\n            BothPlayer()))])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [93, 145, 230, 101, 125, "Anodized", "Robo", "Cub", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 88, 224, 205, "choices", "<EOS>", 21, 141, 218, 58, 123, 23, 146, "Choice", "<EOS>", 218, 87, 193, "Mech", "<EOS>", 58, 123, 37, 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 70, 58, 122, 38, 225, 205, "condition", "<EOS>", 18, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 71, 71, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "2", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "AnodizedRoboCub", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "choices", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Mech"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Template25"}}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}}, {"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}], "func": {"_type": "Name", "id": "Choice"}}, {"_type": "Template15_expr_seq"}, {"_type": "Template15_expr_seq"}]}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 2}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"score": -37.84305140559693, "score_history": [0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -7.62939453125e-06, -4.7801782784517854e-05, -4.1841663914965466e-05, -0.00018559163436293602, -3.814697265625e-06, -8.0108642578125e-05, -0.000339508056640625, -5.7220458984375e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0037097930908203125, -3.814697265625e-06, -0.0048065185546875, -7.62939453125e-06, -2.47955322265625e-05, -2.4914497771533206e-05, -1.2278556823730469e-05, -2.384185791015625e-06, -7.62939453125e-06, -0.002193450927734375, 0.0, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0014363527297973633, 0.0, -0.000469207763671875, -1.1444091796875e-05, -4.9591064453125e-05, -3.814697265625e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.001750946044921875, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.0001773834228515625, -0.0001068115234375, -3.4332275390625e-05, 0.0, -0.39914894104003906, -0.15608882904052734, -0.000156402587890625, -0.011584758758544922, -1.9073486328125e-06, -0.0018901824951171875, -0.0007781982421875, -0.0006008148193359375, -0.001834869384765625, -1.9073486328125e-06, -0.1294618844985962, -1.1920928244535389e-07, -5.340576171875e-05, -0.2700328826904297, -0.0016765594482421875, -0.6819686889648438, -0.7288732528686523, -8.96453857421875e-05, -7.62939453125e-06, -0.028086531907320023, -0.0005743274814449251, -2.09808349609375e-05, -0.009012222290039062, -0.698521614074707, -0.005169868469238281, -0.001499176025390625, -5.7220458984375e-06, -0.0005816211923956871, -8.7738037109375e-05, -6.866455078125e-05, -0.0023860931396484375, -7.62939453125e-06, -0.474918395280838, -0.0015735626220703125, -0.0009860992431640625, -0.5792779922485352, -0.0005550384521484375, -0.05189800262451172, -0.0002613067626953125, -0.01755809783935547, -0.005211830139160156, -8.392333984375e-05, -1.9073486328125e-06, -0.0008683202904649079, -1.5497207641601562e-05, -3.814697265625e-06, -0.0026836395263671875, -5.7220458984375e-06, -1.4178131818771362, -0.007713913451880217, -0.00041961669921875, -0.24031925201416016, -3.4332275390625e-05, -0.00054168701171875, -0.5113306045532227, -0.007564544677734375, -0.0001049041748046875, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -1.6305426359176636, -8.738038741284981e-05, -0.010417938232421875, -0.15902328491210938, -3.814697265625e-06, -1.9073486328125e-06, -0.0017566680908203125, 0.0, -0.538701057434082, -0.011670231819152832, 0.0, -0.03551971912384033, -9.5367431640625e-06, -0.0002079010009765625, -0.5888423919677734, -3.814697265625e-06, -0.3957788944244385, 0.0, -0.09463977813720703, -9.72747802734375e-05, -5.7220458984375e-06, -0.00142669677734375, -0.0001087188720703125, -0.0001201629638671875, -3.0517578125e-05, -0.5924139022827148, -8.225420970120467e-06, -0.7963962554931641, -0.001461029052734375, -0.016595840454101562, -0.0673074722290039, -0.02771282196044922, -0.0017719268798828125, -0.0025348663330078125, -0.0001049041748046875, 0.0, -0.24281883239746094, 0.0, -0.7241566181182861, -7.748603820800781e-06, -0.9921286106109619, -4.1961669921875e-05, -0.06002616882324219, -0.0004482269287109375, -0.004689216613769531, 0.0, -0.06428146362304688, 0.0, -0.5107576847076416, -3.0517578125e-05, -0.03701663017272949, -1.9073486328125e-06, -0.0001049041748046875, -0.39243030548095703, -2.86102294921875e-05, -0.32625484466552734, 0.0, -0.007335662841796875, 0.0, -0.0006537437438964844, 0.0, -0.6521921157836914, 0.0, -0.0836029052734375, -1.33514404296875e-05, -9.5367431640625e-06, -0.24568843841552734, -1.9073486328125e-06, -1.3996343612670898, -8.296966552734375e-05, -0.7887372970581055, -8.20159912109375e-05, -0.14129939675331116, -0.4649251699447632, -0.0005140304565429688, -0.07814311981201172, -9.5367431640625e-06, -1.52587890625e-05, -0.01652050018310547, 0.0, -1.729331612586975, -7.62939453125e-06, -0.7047538757324219, -3.4332275390625e-05, -0.14626258611679077, -0.2876279354095459, -0.0004506111145019531, -0.6433687210083008, -3.814697265625e-06, -2.09808349609375e-05, -0.0072460174560546875, -5.7220458984375e-06, 0.0, -0.002346038818359375, -1.9073486328125e-06, -0.003893613815307617, -1.0967253729177173e-05, -0.0012925760820508003, 0.0, -0.0003070831298828125, -0.000263214111328125, -0.21370887756347656, -1.1444091796875e-05, -0.0002620219602249563, -5.841255187988281e-06, -0.00038909912109375, -0.0001850128173828125, -2.288818359375e-05, -9.5367431640625e-06, -4.601478576660156e-05, -3.814697265625e-06, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.0004100799560546875, -0.013873317278921604, -5.447864532470703e-05, -0.17368698120117188, -1.9073486328125e-06, -3.814697265625e-06, -0.0003108978271484375, 0.0, -0.9327777624130249, -7.641315460205078e-05, -0.10199928283691406, -6.866455078125e-05, -0.2806696891784668, -0.21341799199581146, -0.00020265579223632812, -0.0012302398681640625, -3.814697265625e-06, -3.814697265625e-06, -0.0001678466796875, 0.0, -1.264420509338379, -3.814697265625e-06, -0.14572715759277344, -0.0001678466796875, -0.0001850128173828125, -1.9073486328125e-06, -0.03505134582519531, 0.0, -0.9724253416061401, -7.152555099310121e-07, -0.008901596069335938, -1.9073486328125e-06, -4.76837158203125e-05, -0.001312255859375, -0.000213623046875, -0.210549458861351, -1.1086458471254446e-05, -0.47493457794189453, -3.24249267578125e-05, 0.0, -0.5855751037597656, -3.814697265625e-05, 0.0, -3.814697265625e-06, 0.0, -0.7424436807632446, -1.8835060473065823e-05, -0.34391945600509644, 0.0, -1.9073486328125e-06, -0.005648612976074219, -4.38690185546875e-05, -6.532669067382812e-05, -2.09808349609375e-05, -0.0012760162353515625, -2.288818359375e-05, -0.00048828125, -0.00072479248046875, -6.29425048828125e-05, 0.0, -0.00113677978515625, -1.9073486328125e-06, -0.7147831916809082, 0.0, -0.273270845413208, 0.0, -0.43250274658203125, -1.9073486328125e-06, -1.9073486328125e-06, -0.053702354431152344, -1.9073486328125e-06, -1.3890535831451416, -5.435943603515625e-05, -0.18983745574951172, -0.01566600799560547, -0.0010919570922851562, -1.9073486328125e-06, -0.465249627828598, -5.412026075646281e-05, -0.009523391723632812, -0.0049419403076171875, -0.009030342102050781, 0.0, -1.4825743436813354, -1.1920928244535389e-07, -0.6768693923950195, -3.0517578125e-05, -0.056593894958496094, -0.8825525641441345, -1.1920928244535389e-07, -0.001293182373046875, -0.054116249084472656, -0.14553356170654297, -0.001163482666015625, 0.0, -1.2686457633972168, -0.03260064125061035, -3.814697265625e-06, -0.0035610198974609375, -0.0991983413696289, -0.0003948211669921875, -0.00789642333984375, -0.6371288299560547, -5.7220458984375e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n\n        def <UNK>(character):\n            if isinstance(0, len(characters)):\n                if len(characters) > 0:\n                    chosen_card = player.agent.choose_option(game, lambda m:\n                        not m.is_minion and target.health == MINION_TYPE.MECH)\n                    justice = PlayerOne()\n                    draw_player = Player<UNK>()\n                    <UNK>.summon(player, game, len(player.minions))\n        justice = <UNK>Justice()\n        hammer = game.random_choice(targets)\n        target.die(Null)\n        minion_card.<UNK>()\n        characters = [<UNK> for character in player.mana if ManaChange(-3)]\n", "choice_history": [93, 145, 230, 101, 125, "Burrowing", "Mine", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Burrowing", " ", "Mine", "<EOS>", 83, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 88, 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 234, 104, 130, "<UNK>", "<EOS>", 3, 203, 209, 1, 202, "character", "<EOS>", 229, 105, 133, 18, 123, 23, 146, "isinstance", "<EOS>", 217, 83, 58, 123, 23, 146, "len", "<EOS>", 216, 63, 146, "characters", "<EOS>", 229, 105, 133, 19, 126, 18, 123, 23, 146, "len", "<EOS>", 216, 63, 146, "characters", "<EOS>", 213, 7, 216, 83, 232, 98, 115, 216, 63, 146, "chosen_card", "<EOS>", 18, 123, 15, 116, 15, 116, 32, "agent", "<EOS>", "choose_option", "<EOS>", 217, 63, 146, "game", "<EOS>", 60, 140, 3, 203, 209, 1, 202, "m", "<EOS>", 17, 119, 4, 217, 92, 200, 111, 15, 116, 23, 146, "m", "<EOS>", "is_minion", "<EOS>", 59, 126, 15, 116, 23, 146, "target", "<EOS>", "health", "<EOS>", 213, 6, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 98, 115, 216, 63, 146, "justice", "<EOS>", 51, 193, "Player", "One", "<EOS>", 98, 115, 216, 63, 146, "draw_player", "<EOS>", 51, 193, "Player", "<UNK>", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "<UNK>", "<EOS>", "summon", "<EOS>", 218, 75, 63, 146, "game", "<EOS>", 58, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 32, "minions", "<EOS>", 98, 115, 216, 63, 146, "justice", "<EOS>", 51, 193, "<UNK>", "Justice", "<EOS>", 98, 115, 216, 63, 146, "hammer", "<EOS>", 18, 123, 15, 116, 23, 146, "game", "<EOS>", "random_choice", "<EOS>", 216, 63, 146, "targets", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "target", "<EOS>", "die", "<EOS>", 216, 64, 148, "Null", "<EOS>", 102, 128, 18, 121, 15, 116, 23, 146, "minion_card", "<EOS>", "<UNK>", "<EOS>", 98, 115, 216, 63, 146, "characters", "<EOS>", 22, 142, 23, 146, "<UNK>", "<EOS>", 214, 204, 23, 146, "character", "<EOS>", 15, 116, 32, "mana", "<EOS>", 216, 58, 123, 23, 146, "Mana", "Change", "<EOS>", 216, 92, 200, 112, 30, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "BurrowingMine", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Burrowing Mine"}, {"_type": "Template31"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "FunctionDef", "name": "<UNK>", "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "character"}]}, "body": [{"_type": "If", "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "game"}, {"_type": "Lambda", "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "m"}]}, "body": {"_type": "BoolOp", "values": [{"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Name", "id": "m"}, "attr": "is_minion"}, "op": {"_type": "Not"}}, {"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Name", "id": "target"}, "attr": "health"}, "comparators": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "ops": [{"_type": "Eq"}]}], "op": {"_type": "And"}}}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "agent"}, "attr": "choose_option"}}, "targets": [{"_type": "Name", "id": "chosen_card"}]}, {"_type": "Assign", "value": {"_type": "Template5", "hole0": "PlayerOne"}, "targets": [{"_type": "Name", "id": "justice"}]}, {"_type": "Assign", "value": {"_type": "Template5", "hole0": "Player<UNK>"}, "targets": [{"_type": "Name", "id": "draw_player"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template19"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "<UNK>"}, "attr": "summon"}}}], "test": {"_type": "Compare", "left": {"_type": "Call", "args": [{"_type": "Name", "id": "characters"}], "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template31"}], "ops": [{"_type": "Gt"}]}}], "test": {"_type": "Call", "args": [{"_type": "Template31"}, {"_type": "Call", "args": [{"_type": "Name", "id": "characters"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Name", "id": "isinstance"}}}]}, {"_type": "Assign", "value": {"_type": "Template5", "hole0": "<UNK>Justice"}, "targets": [{"_type": "Name", "id": "justice"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "targets"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "random_choice"}}, "targets": [{"_type": "Name", "id": "hammer"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "target"}, "attr": "die"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "minion_card"}, "attr": "<UNK>"}}}, {"_type": "Assign", "value": {"_type": "ListComp", "generators": [{"_type": "comprehension", "iter": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "mana"}, "ifs": [{"_type": "Call", "args": [{"_type": "UnaryOp", "operand": {"_type": "Template16"}, "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}}], "target": {"_type": "Name", "id": "character"}}], "elt": {"_type": "Name", "id": "<UNK>"}}, "targets": [{"_type": "Name", "id": "characters"}]}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"score": -0.7150926311774128, "score_history": [-3.814697265625e-06, -5.14984130859375e-05, -8.0108642578125e-05, -3.24249267578125e-05, -1.71661376953125e-05, -2.8013866540277377e-05, -2.503394853192731e-06, -7.62939453125e-06, -0.000102996826171875, -5.14984130859375e-05, -1.71661376953125e-05, -2.288818359375e-05, -7.867794920457527e-06, -1.728534698486328e-05, -0.0002269744873046875, -0.000579833984375, -0.0001068115234375, -0.0002384185791015625, -8.0108642578125e-05, -0.0001087188720703125, -0.000141143798828125, -3.0517578125e-05, -0.0025272369384765625, -9.5367431640625e-06, -1.4781856407353189e-05, -1.52587890625e-05, -1.52587890625e-05, -8.392333984375e-05, -3.814697265625e-06, 0.0, 0.0, -0.0005613565444946289, 0.0, -0.0007081031799316406, 0.0, -0.0003528594970703125, -0.0008525848388671875, -3.24249267578125e-05, -0.001773834228515625, 0.0, -1.9073486328125e-05, -1.33514404296875e-05, -0.0008258819580078125, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.069110870361328e-05, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.0010548796271905303, -2.2053680368117057e-05, -0.000667572021484375, -0.0644235610961914, -2.503394853192731e-06, -0.002666473388671875, -0.000339508056640625, -1.1444091796875e-05, -0.0013238191604614258, 0.0, -1.52587890625e-05, 0.0, -0.0011806488037109375, 0.0, -1.9073486328125e-06, 0.0, -3.5047298297286034e-05, 0.0, 0.0, -0.0001068115234375, -4.494188033277169e-05, -1.358979079668643e-05, -0.001163482666015625, -2.6702880859375e-05, -0.000324249267578125, -7.62939453125e-06, -3.814697265625e-06, -0.0001373291015625, -7.62939453125e-06, -1.9073486328125e-06, -0.0002117156982421875, -4.52994936495088e-06, -0.0010765554616227746, -1.9073486328125e-06, -0.0001583099365234375, -0.0002040863037109375, -1.9073486328125e-06, 0.0, -8.0108642578125e-05, -0.00017416475748177618, -3.3378591979271732e-06, -3.814697265625e-06, -0.629673957824707, -1.71661376953125e-05, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [93, 145, 230, 101, 125, "Crackle", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Crackle", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 88, 225, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 205, "overload", "<EOS>", 28, 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 230, 108, 102, 128, 18, 123, 15, 116, 52, "damage", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_spell_damage", "<EOS>", 216, 81, 74, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Crackle", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_spell_target"}}, {"_type": "keyword", "arg": "overload", "value": {"_type": "Template14"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template28"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_spell_damage"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "damage"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"score": -1.2966279980176267, "score_history": [0.0, -1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, -1.9073486328125e-06, -5.960462772236497e-07, -2.50339189733495e-06, -1.168244216387393e-05, -1.9073486328125e-06, -4.00543212890625e-05, -0.3200702667236328, -1.52587890625e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.1750164031982422, -1.9073486328125e-06, -0.14116954803466797, -9.5367431640625e-06, 0.0, -3.719303640536964e-05, -1.609325408935547e-05, -5.006789251638111e-06, -1.71661376953125e-05, -3.4332275390625e-05, -2.86102294921875e-05, -0.0001239776611328125, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.000102996826171875, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0002498626708984375, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -8.58306884765625e-05, -3.814697265625e-06, -4.398822784423828e-05, -5.7220458984375e-06, -0.1207726001739502, -1.5497207641601562e-05, -0.0001468658447265625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0001583099365234375, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.933906555175781e-06, -0.21795082092285156, -1.33514404296875e-05, -0.0003528594970703125, 0.0, -1.9073486328125e-06, -7.2479248046875e-05, -9.5367431640625e-06, 0.0, -0.000164031982421875, -0.31464898586273193, -1.1920928244535389e-07, -9.5367431640625e-06, -0.0050449371337890625, 0.0], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "choice_history": [93, 145, 230, 101, 125, "Emergency", "Coolant", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 220, 66, 155, "Emergency", " ", "Coolant", "<EOS>", 70, 89, 88, 80, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 230, 108, 102, 128, 18, 123, 15, 116, 52, "die", "<EOS>", 216, 74, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "EmergencyCoolant", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template14"}, {"_type": "Template7"}, {"_type": "Template6"}, {"_type": "Template27"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "die"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"score": -0.2227339534811108, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.0007095203618519008, -5.1020273531321436e-05, -8.21318244561553e-05, -3.814697265625e-06, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.72747802734375e-05, -1.52587890625e-05, -1.33514404296875e-05, -5.53131103515625e-05, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -9.536697689327411e-06, -1.3470647900248878e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -0.0002384185791015625, -2.47955322265625e-05, -1.71661376953125e-05, -0.0010852813720703125, 0.0, -1.9550323486328125e-05, -2.384185791015625e-06, -7.62939453125e-06, -0.000385284423828125, -0.000621795654296875, 0.0, -0.000293731689453125, -1.9073486328125e-06, -8.583068120060489e-05, -2.86102294921875e-05, -2.288818359375e-05, 0.0, -4.2438507080078125e-05, -7.641315460205078e-05, -8.96453857421875e-05, -1.9073486328125e-05, -5.14984130859375e-05, -1.9073486328125e-06, -7.62939453125e-05, -3.814697265625e-06, -0.19653141498565674, -1.9073486328125e-06, -6.29425048828125e-05, -0.0001544952392578125, -5.7220458984375e-06, -4.57763671875e-05, -5.7220458984375e-06, -0.0002117156982421875, -2.288818359375e-05, -0.000263214111328125, -0.0001087188720703125, -0.003078460693359375, 0.0, -0.017571449279785156, -1.9073486328125e-06, -5.91278076171875e-05, -8.7738037109375e-05, -8.392042946070433e-05, -2.3841830625315197e-06, -7.62939453125e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [93, 145, 230, 101, 125, "Flying", "Machine", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Flying", " ", "Machine", "<EOS>", 72, 89, 88, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 76, 224, 205, "windfury", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "FlyingMachine", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template16"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template20"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"score": -0.6418097977689285, "score_history": [0.0, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.811964830267243e-05, -2.1815170839545317e-05, -6.16293036728166e-05, -7.62939453125e-06, -7.05718994140625e-05, -9.5367431640625e-06, -3.814697265625e-06, -9.5367431640625e-06, -2.622604142743512e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -4.38690185546875e-05, -6.103515625e-05, -0.00014495849609375, -5.53131103515625e-05, -3.24249267578125e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.1961669921875e-05, -2.0146186216152273e-05, -4.243848889018409e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.0001239776611328125, -1.9073486328125e-06, 0.0, 0.0, -2.0146366296103224e-05, 0.0, -0.00021886825561523438, -1.9073486328125e-06, -0.0001201629638671875, -0.002048492431640625, -3.814697265625e-06, -2.6941299438476562e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -4.76837158203125e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -0.00010919570195255801, 0.0, -0.0001049041748046875, -0.0010051727294921875, 0.0, -0.0001068115234375, -3.814697265625e-06, -2.09808349609375e-05, -1.33514404296875e-05, -0.03273200988769531, -8.392333984375e-05, -0.0002536773681640625, -1.9073486328125e-06, -8.96453857421875e-05, -7.62939453125e-06, -0.015056610107421875, 0.0, -0.2200394868850708, -7.665157318115234e-05, -1.9073486328125e-06, -0.000453948974609375, -2.288818359375e-05, -0.0018768310546875, -5.7220458984375e-06, -0.00542449951171875, -0.007953643798828125, -0.3349761962890625, -0.0005626678466796875, -1.52587890625e-05, -0.0013751983642578125, -4.1961669921875e-05, -0.0015764236450195312, -2.47955322265625e-05, -1.33514404296875e-05, 0.0, -0.0001277923583984375, 0.0, -7.652972271898761e-05, -3.1470921385334805e-05, -0.0003931501123588532, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.254413604736328e-05, -3.814697265625e-06, -1.1444091796875e-05, -1.1444091796875e-05, -8.58306884765625e-05, -1.9073486328125e-06, -3.814697265625e-06, -2.47955322265625e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.000598907470703125, -8.96453857421875e-05, -0.012552972882986069, -0.00015758255904074758, -6.759165989933535e-05, -2.622600959512056e-06, 0.0], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(1))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [93, 145, 230, 101, 125, "Goblin", "Auto-Barber", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Goblin", " ", "Auto-Barber", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 88, 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 37, 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 70, 58, 123, 38, 216, 58, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "3", "<EOS>", "2", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "GoblinAuto-Barber", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Template25"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}], "func": {"_type": "Template26"}}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 3, "hole1": 2}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"score": -0.45826193350171707, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, -3.6954811548639555e-06, -2.431869324936997e-05, -3.743115303223021e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.87430154660251e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0001544952392578125, -1.9073486328125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -2.47955322265625e-05, -2.884823152271565e-05, -0.0002747461840044707, -2.0265579223632812e-06, -1.52587890625e-05, -0.00023651123046875, -3.814697265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -2.622604142743512e-06, 0.0, -0.0002777576446533203, -3.0517578125e-05, -1.9073486328125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.00013554096221923828, -3.814697265625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, 0.0, -9.894371032714844e-05, 0.0, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -3.814697265625e-06, 0.0, -6.29425048828125e-05, 0.0, -3.814697265625e-06, -8.20159912109375e-05, -3.814697265625e-06, -5.53131103515625e-05, -2.47955322265625e-05, -7.2479248046875e-05, -1.9073486328125e-05, -3.24249267578125e-05, -3.0517578125e-05, -0.001201629638671875, 0.0, -3.254413604736328e-05, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -0.013280868530273438, -8.7738037109375e-05, -3.814697265625e-06, -0.0001316070556640625, -6.103515625e-05, -0.18062782287597656, -1.9073486328125e-05, -0.0007528066635131836, -0.006097554229199886, 0.0, -3.0517578125e-05, -3.814697265625e-06, -4.1961669921875e-05, -2.09808349609375e-05, -1.1444091796875e-05, -1.71661376953125e-05, -0.0006160736083984375, -5.7220458984375e-06, -0.09234619140625, -1.71661376953125e-05, -0.0001392364501953125, -0.0001811981201171875, -0.014361977577209473, -0.0001571178436279297, 0.0, -0.0002574920654296875, -0.0037784576416015625, -0.00016021728515625, -0.023830413818359375, -0.0004978179931640625, -0.0008411407470703125, -0.0001392364501953125, -1.33514404296875e-05, -0.0078067779541015625, -4.38690185546875e-05, -1.9073486328125e-05, 0.0, -0.000186920166015625, 0.0, -5.590910586761311e-05, -7.62939453125e-06, -0.0012496709823608398, 0.0, -0.09881401062011719, -0.00695037841796875, -0.0007114410400390625, -9.655952453613281e-06, -0.0004405975341796875, 0.0], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(IsType(MINION_TYPE.MECH), True)))]\n            )\n", "choice_history": [93, 145, 230, 101, 125, "Iron", "Sensei", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Iron", " ", "Sensei", "<EOS>", 72, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 91, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 69, 69, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 87, 193, "Turn", "Ended", "<EOS>", 58, 123, 43, 217, 58, 123, 37, 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 69, 58, 123, 38, 217, 58, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 64, 147, "True", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "IronSensei", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template16"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template12"}, {"_type": "Template12"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Template25"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template26"}}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"score": -4.606288995007134, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.38690185546875e-05, -5.7220458984375e-06, -0.0004544456023722887, -8.583065209677443e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -8.344646857949556e-07, -7.62939453125e-06, -9.5367431640625e-06, -0.000118255615234375, -2.6702880859375e-05, -1.71661376953125e-05, -7.62939453125e-06, -5.14984130859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.9073481780651491e-06, -3.814697265625e-06, -0.0003185272216796875, -2.288818359375e-05, -0.0020275115966796875, -0.0006312126643024385, -9.72747802734375e-05, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -1.9073486328125e-05, -1.5616416931152344e-05, -0.00025856494903564453, -1.9073486328125e-06, -0.0013608932495117188, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -0.000152587890625, -1.9073486328125e-06, -0.0073604583740234375, -7.62939453125e-06, -0.017862319946289062, 0.0, -0.00012052059173583984, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, 0.0, -0.011865615844726562, -0.0001735687255859375, -7.2479248046875e-05, -0.2617454528808594, -1.9073486328125e-06, -0.028827667236328125, -0.0016326904296875, -0.30060482025146484, -1.9073486328125e-05, -1.9073486328125e-06, -0.000232696533203125, -2.09808349609375e-05, -0.19993305206298828, -0.0023593902587890625, -0.019845962524414062, -0.0003299713134765625, -0.3311185836791992, -4.76837158203125e-05, -8.20159912109375e-05, 0.0, -0.003049612045288086, -0.15981674194335938, -9.5367431640625e-06, -0.06609725952148438, -1.9073486328125e-06, -0.09884942322969437, -0.00024816571385599673, -0.000125885009765625, 0.0, -1.0724674463272095, -7.62939453125e-06, 0.0, -0.0053730010986328125, -6.103515625e-05, -0.0037841796875, -5.7220458984375e-06, -0.6413593292236328, -1.9073486328125e-06, -0.8072296380996704, -0.0017341114580631256, -0.4930133819580078, 0.0, -0.06047391891479492, -3.814697265625e-06, 0.0, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, -3.814697265625e-06, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -9.918212890625e-05, -0.0001506805419921875, -0.0001270703796762973, -2.3841855067985307e-07, -0.001958608627319336, -4.768370445162873e-07, 0.0], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry\n            =(Battlecry(Give(Buff(Immune())), HeroSelector()), Battlecry(\n            Immune(), SelfSelector())))\n\n    def create_minion(self, player):\n        return Minion(9, 9)\n", "choice_history": [93, 145, 230, 101, 125, "Mal'Ganis", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Mal'Ganis", "<EOS>", 65, 151, "9", "<EOS>", 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 205, "battlecry", "<EOS>", 53, 198, 217, 58, 123, 34, 217, 58, 123, 37, 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 87, 193, "Immune", "<EOS>", 87, 193, "Hero", "Selector", "<EOS>", 58, 123, 34, 217, 87, 193, "Immune", "<EOS>", 87, 193, "Self", "Selector", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "9", "<EOS>", "9", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Mal'Ganis", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Tuple", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Immune"}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Template25"}}, {"_type": "Template5", "hole0": "HeroSelector"}], "func": {"_type": "Template21"}}, {"_type": "Call", "args": [{"_type": "Template5", "hole0": "Immune"}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template21"}}]}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 9, "hole1": 9}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"score": -1.1436973206494656, "score_history": [0.0, -1.33514404296875e-05, -1.52587890625e-05, -0.000362396240234375, -9.5367431640625e-05, -8.463837730232626e-06, -0.001192036783322692, -9.07141511561349e-05, -2.3841855067985307e-07, -2.47955322265625e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -4.768371127283899e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.52587890625e-05, -8.392333984375e-05, -7.62939453125e-06, -5.7220458984375e-06, -4.76837158203125e-05, -1.52587890625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.4305104514278355e-06, -1.9073486328125e-05, -8.225440979003906e-06, -4.9233436584472656e-05, -0.0004527568817138672, 0.0, -0.0009174346923828125, -3.814697265625e-05, 0.0, 0.0, -1.9073486328125e-06, -3.933906555175781e-06, -6.198883056640625e-06, -0.00016486644744873047, -7.62939453125e-06, -0.000453948974609375, -0.0005702972412109375, -1.9073486328125e-06, -0.0005875825881958008, -1.71661376953125e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -6.306171417236328e-05, 0.0, -0.031215786933898926, -9.1552734375e-05, -3.814697265625e-06, 0.0, -0.0001430511474609375, -1.1444091796875e-05, -3.814697265625e-05, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.000102996826171875, -1.33514404296875e-05, -0.0002269744873046875, -0.0025053024291992188, -0.004581451416015625, 0.0, -0.005772709846496582, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.0002613067626953125, -1.71661376953125e-05, -0.000133514404296875, -2.6702880859375e-05, -0.005855560302734375, -8.392333984375e-05, -0.009937763214111328, -0.0005612372187897563, -0.008733749389648438, -4.57763671875e-05, -9.5367431640625e-06, -9.1552734375e-05, -0.00014495849609375, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.08139228820800781, -0.00018525123596191406, -6.866455078125e-05, -0.9802780151367188, -0.0023593902587890625, -1.9073486328125e-06, -0.0028467178344726562, -0.00010645389556884766, 0.0, -6.29425048828125e-05, 0.0], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(5),\n            HeroSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Mistress", "Of", "Pain", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Mistress", " ", "of", " ", "Pain", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 91, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 76, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 87, 193, "Damaged", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Heal", "<EOS>", 216, 77, 87, 193, "Hero", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "MistressOfPain", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template20"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Template5", "hole0": "HeroSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"score": -1.1789495575771625, "score_history": [-1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -1.1324882507324219e-05, -0.00023446064733434469, -3.814697265625e-06, -0.0004329681396484375, -5.7220458984375e-05, -0.000141143798828125, 0.0, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, 0.0, -0.024271011352539062, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -1.263618378288811e-05, -0.0001850128173828125, -0.0003795623779296875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.07301223278045654, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.000164031982421875, -0.025681495666503906, -9.5367431640625e-06, -0.0030727386474609375, -3.62396240234375e-05, -0.000274658203125, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0037643909454345703, 0.0, -1.1444091796875e-05, -0.0002002716064453125, -1.1444091796875e-05, -0.000499725341796875, -0.013818740844726562, -0.0002536773681640625, -1.9073486328125e-06, -0.00012886365584563464, -0.00013326990301720798, -0.000274658203125, -0.0001125335693359375, -0.000225067138671875, -0.000255584716796875, -1.52587890625e-05, -0.006046652793884277, 0.0, -0.0001735687255859375, -2.47955322265625e-05, -0.004489898681640625, -1.52587890625e-05, -1.1444091796875e-05, -0.0001316070556640625, -0.000110626220703125, -3.4332275390625e-05, -0.0006389617919921875, -0.000804901123046875, -2.86102294921875e-05, -0.001094576669856906, -0.2637735605239868, -0.00010383121843915433, -7.82012939453125e-05, -0.009192466735839844, -3.814697265625e-05, -0.04256439208984375, -3.0517578125e-05, -8.96453857421875e-05, 0.0, -0.000530242919921875, 0.0, -3.802754508797079e-05, -4.172325134277344e-06, -0.0003930329403374344, 0.0, -0.0001163482666015625, -5.340576171875e-05, -0.0002193450927734375, -3.4332275390625e-05, -2.288818359375e-05, -4.00543212890625e-05, -0.0003948211669921875, -7.62939453125e-06, -0.11254024505615234, -4.38690185546875e-05, -0.02750396728515625, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -9.72747802734375e-05, -0.0001468658447265625, -9.5367431640625e-06, -0.012754440307617188, -1.1444091796875e-05, -0.001438140869140625, -0.0737762451171875, -4.38690185546875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.000499725341796875, -1.9073486328125e-06, -0.00022125244140625, -0.047776222229003906, -0.0001010894775390625, -0.059345245361328125, -3.814697265625e-06, -0.00660097599029541, -0.00037455378333106637, -3.4570680327306036e-06, -3.814697265625e-06, -0.0001125335693359375, -0.0034923553466796875, -0.01631927490234375, 0.0, -0.33619236946105957, -0.00012648104166146368, 0.0, -3.0517578125e-05, -2.288818359375e-05], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(\n            ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Powermace", "<EOS>", 216, 86, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Powermace", "<EOS>", 72, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 91, 104, 130, "create_weapon", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 23, 146, "Weapon", "<EOS>", 217, 72, 69, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 123, 23, 146, "Minion", "Died", "<EOS>", 216, 58, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 58, 123, 43, 217, 58, 123, 37, 216, 61, 141, 218, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 69, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 69, 71, 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Powermace", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Powermace"}, {"_type": "Template16"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_weapon", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template16"}, {"_type": "Template12"}], "func": {"_type": "Name", "id": "Weapon"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}], "func": {"_type": "Name", "id": "MinionDied"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}], "func": {"_type": "Template25"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template39"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"score": -1.9247921740640095, "score_history": [-1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001911934232339263, -5.352353764465079e-05, -0.00011169286881340668, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.561641511216294e-05, -0.00011837482452392578, -5.7220458984375e-06, -5.7220458984375e-06, -9.1552734375e-05, -3.814697265625e-06, -4.76837158203125e-05, -2.09808349609375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.814697265625e-06, -3.4332275390625e-05, -9.894321920000948e-06, -1.4901160284352954e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -8.7738037109375e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -7.033347174001392e-06, -2.1457672119140625e-06, -0.0040857791900634766, -3.814697265625e-06, -0.0001697540283203125, -5.91278076171875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -6.866455078125e-05, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, -1.9073486328125e-06, -0.0001093149185180664, -3.814697265625e-06, -8.392333984375e-05, -0.034999847412109375, 0.0, -0.0002384185791015625, -7.62939453125e-06, -0.000244140625, -0.004032135009765625, -4.9591064453125e-05, -2.288818359375e-05, -0.0002307891845703125, -0.0001049041748046875, -0.09756851196289062, -9.5367431640625e-06, -0.0004024505615234375, -3.814697265625e-06, -0.3403805196285248, -0.9211385846138, -0.0818476676940918, -5.340576171875e-05, -0.054108619689941406, -1.33514404296875e-05, -0.3454322814941406, -0.0060100555419921875, -0.00043487548828125, -0.0001621246337890625, -3.814697265625e-05, -0.000469207763671875, -3.24249267578125e-05, 0.0, 0.0, -0.0001544952392578125, 0.0, -7.867794920457527e-06, -5.626678466796875e-05, -0.00017726421356201172, 0.0, -0.0005168914794921875, -1.9073486328125e-06, -0.0034093856811523438, -1.9073486328125e-05, -0.015407562255859375, -5.7220458984375e-06, -0.0077124834060668945, -0.0026088953018188477, -1.52587890625e-05, -2.47955322265625e-05, -2.09808349609375e-05, -9.441375732421875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0001049041748046875, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-05, -4.38690185546875e-05, -0.0003602504439186305, -8.344646857949556e-07, -0.00018703934620134532, -1.9311717551317997e-05, -5.7220458984375e-06], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(<UNK>Attack(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [93, 145, 230, 101, 125, "Screwjank", "Clunker", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Screwjank", " ", "Clunker", "<EOS>", 76, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 91, 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 37, 216, 58, 123, 23, 146, "<UNK>", "Attack", "<EOS>", 216, 69, 58, 124, 38, 216, 58, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 224, 205, "picker", "<EOS>", 51, 193, "User", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "5", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ScrewjankClunker", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template20"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "<UNK>Attack"}}], "func": {"_type": "Template25"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}], "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "UserPicker"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 5}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"score": -1.5081000313875776, "score_history": [-2.47955322265625e-05, -1.9073486328125e-06, -4.57763671875e-05, -4.38690185546875e-05, -3.814697265625e-06, -0.09103669226169586, -0.2064591348171234, -0.006501511204987764, -0.0003066802164539695, -0.0002765655517578125, -5.7220458984375e-06, -0.0005359649658203125, -3.814697265625e-06, -3.24249267578125e-05, -6.31808916295995e-06, -9.5367431640625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00043487548828125, 0.0, -1.9073486328125e-06, -0.000148773193359375, -4.9591064453125e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.52587890625e-05, -0.03291626274585724, -2.300739288330078e-05, -0.00011038773664040491, -0.00018894672393798828, -0.00037801259895786643, -3.933906555175781e-06, -0.0005397796630859375, -0.0003528594970703125, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -8.96453857421875e-05, -1.1920928244535389e-07, -0.00015676021575927734, -3.814697265625e-06, -0.0013523101806640625, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -8.7738037109375e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -6.532669067382812e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.5272369384765625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005645751953125, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -9.34600830078125e-05, -2.288818359375e-05, -0.0016880035400390625, -0.07229900360107422, -0.0002899169921875, 0.0, -0.0005323886871337891, 0.0, -3.814697265625e-06, -0.0002574920654296875, -0.00287628173828125, -0.000110626220703125, -0.0002210107195423916, -4.41074053014745e-06, -7.62939453125e-05, -0.0009670257568359375, -3.814697265625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.0032318842131644487, -3.123240458080545e-05, -0.001224517822265625, -0.41736698150634766, -1.9073486328125e-06, -0.06192678213119507, -0.20634347200393677, -0.31515079736709595, -0.048245567828416824, -0.029331207275390625, -1.9073486328125e-06, -0.002276850398629904, -9.179114385915454e-06, 0.0, -0.000152587890625], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 8, deathrattle=Deathrattle(Summon(SneedOldShredder\n            ()), PlayerSelector()))\n", "choice_history": [93, 145, 230, 101, 125, "<UNK>", "Old", "Shredder", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 84, 89, 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 77, 84, 224, 205, "deathrattle", "<EOS>", 18, 123, 23, 146, "Deathrattle", "<EOS>", 217, 58, 123, 23, 146, "Summon", "<EOS>", 216, 87, 193, "Sneed", "Old", "Shredder", "<EOS>", 87, 193, "Player", "Selector", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "<UNK>OldShredder", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Template34"}, {"_type": "Template7"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template22"}, {"_type": "Template34"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "deathrattle", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "SneedOldShredder"}], "func": {"_type": "Name", "id": "Summon"}}, {"_type": "Template5", "hole0": "PlayerSelector"}], "func": {"_type": "Name", "id": "Deathrattle"}}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"score": -57.03720001154295, "score_history": [0.0, -1.9073486328125e-06, -3.62396240234375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0008188321953639388, -0.006250619422644377, -3.814697265625e-06, -0.000110626220703125, -1.52587890625e-05, -0.00019073486328125, 0.0, -3.576278118089249e-07, -3.814697265625e-06, 0.0, -0.39005470275878906, -0.09476375579833984, -0.00090789794921875, -0.00011205523333046585, -0.0008949039620347321, -0.03364753723144531, -0.006519317626953125, -0.29151859879493713, -0.16075825691223145, -9.918212890625e-05, -0.010953903198242188, -0.7837048172950745, -0.3486673831939697, -3.814697265625e-06, -0.0065441131591796875, -0.9040327668190002, -0.39440035820007324, -3.814697265625e-06, -0.005328178405761719, -0.9127411246299744, -1.3004356622695923, -0.00017940998077392578, -0.0038604736328125, -0.8068222999572754, -1.3156465291976929, -0.00047779083251953125, -0.0028581619262695312, -0.8079873323440552, -1.3370933532714844, -0.0004863739013671875, -0.0024566650390625, -0.7922182083129883, -1.3278123140335083, -0.0005273818969726562, -0.0023250579833984375, -0.7860391736030579, -1.327427625656128, -0.0005216598510742188, -0.0023097991943359375, -0.7818096280097961, -1.3263550996780396, -0.000522613525390625, -0.0022916793823242188, -0.7793745398521423, -1.3255726099014282, -0.0005235671997070312, -0.0026391437277197838, -3.933906555175781e-06, -0.0004978179931640625, -0.0003261566162109375, -2.86102294921875e-05, -0.000751495361328125, -5.340576171875e-05, -0.004388658795505762, -1.7762025890988298e-05, -0.0015439987182617188, -0.001232147216796875, -0.2895536422729492, -0.0001983642578125, 0.0, -1.7515151500701904, -0.23521341383457184, -1.239776611328125e-05, -0.000492095947265625, 0.0, -0.9693058729171753, -0.6193051934242249, 0.0, -0.0001239776611328125, -1.9073486328125e-06, -0.9408729672431946, -0.7076124548912048, 0.0, -0.0001354217529296875, -1.9073486328125e-06, -1.1014232635498047, -0.7305202484130859, 0.0, -0.000186920166015625, -1.9073486328125e-06, -0.9655412435531616, -0.5350284576416016, -0.6462699770927429, -0.2616252899169922, -0.046479225158691406, -5.7220458984375e-06, -0.614879846572876, -0.4780825972557068, -0.32419052720069885, -0.1954364776611328, -0.07740306854248047, -3.814697265625e-06, -1.1187744140625, -1.0287760496139526, -0.00011467933654785156, -0.011980056762695312, -1.9073486328125e-06, -0.4807784855365753, -0.4557349979877472, -0.36124712228775024, -0.055390357971191406, -0.23697376251220703, -3.814697265625e-06, -1.091671109199524, -1.036121129989624, -0.13719630241394043, -0.08882522583007812, -7.05718994140625e-05, -7.62939453125e-05, -0.0004787445068359375, 0.0, -1.0327998399734497, -8.22540732769994e-06, -0.5266046524047852, -0.0002288818359375, -0.27752113342285156, -0.00046539306640625, -1.9073486328125e-06, -2.1302146911621094, -0.3457458019256592, -0.0003066062927246094, -0.0003509521484375, 0.0, -0.6160149574279785, -1.0892468690872192, -0.16854770481586456, -0.35016441345214844, -0.16184616088867188, -9.5367431640625e-06, -1.4236352443695068, -0.9486269950866699, 0.0, -0.0001583099365234375, -1.9073486328125e-06, -0.6588860154151917, -0.8313968181610107, -0.36015960574150085, -0.1575603485107422, -0.15436077117919922, -1.33514404296875e-05, -1.2414677143096924, -1.0093961954116821, -0.2802165150642395, -0.14852428436279297, -0.13205718994140625, -1.1444091796875e-05, -1.373392939567566, -1.490904450416565, -4.076957702636719e-05, -0.0005321502685546875, -1.9073486328125e-06, -0.47294822335243225, -0.5638981461524963, -0.5054778456687927, -0.07608795166015625, -0.2927389144897461, -7.62939453125e-06, -1.108303189277649, -1.0979962348937988, -0.00013756752014160156, -2.288818359375e-05, 0.0, -5.7816505432128906e-05, 0.0, 0.0, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.728534698486328e-05, 0.0, -0.008283615112304688, -5.340576171875e-05, -0.0005435943603515625, -0.0017242737812921405, -3.576278118089249e-07, -0.003239748999476433, 0.0, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from <UNK> import BluegillWarrior, ColdlightOracle, ColdlightOracle, MurlocRaider, MurlocTidecaller, MurlocTidecaller, MurlocTidecaller, MurlocTidecaller, MurlocTidecaller, MurlocTidecaller\n        <UNK> = [BluegillWarrior(), ColdlightOracle(), ColdlightOracle(),\n            ColdlightOracle(), <UNK><UNK>(), <UNK><UNK>(), <UNK>Player(),\n            <UNK><UNK>(), <UNK><UNK>()]\n        <UNK> = [BluegillWarrior(), <UNK><UNK>(), ColdlightOracle(),\n            <UNK><UNK>(), <UNK><UNK>(), MurlocRaider(), <UNK><UNK>(),\n            <UNK>Player()]\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "choice_history": [93, 145, 230, 101, 125, "Toshley", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 231, 106, 135, "<UNK>", "<EOS>", 207, 201, "Bluegill", "Warrior", "<EOS>", 201, "Coldlight", "Oracle", "<EOS>", 201, "Coldlight", "Oracle", "<EOS>", 201, "Murloc", "Raider", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", 201, "Murloc", "Tidecaller", "<EOS>", "0", "<EOS>", 98, 115, 216, 63, 146, "<UNK>", "<EOS>", 21, 141, 222, 87, 193, "Bluegill", "Warrior", "<EOS>", 87, 193, "Coldlight", "Oracle", "<EOS>", 87, 193, "Coldlight", "Oracle", "<EOS>", 87, 193, "Coldlight", "Oracle", "<EOS>", 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "<UNK>", "Player", "<EOS>", 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "<UNK>", "<UNK>", "<EOS>", 98, 115, 216, 63, 146, "<UNK>", "<EOS>", 21, 141, 222, 87, 193, "Bluegill", "Warrior", "<EOS>", 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "Coldlight", "Oracle", "<EOS>", 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "Murloc", "Raider", "<EOS>", 87, 193, "<UNK>", "<UNK>", "<EOS>", 71, 87, 193, "<UNK>", "Player", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "5", "<EOS>", "7", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Toshley", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "ImportFrom", "names": [{"_type": "alias", "name": "BluegillWarrior"}, {"_type": "alias", "name": "ColdlightOracle"}, {"_type": "alias", "name": "ColdlightOracle"}, {"_type": "alias", "name": "MurlocRaider"}, {"_type": "alias", "name": "MurlocTidecaller"}, {"_type": "alias", "name": "MurlocTidecaller"}, {"_type": "alias", "name": "MurlocTidecaller"}, {"_type": "alias", "name": "MurlocTidecaller"}, {"_type": "alias", "name": "MurlocTidecaller"}, {"_type": "alias", "name": "MurlocTidecaller"}], "level": 0, "module": "<UNK>"}, {"_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Template5", "hole0": "BluegillWarrior"}, {"_type": "Template5", "hole0": "ColdlightOracle"}, {"_type": "Template5", "hole0": "ColdlightOracle"}, {"_type": "Template5", "hole0": "ColdlightOracle"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "<UNK>Player"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Template5", "hole0": "BluegillWarrior"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "ColdlightOracle"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "MurlocRaider"}, {"_type": "Template5", "hole0": "<UNK><UNK>"}, {"_type": "Template15_expr_seq"}, {"_type": "Template5", "hole0": "<UNK>Player"}]}, "targets": [{"_type": "Name", "id": "<UNK>"}]}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 5, "hole1": 7}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"score": -0.20386703619669078, "score_history": [-9.5367431640625e-06, -3.814697265625e-06, -6.29425048828125e-05, -2.09808349609375e-05, -1.33514404296875e-05, -1.1920928244535389e-07, -0.000136369199026376, -3.814697265625e-06, -1.33514404296875e-05, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -5.125998541188892e-06, -2.47955322265625e-05, -3.814697265625e-06, -7.62939453125e-06, -4.9591064453125e-05, -5.7220458984375e-06, -0.0001735687255859375, -2.6702880859375e-05, -0.00020599365234375, -4.76837158203125e-05, -0.000152587890625, 0.0, -4.6491513785440475e-06, -5.7220458984375e-06, -2.288818359375e-05, 0.0, 0.0, 0.0, -1.9073486328125e-06, -2.0265579223632812e-06, -2.1457672119140625e-06, -0.0018180608749389648, -1.9073486328125e-06, -3.814697265625e-05, -0.011571884155273438, -1.33514404296875e-05, -0.0007234811782836914, -4.0531158447265625e-06, -1.71661376953125e-05, -0.00019073486328125, -3.24249267578125e-05, -5.7220458984375e-06, -0.00012969970703125, -1.9073486328125e-05, -0.00022614002227783203, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.00543212890625e-05, -0.000202178955078125, -0.00049591064453125, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -2.47955322265625e-05, -9.5367431640625e-06, -0.05620002746582031, 0.0, -0.0002536773681640625, -4.76837158203125e-05, -1.9073486328125e-06, -8.58306884765625e-05, -3.0517578125e-05, -0.0002765655517578125, -6.4849853515625e-05, -0.000408172607421875, -5.340576171875e-05, -0.019797325134277344, -1.9073486328125e-06, -0.017952078953385353, 0.0, -0.0007915496826171875, -0.0001316070556640625, -0.0013179779052734375, -9.5367431640625e-06, -1.1444091796875e-05, -0.0003910064697265625, -5.53131103515625e-05, -0.0003376007080078125, -0.0011997222900390625, -0.0003147125244140625, -7.05718994140625e-05, -0.00118255615234375, -0.008703231811523438, -3.4332275390625e-05, -0.07718846201896667, -4.649161837733118e-06, -1.9073486328125e-06, -0.0002880096435546875, -3.814697265625e-06], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "choice_history": [93, 145, 230, 101, 125, "Warbot", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Warbot", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 88, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 72, 224, 205, "enrage", "<EOS>", 21, 141, 217, 58, 123, 47, 217, 58, 123, 40, 216, 70, 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Warbot", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template16"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "enrage", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template36"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"score": -6.747913106986289, "score_history": [-1.9073486328125e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.1920928955078125e-06, -0.0005966323078610003, -4.76837158203125e-05, -1.33514404296875e-05, -0.0002079010009765625, -3.4332275390625e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001964569091796875, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.1444091796875e-05, -2.861018856492592e-06, -3.814697265625e-06, -0.000728607177734375, -0.0001316070556640625, -7.62939453125e-06, -1.9073486328125e-05, -1.52587890625e-05, -0.0003173351287841797, 0.0, -1.1444091796875e-05, -6.4849853515625e-05, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -3.0159948437358253e-05, 0.0, 0.0, -8.58306884765625e-05, -1.9073486328125e-06, -3.24249267578125e-05, -3.814697265625e-05, -0.000213623046875, -0.0001316070556640625, -6.4849853515625e-05, -0.261566162109375, -0.009868621826171875, -3.814697265625e-06, -0.5656596422195435, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.010408401489257812, -7.43865966796875e-05, -1.9073486328125e-06, -0.000110626220703125, -4.76837158203125e-05, -0.5965194702148438, -0.0069427490234375, -0.0001811981201171875, -3.814697265625e-05, -1.3708504438400269, -0.05385088920593262, -0.00015091439126990736, -0.0290679931640625, -3.814697265625e-06, -0.11382782459259033, 0.0, -0.000125885009765625, 0.0, -0.01787853240966797, -1.3589859008789062e-05, 0.0, -5.53131103515625e-05, -3.814697265625e-06, -5.7220458984375e-06, -2.6702880859375e-05, -3.24249267578125e-05, -3.62396240234375e-05, -8.20159912109375e-05, 0.0, -1.322310209274292, -0.000675201416015625, -9.34600830078125e-05, -0.001201629638671875, -0.002994537353515625, -6.103515625e-05, -0.001033782958984375, -0.224700927734375, -1.9073486328125e-06, -0.00017082691192626953, -5.7220458984375e-06, -0.000408172607421875, 0.0, -0.0001506805419921875, 0.0, -0.0029420852661132812, -1.9073486328125e-06, -0.14888954162597656, -1.1444091796875e-05, -9.5367431640625e-06, -0.48558855056762695, 0.0, -0.05416393280029297, -1.52587890625e-05, -0.06764888763427734, -3.123255737591535e-05, -0.33016300201416016, -0.0001125335693359375, -0.01265716552734375, 0.0, -0.006783485412597656, -1.9073486328125e-05, 0.0, -0.0001506805419921875, -0.08884525299072266, 0.0, -0.9553533792495728, -4.2319144995417446e-05, 0.0, -5.53131103515625e-05, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, effects=[Effect(Character<UNK>(player=\n            EnemyPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.\n            <UNK>, source_list=<UNK>)), PlayerSelector(EnemyPlayer())))])\n", "choice_history": [93, 145, 230, 101, 125, "Deathlord", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Deathlord", "<EOS>", 72, 89, 91, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 69, 84, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 122, 23, 146, "Character", "<UNK>", "<EOS>", 224, 205, "player", "<EOS>", 51, 193, "Enemy", "Player", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Add", "Card", "<EOS>", 216, 58, 122, 46, 225, 205, "source", "<EOS>", 15, 116, 23, 146, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 205, "source_list", "<EOS>", 23, 146, "<UNK>", "<EOS>", 58, 123, 23, 146, "Player", "Selector", "<EOS>", 216, 87, 193, "Enemy", "Player", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Deathlord", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deathlord"}, {"_type": "Template16"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template12"}, {"_type": "Template34"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template5", "hole0": "EnemyPlayer"}}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Template35"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>"}}, {"_type": "keyword", "arg": "source_list", "value": {"_type": "Name", "id": "<UNK>"}}]}], "func": {"_type": "Name", "id": "AddCard"}}, {"_type": "Call", "args": [{"_type": "Template5", "hole0": "EnemyPlayer"}], "func": {"_type": "Name", "id": "PlayerSelector"}}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"score": -3.1854665553519226, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.811964830267243e-05, -4.0531076592742465e-06, -0.0003535129362717271, -3.814697265625e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.15959739685058594, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.9802276912960224e-06, -8.82148651726311e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.0001239776611328125, -5.53131103515625e-05, -1.1444091796875e-05, 0.0, 0.0, -6.079673767089844e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.57763671875e-05, 0.0, 0.0, -0.0001678466796875, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -0.0001583099365234375, -0.000110626220703125, -0.000156402587890625, -0.000148773193359375, -0.000732421875, 0.0, -0.3672058582305908, 0.0, -0.0008373260498046875, -3.814697265625e-06, -3.4332275390625e-05, -0.0004978179931640625, -3.814697265625e-06, -0.19801902770996094, -2.288818359375e-05, -0.0186917781829834, 0.0, -0.6552257537841797, -0.12282562255859375, -5.7220458984375e-06, -0.2181549072265625, -1.9073486328125e-06, -0.7505595684051514, -0.018055319786071777, -2.86102294921875e-05, -6.4849853515625e-05, -0.24774551391601562, -0.00028228759765625, -0.037334442138671875, -4.76837158203125e-05, 0.0, -0.02978348731994629, -4.57763671875e-05, 0.0, -0.003322601318359375, 0.0, -0.030915260314941406, -7.62939453125e-06, -0.04390525817871094, -0.000728607177734375, -0.00692439079284668, -0.27216801047325134, -4.00543212890625e-05, -7.2479248046875e-05, -1.9073486328125e-06], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(ManaChange(2), CardSelector(\n            condition=IsMinion()))])\n", "choice_history": [93, 145, 230, 101, 125, "Nerub'ar", "Weblord", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Nerub'ar", " ", "Weblord", "<EOS>", 69, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 76, 224, 205, "buffs", "<EOS>", 21, 141, 217, 58, 123, 23, 146, "Buff", "<EOS>", 217, 58, 123, 23, 146, "Mana", "Change", "<EOS>", 216, 69, 58, 122, 23, 146, "Card", "Selector", "<EOS>", 224, 205, "condition", "<EOS>", 51, 193, "Is", "Minion", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Nerub'arWeblord", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nerub'ar Weblord"}, {"_type": "Template12"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template20"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "buffs", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ManaChange"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template5", "hole0": "IsMinion"}}]}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"score": -0.41270145879877873, "score_history": [0.0, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -3.814697265625e-06, -0.00023278864682652056, -9.703484829515219e-05, -1.07287787614041e-05, -3.814697265625e-06, -0.0001277923583984375, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -5.340576171875e-05, -3.814697265625e-06, -0.0001888275146484375, -1.9073486328125e-06, -1.1444091796875e-05, -5.8412379075889476e-06, -5.45977964065969e-05, -7.259845733642578e-05, -1.0728830375228426e-06, -0.0001735687255859375, -1.52587890625e-05, -1.52587890625e-05, 0.0, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, 0.0, -2.491474151611328e-05, 0.0, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -6.103515625e-05, -1.1444091796875e-05, -0.0004215240478515625, -0.000102996826171875, -0.000278472900390625, -0.001018524169921875, -0.00179290771484375, 0.0, -0.30796146392822266, 0.0, -0.09974288940429688, -2.288818359375e-05], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "choice_history": [93, 145, 230, 101, 125, "Spectral", "Knight", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Spectral", " ", "Knight", "<EOS>", 77, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 76, 81, 224, 205, "spell_targetable", "<EOS>", 39, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "SpectralKnight", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spectral Knight"}, {"_type": "Template22"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template20"}, {"_type": "Template28"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "spell_targetable", "value": {"_type": "Template27"}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"score": -1.381977899604685, "score_history": [0.0, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00025054652360267937, -0.00028844596818089485, -9.071482054423541e-05, -4.76837158203125e-05, -1.1444091796875e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.768370445162873e-07, 0.0, 0.0, -0.0025463104248046875, -0.000102996826171875, -3.814697265625e-06, -1.52587890625e-05, -0.0001125335693359375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.8000440832111053e-05, -1.5735622582724318e-05, -3.933906555175781e-06, -1.9073486328125e-06, -0.000102996826171875, -0.0001678466796875, -9.5367431640625e-06, -0.002964019775390625, -1.71661376953125e-05, -0.0001392364501953125, -5.7220458984375e-06, -0.017942428588867188, -3.814697265625e-06, -1.9073486328125e-05, -0.0001201629638671875, -0.11984443664550781, -3.814697265625e-06, -0.002109527587890625, -9.5367431640625e-06, -0.2020823061466217, -0.0033500490244477987, -4.1961669921875e-05, -0.4823026657104492, -0.15102767944335938, -1.9073486328125e-06, -0.3951822519302368, -1.2755393072438892e-05, 0.0, -1.9073486328125e-06, 0.0, -6.127357482910156e-05, 0.0, -1.9073486328125e-06, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.288818359375e-05, 0.0, -3.814697265625e-06, -6.29425048828125e-05, -5.7220458984375e-06, -0.00045430660247802734, -1.1920928244535389e-07, -0.00026226043701171875, -3.576278118089249e-07, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Heal(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [93, 145, 230, 101, 125, "Wailing", "Soul", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Wailing", " ", "Soul", "<EOS>", 76, 89, 91, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 23, 146, "Heal", "<EOS>", 216, 77, 87, 193, "Hero", "Selector", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "3", "<EOS>", "5", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "WailingSoul", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Template5", "hole0": "HeroSelector"}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 3, "hole1": 5}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"score": -0.3627916388613741, "score_history": [-5.7220458984375e-06, 0.0, -4.76837158203125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -8.821448318485636e-06, -2.9801878554280847e-05, -0.060200873762369156, -3.814697265625e-06, -9.1552734375e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000179290771484375, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -5.340576171875e-05, -5.161633816896938e-05, -1.6570091247558594e-05, -2.384185791015625e-06, 0.0, -3.4332275390625e-05, -4.38690185546875e-05, -3.814697265625e-05, 0.0, 0.0, -1.7404556274414062e-05, 0.0, -3.62396240234375e-05, -1.71661376953125e-05, -6.67572021484375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.0398367016459815e-05, 0.0, -9.918212890625e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001697540283203125, -1.1444091796875e-05, -0.0001277923583984375, -3.814697265625e-05, -1.9073486328125e-05, -9.34600830078125e-05, -0.09318351745605469, -1.9073486328125e-06, -0.17236745357513428, -1.1920928244535389e-07, -0.0002918243408203125, -0.0001983642578125, -1.2040087312925607e-05, -6.19888032815652e-06, -1.9073486328125e-06, -0.007405400276184082, 0.0, -0.0015888214111328125, -0.00334930419921875, -0.0053310394287109375, -0.000148773193359375, -3.814697265625e-06, -0.000728607177734375, -0.0002307891845703125, -0.0001468658447265625, -0.00012969970703125, -0.000125885009765625, -1.1444091796875e-05, -0.01049041748046875, -0.001033782958984375, -5.7220458984375e-06, -0.004308739677071571, 0.0, 0.0, -2.86102294921875e-05, -1.9073486328125e-06], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3),\n            SelfSelector())])\n", "choice_history": [93, 145, 230, 101, 125, "Amani", "Berserker", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Amani", " ", "Berserker", "<EOS>", 69, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 69, 72, 225, 205, "taunt", "<EOS>", 24, 147, "True", "<EOS>", 205, "enrage", "<EOS>", 21, 141, 217, 58, 123, 47, 217, 58, 123, 40, 216, 72, 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "AmaniBerserker", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Amani Berserker"}, {"_type": "Template12"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template12"}, {"_type": "Template16"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "enrage", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Template29"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template36"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"score": -0.8334274533153803, "score_history": [-7.43865966796875e-05, -3.62396240234375e-05, -1.9073486328125e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.03613228723406792, -0.0005601267330348492, -9.178851178148761e-05, -8.20159912109375e-05, -1.52587890625e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.71661376953125e-05, -9.5367431640625e-06, 0.0, -0.000110626220703125, -5.7220458984375e-06, -2.09808349609375e-05, -3.814697265625e-06, -2.6702880859375e-05, -2.407998726994265e-05, -1.6808504369691946e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -8.20159912109375e-05, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -9.918212890625e-05, 0.0, -0.0005370378494262695, 0.0, -0.0001964569091796875, 0.0, -6.103515625e-05, -2.47955322265625e-05, -6.866455078125e-05, 0.0, -0.001003265380859375, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, 0.0, -8.58306884765625e-06, 0.0, -5.91278076171875e-05, -0.00193023681640625, -1.9073486328125e-06, -7.05718994140625e-05, -0.00014495849609375, -0.000125885009765625, -4.00543212890625e-05, -0.000560760498046875, -0.013185501098632812, -1.1444091796875e-05, 0.0, -0.0004165172576904297, 0.0, -5.7220458984375e-06, -5.53131103515625e-05, -0.002590179443359375, -5.340576171875e-05, -1.9073486328125e-06, -0.0001125335693359375, -0.000110626220703125, -0.03125953674316406, -0.06533622741699219, -3.814697265625e-05, -1.9073486328125e-06, -0.025088666006922722, -0.002233266830444336, -3.445148468017578e-05, -0.000293731689453125, -1.33514404296875e-05, -0.0026885271072387695, 0.0, -0.0030517578125, -0.0007381439208984375, -0.32151710987091064, -0.0001828633830882609, -2.0265579223632812e-06, -0.000720977783203125, -3.814697265625e-06, -0.0031280517578125, -8.58306884765625e-05, -0.0005550384521484375, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.004689808469265699, -0.00015461444854736328, -9.5367431640625e-06, -0.0001983642578125, -8.58306884765625e-05, -0.0001735687255859375, -0.000614166259765625, -0.00241851806640625, -0.0004138946533203125, -0.2283487319946289, -0.0001087188720703125, -0.000278472900390625, -5.7220458984375e-06, -0.0031728744506835938, 0.0, -0.0015211105346679688, 0.0, -0.025804758071899414, -6.866455078125e-05, -0.0011138916015625, -0.0008373260498046875, -0.0001735687255859375, 0.0, -0.002166748046875, -0.0001354217529296875, 0.0, -5.7220458984375e-05, -0.00028228759765625, 0.0, -0.03373537212610245, -0.010666515678167343, -6.651876901742071e-05, -0.00014495849609375, -3.814697265625e-06], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector(<UNK>Player())))])\n", "choice_history": [93, 145, 230, 101, 125, "Archmage", "Antonidas", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Archmage", " ", "Antonidas", "<EOS>", 79, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 77, 79, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 122, 23, 146, "Spell", "Cast", "<EOS>", 224, 205, "player", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Add", "Card", "<EOS>", 216, 58, 122, 46, 224, 205, "source", "<EOS>", 15, 116, 23, 146, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 58, 123, 23, 146, "Player", "Selector", "<EOS>", 216, 87, 193, "<UNK>", "Player", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ArchmageAntonidas", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Archmage Antonidas"}, {"_type": "Template24"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template22"}, {"_type": "Template24"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Template35"}, "keywords": [{"_type": "keyword", "arg": "source", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>"}}]}], "func": {"_type": "Name", "id": "AddCard"}}, {"_type": "Call", "args": [{"_type": "Template5", "hole0": "<UNK>Player"}], "func": {"_type": "Name", "id": "PlayerSelector"}}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"score": -1.4525351075787967, "score_history": [-7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.4332275390625e-05, -2.6702880859375e-05, -1.1920922133867862e-06, -3.3378470106981695e-05, -1.9073486328125e-06, -0.000331878662109375, -8.7738037109375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -5.53131103515625e-05, 0.0, -0.0001983642578125, -0.0003185272216796875, -1.52587890625e-05, -3.4332275390625e-05, -8.20159912109375e-05, -1.9073486328125e-06, -0.03410911560058594, -7.62939453125e-06, -1.9073486328125e-06, -6.556489552167477e-06, 0.0, -8.7738037109375e-05, -0.0023899078369140625, -0.0016574859619140625, -0.0001201629638671875, -3.814697265625e-06, -0.001865386962890625, 0.0, -1.9073486328125e-06, -6.103515625e-05, -1.71661376953125e-05, -5.7220458984375e-06, -0.00035858154296875, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -2.8848648071289062e-05, -1.9073486328125e-05, -0.015316367149353027, -4.8160552978515625e-05, -5.7220458984375e-06, -4.00543212890625e-05, -1.33514404296875e-05, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0002117156982421875, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, -2.2649765014648438e-06, -0.37690067291259766, -5.7220458984375e-06, -0.043941497802734375, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -0.0011005401611328125, -0.12786348164081573, -2.384185791015625e-06, -3.814697265625e-06, -0.4356117248535156, -2.09808349609375e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -7.05718994140625e-05, 0.0, -0.010126113891601562, -0.24125075340270996, 0.0, -4.57763671875e-05, -0.15758228302001953, -0.00018310546875], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(4)\n", "choice_history": [93, 145, 230, 101, 125, "Bananas", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Bananas", "<EOS>", 70, 89, 88, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 102, 128, 18, 123, 15, 116, 52, "change_attack", "<EOS>", 216, 70, 102, 128, 18, 123, 15, 116, 52, "increase_health", "<EOS>", 216, 76, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Bananas", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template14"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "change_attack"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template20"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "increase_health"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"score": -2.090942816724116, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.867782187531702e-06, -5.8412379075889476e-06, 0.0, -1.52587890625e-05, -0.00011444091796875, -0.1430683135986328, -5.7220458984375e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-05, -6.103515625e-05, -0.000102996826171875, -1.9073486328125e-06, -0.001422882080078125, -5.7220458984375e-06, -0.00933074951171875, -3.814697265625e-06, -3.814697265625e-06, -6.318072337307967e-06, -1.0132789611816406e-05, -5.841255187988281e-06, 0.0, -2.09808349609375e-05, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.0531158447265625e-06, -0.00037550926208496094, -3.814697265625e-06, -2.09808349609375e-05, -5.91278076171875e-05, 0.0, -0.0014133453369140625, -3.814697265625e-06, -9.5367431640625e-06, -1.52587890625e-05, -3.24249267578125e-05, -6.103515625e-05, -2.47955322265625e-05, 0.0, -5.7220458984375e-05, 0.0, -6.4849853515625e-05, -1.1444091796875e-05, -0.0010590553283691406, -3.063678741455078e-05, -7.62939453125e-06, -3.814697265625e-06, -1.3470649719238281e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.0002288818359375, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, 0.0, -7.62939453125e-06, -0.00018310546875, -1.1920928244535389e-07, -0.054920196533203125, -3.62396240234375e-05, -0.0020503997802734375, -1.1444091796875e-05, -2.6702880859375e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.14550542831420898, -2.384185791015625e-06, -0.00152587890625, -0.031110763549804688, -5.53131103515625e-05, -0.00019073486328125, -0.004886627197265625, -0.0029058456420898438, -5.7220458984375e-06, -0.0059261322021484375, -1.1444091796875e-05, -5.7220458984375e-06, -0.000225067138671875, -7.62939453125e-06, -0.20574414730072021, -1.4305104514278355e-06, -0.011292457580566406, 0.0, -0.0001583099365234375, -0.03169536590576172, -1.9073486328125e-06, -0.0056056976318359375, -0.0016536712646484375, -0.0026454925537109375, -0.000217437744140625, -0.0001220703125, -3.814697265625e-06, -0.16102635860443115, -4.7087669372558594e-05, -0.0003032684326171875, -0.32049560546875, -1.9073486328125e-06, -0.010968208312988281, -0.0010280609130859375, -0.0010738372802734375, -5.53131103515625e-05, -1.1444091796875e-05, -0.00061798095703125, -9.5367431640625e-06, 0.0, -0.000408172607421875, -0.018370704725384712, -1.454353241570061e-05, -3.814697265625e-06, -0.0018129348754882812, -0.00014495849609375, -0.00010192392801400274, -2.6702880859375e-05, -0.024103164672851562, -0.0001659393310546875, -1.33514404296875e-05, -4.76837158203125e-05, -0.0019207000732421875, -6.29425048828125e-05, 0.0, -0.0001239776611328125, -0.5218645334243774, -3.254413604736328e-05, -1.9073486328125e-06, -0.05837059020996094, -0.000316619873046875, -8.83340835571289e-05, -2.09808349609375e-05, -0.0008525848388671875, -8.20159912109375e-05, -0.0001773834228515625, -0.0042877197265625, -9.5367431640625e-06, 0.0, -0.2709159851074219, -0.024326682090759277, -1.9073486328125e-06, -1.52587890625e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.die(Null)\n            self.target.<UNK>()\n", "choice_history": [93, 145, 230, 101, 125, "Blessed", "Champion", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Blessed", " ", "Champion", "<EOS>", 77, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 91, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 232, 108, 98, 115, 216, 63, 146, "temp_attack", "<EOS>", 18, 121, 15, 116, 52, "calculate_attack", "<EOS>", 98, 115, 216, 63, 146, "<UNK>", "<EOS>", 15, 116, 52, "health", "<EOS>", 105, 134, 19, 126, 23, 146, "temp_attack", "<EOS>", 213, 6, 216, 83, 229, 102, 128, 18, 123, 15, 116, 52, "die", "<EOS>", 216, 64, 148, "Null", "<EOS>", 230, 102, 128, 18, 123, 15, 116, 52, "die", "<EOS>", 216, 64, 148, "Null", "<EOS>", 102, 128, 18, 121, 15, 116, 52, "<UNK>", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "BlessedChampion", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Template22"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "calculate_attack"}}, "targets": [{"_type": "Name", "id": "temp_attack"}]}, {"_type": "Assign", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "health"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "die"}}}], "orelse": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "die"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "<UNK>"}}}], "test": {"_type": "Compare", "left": {"_type": "Name", "id": "temp_attack"}, "comparators": [{"_type": "Template31"}], "ops": [{"_type": "Eq"}]}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"score": -3.538563858396614, "score_history": [0.0, -3.814697265625e-06, -1.52587890625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0002961912250611931, -0.09593465924263, -0.007585914805531502, -0.0001388733508065343, -1.71661376953125e-05, -9.5367431640625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -5.340576171875e-05, -3.4332275390625e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -6.258291978156194e-05, -1.3589859008789062e-05, -0.0003877878189086914, -0.0001735687255859375, -0.0002331733558094129, -1.9073486328125e-05, -0.0002231597900390625, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -4.38690185546875e-05, -1.1920928244535389e-07, -0.0005625486373901367, -3.814697265625e-06, -5.7220458984375e-05, 0.0, -7.62939453125e-06, -1.52587890625e-05, -1.1444091796875e-05, -3.814697265625e-06, -2.4557111828471534e-05, -3.814697265625e-06, -0.0012359619140625, 0.0, -0.010981559753417969, 0.0, -0.6705598831176758, -1.1444091796875e-05, -1.9073486328125e-05, -8.0108642578125e-05, -0.45694732666015625, 0.0, -0.02028360590338707, -0.00016747534391470253, -1.52587890625e-05, -0.00261688232421875, -0.0036449432373046875, -0.534184455871582, -0.0003833770751953125, -2.6702880859375e-05, -0.000339508056640625, -0.0001888275146484375, -0.3996347188949585, -0.00043785572052001953, -0.03440437465906143, -0.005568027496337891, -0.04317447170615196, -0.009287448599934578, -3.361701965332031e-05, -0.0005474090576171875, -0.9777650833129883, -0.0024814605712890625, 0.0, -0.05397534370422363, -2.5510787963867188e-05, -1.52587890625e-05, -0.0002651214599609375, 0.0, -0.20096778869628906, -0.0009313351474702358, 0.0, -1.9073486328125e-06, 0.0, -2.7060508728027344e-05, 0.0, 0.0, 0.0, -0.00045013427734375, 0.0, -7.62939453125e-06, 0.0, -4.0531158447265625e-06, 0.0, -3.814697265625e-06, -2.86102294921875e-05, -7.62939453125e-06, -6.079673312342493e-06, -1.3709036466025282e-05, -0.0007072687149047852, -2.50339189733495e-06, 0.0], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [93, 145, 230, 101, 125, "Cabal", "Shadow", "Priest", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 81, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 87, 193, "Kill", "<EOS>", 58, 123, 38, 218, 58, 123, 23, 146, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", 216, 69, 87, 193, "Enemy", "Player", "<EOS>", 87, 193, "Random", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "4", "<EOS>", "5", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "CabalShadowPriest", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"_type": "Template28"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Template5", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "Attack<UNK>Than<UNK>EqualTo"}}, {"_type": "Template5", "hole0": "EnemyPlayer"}, {"_type": "Template5", "hole0": "RandomPicker"}], "func": {"_type": "Template26"}}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 4, "hole1": 5}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"score": -9.377851371676968, "score_history": [0.0, -5.7220458984375e-06, -2.47955322265625e-05, -0.000263214111328125, -0.0001087188720703125, -3.0993964173831046e-05, -0.0007195466896519065, -0.0005056781228631735, -1.9073468138230965e-06, -7.62939453125e-06, -3.4332275390625e-05, -0.00811767578125, -1.71661376953125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -1.71661376953125e-05, -6.4849853515625e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0052089691162109375, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.5497102140216157e-05, -2.288818359375e-05, -4.57763671875e-05, -6.270408630371094e-05, -0.0007807016372680664, -1.1444091796875e-05, -6.103515625e-05, -7.62939453125e-06, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -7.081031799316406e-05, -4.57763671875e-05, -5.91278076171875e-05, -0.0002536773681640625, 0.0, -5.340576171875e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.47955322265625e-05, -9.34600830078125e-05, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -6.103515625e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.011466145515441895, -2.110004425048828e-05, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.000286102294921875, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.3433189392089844, -2.47955322265625e-05, -0.03394317626953125, -3.814697265625e-06, 0.0, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -0.00084686279296875, -0.24169163405895233, 0.0, -9.5367431640625e-06, -0.1322307586669922, -0.0002727508544921875, -0.31743335723876953, -0.001331329345703125, -0.0004730224609375, -0.04844188690185547, -0.0692129135131836, -0.0002536773681640625, 0.0, -0.0006084442138671875, -1.9073486328125e-06, -0.007718086242675781, -0.000125885009765625, -0.0008853673934936523, -1.9073486328125e-06, -1.52587890625e-05, -0.000156402587890625, -3.814697265625e-06, -0.0001544952392578125, 0.0, -0.015244483947753906, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.008030295372009277, -7.62939453125e-06, -0.0005481273401528597, -3.62396240234375e-05, -3.814697265625e-05, -0.4453878402709961, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0858774185180664, -0.024022314697504044, -1.9073486328125e-06, -5.7220458984375e-06, -0.0008831024169921875, -2.6702880859375e-05, 0.0, 0.0, -0.00040435791015625, -0.0006028413772583008, 0.0, -1.9073486328125e-06, -0.030716896057128906, -0.000179290771484375, -0.012502670288085938, -0.0005092620849609375, -0.0029582977294921875, -1.71661376953125e-05, -0.000591278076171875, -0.0010509490966796875, -0.2778806686401367, -0.002422332763671875, -0.06360626220703125, -9.5367431640625e-06, -0.06527996063232422, 0.0, -0.06813621520996094, -3.814697265625e-06, -0.011506080627441406, 0.0, -0.006892681121826172, -0.00016987323760986328, -0.6632062792778015, -1.1444091796875e-05, -6.29425048828125e-05, -0.032242774963378906, -1.9073486328125e-06, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.11623096466064453, 0.0, -0.02487468719482422, 0.0, -0.9591169357299805, 0.0, -0.000392913818359375, 0.0, -0.0035767473746091127, -3.0994415283203125e-05, -0.38823413848876953, -3.576278118089249e-07, -1.9527519941329956, -0.0037499666213989258, -0.043613433837890625, -1.4285383224487305, -0.0001277923583984375, -0.5984300971031189, -0.0003643035888671875, -0.48537635803222656, -2.288818359375e-05, -0.19658184051513672, -0.12621498107910156, -0.000335693359375, -5.7220458984375e-06], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        if self.target is game.other_player.minions:\n            game.other_player.minions.remove('minion_played', self._reveal)\n", "choice_history": [93, 145, 230, 101, 125, "Cone", "Of", "Cold", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Cone", " ", "of", " ", "Cold", "<EOS>", 76, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 88, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 232, 108, 102, 128, 18, 123, 15, 116, 52, "damage", "<EOS>", 217, 76, 74, 103, 129, 41, 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 41, "damage", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_spell_damage", "<EOS>", 216, 70, 74, 105, 133, 19, 126, 52, 213, 10, 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", "remove", "<EOS>", 217, 66, 155, "minion_played", "<EOS>", 55, 116, 31, "_reveal", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ConeOfCold", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template20"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template20"}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "damage"}}}, {"_type": "For", "iter": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_spell_damage"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "damage"}}}], "target": {"_type": "Template30"}}, {"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "minion_played"}, {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "_reveal"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}, "attr": "remove"}}}], "test": {"_type": "Compare", "left": {"_type": "Template8"}, "comparators": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "ops": [{"_type": "Is"}]}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"score": -1.5921454101511188, "score_history": [-1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0002593994140625, -8.58306884765625e-05, -1.8000488125835545e-05, -0.0015711685409769416, -0.00018320789968129247, -0.00011407821875764057, -1.9073486328125e-05, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -0.0001697540283203125, -0.0001049041748046875, -5.7220458984375e-06, -9.5367431640625e-06, -7.62939453125e-05, -1.1444091796875e-05, -1.1444091796875e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.033334895822918e-06, -1.9073486328125e-05, -1.1563301086425781e-05, -4.7922130761435255e-05, -0.0004630088806152344, -3.814697265625e-06, -0.0001277923583984375, -0.000194549560546875, -1.71661376953125e-05, -0.0005245208740234375, -3.814697265625e-05, -9.34600830078125e-05, 0.0, -0.34626197814941406, -3.814697265625e-06, -3.4332275390625e-05, -0.00017547607421875, -0.025598526000976562, -9.5367431640625e-06, -0.0283966064453125, -2.09808349609375e-05, -0.0025997161865234375, -3.814697265625e-06, -0.00032806396484375, -7.43865966796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -8.392333984375e-05, -1.9073486328125e-06, 0.0, -0.010484695434570312, -4.1961669921875e-05, -0.02968597412109375, -0.0001392364501953125, -0.002422332763671875, -0.0003032684326171875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0016002655029296875, 0.0, -1.9073486328125e-06, -0.002338409423828125, -2.47955322265625e-05, -0.005218505859375, -7.62939453125e-05, -0.0011348723201081157, -6.15116732660681e-05, 0.0, -0.000156402587890625, -0.24973487854003906, -0.0004673004150390625, -0.0001316070556640625, -0.0006351470947265625, -0.000514984130859375, -0.0054187774658203125, -0.0002117156982421875, -0.8650656938552856, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0076169962994754314, -0.00023484230041503906, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -2.6702880859375e-05, 0.0, 0.0, -3.4332275390625e-05, -0.0001506805419921875, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -4.9591064453125e-05, -9.5367431640625e-06, -0.00017297265003435314, 0.0, -3.1590458092978224e-05, -4.768370445162873e-07, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(2))]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [93, 145, 230, 101, 125, "Defender", "Of", "Argus", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Defender", " ", "of", " ", "Argus", "<EOS>", 76, 89, 91, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 37, 216, 61, 141, 218, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 70, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 69, 71, 58, 122, 38, 224, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "3", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DefenderOfArgus", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}], "func": {"_type": "Template25"}}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 3}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"score": -4.754022514936871, "score_history": [0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -1.394745322613744e-05, -3.814697265625e-06, -0.0198211669921875, -0.0020656585693359375, -2.288818359375e-05, 0.0, -1.1920928244535389e-07, -1.33514404296875e-05, 0.0, -0.0007781982421875, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0040836334228515625, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -2.264975591970142e-06, -1.9073486328125e-06, -3.24249267578125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.00832831859588623, -7.62939453125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00020825862884521484, -1.9073486328125e-06, -0.019357681274414062, -1.9073486328125e-06, -0.02821826934814453, -3.814697265625e-06, -0.25472164154052734, -5.7220458984375e-06, -3.814697265625e-06, -0.15273666381835938, 0.0, -1.9073486328125e-06, 0.0, -0.000133514404296875, 0.0, -1.9073486328125e-06, 0.0, -0.0001614093780517578, 0.0, -0.0002155303955078125, -0.000270843505859375, -7.62939453125e-06, -0.00011444091796875, -0.0007915496826171875, -0.04504203796386719, -0.00543975830078125, -4.911358701065183e-05, -0.0008138712728396058, -0.0009517669677734375, -0.0001850128173828125, -0.13218116760253906, -0.00048065185546875, 0.0, -0.7091678380966187, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, -0.03308868408203125, -0.00022125244140625, -7.62939453125e-06, -0.0026702880859375, -2.6702880859375e-05, -0.27149486541748047, -0.5814647674560547, -2.6702880859375e-05, -3.814697265625e-06, -0.0862121656537056, -0.5062264204025269, -0.000675201416015625, -0.0007457733154296875, 0.0, -0.1397562026977539, -3.4332275390625e-05, -0.014025688171386719, 0.0, -0.0009053942048922181, -0.05563020706176758, -0.00130462646484375, -0.000171661376953125, -1.9073486328125e-06, -0.005840301513671875, -5.7220458984375e-05, -0.02373504638671875, -7.82012939453125e-05, -0.34468841552734375, -1.9073486328125e-06, -0.8429867029190063, -9.775161743164062e-06, -3.24249267578125e-05, -0.4502086639404297, -0.0001773834228515625, 0.0, -0.004862666130065918, -9.5367431640625e-06, 0.0, -7.82012939453125e-05, 0.0], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 2, effects=[Effect(CharacterAttack(condition=\n            IsMinion()), ActionTag(Heal(5), HeroSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Doomhammer", "<EOS>", 216, 86, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Doomhammer", "<EOS>", 77, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 224, 205, "overload", "<EOS>", 27, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 23, 146, "Weapon", "<EOS>", 217, 69, 69, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 122, 23, 146, "Character", "Attack", "<EOS>", 224, 205, "condition", "<EOS>", 51, 193, "Is", "Minion", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Heal", "<EOS>", 216, 77, 87, 193, "Hero", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Doomhammer", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Template22"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "overload", "value": {"_type": "Template12"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template12"}, {"_type": "Template12"}], "func": {"_type": "Name", "id": "Weapon"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "CharacterAttack"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template5", "hole0": "IsMinion"}}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Template5", "hole0": "HeroSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template39"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"score": -6.507007505029826, "score_history": [0.0, -3.4332275390625e-05, -5.7220458984375e-06, -1.33514404296875e-05, -3.814697265625e-06, -5.8412379075889476e-06, -5.006785613659304e-06, 0.0, -3.814697265625e-06, -0.000110626220703125, -0.0005359649658203125, -2.47955322265625e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.000728607177734375, -1.9073486328125e-06, -0.00018310546875, -5.7220458984375e-06, -5.7220458984375e-06, -2.0026978745590895e-05, -9.894371032714844e-06, -8.2254373410251e-06, -1.1920928244535389e-07, -9.34600830078125e-05, 0.0, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0005981922149658203, 0.0, -8.96453857421875e-05, -0.0002079010009765625, -1.9073486328125e-06, -0.0001220703125, -5.7220458984375e-06, -7.62939453125e-06, -5.91278076171875e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -1.33514404296875e-05, 0.0, -1.1563301086425781e-05, -5.7220458984375e-06, -0.06262147426605225, -6.0558319091796875e-05, -0.0001010894775390625, -3.814697265625e-06, -1.9073486328125e-05, 0.0, 0.0, 0.0, -0.000240325927734375, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.16174030303955078, -1.52587890625e-05, -0.011919021606445312, -7.62939453125e-06, -5.7220458984375e-06, -0.0001850128173828125, -3.814697265625e-06, -0.5858908891677856, 0.0, -0.0911245346069336, -0.0018634796142578125, -3.0517578125e-05, 0.0, -0.0004940032958984375, -9.5367431640625e-06, -0.0015611648559570312, -5.7220458984375e-06, -0.0003879070281982422, 0.0, -3.24249267578125e-05, -0.0001220703125, 0.0, -1.1444091796875e-05, 0.0, -0.0303192138671875, 0.0, -0.011582374572753906, -0.001461029052734375, 0.0, -0.03281402587890625, -1.9073486328125e-06, -0.0011340375058352947, -3.814697265625e-06, -0.05916786193847656, -0.0063648223876953125, -0.001621246337890625, -4.57763671875e-05, -0.0004215240478515625, -6.866455078125e-05, -0.000934600830078125, -3.62396240234375e-05, -0.01613330841064453, 0.0, -0.024871826171875, 0.0, -0.0010633468627929688, -0.0018224716186523438, 0.0, -0.07948601245880127, 0.0, -2.09808349609375e-05, -0.011470794677734375, -9.34600830078125e-05, -1.9073486328125e-06, 0.0, -0.00022125244140625, 0.0, -0.00012969970703125, 0.0, -0.09616351127624512, -1.9073486328125e-06, -0.0077114105224609375, -0.0006694793701171875, -0.001220703125, -0.000431060791015625, -0.001110076904296875, -7.62939453125e-06, -0.0032291412353515625, -5.7220458984375e-06, -0.0004496574401855469, 0.0, -0.10451412200927734, -0.0012531280517578125, -0.0002536773681640625, -5.7220458984375e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -0.000171661376953125, -0.5007807016372681, -3.1828865758143365e-05, -5.7220458984375e-06, -0.031195640563964844, -0.0001888275146484375, -2.6702880859375e-05, -1.9073486328125e-05, -0.24408340454101562, -1.9073486328125e-06, 0.0, -0.9705667495727539, 0.0, -0.7504959106445312, -0.1853771209716797, 0.0, -0.22747278213500977, 0.0, -0.0023908615112304688, -0.007829666137695312, 0.0, -5.7220458984375e-06, -0.0005168914794921875, -1.9073486328125e-06, 0.0, -0.039093017578125, 0.0, -0.32486629486083984, -0.048234548419713974, -7.390948667307384e-06, -0.6385442614555359, -1.9073486328125e-06, -0.0036907196044921875, -0.06580829620361328, -1.9073486328125e-06, -0.4070425033569336, -0.03247392177581787, 0.0, -0.0075359344482421875, -5.7220458984375e-06, -0.0027551651000976562, 0.0, -0.0013866424560546875, -0.018053054809570312, -0.000392913818359375, -1.9073486328125e-06, -0.0046710968017578125, -2.47955322265625e-05, -2.288818359375e-05, -9.5367431640625e-06, -2.47955322265625e-05, -0.010316848754882812, 0.0, -0.5541391372680664, -0.005499720573425293, -1.9073486328125e-06, -0.0013632774353027344, -1.9073486328125e-06, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.card.<UNK>()\n        else:\n            self.target.card.summon(self.target.player, game, len(self.\n                target.player.minions))\n", "choice_history": [93, 145, 230, 101, 125, "Earth", "Shock", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Earth", " ", "Shock", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 88, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 98, 115, 216, 63, 146, "targets", "<EOS>", 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 15, 116, 32, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 105, 134, 17, 119, 4, 217, 59, 126, 15, 116, 15, 116, 52, "card", "<EOS>", "minion_type", "<EOS>", 213, 10, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 59, 126, 52, 213, 9, 216, 63, 146, "targets", "<EOS>", 230, 102, 128, 18, 123, 15, 116, 52, "change_attack", "<EOS>", 216, 69, 102, 128, 18, 121, 15, 116, 15, 116, 52, "card", "<EOS>", "<UNK>", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 15, 116, 52, "card", "<EOS>", "summon", "<EOS>", 218, 55, 116, 52, "player", "<EOS>", 63, 146, "game", "<EOS>", 58, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 15, 116, 52, "player", "<EOS>", "minions", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "EarthShock", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "game"}, "attr": "current_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "change_attack"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "card"}, "attr": "<UNK>"}}}], "orelse": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "player"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "card"}, "attr": "summon"}}}], "test": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "card"}, "attr": "minion_type"}, "comparators": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}], "ops": [{"_type": "Is"}]}, {"_type": "Compare", "left": {"_type": "Template8"}, "comparators": [{"_type": "Name", "id": "targets"}], "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"score": -8.140982032900382, "score_history": [0.0, -3.814697265625e-06, -3.814697265625e-06, -6.67572021484375e-05, -4.57763671875e-05, -0.0003407612966839224, -0.024484407156705856, -0.011466579511761665, -0.001160786603577435, -5.7220458984375e-06, -7.43865966796875e-05, -0.000396728515625, -3.814697265625e-06, 0.0, -1.1682510375976562e-05, -3.814697265625e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.002216339111328125, -1.9073486328125e-06, -0.0001544952392578125, -3.814697265625e-06, -5.340576171875e-05, -0.0018250966677442193, -2.47955322265625e-05, -0.00390601041726768, -0.00012969970703125, -0.001214146614074707, -1.33514404296875e-05, -0.00014495849609375, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00038874149322509766, -1.9073486328125e-06, -3.814697265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -8.392333984375e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.000469207763671875, -1.9073486328125e-06, 0.0, 0.0, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -3.814697265625e-06, -1.3470649719238281e-05, -2.3841855067985307e-07, -0.15579509735107422, -0.0012969970703125, -0.9078121185302734, -1.71661376953125e-05, -1.33514404296875e-05, -8.0108642578125e-05, -1.9073486328125e-06, 0.0, -0.01081085205078125, 0.0, -0.18495464324951172, 0.0, -0.4217510223388672, -0.34026074409484863, -7.378990994766355e-05, -1.6304844617843628, -1.6569983927183785e-05, -0.8429931402206421, -2.861022494471399e-06, -3.814697265625e-06, -0.0013675689697265625, -0.0001354217529296875, -0.2637810707092285, -0.000141143798828125, -0.08584117889404297, -0.002666473388671875, -0.8433141708374023, 0.0, -0.001018524169921875, -7.62939453125e-06, -5.7220458984375e-06, -0.5741729736328125, -1.9073486328125e-06, 0.0, -0.15630245208740234, 0.0, -0.030556678771972656, -0.056801483035087585, -3.063660551561043e-05, -0.8121939897537231, 0.0, -9.5367431640625e-06, -0.7673749923706055, 0.0], "inferred_code": "class Eye<UNK>Eye(SpellCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.current_player.unbind('card_drawn', mirror)\n        player.hero.change_temp_attack(2)\n", "choice_history": [93, 145, 230, 101, 125, "Eye", "<UNK>", "Eye", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Eye", " ", "for", " ", "Eye", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 88, 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 32, "hero", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 217, 66, 155, "card_drawn", "<EOS>", 63, 146, "mirror", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "change_temp_attack", "<EOS>", 216, 69, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Eye<UNK>Eye", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Eye for Eye"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "mirror"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "current_player"}, "attr": "unbind"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "change_temp_attack"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"score": -14.30319010170598, "score_history": [0.0, -8.0108642578125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.4185811778588686e-05, -1.0251977982989047e-05, -1.1444091796875e-05, -0.0001087188720703125, -0.0002155303955078125, -3.814697265625e-06, -2.6702880859375e-05, -2.47955322265625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0001430511474609375, -3.0517578125e-05, -0.0003414154052734375, 0.0, -7.62939453125e-06, -1.0967194612021558e-05, -1.71661376953125e-05, -1.71661376953125e-05, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -8.463859558105469e-06, 0.0, -0.0006384849548339844, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.57763671875e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.000637054443359375, -1.33514404296875e-05, -6.29425048828125e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, -3.814697265625e-05, -2.47955322265625e-05, -2.384185791015625e-06, -0.7410917282104492, -0.2898836135864258, -0.638427734375, -4.57763671875e-05, -0.1573648452758789, -0.1324014663696289, -5.7220458984375e-06, -0.09941577911376953, 0.0, -0.0007038116455078125, 0.0, -0.015118837356567383, 0.0, -0.002282261848449707, -1.1682462172757369e-05, -0.009648567996919155, -3.814697265625e-06, -0.000888824462890625, -0.0032176971435546875, -1.9073486328125e-05, -1.1444091796875e-05, -0.112823486328125, -1.9073486328125e-05, 0.0, -0.006461143493652344, -0.42127180099487305, -6.079673767089844e-06, -4.9591064453125e-05, -0.5991439819335938, -1.3701858520507812, -0.16799449920654297, -0.11882618069648743, -0.0018523925682529807, -0.0001430511474609375, -0.0013427734375, -0.0003108978271484375, -0.9265060424804688, -3.826618194580078e-05, -0.681706428527832, -0.0008373260498046875, -2.6702880859375e-05, -1.065184235572815, -0.0003415346145629883, -0.00052642822265625, -8.0108642578125e-05, -0.0037288665771484375, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -0.4647257328033447, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -0.00018608570098876953, -2.3841855067985307e-07, -0.06327629089355469, -0.1659107208251953, -0.0071773529052734375, -0.008892059326171875, -5.91278076171875e-05, -0.0004711151123046875, -0.0001163482666015625, -0.0066661834716796875, -0.13412952423095703, -0.06216907501220703, 0.0, -0.0006160736083984375, -4.1961669921875e-05, -8.881058602128178e-05, -3.826618194580078e-05, -0.0007592439651489258, 0.0, -7.05718994140625e-05, -8.20159912109375e-05, -0.001804351806640625, -3.24249267578125e-05, -6.675719487247989e-05, 0.0, -0.00113677978515625, -1.9073486328125e-05, -0.3730602264404297, -0.0001697540283203125, 0.0, 0.0, -1.621245246496983e-05, -1.9073486328125e-06, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.2750415802001953, -0.0006329998723231256, -7.62939453125e-06, -7.62939453125e-06, -0.0129241943359375, -4.76837158203125e-05, -0.0035772323608398438, -0.9780826568603516, -0.006669044494628906, -0.2716066837310791, 0.0, -0.0003032684326171875, -1.9073486328125e-06, -0.16095447540283203, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.007599830627441406, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -2.47955322265625e-05, -2.3841855067985307e-07, -0.23226451873779297, -1.52587890625e-05, -0.0464630126953125, -5.7220458984375e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.1553526520729065, -4.768370445162873e-07, -0.08127117156982422, -0.010463714599609375, -1.33514404296875e-05, 0.0, -0.27685546875, -2.47955322265625e-05, -0.25833046436309814, -5.7220458984375e-06, -0.00029587745666503906, -1.9073486328125e-06, -6.67572021484375e-05, -4.38690185546875e-05, 0.0, -0.0001583099365234375, 0.0, -0.05246925354003906, -0.0003223419189453125, -0.00013828277587890625, 0.0, -0.004730224609375, -2.9802317840221804e-06, -0.0032878918573260307, -7.62939453125e-06, -0.21418190002441406, -9.5367431640625e-06, -1.1444091796875e-05, -0.008089065551757812, 0.0, 0.0, -0.012568473815917969, 0.0, -0.34462887048721313, -2.753706394287292e-05, -0.7544597387313843, -0.00015354156494140625, -0.0001697540283203125, -0.0003986358642578125, -0.5139589309692383, -5.14984130859375e-05, -0.0002515244123060256, -1.3589859008789062e-05, -0.0047168731689453125, -0.0001087188720703125, -1.71661376953125e-05, -1.9073486328125e-06, -3.468989962129854e-05, -1.9073486328125e-06, -6.67572021484375e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0046844482421875, -0.0003032513486687094, -7.915496826171875e-05, -0.40183162689208984, -0.0002384185791015625, -0.0001068115234375, -0.0008487701416015625, -0.0002880096435546875, 0.0, -0.17851924896240234, -0.0003281831741333008, -3.814697265625e-05, -0.02614116668701172, -0.000354766845703125, -5.340576171875e-05, -0.024030685424804688, -8.58306884765625e-05, 0.0, -0.01313018798828125, -0.0001201629638671875, -3.814697265625e-05, -0.004206657409667969, -0.0001277923583984375, -4.1961669921875e-05, -0.025997161865234375, -2.6702880859375e-05, 0.0, -0.00600433349609375, -0.00010883808135986328, -2.6702880859375e-05, -0.005706787109375, -0.0001201629638671875, -6.103515625e-05, -0.022588729858398438, -2.6702880859375e-05, 0.0, -0.0026702880859375, -9.548664093017578e-05, -4.00543212890625e-05, -0.007781982421875, -9.1552734375e-05, -8.58306884765625e-05, -0.016477584838867188, -2.86102294921875e-05, 0.0, -0.00067901611328125, -0.00013172626495361328, -3.4332275390625e-05, 0.0], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.die(self)\n\n\n        class Flare(targets):\n\n            def can_use(self, player, game):\n                return super().can_use(player, game) and len(player.minions\n                    ) < 7\n\n            def use(self, player, game):\n                super().use(player, game)\n                targets = copy.copy(game.other_player.minions)\n                <UNK>.summon(player, game, len(player.minions))\n            player.draw()\n            player.draw()\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [93, 145, 230, 101, 125, "Flare", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Flare", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 91, 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 234, 108, 103, 129, 41, 15, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 41, "die", "<EOS>", 216, 74, 101, 125, "Flare", "<EOS>", 216, 63, 146, "targets", "<EOS>", 232, 104, 130, "can_use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 229, 107, 153, 17, 119, 4, 217, 58, 123, 15, 116, 51, 193, "super", "<EOS>", "can_use", "<EOS>", 217, 75, 63, 146, "game", "<EOS>", 59, 126, 18, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 32, "minions", "<EOS>", 213, 12, 216, 79, 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 98, 115, 216, 63, 146, "targets", "<EOS>", 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "<UNK>", "<EOS>", "summon", "<EOS>", 218, 75, 63, 146, "game", "<EOS>", 58, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 32, "minions", "<EOS>", 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 102, 128, 18, 121, 15, 116, 32, "draw", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Flare", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flare"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "For", "iter": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "die"}}}], "target": {"_type": "Template30"}}, {"_type": "ClassDef", "name": "Flare", "body": [{"_type": "FunctionDef", "name": "can_use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Call", "args": [{"_type": "Template19"}, {"_type": "Name", "id": "game"}], "func": {"_type": "Attribute", "value": {"_type": "Template5", "hole0": "super"}, "attr": "can_use"}}, {"_type": "Compare", "left": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template24"}], "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template19"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "<UNK>"}, "attr": "summon"}}}]}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}], "bases": [{"_type": "Name", "id": "targets"}]}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "draw"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"score": -4.060764415985652, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0007494688034057617, -9.799002873478457e-05, -3.814697265625e-06, -0.0025920867919921875, -0.0025787353515625, -0.0003223419189453125, 0.0, -2.0265579223632812e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0003414154052734375, -0.0001735687255859375, -2.09808349609375e-05, -1.9073486328125e-06, -0.5607271194458008, -1.9073486328125e-06, -0.016542434692382812, -1.9073486328125e-06, -7.62939453125e-06, -1.5497205367864808e-06, -8.785724639892578e-05, -8.392333984375e-05, 0.0, 0.0, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.384185791015625e-06, -0.001107931137084961, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.71661376953125e-05, -3.933906555175781e-06, -1.7642974853515625e-05, -6.103515625e-05, -0.016727447509765625, -1.9073486328125e-06, -0.07370758056640625, 0.0, -0.0002384185791015625, -7.62939453125e-06, -0.0002346038818359375, -0.0004215240478515625, -7.82012939453125e-05, 0.0, -5.340576171875e-05, 0.0, -0.00012826919555664062, -2.288818359375e-05, -0.0034394264221191406, -1.2159347534179688e-05, -0.0001811981201171875, 0.0, -9.918212890625e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0006656646728515625, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.0003795623779296875, -2.0265579223632812e-06, -0.014575004577636719, -9.5367431640625e-06, -0.11740493774414062, -3.814697265625e-06, -5.7220458984375e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.7799500226974487, -1.4305038348538801e-05, -0.0023469924926757812, -0.08821296691894531, -3.4332275390625e-05, -5.7220458984375e-06, -0.005420684814453125, -5.7220458984375e-06, -0.18416893482208252, -1.9073486328125e-06, -0.0009053898975253105, 0.0, -4.38690185546875e-05, -0.02422046661376953, 0.0, -0.044442176818847656, 0.0, -0.6664524078369141, -1.9073486328125e-06, -0.0005750656127929688, 0.0, -0.007118582259863615, -2.741813204920618e-06, -0.061432547867298126, -4.0531158447265625e-06, -0.000507354736328125, -6.4849853515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -0.0001049041748046875, -5.7220458984375e-06, -0.0003509521484375, -1.9073486328125e-06, -0.42252516746520996, -1.1920928244535389e-07, -0.009201288223266602, 0.0, 0.0, -0.000415802001953125, 0.0, -0.002346038818359375, -0.003424805123358965, -1.919269561767578e-05, -0.5201292037963867, -0.0003566741943359375, -0.001293182373046875, -0.0036258697509765625, 0.0, -0.012928009033203125, 0.0, -9.5367431640625e-06, -0.000202178955078125, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -5.14984130859375e-05, -7.43865966796875e-05, -0.26678466796875, -0.13597214221954346, -0.00012087816867278889, -3.814697265625e-06, -0.000751495361328125, 0.0], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.set_health_to(1)\n", "choice_history": [93, 145, 230, 101, 125, "Gorehowl", "<EOS>", 216, 86, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Gorehowl", "<EOS>", 79, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 232, 108, 98, 115, 216, 63, 146, "temp_attack", "<EOS>", 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 23, 146, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "targets", "<EOS>", "extend", "<EOS>", 216, 55, 116, 32, "minions", "<EOS>", 103, 129, 41, 23, 146, "targets", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 41, "set_health_to", "<EOS>", 216, 70, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Gorehowl", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gorehowl"}, {"_type": "Template24"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "game"}, "attr": "other_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "temp_attack"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "targets"}, "attr": "extend"}}}, {"_type": "For", "iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "set_health_to"}}}], "target": {"_type": "Template30"}}]}], "bases": [{"_type": "Template39"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"score": -0.15101349188077506, "score_history": [-1.9073486328125e-06, -1.52587890625e-05, -4.9591064453125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -1.3232143828645349e-05, -2.5272096536355093e-05, -5.7220458984375e-06, -8.7738037109375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -9.775159924174659e-06, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -0.000102996826171875, -1.33514404296875e-05, -9.5367431640625e-06, -0.08061599731445312, -1.9073486328125e-06, -0.0011806488037109375, -5.340576171875e-05, -1.9073486328125e-06, -2.1338310034479946e-05, -4.2557716369628906e-05, -0.0058460235595703125, -0.05505561828613281, 0.0, 0.0, 0.0, -7.641315460205078e-05, -2.3841855067985307e-07, -0.0001269578788196668, 0.0, -0.0002002716064453125, -9.918212890625e-05, -3.814697265625e-06, 0.0, -0.0002803802490234375, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.00080108642578125, 0.0, 0.0, 0.0, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001430511474609375, 0.0, 0.0, 0.0, -0.0002765655517578125, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-05, -3.24249267578125e-05, -5.7220458984375e-06, -3.62396240234375e-05, -0.0001926422119140625, -8.20159912109375e-05, -0.0001010894775390625, -0.0018062591552734375, -0.0001926422119140625, 0.0, -0.002485275035724044, -3.814697265625e-06, -2.86102294921875e-05, -7.2479248046875e-05, -0.0005538455443456769, -4.6968380047474056e-05, 0.0], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "choice_history": [93, 145, 230, 101, 125, "Hound", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 220, 66, 155, "Hound", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 88, 80, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 70, 224, 205, "charge", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Hound", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER"}, {"_type": "Template6"}, {"_type": "Template27"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template14"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"score": -1.576973403950312, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, -5.7220458984375e-06, -0.009067310951650143, -0.0022341071162372828, -2.9802276912960224e-06, -1.33514404296875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.1920928244535389e-07, 0.0, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -2.09808349609375e-05, -4.1961669921875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.2278481335670222e-05, -1.3947486877441406e-05, -2.0265579223632812e-06, -3.814697265625e-06, -0.001720428466796875, -0.0001163482666015625, -7.62939453125e-06, -0.0022945404052734375, -0.0002231597900390625, -0.0001277923583984375, -5.7220458984375e-06, -0.000484466552734375, -1.33514404296875e-05, -4.9591064453125e-05, -0.0001125335693359375, -4.9591064453125e-05, -2.288818359375e-05, -0.0005645751953125, -1.9073486328125e-06, -0.0006689566653221846, -0.00012730766320601106, -0.0001163482666015625, -0.0136871337890625, -1.9073486328125e-05, -0.178955078125, -0.14905738830566406, -0.7041645050048828, -0.15245342254638672, -0.00168609619140625, -0.0001888275146484375, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -0.06268715858459473, -9.5367431640625e-06, 0.0, -0.0021800994873046875, -1.9073486328125e-06, -0.10426247119903564, -0.0001559254596941173, 0.0, -1.9073486328125e-06, 0.0, -1.3828277587890625e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -3.62396240234375e-05, 0.0, -5.7220458984375e-06, 0.0, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, -0.00017547607421875, -2.86102294921875e-05, -8.940690349845681e-06, -4.768370445162873e-07, -0.188836932182312, 0.0, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [93, 145, 230, 101, 125, "Injured", "Blademaster", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Injured", " ", "Blademaster", "<EOS>", 72, 89, 91, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 23, 146, "Damage", "<EOS>", 216, 76, 58, 123, 38, 218, 64, 148, "Null", "<EOS>", 87, 193, "Enemy", "Player", "<EOS>", 87, 193, "Random", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "4", "<EOS>", "7", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "InjuredBlademaster", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template16"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template20"}], "func": {"_type": "Name", "id": "Damage"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template5", "hole0": "EnemyPlayer"}, {"_type": "Template5", "hole0": "RandomPicker"}], "func": {"_type": "Template26"}}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 4, "hole1": 7}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"score": -0.5502902373427787, "score_history": [-1.52587890625e-05, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.002696055569686e-05, -8.86879424797371e-05, -0.0013859462924301624, -3.0517578125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.00016021728515625, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.1444037227192894e-05, -1.2040138244628906e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -4.1961669921875e-05, -0.000171661376953125, -1.71661376953125e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.00016427040100097656, 0.0, -4.76837158203125e-05, -0.0001506805419921875, -0.0001392364501953125, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.1457672119140625e-06, 0.0, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -3.0517578125e-05, -4.76837158203125e-05, -0.0001544952392578125, -0.0001239776611328125, -0.000240325927734375, -9.918212890625e-05, -5.91278076171875e-05, -1.9073486328125e-06, -5.161762237548828e-05, 0.0, -1.9073486328125e-06, -0.00017547607421875, -1.1444091796875e-05, -2.288818359375e-05, -4.9591064453125e-05, -5.53131103515625e-05, -1.33514404296875e-05, -0.000621795654296875, -0.3682870864868164, -1.9073486328125e-06, -1.9073486328125e-06, -0.008246898651123047, -0.004956960678100586, -4.589521631714888e-05, -0.04222869873046875, -6.103515625e-05, -0.010333061218261719, 0.0, -0.0002155303955078125, -0.0001239776611328125, -0.010288119316101074, -1.4781946447328664e-05, 0.0, -7.05718994140625e-05, -5.7220458984375e-06, -4.1961669921875e-05, -0.000263214111328125, -5.91278076171875e-05, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.0007327795028686523, -4.6491513785440475e-06, -1.9073486328125e-06, -0.0006160736083984375, -0.000331878662109375, -1.1444091796875e-05, -0.0008716583251953125, -1.9073486328125e-06, -0.0004483461380004883, -7.069110870361328e-05, 0.0, -0.07863616943359375, -1.33514404296875e-05, -0.000370025634765625, 0.0, -7.62939453125e-06, 0.0, -0.0005013906047679484, -9.655952453613281e-06, -2.6702880859375e-05, -0.00045013427734375, -0.0003528594970703125, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0004922151565551758, -5.614695692202076e-05, -1.9073486328125e-06, 0.0, -0.015212059020996094, -2.47955322265625e-05, -0.000751495361328125, -3.62396240234375e-05, -0.00027692317962646484, 0.0, -0.000255584716796875, -1.9073486328125e-06], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=\n            EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n", "choice_history": [93, 145, 230, 101, 125, "Knife", "Juggler", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Knife", " ", "Juggler", "<EOS>", 69, 89, 91, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 72, 69, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 122, 23, 146, "Character", "<UNK>", "<EOS>", 224, 205, "player", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 58, 123, 43, 217, 58, 123, 23, 146, "Damage", "<EOS>", 216, 70, 58, 122, 23, 146, "Character", "Selector", "<EOS>", 226, 205, "players", "<EOS>", 51, 193, "Enemy", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "Random", "Picker", "<EOS>", 205, "condition", "<EOS>", 24, 148, "Null", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "KnifeJuggler", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Knife Juggler"}, {"_type": "Template12"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template16"}, {"_type": "Template12"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}, "keywords": [{"_type": "keyword", "arg": "player", "value": {"_type": "Template5", "hole0": "BothPlayer"}}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Name", "id": "Damage"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "RandomPicker"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}]}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"score": -2.1399186566057864, "score_history": [0.0, 0.0, -3.0517578125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.4305113609225373e-06, -1.4066675248614047e-05, -1.1444091796875e-05, -3.0517578125e-05, -4.38690185546875e-05, -1.71661376953125e-05, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0016498565673828125, -1.9073486328125e-06, -4.1961669921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.2159303878434002e-05, -1.9073486328125e-06, -6.866455078125e-05, -1.71661376953125e-05, 0.0, 0.0, 0.0, -3.0517578125e-05, -1.1920928244535389e-07, -0.00015544891357421875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.002994537353515625, -1.9073486328125e-06, -5.7220458984375e-06, -7.82012939453125e-05, -2.86102294921875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -0.0025277137756347656, 0.0, -3.4332275390625e-05, -6.29425048828125e-05, -7.62939453125e-06, -0.00079345703125, -3.4332275390625e-05, -0.00249481201171875, -7.62939453125e-06, -0.0011920928955078125, -0.00012969970703125, -0.0003337860107421875, -1.9073486328125e-06, -0.00014579296112060547, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.000202178955078125, -0.0003376007080078125, -9.5367431640625e-06, -0.000278472900390625, -4.38690185546875e-05, -0.004425048828125, -5.7220458984375e-06, -0.0011081999400630593, -0.13520538806915283, 0.0, -7.43865966796875e-05, -1.9073486328125e-05, -1.52587890625e-05, -3.4332275390625e-05, -0.00115966796875, -3.814697265625e-05, -0.19269561767578125, -5.7220458984375e-06, -0.2845115661621094, -5.53131103515625e-05, -6.29425048828125e-05, 0.0, -0.556341290473938, -3.0517578125e-05, 0.0, -0.25133705139160156, -9.5367431640625e-06, -0.6354613304138184, -0.0019517550244927406, -1.52587890625e-05, -3.814697265625e-06, -0.06125664710998535, -2.0265579223632812e-06, 0.0, -4.57763671875e-05, -2.47955322265625e-05], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Give(\n            Buff(Frozen())), SelfSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Lightwell", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Lightwell", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 91, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 83, 77, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 87, 193, "Turn", "Ended", "<EOS>", 58, 123, 43, 217, 58, 123, 37, 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 87, 193, "Frozen", "<EOS>", 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Lightwell", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Lightwell"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template31"}, {"_type": "Template22"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "Frozen"}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Template25"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"score": -0.4632328838727062, "score_history": [0.0, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.576272320060525e-06, -2.384185791015625e-06, -0.00036983872996643186, -3.814697265625e-06, -0.0001163482666015625, -3.62396240234375e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.52587890625e-05, 0.0, 0.0, -0.0002689361572265625, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -4.1961669921875e-05, -3.2186455882765586e-06, -4.0173265006160364e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.00010848045349121094, -7.62939453125e-06, -3.62396240234375e-05, -1.9073486328125e-06, 0.0, -0.07851409912109375, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -0.0001087188720703125, -5.7220458984375e-06, 0.0, 0.0, -7.867813110351562e-06, 0.0, -1.1444091796875e-05, -2.09808349609375e-05, -7.62939453125e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.0001430511474609375, -1.52587890625e-05, -0.000339508056640625, -8.96453857421875e-05, -1.52587890625e-05, -3.814697265625e-06, -0.0003105391515418887, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -0.00028228759765625, -9.5367431640625e-06, -0.000102996826171875, -0.000194549560546875, -0.0003795623779296875, -0.0014801025390625, -0.12612342834472656, -0.0002498626708984375, -7.62939453125e-06, -0.024311766028404236, -0.027881145477294922, -6.914137884450611e-06, -4.9591064453125e-05, -0.0014019012451171875, -7.43865966796875e-05, -0.1578044891357422, -3.814697265625e-06, -0.0003910064697265625, -2.86102294921875e-05, -0.00185394287109375, 0.0, -0.00027130948728881776, -2.765655517578125e-05, -0.02681659162044525, 0.0, -0.001739501953125, -9.5367431640625e-06, -0.0004863739013671875, -5.91278076171875e-05, -0.000125885009765625, -0.00012969970703125, -0.001544952392578125, 0.0, -0.004871368408203125, -0.0005626678466796875, -0.001697540283203125, -1.1444091796875e-05, -1.9073486328125e-05, -0.0004100799560546875, -0.00025177001953125, -0.0005975956446491182, -1.39474832394626e-05, 0.0, -5.91278076171875e-05, -1.1444091796875e-05], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MECH)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "choice_history": [93, 145, 230, 101, 125, "Mana", "Wyrm", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Mana", " ", "Wyrm", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 72, 224, 205, "effects", "<EOS>", 21, 141, 217, 58, 123, 44, 217, 58, 123, 23, 146, "Minion", "Summoned", "<EOS>", 216, 58, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 58, 123, 43, 217, 58, 123, 37, 216, 58, 123, 40, 216, 70, 87, 193, "Self", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ManaWyrm", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mana Wyrm"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template16"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH"}], "func": {"_type": "Template37"}}], "func": {"_type": "Name", "id": "MinionSummoned"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}], "func": {"_type": "Template25"}}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Template32"}}], "func": {"_type": "Template33"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"score": -0.01102385283923013, "score_history": [0.0, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00030071981018409133, -0.00017689094238448888, -0.00040928172529675066, -1.9073486328125e-06, -6.4849853515625e-05, -7.82012939453125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -2.09808349609375e-05, 0.0, -0.0001373291015625, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.40932747349143e-05, -1.2755393072438892e-05, -2.0265579223632812e-06, 0.0, -6.866455078125e-05, -0.0002002716064453125, -2.09808349609375e-05, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.2479248046875e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.0006694793701171875, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.33514404296875e-05, -0.0002574920654296875, -9.1552734375e-05, -0.005283355712890625, -0.00152587890625, -0.0001068115234375, 0.0, -0.0008586635231040418, -5.841255187988281e-06, -0.0002269744873046875, -0.0001621246337890625, -1.1444089977885596e-05, -1.5497195136049413e-06, 0.0], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [93, 145, 230, 101, 125, "Mogu'shan", "Warden", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Mogu'shan", " ", "Warden", "<EOS>", 76, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 70, 79, 224, 205, "taunt", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Mogu'shanWarden", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mogu'shan Warden"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template14"}, {"_type": "Template24"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"score": -13.973347762536434, "score_history": [-1.33514404296875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.349781036376953e-05, -1.0609622222546022e-05, -1.9073486328125e-06, -0.0004749298095703125, -0.06735610961914062, -1.52587890625e-05, -4.1961669921875e-05, -1.049041748046875e-05, -0.000102996826171875, -9.5367431640625e-06, -0.00077056884765625, -0.000148773193359375, -0.0001678466796875, -1.9073486328125e-06, -0.4798421859741211, -3.814697265625e-06, -5.14984130859375e-05, -3.814697265625e-06, -6.103515625e-05, -9.417526598554105e-06, -0.0005645751953125, -5.14984130859375e-05, -2.288818359375e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-05, -0.00011837482452392578, -9.655952453613281e-06, -0.00015795230865478516, 0.0, -4.9591064453125e-05, -5.7220458984375e-05, -1.9073486328125e-06, -0.016185760498046875, 0.0, -1.9073486328125e-05, -0.0002231597900390625, -3.814697265625e-06, -3.814697265625e-06, -1.33514404296875e-05, -3.4332275390625e-05, -1.9073486328125e-05, 0.0, -0.0005855560302734375, -2.86102294921875e-05, -0.01962125301361084, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, -7.748603820800781e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.872943878173828e-05, -2.3841855067985307e-07, -0.82867431640625, -0.007884979248046875, -0.024408340454101562, -4.57763671875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.061646461486816406, 0.0, -0.11540508270263672, -0.7511099576950073, -7.867687963880599e-05, -0.33700433373451233, 0.0, -9.5367431640625e-06, -0.7308902740478516, -0.24184226989746094, -1.71661376953125e-05, -5.7220458984375e-06, -0.2094440460205078, -0.00048065185546875, 0.0, -0.24267292022705078, 0.0, -0.0035686492919921875, -0.08564634621143341, -0.00016307830810546875, -0.10086870193481445, 0.0, -2.47955322265625e-05, -0.06683921813964844, -7.82012939453125e-05, -2.0969948768615723, -2.47955322265625e-05, -0.6495018005371094, -0.0001068115234375, -7.62939453125e-06, -0.00408172607421875, -5.340576171875e-05, 0.0, -0.00067138671875, -1.9073486328125e-06, -0.8925778865814209, -4.398822056828067e-05, -0.22967314720153809, 0.0, -0.0034313201904296875, -0.0007266998291015625, -0.0157623291015625, -3.814697265625e-06, -0.0005849379231221974, -8.344646857949556e-07, -0.00016021728515625, -2.09808349609375e-05, -0.0002422332763671875, -1.9073486328125e-06, -0.00012969969247933477, -2.6702880859375e-05, -1.9073486328125e-06, -0.0001163482666015625, -1.9073486328125e-05, -0.014923095703125, -0.0788625180721283, -0.00019788742065429688, -0.046883583068847656, -0.001216888427734375, -0.001224517822265625, -0.0002269744873046875, -0.0009107589721679688, -0.0004711151123046875, -0.0006504058837890625, 0.0, -0.005406022071838379, -1.1444091796875e-05, -9.5367431640625e-06, -0.6221084594726562, -1.9073486328125e-06, -0.05712604522705078, -0.026379665359854698, -0.027957608923316002, -4.1961669921875e-05, -0.030877113342285156, -1.1444091796875e-05, -0.006003379821777344, -0.0037488937377929688, -0.0912618637084961, -2.86102294921875e-05, -7.62939453125e-06, -0.019245147705078125, -2.86102294921875e-05, -1.9073486328125e-06, -0.007042884826660156, -1.9073486328125e-06, -0.0012454986572265625, -0.3623734414577484, -0.005022214725613594, -0.7528771758079529, -2.3841855067985307e-07, -3.814697265625e-06, -1.1371879577636719, -0.10278892517089844, -0.022562026977539062, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010662078857421875, -3.24249267578125e-05, 0.0, -0.3735790252685547, -2.6702880859375e-05, -0.0018091201782226562, -0.7033920288085938, -0.008760054595768452, -0.26886117458343506, 0.0, -1.9073486328125e-06, -0.897857666015625, -2.47955322265625e-05], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(5)\n        player.hand.append(demon_card)\n        <UNK>.summon(player, game, len(player.minions))\n        if len(player.Mana) > 0:\n            player.hero.increase_armor(5)\n        else:\n            player.hero.increase_armor(4)\n", "choice_history": [93, 145, 230, 101, 125, "Nourish", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Nourish", "<EOS>", 77, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 91, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 233, 108, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "increase_armor", "<EOS>", 216, 77, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hand", "<EOS>", "append", "<EOS>", 216, 63, 146, "demon_card", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "<UNK>", "<EOS>", "summon", "<EOS>", 218, 75, 63, 146, "game", "<EOS>", 58, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 32, "minions", "<EOS>", 105, 134, 19, 126, 18, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 32, "Mana", "<EOS>", 213, 7, 216, 83, 229, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "increase_armor", "<EOS>", 216, 77, 229, 102, 128, 18, 123, 15, 116, 15, 116, 32, "hero", "<EOS>", "increase_armor", "<EOS>", 216, 76, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Nourish", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Template22"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "increase_armor"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "demon_card"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hand"}, "attr": "append"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template19"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "<UNK>"}, "attr": "summon"}}}, {"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template22"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "increase_armor"}}}], "orelse": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template20"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "hero"}, "attr": "increase_armor"}}}], "test": {"_type": "Compare", "left": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "Mana"}], "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template31"}], "ops": [{"_type": "Gt"}]}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"score": -5.9827636449429065, "score_history": [-1.1444091796875e-05, -0.0004215240478515625, -8.0108642578125e-05, -3.24249267578125e-05, -9.5367431640625e-05, -0.5261108875274658, -0.006596350111067295, -0.8073349595069885, -0.0013574810000136495, -4.38690185546875e-05, -3.4332275390625e-05, -0.04906272888183594, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-05, 0.0, 0.0, -0.0010166168212890625, -1.52587890625e-05, -2.47955322265625e-05, 0.0, -0.06357955932617188, -1.9073486328125e-06, -0.00040435791015625, -3.814697265625e-06, -9.5367431640625e-06, -8.940656698541716e-06, -0.001453399658203125, -0.0012378692626953125, -0.0023288726806640625, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -0.00037479400634765625, -7.62939453125e-06, -3.62396240234375e-05, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -4.780292510986328e-05, -9.5367431640625e-06, 0.0, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.000682830810546875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -6.306171417236328e-05, 0.0, -0.0003871917724609375, -0.000118255615234375, -0.00010132789611816406, -4.172316494077677e-06, -0.03982830047607422, -0.02221393585205078, -0.0025091171264648438, -0.04163384437561035, -1.9073486328125e-06, -5.7220458984375e-05, -0.0001850128173828125, -0.011897087097167969, -0.0260467529296875, 0.0, -0.05002951622009277, -7.152555099310121e-07, -0.000873565673828125, -0.030424118041992188, -7.62939453125e-06, 0.0, -0.000102996826171875, -0.0001010894775390625, 0.0, -0.0011138916015625, 0.0, -0.9729147553443909, -3.290169115643948e-05, -0.017600668594241142, 0.0, -0.00104522705078125, -3.814697265625e-05, -7.62939453125e-06, -4.38690185546875e-05, 0.0, -0.011657476425170898, -0.0007534027099609375, -7.62939453125e-06, -7.43865966796875e-05, -0.0002307891845703125, -0.009616851806640625, -1.9073486328125e-06, -0.0035927295684814453, -0.0008242130279541016, -6.4849853515625e-05, -0.002086639404296875, -0.000431060791015625, -0.00115203857421875, -0.0007801055908203125, -0.09949016571044922, -0.011743545532226562, -0.0015316009521484375, -3.62396240234375e-05, -0.0001373291015625, -4.76837158203125e-05, -0.0022335052490234375, -0.0004634857177734375, -0.2952280044555664, -0.0005512237548828125, -0.0019016265869140625, -1.1367989778518677, -0.0002605819026939571, -0.15386424958705902, 0.0, -0.07104110717773438, -0.049983978271484375, -1.9073486328125e-06, -0.6779314279556274, -0.0002225637435913086, -0.0001735687255859375, -1.33514404296875e-05, -1.9073486328125e-06, -0.00664520263671875, -1.33514404296875e-05, 0.0, -0.005259513854980469, -1.9073486328125e-06, -0.5537133812904358, -0.005591392517089844, -0.06548857688903809, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-05, -4.00543212890625e-05, 0.0, -0.01969742774963379, -0.0009288787841796875, -3.814697265625e-06, -0.000102996826171875, -0.0005207061767578125, -0.015504837036132812, -3.814697265625e-06, -0.00336611270904541, -0.0009006261825561523, -9.918212890625e-05, -0.0016727447509765625, -0.000385284423828125, -0.001041412353515625, -0.0008640289306640625, -0.08394813537597656, -5.7220458984375e-06], "inferred_code": "class Preparation<UNK>Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>.append(new_minon)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n", "choice_history": [93, 145, 230, 101, 125, "Preparation", "<UNK>", "Preparation", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Preparation", "<EOS>", 83, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 232, 104, 130, "reduce_cost", "<EOS>", 3, 203, 209, 1, 202, "card", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 23, 146, "card", "<EOS>", "add_buff", "<EOS>", 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Mana", "Change", "<EOS>", 216, 92, 200, 112, 30, 108, 102, 128, 18, 123, 15, 116, 15, 116, 32, "<UNK>", "<EOS>", "append", "<EOS>", 216, 63, 146, "new_minon", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "new_minon", "<EOS>", "add_buff", "<EOS>", 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Mana", "Change", "<EOS>", 216, 92, 200, 112, 30, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Preparation<UNK>Preparation", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Preparation"}, {"_type": "Template31"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "FunctionDef", "name": "reduce_cost", "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "card"}]}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "UnaryOp", "operand": {"_type": "Template16"}, "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "card"}, "attr": "add_buff"}}}]}, {"_type": "Template0"}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "new_minon"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "<UNK>"}, "attr": "append"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "UnaryOp", "operand": {"_type": "Template16"}, "op": {"_type": "USub"}}], "func": {"_type": "Name", "id": "ManaChange"}}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "new_minon"}, "attr": "add_buff"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"score": -15.643571914223031, "score_history": [-0.000518798828125, -7.62939453125e-06, -2.288818359375e-05, -0.000164031982421875, -7.62939453125e-06, -3.576278118089249e-07, -4.827944212593138e-05, -2.09808349609375e-05, -0.0022640228271484375, -4.1961669921875e-05, -0.0015409793704748154, -9.930133819580078e-05, -0.00025177001953125, -0.0033750534057617188, -0.0001964569091796875, -1.9073486328125e-06, -0.0006583929061889648, -3.814697265625e-06, -7.05718994140625e-05, -0.09878158569335938, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.2755313036905136e-05, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -2.0265579223632812e-06, -0.0009796619415283203, -1.9073486328125e-06, -3.0517578125e-05, -3.24249267578125e-05, -0.000820159912109375, -0.006340384483337402, -2.6702880859375e-05, -2.288818359375e-05, -5.7220458984375e-06, -0.0051212310791015625, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, -0.8920131921768188, -1.9073486328125e-06, -2.09808349609375e-05, -1.71661376953125e-05, -0.4749112129211426, 0.0, -0.005924224853515625, -0.0017032623291015625, -0.0004978179931640625, -0.03919219970703125, -0.0015697479248046875, -0.000102996826171875, -0.34546852111816406, -0.14741039276123047, -6.4849853515625e-05, -0.00594329833984375, 0.0, -0.006154417991638184, -1.9073486328125e-05, -0.000244140625, -0.17050647735595703, -1.9073486328125e-06, -0.07459735870361328, -5.7220458984375e-06, -0.0041942596435546875, 0.0, -0.005168914794921875, -0.0004311800003051758, 0.0, -1.1649811267852783, 0.0, -0.9318199157714844, -0.07232284545898438, -0.5742464065551758, -0.0006866455078125, -0.031304359436035156, -3.814697265625e-06, -0.12090015411376953, 0.0, -0.10972428321838379, 0.0, -0.19869709014892578, -0.009267807006835938, -9.5367431640625e-06, -3.0517578125e-05, -0.0016994476318359375, -1.52587890625e-05, 0.0, -0.3986387252807617, 0.0, -0.014812944456934929, -5.924701690673828e-05, -0.2351686805486679, 0.0, -0.0023708343505859375, -0.7264690399169922, -0.00201416015625, -5.340576171875e-05, -0.000152587890625, -0.0065250396728515625, -1.52587890625e-05, 0.0, -0.011743545532226562, -0.000102996826171875, -0.00031101697823032737, 0.0, -0.0005627870559692383, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.00448918342590332, -4.57763671875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001983642578125, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0019893646240234375, -0.0001811981201171875, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0001087188720703125, -7.2479248046875e-05, -0.05618762969970703, -0.0001430511474609375, -0.0018711090087890625, -0.0001773834228515625, -0.0019407272338867188, -0.0010956525802612305, 0.0, -0.00037610280560329556, -5.9604644775390625e-06, -0.5424207448959351, -1.9073486328125e-06, -9.5367431640625e-06, -0.0001468658447265625, -6.4849853515625e-05, -0.19865620136260986, -7.05718994140625e-05, -5.53131103515625e-05, -0.000141143798828125, -0.00022125244140625, -0.000843048095703125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.08282279968261719, -0.00018596649169921875, -1.9073486328125e-06, 0.0, -0.03439140319824219, -3.814697265625e-06, -1.1444091796875e-05, -7.62939453125e-06, -0.12013816833496094, 0.0, -7.2479248046875e-05, -1.33514404296875e-05, -0.07113170623779297, -3.814697265625e-06, -0.009441375732421875, -0.013677597045898438, -0.0005702972412109375, -0.20227813720703125, -0.00145721435546875, -0.0004749298095703125, -0.01169586181640625, -0.3366546630859375, -0.0002117156982421875, -0.3383932113647461, -3.4332275390625e-05, -0.009222380816936493, -6.365774606820196e-05, -0.013904571533203125, -0.4238004684448242, -0.06815052032470703, -0.1044464111328125, -0.0067596435546875, -0.0010528564453125, -0.00011444091796875, 0.0, -0.032550811767578125, -7.164478302001953e-05, -5.7220458984375e-06, -0.2846660614013672, -8.20159912109375e-05, -5.7220458984375e-06, -5.14984130859375e-05, -0.003650665283203125, -2.47955322265625e-05, 0.0, -0.46480369567871094, -7.62939453125e-06, -0.0016212614718824625, -5.14984130859375e-05, -0.00033664703369140625, -5.7220458984375e-06, -0.18499374389648438, -1.9073486328125e-06, -1.9073486328125e-06, -0.005954742431640625, 0.0, 0.0, -0.0004253387451171875, -3.814697265625e-06, -0.6707973480224609, -2.47955322265625e-05, -0.41297054290771484, -0.08173918724060059, 0.0, -0.1538487672805786, -2.3841855067985307e-07, -0.7965947389602661, -1.9073486328125e-06, -1.9073486328125e-06, -0.431549072265625, -1.71661376953125e-05, -1.0566630363464355, 0.0, -3.814697265625e-06, -6.103515625e-05, -1.9073486328125e-06, -0.035037994384765625, -5.7220458984375e-06, 0.0, -0.049071311950683594, 0.0, -0.20319461822509766, -0.6146422624588013, -1.0728830375228426e-06, -0.12197505682706833, 0.0, 0.0, -0.0004367828369140625, -1.1444091796875e-05, -0.000255584716796875, 0.0, -0.030023574829101562, 0.0, -9.34600830078125e-05, -0.005706787109375, -5.14984130859375e-05, -0.0003452301025390625, -1.33514404296875e-05, -0.07241582870483398, -0.020179033279418945, -7.43865966796875e-05, -5.7220458984375e-05, -0.3310565948486328, -9.5367431640625e-06], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, attacker):\n        if target is self.player.minions and self.target in targets:\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, attacker, target):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            attacker.player.game.random_choice(targets)\n            self.target.card.add_buff(Buff(ManaChange(2)))\n", "choice_history": [93, 145, 230, 101, 125, "Repentance", "<EOS>", 216, 63, 146, "Secret", "Card", "<EOS>", 232, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Repentance", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 88, 104, 130, "_reveal", "<EOS>", 3, 203, 211, 0, 1, 202, "attacker", "<EOS>", 1, 202, "attacker", "<EOS>", 229, 105, 133, 17, 119, 4, 217, 59, 126, 23, 146, "target", "<EOS>", 213, 10, 216, 55, 116, 15, 116, 31, "player", "<EOS>", "minions", "<EOS>", 59, 126, 52, 213, 9, 216, 63, 146, "targets", "<EOS>", 230, 102, 128, 18, 123, 15, 116, 23, 146, "target", "<EOS>", "increase_health", "<EOS>", 216, 69, 102, 128, 18, 121, 15, 116, 51, 193, "super", "<EOS>", "reveal", "<EOS>", 104, 130, "activate", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 32, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 217, 66, 155, "character_attack", "<EOS>", 55, 116, 31, "_reveal", "<EOS>", 104, 130, "_reveal", "<EOS>", 3, 203, 211, 0, 1, 202, "attacker", "<EOS>", 1, 202, "target", "<EOS>", 229, 105, 133, 17, 119, 4, 217, 58, 123, 23, 146, "isinstance", "<EOS>", 217, 85, 78, 92, 200, 111, 15, 116, 49, "<UNK>", "<EOS>", 231, 102, 128, 18, 121, 15, 116, 51, 193, "super", "<EOS>", "reveal", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 49, "player", "<EOS>", "game", "<EOS>", "random_choice", "<EOS>", 216, 63, 146, "targets", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 52, "card", "<EOS>", "add_buff", "<EOS>", 216, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Mana", "Change", "<EOS>", 216, 69, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Repentance", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Repentance"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "_reveal", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "attacker"}]}, "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "target"}, "attr": "increase_health"}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template5", "hole0": "super"}, "attr": "reveal"}}}], "test": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Name", "id": "target"}, "comparators": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "player"}, "attr": "minions"}], "ops": [{"_type": "Is"}]}, {"_type": "Compare", "left": {"_type": "Template8"}, "comparators": [{"_type": "Name", "id": "targets"}], "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}}]}, {"_type": "FunctionDef", "name": "activate", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "_reveal"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "game"}, "attr": "current_player"}, "attr": "unbind"}}}]}, {"_type": "FunctionDef", "name": "_reveal", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "target"}]}, "body": [{"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template5", "hole0": "super"}, "attr": "reveal"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Name", "id": "targets"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template38"}, "attr": "player"}, "attr": "game"}, "attr": "random_choice"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ManaChange"}}], "func": {"_type": "Name", "id": "Buff"}}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "card"}, "attr": "add_buff"}}}], "test": {"_type": "BoolOp", "values": [{"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template23"}], "func": {"_type": "Name", "id": "isinstance"}}, {"_type": "UnaryOp", "operand": {"_type": "Attribute", "value": {"_type": "Template38"}, "attr": "<UNK>"}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}}]}], "bases": [{"_type": "Name", "id": "SecretCard"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"score": -1.4135029241569939, "score_history": [0.0, -3.814697265625e-06, -1.33514404296875e-05, -0.0005970001220703125, -0.00011444091796875, -1.4185829968482722e-05, -0.011888092383742332, -0.002318196464329958, -0.00018453586380928755, -9.5367431640625e-06, -2.6702880859375e-05, -2.09808349609375e-05, 0.0, 0.0, -1.1920928244535389e-07, -9.5367431640625e-06, 0.0, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00016021728515625, -1.9073486328125e-06, -0.0001125335693359375, -3.814697265625e-06, -3.814697265625e-06, -9.775153557711747e-06, -4.208087193546817e-05, -2.324580964341294e-05, -7.903575169621035e-05, -0.00020897388458251953, -1.1444091796875e-05, -0.3279304504394531, -0.001251220703125, -5.7220458984375e-06, -3.814697265625e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0010935068130493164, -1.71661376953125e-05, -8.392333984375e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -6.699562072753906e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.000156402587890625, 0.0, -1.9073486328125e-06, 0.0, -0.0025424957275390625, -6.866455078125e-05, -1.33514404296875e-05, 0.0, -0.048774123191833496, 0.0, -5.7220458984375e-06, -0.07667922973632812, -1.1444091796875e-05, -0.0050334930419921875, -0.0004291534423828125, -0.001972198486328125, -1.9073486328125e-06, -0.0010356903076171875, -0.07711315155029297, -0.0087127685546875, 0.0, -0.04457247257232666, -3.814697265625e-06, -0.0033016204833984375, -5.7220458984375e-06, -0.000583648681640625, -0.019797325134277344, -5.7220458984375e-06, -0.005364418029785156, -8.7738037109375e-05, -0.0014171600341796875, -7.62939453125e-06, -0.004906350746750832, -0.7521961331367493, -0.00013172626495361328, -0.010773658752441406, -1.9073486328125e-06, -0.0012733933981508017, -2.753734224825166e-05, 0.0, -5.7220458984375e-05, 0.0], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "choice_history": [93, 145, 230, 101, 125, "Shadow", "Of", "Nothing", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 83, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 83, 70, 224, 205, "auras", "<EOS>", 21, 141, 217, 58, 123, 47, 217, 87, 193, "<UNK>", "Deathrattle", "<EOS>", 87, 193, "Player", "Selector", "<EOS>", 71, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "ShadowOfNothing", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Shadow of Nothing"}, {"_type": "Template31"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template31"}, {"_type": "Template14"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "auras", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Template5", "hole0": "<UNK>Deathrattle"}, {"_type": "Template5", "hole0": "PlayerSelector"}], "func": {"_type": "Template36"}}, {"_type": "Template15_expr_seq"}]}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"score": -1.7786897883786423, "score_history": [-2.09808349609375e-05, -1.9073486328125e-06, -8.20159912109375e-05, -0.000148773193359375, -2.09808349609375e-05, -2.026557694989606e-06, -4.29153169534402e-06, -3.814697265625e-06, -0.0003757476806640625, -0.0001964569091796875, -3.62396240234375e-05, -1.1444091796875e-05, -2.2649765014648438e-06, -7.62939453125e-06, -9.5367431640625e-06, -0.0003490447998046875, -0.0004444122314453125, -2.47955322265625e-05, -3.814697265625e-05, -0.0001811981201171875, -3.0517578125e-05, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, -2.7418038371251896e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -1.537799835205078e-05, 0.0, -0.0011043548583984375, 0.0, -1.33514404296875e-05, -0.4529533386230469, -5.7220458984375e-06, -3.814697265625e-05, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -5.91278076171875e-05, -7.62939453125e-06, -0.07171356678009033, -1.1444091796875e-05, -2.09808349609375e-05, -7.05718994140625e-05, -5.7220458984375e-06, -0.0001068115234375, -9.5367431640625e-06, 0.0, -0.00069427490234375, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -3.6597251892089844e-05, -3.933906555175781e-06, -0.0006351470947265625, -2.288818359375e-05, -0.6055431365966797, -1.1444091796875e-05, -1.33514404296875e-05, -9.918212890625e-05, -2.288818359375e-05, -0.018568027764558792, 0.0, -0.25504112243652344, -5.7220458984375e-05, -5.7220458984375e-06, 0.0, -0.0070743560791015625, -4.57763671875e-05, -0.0013430118560791016, -1.1444091796875e-05, -0.0005648136138916016, 0.0, -0.002300262451171875, -0.0005359649658203125, 0.0, -0.000553131103515625, 0.0, -0.030564308166503906, 0.0, -0.000812530517578125, -0.0019741058349609375, 0.0, -0.004235386848449707, 0.0, -0.0016006231307983398, 0.0, -0.016246795654296875, -0.0002288818359375, -0.02062225341796875, -0.000637054443359375, -0.000469207763671875, -0.00052642822265625, -0.0024433135986328125, -7.62939453125e-06, -0.000453948974609375, -1.9073486328125e-06, -0.0013065338134765625, -1.9073486328125e-06, -0.024074554443359375, -0.0010933876037597656, -5.841255187988281e-06, -0.00046491605462506413, -9.5367431640625e-06, -2.09808349609375e-05, -0.005993843078613281, -0.0006809234619140625, -9.5367431640625e-06, 0.0, -0.001773834228515625, 0.0, -0.0003833770751953125, 0.0, -0.058254241943359375, -1.9073486328125e-06, -0.011396408081054688, -8.392333984375e-05, -0.0025548934936523438, -0.000125885009765625, -0.0036716461181640625, -5.7220458984375e-06, -0.008699417114257812, -5.7220458984375e-06, -0.013326524756848812, 0.0, -0.0140228271484375, -0.002910614013671875, -3.24249267578125e-05, -5.7220458984375e-05, -4.9591064453125e-05, -3.814697265625e-06, 0.0, -5.14984130859375e-05, -0.02167588099837303, 0.0, -1.9073486328125e-06, -0.000244140625, -0.000820159912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.03836536407470703, -0.0014133453369140625, 0.0, -0.000392913818359375, -0.010893615894019604, -1.9073486328125e-06, -1.71661376953125e-05, -0.00025177001953125, -4.38690185546875e-05, -4.1961669921875e-05, 0.0, 0.0, -0.00022125244140625, -1.52587890625e-05, 0.0, -0.0001316070556640625, -0.047128885984420776, 0.0, -0.000171661376953125, -2.86102294921875e-05, -4.38690185546875e-05, -0.0001220703125, 0.0, -6.4849853515625e-05, -0.0005418062210083008, 0.0, 0.0, -0.00249481201171875, -2.288818359375e-05, 0.0], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [93, 145, 230, 101, 125, "Slam", "<EOS>", 216, 73, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Slam", "<EOS>", 69, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 88, 224, 205, "target_func", "<EOS>", 15, 116, 15, 116, 23, 146, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 104, 130, "use", "<EOS>", 3, 203, 211, 0, 1, 202, "player", "<EOS>", 1, 202, "game", "<EOS>", 231, 108, 98, 115, 216, 63, 146, "targets", "<EOS>", 18, 123, 15, 116, 23, 146, "copy", "<EOS>", "copy", "<EOS>", 216, 55, 116, 15, 116, 15, 116, 32, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 105, 134, 17, 119, 4, 217, 59, 126, 15, 116, 15, 116, 52, "card", "<EOS>", "minion_type", "<EOS>", 213, 10, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 59, 126, 52, 213, 9, 216, 63, 146, "targets", "<EOS>", 230, 102, 128, 18, 123, 15, 116, 52, "change_attack", "<EOS>", 216, 69, 102, 128, 18, 123, 15, 116, 52, "increase_health", "<EOS>", 216, 69, 229, 102, 128, 18, 123, 15, 116, 52, "damage", "<EOS>", 217, 58, 123, 15, 116, 32, "effective_spell_damage", "<EOS>", 216, 69, 74, 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Slam", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template12"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting"}, "attr": "find_minion_spell_target"}}]}}]}, {"_type": "FunctionDef", "name": "use", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}, "body": [{"_type": "Template0"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "game"}, "attr": "current_player"}, "attr": "minions"}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "copy"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "If", "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "change_attack"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "increase_health"}}}], "orelse": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "effective_spell_damage"}}, {"_type": "Template18"}], "func": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "damage"}}}], "test": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template8"}, "attr": "card"}, "attr": "minion_type"}, "comparators": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}], "ops": [{"_type": "Is"}]}, {"_type": "Compare", "left": {"_type": "Template8"}, "comparators": [{"_type": "Name", "id": "targets"}], "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}}]}], "bases": [{"_type": "Template17"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"score": -0.04494749836248957, "score_history": [-3.814697265625e-06, -1.52587890625e-05, -0.000141143798828125, -1.9073486328125e-06, -7.62939453125e-06, -0.0001350584498140961, -0.00015472339873667806, 0.0, -2.09808349609375e-05, -2.86102294921875e-05, -6.29425048828125e-05, -3.814697265625e-06, -2.3841830625315197e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0123138427734375, -0.0001220703125, -1.9073486328125e-05, -3.814697265625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -9.536738616588991e-07, -1.9073486328125e-06, -5.14984130859375e-05, -0.000164031982421875, -2.47955322265625e-05, -0.000751495361328125, -5.91278076171875e-05, -0.00024044513702392578, 0.0, -0.000202178955078125, -0.0001506805419921875, -3.4332275390625e-05, -2.86102294921875e-05, -0.010656356811523438, -5.7220458984375e-05, -0.0025913489516824484, -0.0009644508245401084, -4.9591064453125e-05, -0.0003223419189453125, -0.0006618499755859375, -0.0027217864990234375, -4.76837158203125e-05, -0.006689310073852539, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0013168910518288612, -0.0003172159194946289, -3.62396240234375e-05, -0.001033782958984375, -0.0008678436279296875, -3.0517578125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.00010001490591093898, -0.00018262863159179688, 0.0, -0.00041961669921875, 0.0, -2.6941299438476562e-05, 0.0, 0.0, 0.0, -0.00042724609375, 0.0, -3.24249267578125e-05, 0.0, -3.445148468017578e-05, 0.0, -3.814697265625e-06, -8.0108642578125e-05, -4.38690185546875e-05, -0.00031244748970493674, -4.529942543740617e-06, -2.0980805857107043e-05, -7.629365427419543e-06, 0.0], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [93, 145, 230, 101, 125, "Spellbreaker", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Spellbreaker", "<EOS>", 76, 89, 88, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 87, 193, "Silence", "<EOS>", 58, 122, 38, 225, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "User", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "4", "<EOS>", "3", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Spellbreaker", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template20"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Template5", "hole0": "Silence"}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "UserPicker"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 4, "hole1": 3}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"score": -2.5598464971756982, "score_history": [-1.9073486328125e-06, 0.0, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -2.288792165927589e-05, -1.883488948806189e-05, -0.00020883326942566782, -4.1961669921875e-05, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -0.000171661376953125, -6.29425048828125e-05, -3.814697265625e-06, -7.62939453125e-06, -8.0108642578125e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -4.76837158203125e-05, -2.968272747239098e-05, -1.4185905456542969e-05, -2.384185791015625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0001201629638671875, -1.1444091796875e-05, -0.0015468597412109375, -4.76837158203125e-05, -9.1552734375e-05, -1.9073486328125e-06, -0.11587142944335938, -3.814697265625e-06, -7.43865966796875e-05, -1.52587890625e-05, -0.0009593963623046875, -2.288818359375e-05, -0.005584716796875, -5.7220458984375e-05, -0.3269805908203125, -1.9073486328125e-06, -0.0025320053100585938, -3.814697265625e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0001277923583984375, -3.814697265625e-06, -5.7220458984375e-06, -0.058746337890625, -7.43865966796875e-05, -0.028594970703125, -0.0012454986572265625, -0.16619110107421875, -0.000270843505859375, -3.814697265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000308990478515625, -5.7220458984375e-06, -9.5367431640625e-06, -0.032802581787109375, -3.62396240234375e-05, -0.0057277679443359375, -0.000179290771484375, -0.0005106921307742596, -6.353800563374534e-05, 0.0, -0.0033550262451171875, -0.30591773986816406, -0.0022296905517578125, -2.86102294921875e-05, -0.0007781982421875, -0.002490997314453125, -0.0133819580078125, -7.2479248046875e-05, -0.716609001159668, -0.0055294036865234375, -0.000423431396484375, -7.62939453125e-06, -0.7588261365890503, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -1.52587890625e-05, 0.0, -1.33514404296875e-05, -4.38690185546875e-05, -0.000110626220703125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.491474151611328e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001125335693359375, -3.814697265625e-06, -1.5735622582724318e-05, 0.0, -1.2755393072438892e-05, -1.0728830375228426e-06, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(2))]), MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [93, 145, 230, 101, 125, "Sunfury", "Protector", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Sunfury", " ", "Protector", "<EOS>", 69, 89, 91, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 37, 216, 61, 141, 218, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 70, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 69, 71, 58, 122, 38, 224, 205, "condition", "<EOS>", 51, 193, "Adjacent", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "3", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "SunfuryProtector", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template12"}, {"_type": "Template7"}, {"_type": "Template9"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}], "func": {"_type": "Template25"}}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template5", "hole0": "Adjacent"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 3}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"score": -3.97351394678833, "score_history": [-8.58306884765625e-05, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0004068977141287178, -0.00018010969506576657, -0.003946893848478794, -1.9073486328125e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -8.344646857949556e-07, -1.9073486328125e-06, 0.0, -0.00046539306640625, -6.29425048828125e-05, -9.5367431640625e-06, -1.33514404296875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -2.9325083232834004e-05, -1.2040138244628906e-05, -2.503394853192731e-06, -3.814697265625e-06, -0.0001201629638671875, -2.6702880859375e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -4.971027374267578e-05, -5.7220458984375e-06, -9.715557098388672e-05, -1.9073486328125e-06, -0.0001888275146484375, -9.5367431640625e-06, -0.0003204345703125, -3.814697265625e-06, -0.14019012451171875, -0.0001125335693359375, -0.000202178955078125, -0.0002841949462890625, -3.0517578125e-05, -5.7220458984375e-06, -0.0003414154052734375, -3.24249267578125e-05, -0.4835619032382965, -0.015790032222867012, -0.0005168914794921875, -0.6542701721191406, -0.43717384338378906, -0.0006351470947265625, -0.008098602294921875, -0.0006885528564453125, -0.3965468108654022, -0.0009950398234650493, -0.0020732879638671875, -0.000133514404296875, -0.002201080322265625, -0.07692527770996094, -0.0006561279296875, -0.0005588531494140625, -9.34600830078125e-05, -0.2620706558227539, -0.00700223445892334, 0.0, -0.0001201629638671875, -0.09527206420898438, -0.0001811981201171875, -0.000377655029296875, -1.71661376953125e-05, -0.08151137828826904, -5.8887653722194955e-05, -6.866455078125e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.3374791741371155, -1.9073486328125e-06, -0.0032367706298828125, 0.0, -0.03219175338745117, -9.179115295410156e-05, 0.0, -0.0139617919921875, -5.7220458984375e-06, -0.006189942359924316, -0.005643567536026239, -0.0031173229217529297, -6.866455078125e-05, -0.0053558349609375, -0.004566192626953125, -0.004840850830078125, -0.2893943786621094, -0.0001697540283203125, -0.008808135986328125, 0.0, -0.000110626220703125, -1.9073486328125e-06, -0.09155392646789551, -0.00016987323760986328, -1.52587890625e-05, -2.288818359375e-05, -7.2479248046875e-05, -2.47955322265625e-05, -0.000583648681640625, -1.9073486328125e-05, -0.4901442527770996, -9.608241089154035e-05, -1.9073486328125e-06, -0.000118255615234375, -1.9073486328125e-06, -2.3126602172851562e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0001010894775390625, 0.0, -1.9073486328125e-06, 0.0, -2.8967857360839844e-05, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -4.1961669921875e-05, -1.072880422725575e-06, -5.602820692729438e-06, -5.915366637054831e-05, -6.079655122448457e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaCost(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [93, 145, 230, 101, 125, "Tinkmaster", "Overspark", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Tinkmaster", " ", "Overspark", "<EOS>", 72, 89, 55, 116, 23, 146, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 224, 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 23, 146, "Transform", "<EOS>", 216, 58, 122, 46, 224, 205, "conditions", "<EOS>", 21, 141, 218, 58, 123, 23, 146, "Mana", "Cost", "<EOS>", 216, 58, 123, 23, 146, "Attribute", "<EOS>", 217, 66, 155, "mana", "<EOS>", 87, 193, "Self", "Selector", "<EOS>", 87, 193, "Is", "Minion", "<EOS>", 71, 58, 122, 38, 225, 205, "players", "<EOS>", 51, 193, "Enemy", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "Random", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "3", "<EOS>", "3", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "TinkmasterOverspark", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template16"}, {"_type": "Template7"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Template35"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Str", "s": "mana"}, {"_type": "Template5", "hole0": "SelfSelector"}], "func": {"_type": "Name", "id": "Attribute"}}], "func": {"_type": "Name", "id": "ManaCost"}}, {"_type": "Template5", "hole0": "IsMinion"}, {"_type": "Template15_expr_seq"}]}}]}], "func": {"_type": "Name", "id": "Transform"}}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "RandomPicker"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 3, "hole1": 3}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"score": -5.488670599178455, "score_history": [-0.00060272216796875, -6.103515625e-05, -6.866455078125e-05, -0.0010318756103515625, -3.24249267578125e-05, -1.1444046322139911e-05, -3.242486127419397e-05, -5.91278076171875e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.005856370087713003, -0.000476837158203125, -0.0001888275146484375, -0.020569801330566406, -0.0003871917724609375, -1.9073486328125e-06, -0.006368875503540039, -2.09808349609375e-05, -0.00012969970703125, -0.47124671936035156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -2.09808349609375e-05, -6.103515625e-05, -0.0003604888916015625, -3.814697265625e-06, -3.814697265625e-06, -1.2755313036905136e-05, -9.5367431640625e-06, -0.0001277923583984375, -2.6702880859375e-05, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -6.973742711124942e-05, -1.1444091796875e-05, -9.5367431640625e-06, -0.00337982177734375, -0.000484466552734375, -0.0002460479736328125, -1.71661376953125e-05, -4.9591064453125e-05, -0.0011882781982421875, -0.0002994537353515625, 0.0, -0.004843711853027344, -3.62396240234375e-05, -0.0010004043579101562, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -0.005421638488769531, -0.0002689361572265625, -2.6702880859375e-05, -1.71661376953125e-05, -0.20978832244873047, -5.340576171875e-05, -1.71661376953125e-05, -2.09808349609375e-05, -0.22367703914642334, -0.00011670589447021484, -0.043811798095703125, -0.05799674987792969, -0.000522613525390625, -0.008040428161621094, -2.288818359375e-05, -0.0014705657958984375, -0.0031032562255859375, -7.62939453125e-05, -5.7220458984375e-06, -0.0020367619581520557, -3.2782401831354946e-05, -4.76837158203125e-05, -0.0023584365844726562, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.0006742477416992188, -1.9073486328125e-05, 0.0, -0.03468753769993782, -3.814697265625e-06, -0.000637054443359375, -0.000255584716796875, -0.000431060791015625, -0.0004100799560546875, -0.056900978088378906, -0.0002460479736328125, -0.0002079010009765625, -0.000244140625, -0.0002384185791015625, -2.288818359375e-05, -0.37211620807647705, -3.910064697265625e-05, -8.20159912109375e-05, -0.0001850128173828125, -0.0012655258178710938, -2.6702880859375e-05, -0.0048694610595703125, -0.02102893590927124, -3.62396240234375e-05, -7.62939453125e-05, -6.67572021484375e-05, 0.0, -0.0002994537353515625, -0.0003434419631958008, 0.0, -0.000270843505859375, -4.1961669921875e-05, 0.0, -0.00142669677734375, -0.0003337860107421875, 0.0, -0.008420944213867188, -2.288818359375e-05, -0.15512871742248535, 0.0, -0.016878485679626465, 0.0, -0.0007457733154296875, -0.1143798828125, -0.00106048583984375, -0.0051670074462890625, -3.0517578125e-05, -0.0017766952514648438, -3.0517578125e-05, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.016861915588378906, -1.9073486328125e-06, -0.0013551712036132812, -7.62939453125e-06, 0.0, -0.02229064330458641, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, 0.0, -0.0005702972412109375, -4.1961669921875e-05, -1.9073486328125e-06, -0.3122749328613281, 0.0, -0.04617786407470703, -0.0013836616417393088, -1.1920928244535389e-07, -0.0032119168899953365, 0.0, -1.9073486328125e-05, -0.0001373291015625, -4.1961669921875e-05, -0.14289234578609467, -0.00019359588623046875, -0.005034446716308594, -0.0021686553955078125, -0.07968854904174805, -1.9073486328125e-06, -0.0016536712646484375, -8.58306884765625e-05, -5.7220458984375e-06, -0.07240486145019531, -5.7220458984375e-06, -3.814697265625e-06, -0.008133888244628906, 0.0, -0.013057708740234375, -0.0006290650926530361, -1.1920928244535389e-07, -0.003973874729126692, 0.0, -7.43865966796875e-05, -0.0005168914794921875, -6.67572021484375e-05, -0.29960012435913086, -0.00022792816162109375, -0.010958671569824219, -0.004881858825683594, -0.08219575881958008, -1.9073486328125e-06, -0.0019741058349609375, -0.000125885009765625, -3.814697265625e-06, -0.077606201171875, -7.62939453125e-06, -5.7220458984375e-06, -0.0072765350341796875, 0.0, -0.011401176452636719, -0.0006250116275623441, -1.1920928244535389e-07, -0.0041094268672168255, 0.0, -6.866455078125e-05, -0.0004863739013671875, -6.67572021484375e-05, -0.2989795207977295, -0.00024509429931640625, -0.011949539184570312, -0.004857063293457031, -0.08278942108154297, -1.9073486328125e-06, -0.30235958099365234, -1.1444091796875e-05, -8.7738037109375e-05, -0.2629814147949219, -6.103515625e-05, 0.0, -0.002269744873046875, -2.47955322265625e-05, -0.0012024161405861378, -8.392333984375e-05, -0.00021946430206298828, -4.38690185546875e-05, -0.0013675689697265625, -1.9073486328125e-06, -0.05259227752685547, -0.000823974609375, -9.5367431640625e-06, -6.29425048828125e-05, -0.0001373291015625, -1.33514404296875e-05, -4.38690185546875e-05, -1.33514404296875e-05, -0.00021779537200927734, 0.0, -0.22491836547851562, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -3.0517578125e-05, -0.11013507843017578, -2.86102294921875e-05, -0.0031604766845703125, -0.0001678466796875, -0.009464263916015625, -0.001593947410583496, -5.7220458984375e-06, -0.0003290175227448344, -6.866455078125e-05, -0.526092529296875, -1.9073486328125e-06, -3.814697265625e-06, -6.103515625e-05, -6.103515625e-05, -0.47116947174072266, -0.000152587890625, -9.918212890625e-05, -1.1444091796875e-05, -0.000385284423828125, -0.0005168914794921875, -9.72747802734375e-05, -2.86102294921875e-05], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n    super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n", "choice_history": [93, 145, 230, 101, 125, "Vaporize", "<EOS>", 216, 63, 146, "Secret", "Card", "<EOS>", 232, 104, 130, "__init__", "<EOS>", 2, 230, 102, 128, 18, 123, 50, 219, 66, 155, "Vaporize", "<EOS>", 72, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 91, 98, 115, 216, 55, 116, 31, "player", "<EOS>", 24, 148, "Null", "<EOS>", 104, 130, "_reveal", "<EOS>", 3, 203, 210, 0, 1, 202, "minion", "<EOS>", 229, 105, 133, 19, 126, 18, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 15, 116, 31, "player", "<EOS>", "minions", "<EOS>", 213, 12, 216, 79, 233, 98, 115, 216, 63, 146, "mirror", "<EOS>", 18, 123, 15, 116, 41, "copy", "<EOS>", 216, 55, 116, 31, "player", "<EOS>", 102, 128, 18, 123, 15, 116, 23, 146, "mirror", "<EOS>", "<UNK>", "<EOS>", 216, 58, 123, 23, 146, "len", "<EOS>", 216, 55, 116, 15, 116, 31, "player", "<EOS>", "minions", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 41, "player", "<EOS>", "trigger", "<EOS>", 217, 66, 155, "<UNK>", "<EOS>", 63, 146, "mirror", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 41, "player", "<EOS>", "trigger", "<EOS>", 217, 66, 155, "<UNK>", "<EOS>", 63, 146, "mirror", "<EOS>", 102, 128, 18, 123, 15, 116, 15, 116, 41, "player", "<EOS>", "trigger", "<EOS>", 217, 66, 155, "<UNK>", "<EOS>", 63, 146, "mirror", "<EOS>", 102, 128, 18, 121, 15, 116, 51, 193, "super", "<EOS>", "reveal", "<EOS>", 104, 130, "activate", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 102, 128, 18, 123, 15, 116, 15, 116, 15, 116, 32, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 217, 66, 155, "character_attack", "<EOS>", 55, 116, 31, "_reveal", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Vaporize", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Vaporize"}, {"_type": "Template16"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE"}, {"_type": "Template9"}], "func": {"_type": "Template4"}}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}, "targets": [{"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "player"}]}]}, {"_type": "FunctionDef", "name": "_reveal", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "minion"}]}, "body": [{"_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "player"}], "func": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "copy"}}, "targets": [{"_type": "Name", "id": "mirror"}]}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "player"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}], "func": {"_type": "Attribute", "value": {"_type": "Name", "id": "mirror"}, "attr": "<UNK>"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "player"}, "attr": "trigger"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "player"}, "attr": "trigger"}}}, {"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template30"}, "attr": "player"}, "attr": "trigger"}}}], "test": {"_type": "Compare", "left": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "player"}, "attr": "minions"}], "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template24"}], "ops": [{"_type": "Lt"}]}}]}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "value": {"_type": "Template5", "hole0": "super"}, "attr": "reveal"}}}, {"_type": "FunctionDef", "name": "activate", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"_type": "Attribute", "value": {"_type": "Template18"}, "attr": "_reveal"}], "func": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Attribute", "value": {"_type": "Template19"}, "attr": "game"}, "attr": "current_player"}, "attr": "unbind"}}}]}], "bases": [{"_type": "Name", "id": "SecretCard"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"score": -0.005901379773547433, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -4.887569048150908e-06, -3.576278118089249e-07, -0.0009086839854717255, -1.9073486328125e-06, -1.71661376953125e-05, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -4.76837158203125e-05, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -9.5367431640625e-06, -7.152543730626348e-06, -1.0371208190917969e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -8.392333984375e-05, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.57763671875e-05, -1.33514404296875e-05, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -9.5367431640625e-06, -5.91278076171875e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-05, -0.0001220703125, -0.0001201629638671875, -9.34600830078125e-05, -4.76837158203125e-05, -0.002399444580078125, 0.0, -0.0011626434279605746, -8.10622896096902e-06, -0.0001277923583984375, -1.33514404296875e-05, -0.00013910808775108308, -0.0001675945386523381, -1.9073486328125e-06], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [93, 145, 230, 101, 125, "Worgen", "Infiltrator", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 123, 50, 219, 66, 155, "Worgen", " ", "Infiltrator", "<EOS>", 70, 89, 88, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 107, 153, 18, 124, 36, 217, 69, 70, 224, 205, "stealth", "<EOS>", 24, 147, "True", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "WorgenInfiltrator", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Worgen Infiltrator"}, {"_type": "Template14"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Return", "value": {"_type": "Call", "args": [{"_type": "Template12"}, {"_type": "Template14"}], "func": {"_type": "Template23"}, "keywords": [{"_type": "keyword", "arg": "stealth", "value": {"_type": "NameConstant", "value": true}}]}}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"score": -2.1377113557767586, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0008049347088672221, -0.00021217002358753234, -8.940656698541716e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, -2.384185791015625e-06, -5.7220458984375e-06, 0.0, -0.000152587890625, -0.00014495849609375, -1.9073486328125e-06, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -4.172319677309133e-06, -1.060962586052483e-05, -2.0265579223632812e-06, -3.814697265625e-06, -0.0002117156982421875, -2.6702880859375e-05, -1.33514404296875e-05, -0.0001392364501953125, -9.5367431640625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.000148773193359375, -8.58306884765625e-05, -6.4849853515625e-05, -0.6538581848144531, -0.0009250640869140625, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0037126350216567516, -0.0008954584482125938, -1.9073486328125e-06, -0.17343616485595703, -0.2156352996826172, -0.001918792724609375, -1.9073486328125e-06, -3.62396240234375e-05, -0.007665753364562988, -0.00018310546875, 0.0, -0.00201416015625, 0.0, -0.002349853515625, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.25907135009765625, -1.943111237778794e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.0005970001220703125, 0.0, -0.0002040863037109375, 0.0, -0.5201817750930786, -0.000118255615234375, -5.7220458984375e-06, -1.1444091796875e-05, -0.18849945068359375, -6.4849853515625e-05, 0.0, -0.000579833984375, -4.780292510986328e-05, -1.1444091796875e-05, -1.9073486328125e-06, -7.43865966796875e-05, -0.000995635986328125, -1.33514404296875e-05, 0.0, -0.0001316070556640625, -2.2768972485209815e-05, -7.62939453125e-06, -0.026012420654296875, -0.003101348876953125, -4.1961669921875e-05, -1.9073486328125e-06, -0.006435513496398926, -4.9591064453125e-05, -3.814697265625e-06, -0.002719879150390625, -2.47955322265625e-05, -0.011852264404296875, -1.52587890625e-05, -0.0005435943603515625, -0.005129814147949219, -0.0048999786376953125, -5.340576171875e-05, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.00016152855823747814, -1.0728830375228426e-06, -0.016370654106140137, 0.0, -0.0154876708984375, 0.0, -0.0006151199340820312, -1.33514404296875e-05, -0.007978439331054688, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -1.5616416931152344e-05, 0.0, -2.47955322265625e-05, -5.53131103515625e-05, -1.9073486328125e-05, -5.900848191231489e-05, -7.510157047363464e-06, -0.00016820430755615234, -2.3841855067985307e-07, 0.0], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [93, 145, 230, 101, 125, "Blackwing", "Corruptor", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Blackwing", " ", "Corruptor", "<EOS>", 77, 89, 88, 224, 205, "battlecry", "<EOS>", 18, 123, 34, 218, 58, 123, 23, 146, "Damage", "<EOS>", 216, 70, 58, 122, 23, 146, "Character", "Selector", "<EOS>", 225, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "User", "Picker", "<EOS>", 58, 124, 23, 146, "Greater", "Than", "<EOS>", 216, 58, 123, 23, 146, "Count", "<EOS>", 216, 58, 122, 23, 146, "Card", "Selector", "<EOS>", 224, 205, "condition", "<EOS>", 18, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 224, 205, "value", "<EOS>", 42, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "5", "<EOS>", "4", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "BlackwingCorruptor", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Template22"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Name", "id": "Damage"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "UserPicker"}}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "func": {"_type": "Template37"}}}]}], "func": {"_type": "Name", "id": "Count"}}], "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Template31"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 5, "hole1": 4}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"score": -3.0207276516829182, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00027616979787126184, -0.001065520802512765, -6.174884038046002e-05, -5.7220458984375e-06, -7.62939453125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -1.1920928244535389e-07, 0.0, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.24249267578125e-05, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -2.47955322265625e-05, -5.722029527532868e-06, -1.3589859008789062e-05, -4.172325134277344e-06, -1.9073486328125e-06, -0.00018310546875, -0.0001277923583984375, -1.1444091796875e-05, -0.00193023681640625, -7.62939453125e-06, -3.147125244140625e-05, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -2.5510735213174485e-05, -2.264974000354414e-06, -0.012553811073303223, 0.0, -3.0517578125e-05, -0.0002576112747192383, 0.0, -0.0026988983154296875, -3.814697265625e-06, -1.52587890625e-05, -0.378936767578125, -0.001220703125, -2.288818359375e-05, -0.0029354095458984375, -0.00092315673828125, -0.020257949829101562, -1.71661376953125e-05, -0.018472671508789062, -2.09808349609375e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.0018463134765625, -7.05718994140625e-05, -0.014522552490234375, -1.71661376953125e-05, -0.5190439224243164, -0.0001964569091796875, -4.1961669921875e-05, -1.9073486328125e-05, -3.814697265625e-06, -6.866455078125e-05, 0.0, -3.814697265625e-06, -0.01639556884765625, -0.0001926422119140625, -0.006069183349609375, -1.9073486328125e-06, -9.429454075871035e-05, -0.00022327821352519095, -1.1920928244535389e-07, -0.00063323974609375, -0.15223121643066406, -0.0001373291015625, -0.12942886352539062, -0.012491226196289062, -0.2912864685058594, -0.5473232269287109, -0.0001392364501953125, -0.009054183959960938, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -0.6359647512435913, -0.00011861324310302734, -1.71661376953125e-05, -1.9073486328125e-06, -0.0001964569091796875, -9.5367431640625e-06, -0.00012969970703125, 0.0, -0.23955929279327393, -0.00011444091796875, -0.00020599365234375, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -8.392333984375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00017547607421875, -4.38690185546875e-05, 0.0, -7.62939453125e-06, -2.09808349609375e-05, -2.86102294921875e-05, -9.298279110225849e-06, -3.802703940891661e-05, -3.722371184267104e-05, -1.5497195136049413e-06, 0.0], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [93, 145, 230, 101, 125, "Drakonid", "Crusher", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Drakonid", " ", "Crusher", "<EOS>", 81, 89, 88, 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 205, "battlecry", "<EOS>", 18, 123, 34, 217, 58, 123, 37, 216, 61, 141, 218, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 72, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 72, 71, 58, 122, 38, 225, 205, "players", "<EOS>", 51, 193, "Both", "Player", "<EOS>", 205, "picker", "<EOS>", 51, 193, "User", "Picker", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "6", "<EOS>", "6", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "DrakonidCrusher", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Template28"}, {"_type": "Template7"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template16"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}], "func": {"_type": "Template25"}}, {"_type": "Call", "func": {"_type": "Template26"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template5", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template5", "hole0": "UserPicker"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 6, "hole1": 6}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"score": -0.021109442999744488, "score_history": [-7.2479248046875e-05, -4.00543212890625e-05, -4.1961669921875e-05, -9.5367431640625e-05, -4.38690185546875e-05, -1.7881377516459906e-06, -0.00016211597539950162, -1.1444091796875e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -4.291534423828125e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, -0.00030517578125, -1.9073486328125e-06, -4.57763671875e-05, -0.0005512237548828125, -4.9591064453125e-05, -0.000843048095703125, -0.000469207763671875, -3.814697265625e-06, -4.8874615458771586e-05, -1.7404538084520027e-05, -0.0051860809326171875, -0.0003185272216796875, -0.000713348388671875, -0.00028228759765625, -0.0004405975341796875, 0.0, -3.933906555175781e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.537799835205078e-05, 0.0, -0.009775519371032715, -0.00011444091796875, -9.5367431640625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0009274482727050781, 0.0, -2.86102294921875e-05, -3.24249267578125e-05, -6.103515625e-05, -0.00011896377691300586, -4.768370445162873e-07, -6.413277878891677e-05, -2.3841855067985307e-07, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [93, 145, 230, 101, 125, "Imp", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 220, 66, 155, "Imp", "<EOS>", 70, 89, 91, 80, 224, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "1", "<EOS>", "1", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "Imp", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template14"}, {"_type": "Template7"}, {"_type": "Template9"}, {"_type": "Template27"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON"}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 1, "hole1": 1}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"score": -0.6986929173820329, "score_history": [0.0, -5.7220458984375e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.933898824470816e-06, -6.318092346191406e-06, -1.1920928244535389e-07, -1.33514404296875e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, -3.933906555175781e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -5.340576171875e-05, -4.1961669921875e-05, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -3.814697265625e-06, -4.768370445162873e-07, -1.3947486877441406e-05, -7.748603820800781e-06, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -2.622604142743512e-06, -1.1920928244535389e-07, -0.0019108057022094727, -1.9073486328125e-06, -3.0517578125e-05, -0.0008983612060546875, -3.814697265625e-06, -0.0002962350845336914, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.9604644775390625e-06, -3.576278118089249e-07, -0.11008262634277344, 0.0, -4.9591064453125e-05, -0.00013780593872070312, 0.0, -0.000415802001953125, -3.814697265625e-06, -4.1961669921875e-05, -0.22653579711914062, -0.00020599365234375, -1.9073486328125e-05, -0.001201629638671875, -0.0001926422119140625, -0.011102676391601562, -5.7220458984375e-06, -0.0012969970703125, -2.6702880859375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -5.7220458984375e-06, -0.0002593994140625, -3.0517578125e-05, -0.0131988525390625, -7.62939453125e-06, -0.08832263946533203, -8.58306884765625e-05, -4.9591064453125e-05, -2.09808349609375e-05, 0.0, -0.0002346038818359375, 0.0, -7.62939453125e-06, -0.0043964385986328125, -9.5367431640625e-05, -0.0071544647216796875, -3.814697265625e-06, -4.494188033277169e-05, -0.00010800327436299995, -2.0265579223632812e-06, -1.1444091796875e-05, -0.16666030883789062, -0.004241943359375, -0.00260162353515625, -1.52587890625e-05, -0.0001169443130493164, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -0.009428024291992188, -0.000331878662109375, -2.47955322265625e-05, -0.0010071992874145508, -0.0005348920822143555, -9.5367431640625e-06, -2.09808349609375e-05, -7.62939453125e-06, -0.000202178955078125, -0.0001239776611328125, -9.5367431640625e-06, -0.0001010894775390625, -5.483626591740176e-05, -9.5367431640625e-06, -0.000152587890625, -0.0012874603271484375, -0.00025177001953125, -1.9073486328125e-06, -0.001804351806640625, -0.000247955322265625, -1.9073486328125e-06, -9.1552734375e-05, -7.62939453125e-06, -0.023441314697265625, -1.1444091796875e-05, -0.000946044921875, -8.392333984375e-05, -0.008774757385253906, -2.09808349609375e-05, -1.9073486328125e-06, 0.0, -5.340576171875e-05, 0.0, -8.642669854452834e-05, -6.794906312279636e-06, -0.0019898414611816406, -1.1920928244535389e-07, -0.0012722015380859375, 0.0, -0.0002899169921875, -1.9073486328125e-06, -0.0023641586303710938, -4.00543212890625e-05, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -3.814697265625e-06, -5.340576171875e-05, -7.82012939453125e-05, -0.0007585287094116211, -1.1920928244535389e-07, -3.4570664411148755e-06, 0.0, -1.9073486328125e-06], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(2))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [93, 145, 230, 101, 125, "Twilight", "Whelp", "<EOS>", 216, 68, 230, 104, 130, "__init__", "<EOS>", 2, 229, 102, 128, 18, 124, 50, 219, 66, 155, "Twilight", " ", "Whelp", "<EOS>", 70, 55, 116, 23, 146, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 88, 225, 205, "minion_type", "<EOS>", 15, 116, 23, 146, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 205, "battlecry", "<EOS>", 18, 123, 34, 218, 58, 123, 37, 216, 61, 141, 218, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 40, 216, 70, 58, 123, 23, 146, "Buff", "<EOS>", 216, 58, 123, 23, 146, "Change", "Health", "<EOS>", 216, 69, 71, 87, 193, "Self", "Selector", "<EOS>", 58, 124, 23, 146, "Greater", "Than", "<EOS>", 216, 58, 123, 23, 146, "Count", "<EOS>", 216, 58, 122, 23, 146, "Card", "Selector", "<EOS>", 224, 205, "condition", "<EOS>", 18, 123, 48, 216, 55, 116, 23, 146, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 224, 205, "value", "<EOS>", 42, 104, 130, "create_minion", "<EOS>", 3, 203, 210, 0, 1, 202, "player", "<EOS>", 229, 110, 181, "2", "<EOS>", "1", "<EOS>", 109], "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "name": "TwilightWhelp", "body": [{"_type": "FunctionDef", "name": "__init__", "args": {"_type": "Template2"}, "body": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template14"}, {"_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PRIEST"}, {"_type": "Template6"}], "func": {"_type": "Template4"}, "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}}, {"_type": "keyword", "arg": "battlecry", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template14"}], "func": {"_type": "Template29"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template12"}], "func": {"_type": "Name", "id": "ChangeHealth"}}], "func": {"_type": "Name", "id": "Buff"}}, {"_type": "Template15_expr_seq"}]}], "func": {"_type": "Template25"}}, {"_type": "Template5", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Call", "args": [{"_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON"}], "func": {"_type": "Template37"}}}]}], "func": {"_type": "Name", "id": "Count"}}], "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Template31"}}]}], "func": {"_type": "Template21"}}}]}}]}, {"_type": "FunctionDef", "name": "create_minion", "args": {"_type": "arguments", "args": [{"_type": "Template10"}, {"_type": "arg", "arg": "player"}]}, "body": [{"_type": "Template3", "hole0": 2, "hole1": 1}]}], "bases": [{"_type": "Template11"}]}, {"_type": "Template13_stmt_seq"}]}}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
