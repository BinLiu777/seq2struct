{"beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -1.0907815240352647, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.7319053411483765, 0.0, -0.0021554231643676758, -1.1444091796875e-05, -0.00025665760040283203, 0.0, -7.43865966796875e-05, -0.0001201629638671875, -0.004314422607421875, -0.0025352223310619593, -4.57763671875e-05, -0.0013278722763061523, 0.0, -0.017699353396892548, -0.0001735687255859375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "FREE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -1.323794205134611, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.9680732488632202, 0.0, -0.0027141571044921875, -1.9073486328125e-06, -0.00025737282703630626, 0.0, -4.9591064453125e-05, -0.000110626220703125, -0.0016460418701171875, -0.000674139242619276, -4.57763671875e-05, -0.0011324882507324219, -1.1920928244535389e-07, -0.018776163458824158, -0.0001506805419921875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "FREE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -2.069728261718403, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -1.6232366561889648, -1.9073486328125e-06, -0.3830033540725708, -1.9073486328125e-06, -0.0077953338623046875, 0.0, -0.00021827218006365, 0.0, -2.09808349609375e-05, -0.0001220703125, -0.0013294219970703125, -0.0007367990911006927, -4.00543212890625e-05, -0.0012447834014892578, -1.1920928244535389e-07, -0.017536716535687447, -0.0001354217529296875]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.0819308696809458, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -3.0026865005493164, -1.1444091796875e-05, -0.017579317092895508, 0.0, -0.0019116401672363281, -7.62939453125e-06, -0.00012505054473876953, 0.0, -5.7220458984375e-05, -0.0001163482666015625, -0.00431060791015625, -0.0023909774608910084, -4.76837158203125e-05, -0.0012475252151489258, 0.0, -0.016972336918115616, -0.0001621246337890625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.1366840081318443, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -2.780015230178833, -1.9073486328125e-06, -0.0009920597076416016, -5.7220458984375e-06, -0.0003027915954589844, 0.0, -8.7738037109375e-05, -8.20159912109375e-05, -0.003597259521484375, -0.0010602802503854036, -5.7220458984375e-05, -0.001375436782836914, -1.1920928244535389e-07, -0.018801283091306686, -0.0001430511474609375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "battlecry", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.battlecry)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.398497958885848, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -3.0448620319366455, 0.0, -0.001379251480102539, -1.9073486328125e-06, -0.00038647648761980236, 0.0, -4.57763671875e-05, -9.1552734375e-05, -0.0016841888427734375, -0.0007082096417434514, -4.76837158203125e-05, -0.0011169910430908203, -1.1920928244535389e-07, -0.01788599230349064, -0.000125885009765625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "battlecry", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.battlecry)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -3.6189828942733513, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -1.6232366561889648, -1.9073486328125e-06, -1.9371024370193481, 0.0, -0.0024300813674926758, -1.9073486328125e-06, -0.0002890824980568141, 0.0, -2.47955322265625e-05, -8.7738037109375e-05, -0.001651763916015625, -0.0008055297657847404, -4.1961669921875e-05, -0.0010576248168945312, -1.1920928244535389e-07, -0.017826663330197334, -0.0001201629638671875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -4.174656226707157, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -1.6232366561889648, -1.9073486328125e-06, -2.4900054931640625, 0.0, -0.002657294273376465, -5.7220458984375e-06, -0.00019395349954720587, 0.0, -2.288818359375e-05, -0.0001049041748046875, -0.0035533905029296875, -0.0028261453844606876, -3.814697265625e-05, -0.001371145248413086, 0.0, -0.016191065311431885, -0.0001430511474609375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -4.68695993763685, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -1.6232366561889648, -1.9073486328125e-06, -2.9935455322265625, -1.9073486328125e-06, -0.01120007038116455, -1.9073486328125e-06, -0.0004945993423461914, 0.0, -3.0517578125e-05, -0.000110626220703125, -0.002361297607421875, -0.001331870909780264, -4.1961669921875e-05, -0.001683950424194336, -1.1920928244535389e-07, -0.018463777378201485, -0.000148773193359375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "PALADIN", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "PALADIN", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.PALADIN)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -5.018417624421993, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -4.664581775665283, 0.0, -0.0014175176620483398, -7.62939453125e-06, -0.0003056526184082031, 0.0, -4.57763671875e-05, -6.103515625e-05, -0.002468109130859375, -0.0007989785517565906, -6.866455078125e-05, -0.0008025169372558594, -1.1920928244535389e-07, -0.017573978751897812, -0.0001239776611328125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK><UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK><UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -5.428567902536088, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -4.668010234832764, -0.025778133422136307, -5.245203283266164e-06, -9.393302752869204e-05, -0.000594130833633244, -0.00012123584747314453, -0.0024051666259765625, -0.0029144287109375, -0.0011692047119140625, -0.0003468989743851125, -0.000141143798828125, -0.00881659984588623, -0.000518798828125, -0.0026394054293632507, -5.53131103515625e-05, -0.3053121566772461, -1.71661376953125e-05, -0.37973570823669434, 0.0, -0.0021555423736572266, -1.1444091796875e-05, -0.0002187490463256836, 0.0, -6.866455078125e-05, -0.000118255615234375, -0.00443267822265625, -0.002499430440366268, -4.9591064453125e-05, -0.0012992620468139648, 0.0, -0.017558205872774124, -0.0001735687255859375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 3)\n", "score": -5.75007411018305, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.7319053411483765, 0.0, -0.0021554231643676758, -1.1444091796875e-05, -0.00025665760040283203, 0.0, -7.43865966796875e-05, -0.0001201629638671875, -0.004314422607421875, -0.0025352223310619593, -4.57763671875e-05, -0.0013278722763061523, 0.0, -4.677161693572998, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "FREE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 3)\n", "score": -5.890349958484869, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.9680732488632202, 0.0, -0.0027141571044921875, -1.9073486328125e-06, -0.00025737282703630626, 0.0, -4.9591064453125e-05, -0.000110626220703125, -0.0016460418701171875, -0.000674139242619276, -4.57763671875e-05, -0.0011324882507324219, -1.1920928244535389e-07, -4.585478782653809, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 5)\n", "score": -6.105202875289251, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.7319053411483765, 0.0, -0.0021554231643676758, -1.1444091796875e-05, -0.00025665760040283203, 0.0, -7.43865966796875e-05, -0.0001201629638671875, -0.004314422607421875, -0.0025352223310619593, -4.57763671875e-05, -0.0013278722763061523, 0.0, -5.032275199890137, -1.9073486328125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "<UNK> Blade", "hole1": 5, "hole3": "PALADIN", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "PALADIN", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.PALADIN)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score": -6.116371191266801, "score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -1.6232366561889648, -1.9073486328125e-06, -4.434804916381836, -1.9073486328125e-06, -0.0021936893463134766, -9.5367431640625e-06, -0.0003243684477638453, 0.0, -4.00543212890625e-05, -6.29425048828125e-05, -0.0021762847900390625, -0.0007734878454357386, -5.7220458984375e-05, -0.0007946491241455078, -1.1920928244535389e-07, -0.01747836172580719, -0.000110626220703125]}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 6, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, taunt=True)\n", "score": -2.6557046780260336, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -2.5588295459747314, 0.0, -0.0008373260498046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),\n            value=0))])\n", "score": -3.5261656448026173, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -0.4609699249267578, -0.000274658203125, -0.0012318708468228579, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -0.10791397094726562, -0.00035858154296875, -7.62939453125e-06, -0.00018990039825439453, -0.0013604164123535156, -1.9073486328125e-06, -7.62939453125e-06, -0.009136199951171875, -0.002384185791015625, -0.002595186233520508, -1.1920928244535389e-07, -0.0018129348754882812, -0.0023403167724609375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002812056918628514, -0.0006780890980735421, -7.62939453125e-06, -2.09808349609375e-05, -0.730320930480957, -0.0012416839599609375, -7.2479248046875e-05, -1.9073486328125e-05, -0.01452183723449707, 0.0, -0.5382614135742188, -2.288818359375e-05, -2.86102294921875e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))),\n            value=0))])\n", "score": -3.5845808192868702, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -0.4609699249267578, -0.000274658203125, -0.0012318708468228579, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -0.10791397094726562, -0.00035858154296875, -7.62939453125e-06, -0.00018990039825439453, -0.0013604164123535156, -1.9073486328125e-06, -7.62939453125e-06, -0.009136199951171875, -0.002384185791015625, -0.002595186233520508, -1.1920928244535389e-07, -0.0018129348754882812, -0.0023403167724609375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002812056918628514, -0.0006780890980735421, -7.62939453125e-06, -2.09808349609375e-05, -0.6787319183349609, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-05, -0.00011444091796875, -0.642486572265625, -7.62939453125e-06, -0.000232696533203125, -2.288818359375e-05, -2.09808349609375e-05, -0.015110969543457031, 0.0, -0.0059375762939453125, -2.6702880859375e-05, -0.0001201629638671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 6, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "score": -3.666341961351229, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -3.569068193435669, 0.0, -0.0012359619140625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "3", "<EOS>", 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(3), IsType(MINION_TYPE\n            .DRAGON), BothPlayer())])\n", "score": -3.731895020687027, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.379417061805725, -0.003877997398376465, -0.19980430603027344, -0.166748046875, -0.4491310119628906, -3.814697265625e-06, -0.4236905574798584, -0.0004726550541818142, -2.0265579223632812e-06, -1.52587890625e-05, -0.03034210205078125, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.52587890625e-05, -0.16383576393127441, -7.62939453125e-06, -0.1136627197265625, -5.7220458984375e-06, -0.018636703491210938, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -0.3310089111328125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))),\n            value=0))])\n", "score": -3.75209848133521, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -0.4609699249267578, -0.000274658203125, -0.0012318708468228579, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -0.10791397094726562, -0.00035858154296875, -7.62939453125e-06, -0.00018990039825439453, -0.0013604164123535156, -1.9073486328125e-06, -7.62939453125e-06, -0.009136199951171875, -0.002384185791015625, -0.002595186233520508, -1.1920928244535389e-07, -0.0018129348754882812, -0.0023403167724609375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002812056918628514, -0.0006780890980735421, -7.62939453125e-06, -2.09808349609375e-05, -0.6787319183349609, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-05, -0.00011444091796875, -0.822535514831543, -1.33514404296875e-05, -1.9073486328125e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.003467559814453125, 0.0, -0.005312919616699219, -1.52587890625e-05, -9.72747802734375e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.DRAGON)), BothPlayer())])\n", "score": -4.0554540762566305, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -1.5977630615234375, -0.0003719329833984375, -0.015644550323486328, -1.263618378288811e-05, -8.225440979003906e-06, -0.0002689361572265625, -1.1444091796875e-05, -0.011453390121459961, -0.0006521940231323242, -3.814697265625e-06, -3.62396240234375e-05, -0.0009326934814453125, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -2.288818359375e-05, -9.5367431640625e-06, -0.18720340728759766, -1.71661376953125e-05, -0.02599620819091797, -3.814697265625e-06, -0.15488934516906738, 0.0, -2.86102294921875e-05, -5.7220458984375e-05, -0.41046142578125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 5, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "5", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -4.1670053759446475, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -2.2880029678344727, -0.000293731689453125, -0.0002346038818359375, -0.7426348924636841, -0.00799870491027832, -0.21713733673095703, -6.866455078125e-05, -0.023047104477882385, -4.768367489305092e-06, 0.0, -4.1961669921875e-05, -0.5482330322265625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),\n            value=BothPlayer()))])\n", "score": -4.188751141705083, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -0.4609699249267578, -0.000274658203125, -0.0012318708468228579, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -0.10791397094726562, -0.00035858154296875, -7.62939453125e-06, -0.00018990039825439453, -0.0013604164123535156, -1.9073486328125e-06, -7.62939453125e-06, -0.009136199951171875, -0.002384185791015625, -0.002595186233520508, -1.1920928244535389e-07, -0.0018129348754882812, -0.0023403167724609375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002812056918628514, -0.0006780890980735421, -7.62939453125e-06, -2.09808349609375e-05, -0.730320930480957, -0.0012416839599609375, -7.2479248046875e-05, -1.9073486328125e-05, -0.01452183723449707, 0.0, -0.9082698822021484, -1.52587890625e-05, -0.12429726123809814, -4.780292510986328e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.16822052001953125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 5, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "5", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(5), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),\n            value=0))])\n", "score": -4.427673561865717, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -2.2746312618255615, -0.00010609626770019531, -0.09373950958251953, -1.71661376953125e-05, -0.004745629150420427, -7.033347174001392e-06, -2.0265579223632812e-06, -2.6702880859375e-05, -0.2891244888305664, -0.0005207061767578125, -7.62939453125e-06, -0.00018024444580078125, -0.0015349388122558594, -1.9073486328125e-06, -7.62939453125e-06, -0.007975578308105469, -0.0025043487548828125, -0.002422332763671875, -1.1920928244535389e-07, -0.0018453598022460938, -0.002376556396484375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002788218262139708, -0.0006833320949226618, -7.62939453125e-06, -2.09808349609375e-05, -0.7284069061279297, -0.00135040283203125, -7.43865966796875e-05, -2.09808349609375e-05, -0.013872385025024414, 0.0, -0.5495395660400391, -2.288818359375e-05, -2.86102294921875e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 7, "_type": "Template32"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score": -4.4670307053574945, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -4.379596710205078, -5.7220458984375e-06, -1.990794771700166e-05, -2.0265579223632812e-06, -0.005746126174926758, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 5, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "5", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(5), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))),\n            value=0))])\n", "score": -4.4792022541112, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -2.2746312618255615, -0.00010609626770019531, -0.09373950958251953, -1.71661376953125e-05, -0.004745629150420427, -7.033347174001392e-06, -2.0265579223632812e-06, -2.6702880859375e-05, -0.2891244888305664, -0.0005207061767578125, -7.62939453125e-06, -0.00018024444580078125, -0.0015349388122558594, -1.9073486328125e-06, -7.62939453125e-06, -0.007975578308105469, -0.0025043487548828125, -0.002422332763671875, -1.1920928244535389e-07, -0.0018453598022460938, -0.002376556396484375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002788218262139708, -0.0006833320949226618, -7.62939453125e-06, -2.09808349609375e-05, -0.6800918579101562, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-05, -0.000133514404296875, -0.6435985565185547, -7.62939453125e-06, -0.0002117156982421875, -2.288818359375e-05, -2.288818359375e-05, -0.014697074890136719, 0.0, -0.005822181701660156, -2.6702880859375e-05, -0.000118255615234375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "4", "hole0": 6, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "4", "<EOS>", 62], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, 4=True)\n", "score": -4.554799974885775, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -4.075533866882324, 0.0, -0.3832283020019531]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_damage", "hole0": 6, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "spell_damage", "<EOS>", 62], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, spell_damage=True)\n", "score": -5.963953436342074, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -5.133708477020264, 0.0, -0.7342071533203125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boulderfist Ogre", "hole1": 6, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 6, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 6, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "MinionSelector", "_type": "Template46"}, {"_type": "Template59"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "6", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "Minion", "Selector", "<EOS>", 102, 320, 105], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(6), SelfSelector(),\n            And(MinionSelector(), 2))])\n", "score": -6.178046141688064, "score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -2.544313430786133, -9.977812442230061e-05, -0.15073013305664062, -1.1444091796875e-05, -0.004870034754276276, -5.841253368998878e-06, -2.0265579223632812e-06, -3.814697265625e-05, -1.0202445983886719, -0.5421810150146484, -3.814697265625e-06, -0.029095888137817383, -2.9206275939941406e-05, -0.0006866455078125, -0.06395530700683594, -5.7220458984375e-06, -0.020396824926137924, -0.013375043869018555, -3.576278118089249e-07, -1.335392951965332, -0.00144195556640625, -8.96453857421875e-05]}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -2.3016450895365708, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.0441436767578125, 0.0, -0.001385331153869629, -9.5367431640625e-06, -0.000240325927734375, 0.0, -2.2172915123519488e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -4.9591064453125e-05, -2.5629868105170317e-05, 0.0, -0.6291790008544922, -4.38690185546875e-05, -0.0044002532958984375, -2.09808349609375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003358125686645508, -1.1920928244535389e-07, -0.0020236968994140625, 0.0, -0.007259368896484375, -0.032359957695007324, 0.0, -2.09808349609375e-05, -0.07688331604003906, -7.62939453125e-06, -0.000247955322265625, -1.52587890625e-05, -0.0001392364501953125, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -0.02645421028137207, -1.9073486328125e-06, -0.2563466727733612, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -2.9276122942019356, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.6909561157226562, 0.0, -0.0017455816268920898, -3.814697265625e-06, -0.0006561279296875, 0.0, -2.0980833141948096e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.4332275390625e-05, -2.098078948620241e-05, 0.0, -0.5930671691894531, -4.9591064453125e-05, -0.0046844482421875, -1.9073486328125e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00036454200744628906, 0.0, -0.00194549560546875, 0.0, -0.0070362091064453125, -0.03137362003326416, 0.0, -1.9073486328125e-05, -0.08812522888183594, -7.62939453125e-06, -0.0002689361572265625, -1.33514404296875e-05, -0.00014495849609375, 0.0, -9.930133819580078e-05, -1.9073486328125e-06, -0.026130080223083496, -1.9073486328125e-06, -0.2608887255191803, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(1)\n        player.hero.change_temp_attack(2)\n", "score": -3.267175107625917, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.0441436767578125, 0.0, -0.001385331153869629, -9.5367431640625e-06, -0.000240325927734375, 0.0, -2.2172915123519488e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -4.9591064453125e-05, -2.5629868105170317e-05, 0.0, -0.7724933624267578, -0.04433155059814453, -0.33339691162109375, -0.0001373291015625, -8.0108642578125e-05, -1.9073486328125e-06, -0.0010318756103515625, -1.9073486328125e-06, -0.0020599365234375, -0.010872243903577328, -4.1961669921875e-05, -0.009549140930175781, -5.7220458984375e-06, -0.049470942467451096, 0.0, -0.2852439880371094, -2.09808349609375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.08217716217041016, -1.9073486328125e-06, -0.0001354217529296875, -0.0008794066961854696, -9.5367431640625e-06, -0.016402244567871094, -1.9073486328125e-06, -0.3930239975452423, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.2998406780725418, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.8533859252929688, 0.0, -0.08907949924468994, 0.0, -0.0010796785354614258, 0.0, -2.312660035386216e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.111343175987713e-05, 0.0, -0.7284421920776367, -5.53131103515625e-05, -0.0038013458251953125, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -0.00043487548828125, 0.0, -0.001941680908203125, 0.0, -0.00691986083984375, -0.03223776817321777, 0.0, -1.9073486328125e-05, -0.0916748046875, -9.5367431640625e-06, -0.0002346038818359375, -1.52587890625e-05, -0.0001068115234375, 0.0, -0.00013267993927001953, -1.9073486328125e-06, -0.02526688575744629, -1.9073486328125e-06, -0.24495258927345276, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 2, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "score": -3.5798576666411392, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.0441436767578125, 0.0, -0.001385331153869629, -9.5367431640625e-06, -0.000240325927734375, 0.0, -2.2172915123519488e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -4.9591064453125e-05, -2.5629868105170317e-05, 0.0, -0.6291790008544922, -4.38690185546875e-05, -0.0044002532958984375, -2.09808349609375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003358125686645508, -1.1920928244535389e-07, -0.0020236968994140625, 0.0, -0.007259368896484375, -0.032359957695007324, 0.0, -2.09808349609375e-05, -0.07688331604003906, -7.62939453125e-06, -0.000247955322265625, -1.52587890625e-05, -0.0001392364501953125, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -0.02645421028137207, -1.9073486328125e-06, -1.5345630645751953, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "FREE", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "FREE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.FREE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.761312206032926, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -2.4953975677490234, -1.9073486328125e-06, -0.012581467628479004, -7.62939453125e-06, -0.0004062652587890625, 0.0, -2.2888181774760596e-05, 0.0, -3.4332275390625e-05, -7.62939453125e-06, -2.6702880859375e-05, -2.109999695676379e-05, 0.0, -0.6689739227294922, -4.38690185546875e-05, -0.0036334991455078125, -2.288818359375e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.00037157535552978516, 0.0, -0.001861572265625, 0.0, -0.0071964263916015625, -0.029433727264404297, 0.0, -2.09808349609375e-05, -0.07471466064453125, -9.5367431640625e-06, -0.0002269744873046875, -1.52587890625e-05, -0.000102996826171875, 0.0, -0.00014317035675048828, -1.9073486328125e-06, -0.02691471576690674, -1.9073486328125e-06, -0.21923160552978516, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Deadly Poison", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Deadly", " ", "Poison", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n", "score": -3.7860580029687227, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -1.6820316314697266, -4.1961669921875e-05, -2.47955322265625e-05, -2.47955322265625e-05, -9.5367431640625e-06, -0.001293182373046875, -9.5367431640625e-06, -1.9073486328125e-05, -4.327203714638017e-05, -0.00010740708967205137, -6.139112520031631e-05, -3.814697265625e-06, -0.016092300415039062, -0.0030689239501953125, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0003838539123535156, -3.814697265625e-06, -0.3770334720611572, -1.9073486328125e-06, -0.0005588531494140625, -4.76837158203125e-05, -0.010286331176757812, -0.0008182525634765625, -0.005916595458984375, 0.0, -3.4332275390625e-05, 0.0, -0.000125885009765625, -0.23881924152374268, -3.814697265625e-06, -6.890296936035156e-05, 0.0, -1.0848044439626392e-05, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.7670135498046875e-05, -1.1920928244535389e-07, -0.04807090759277344, -7.62939453125e-06, -1.2355461120605469, -0.000568389892578125, -0.024662017822265625, -0.01179505418986082, -4.76837158203125e-05, -0.00182342529296875, -0.0720968246459961, -2.288818359375e-05, -0.0008792877197265625, -0.014540672302246094, -5.7220458984375e-06, -0.03269573673605919, 0.0, -0.0005817413330078125]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.790945489551632, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -2.4902305603027344, 0.0, -0.0015952587127685547, -5.7220458984375e-06, -0.0005054473876953125, 0.0, -2.15768777707126e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.62396240234375e-05, -2.825245974236168e-05, 0.0, -0.6432590484619141, -5.53131103515625e-05, -0.0044536590576171875, -2.47955322265625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00040161609649658203, 0.0, -0.0020542144775390625, 0.0, -0.006824493408203125, -0.03197157382965088, 0.0, -1.9073486328125e-05, -0.08484077453613281, -7.62939453125e-06, -0.0002193450927734375, -1.52587890625e-05, -0.00012969970703125, 0.0, -9.930133819580078e-05, -1.9073486328125e-06, -0.025679945945739746, -1.9073486328125e-06, -0.2785297632217407, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(1)\n        player.hero.change_temp_attack(2)\n", "score": -3.8781778174952706, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.6909561157226562, 0.0, -0.0017455816268920898, -3.814697265625e-06, -0.0006561279296875, 0.0, -2.0980833141948096e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.4332275390625e-05, -2.098078948620241e-05, 0.0, -0.8155012130737305, -0.02848052978515625, -0.29080867767333984, -0.0001544952392578125, -8.0108642578125e-05, -1.9073486328125e-06, -0.0010395050048828125, -1.9073486328125e-06, -0.0036029815673828125, -0.006634592078626156, -4.00543212890625e-05, -0.009309530258178711, -5.7220458984375e-06, -0.05064184218645096, 0.0, -0.2710533142089844, -2.09808349609375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.07824516296386719, -1.9073486328125e-06, -0.0001373291015625, -0.0008696315926499665, -9.5367431640625e-06, -0.016521453857421875, -1.9073486328125e-06, -0.3916443884372711, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 3, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "score": -3.921986092572297, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -2.656094551086426, -1.9073486328125e-06, -0.0023233890533447266, -1.9073486328125e-06, -0.0013027191162109375, 0.0, -2.1100042431498878e-05, 0.0, -3.814697265625e-05, -7.62939453125e-06, -4.57763671875e-05, -2.098078948620241e-05, 0.0, -0.6163187026977539, -4.76837158203125e-05, -0.0044231414794921875, -1.9073486328125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.00033152103424072266, 0.0, -0.001995086669921875, 0.0, -0.00713348388671875, -0.03215515613555908, 0.0, -2.09808349609375e-05, -0.08164787292480469, -7.62939453125e-06, -0.00025177001953125, -1.33514404296875e-05, -0.0001468658447265625, 0.0, -9.167194366455078e-05, -1.9073486328125e-06, -0.026031851768493652, -1.9073486328125e-06, -0.2716048061847687, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(1)\n        player.hero.change_temp_attack(2)\n", "score": -3.9661095015662795, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.8533859252929688, 0.0, -0.08907949924468994, 0.0, -0.0010796785354614258, 0.0, -2.312660035386216e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.111343175987713e-05, 0.0, -0.6696929931640625, -0.028491973876953125, -0.28325843811035156, -0.0001544952392578125, -8.0108642578125e-05, -1.9073486328125e-06, -0.0009555816650390625, -1.9073486328125e-06, -0.0028400421142578125, -0.004217265173792839, -3.4332275390625e-05, -0.009411215782165527, -5.7220458984375e-06, -0.04807278513908386, 0.0, -0.27338218688964844, -2.09808349609375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.07266521453857422, -1.9073486328125e-06, -0.0001392364501953125, -0.0008716581505723298, -9.5367431640625e-06, -0.016806483268737793, -1.9073486328125e-06, -0.3914267420768738, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"value": {"hole2": 2, "hole0": {"id": "minion", "_type": "Name"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "score": -4.184789617304887, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.6909561157226562, 0.0, -0.0017455816268920898, -3.814697265625e-06, -0.0006561279296875, 0.0, -2.0980833141948096e-05, 0.0, -3.62396240234375e-05, -1.1444091796875e-05, -3.4332275390625e-05, -2.098078948620241e-05, 0.0, -0.5930671691894531, -4.9591064453125e-05, -0.0046844482421875, -1.9073486328125e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00036454200744628906, 0.0, -0.00194549560546875, 0.0, -0.0070362091064453125, -0.03137362003326416, 0.0, -1.9073486328125e-05, -0.08812522888183594, -7.62939453125e-06, -0.0002689361572265625, -1.33514404296875e-05, -0.00014495849609375, 0.0, -9.930133819580078e-05, -1.9073486328125e-06, -0.026130080223083496, -1.9073486328125e-06, -1.518069863319397, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Deadly Poison", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(1)\n        player.hero.change_temp_attack(1)\n", "score": -4.256515502361253, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.0441436767578125, 0.0, -0.001385331153869629, -9.5367431640625e-06, -0.000240325927734375, 0.0, -2.2172915123519488e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -4.9591064453125e-05, -2.5629868105170317e-05, 0.0, -0.7724933624267578, -0.04433155059814453, -0.33339691162109375, -0.0001373291015625, -8.0108642578125e-05, -1.9073486328125e-06, -0.0010318756103515625, -1.9073486328125e-06, -0.0020599365234375, -0.010872243903577328, -4.1961669921875e-05, -0.009549140930175781, -5.7220458984375e-06, -0.049470942467451096, 0.0, -0.2852439880371094, -2.09808349609375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.08217716217041016, -1.9073486328125e-06, -0.0001354217529296875, -0.0008794066961854696, -9.5367431640625e-06, -0.016402244567871094, -1.9073486328125e-06, -1.3823662996292114, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Deadly Poison", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "cards_played", "_type": "Attribute"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"value": {"hole2": 3, "hole0": {"_type": "Template52"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "orelse": [{"value": {"hole2": 2, "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template37"}, "_type": "Expr"}], "_type": "If"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Deadly", " ", "Poison", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_temp_attack", "<EOS>", "3", "<EOS>", 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.change_temp_attack(3)\n        else:\n            self.target.change_attack(2)\n", "score": -5.082812210430795, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -1.6820316314697266, -4.1961669921875e-05, -2.47955322265625e-05, -2.47955322265625e-05, -9.5367431640625e-06, -0.001293182373046875, -9.5367431640625e-06, -1.9073486328125e-05, -4.327203714638017e-05, -0.00010740708967205137, -6.139112520031631e-05, -3.814697265625e-06, -0.016092300415039062, -0.0030689239501953125, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0003838539123535156, -3.814697265625e-06, -0.3770334720611572, -1.9073486328125e-06, -0.0005588531494140625, -4.76837158203125e-05, -0.010286331176757812, -0.0008182525634765625, -0.005916595458984375, 0.0, -3.4332275390625e-05, 0.0, -0.000125885009765625, -0.23881924152374268, -3.814697265625e-06, -6.890296936035156e-05, 0.0, -1.0848044439626392e-05, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.7670135498046875e-05, -1.1920928244535389e-07, -0.04807090759277344, -7.62939453125e-06, -0.4782743453979492, -0.023357391357421875, -0.001674652099609375, -0.0014553070068359375, -0.0001125335693359375, 0.0, -0.07178115844726562, -0.0473724789917469, -3.063678741455078e-05, -0.0006103515625, -0.005921363830566406, -1.9073486328125e-06, -6.29425048828125e-05, -8.392333984375e-05, -0.003124237060546875, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.5161514282226562, -0.627625584602356, -3.814697265625e-06, -0.06931547820568085, -1.9073486328125e-06, -0.000354766845703125, -0.24345684051513672, -5.53131103515625e-05, -5.7220458984375e-05, -9.5367431640625e-06, -0.1538524627685547, -0.43586933612823486, -1.9073486328125e-06, -0.011362790130078793, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Deadly Poison", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "cards_played", "_type": "Attribute"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"value": {"hole2": 1, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "orelse": [{"value": {"hole2": 2, "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template37"}, "_type": "Expr"}], "_type": "If"}], "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Deadly", " ", "Poison", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "cards_played", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "1", "<EOS>", 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            player.hero.change_temp_attack(1)\n        else:\n            self.target.change_attack(2)\n", "score": -5.8337581431283, "score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -1.6820316314697266, -4.1961669921875e-05, -2.47955322265625e-05, -2.47955322265625e-05, -9.5367431640625e-06, -0.001293182373046875, -9.5367431640625e-06, -1.9073486328125e-05, -4.327203714638017e-05, -0.00010740708967205137, -6.139112520031631e-05, -3.814697265625e-06, -0.016092300415039062, -0.0030689239501953125, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0003838539123535156, -3.814697265625e-06, -0.3770334720611572, -1.9073486328125e-06, -0.0005588531494140625, -4.76837158203125e-05, -0.010286331176757812, -0.0008182525634765625, -0.005916595458984375, 0.0, -3.4332275390625e-05, 0.0, -0.000125885009765625, -0.23881924152374268, -3.814697265625e-06, -6.890296936035156e-05, 0.0, -1.0848044439626392e-05, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.7670135498046875e-05, -1.1920928244535389e-07, -0.04807090759277344, -7.62939453125e-06, -0.4782743453979492, -0.023357391357421875, -0.001674652099609375, -0.0014553070068359375, -0.0001125335693359375, 0.0, -0.07178115844726562, -0.0473724789917469, -3.063678741455078e-05, -0.0006103515625, -0.005921363830566406, -1.9073486328125e-06, -6.29425048828125e-05, -8.392333984375e-05, -0.003124237060546875, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.9254426956176758, -1.9073486328125e-06, -0.005511283874511719, -0.0047424850054085255, 0.0, -0.04323172569274902, 0.0, -0.7843257188796997, 0.0, -0.0009441375732421875, -0.040015220642089844, -5.340576171875e-05, -2.288818359375e-05, -1.9073486328125e-05, -0.15898704528808594, -0.8327538967132568, -1.9073486328125e-06, -0.01301092840731144, 0.0]}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -1.3862014875080462, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.6694965362548828, -0.040016353130340576, -4.887569048150908e-06, 0.0, -0.07608318328857422, -5.7220458984375e-06, 0.0, -0.000667572021484375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.00014972686767578125, -6.937980651855469e-05, -7.62939453125e-06, -2.288818359375e-05, -0.00012969970703125, -0.0019683837890625, -3.0517578125e-05, -0.0020809173583984375, -1.9073486328125e-06, -0.0012929439544677734, -0.0006160736083984375, -1.1444091796875e-05, -0.03175961971282959, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.123283386230469e-05, -8.2254373410251e-06, -0.012914536520838737, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template60"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -1.4487635350146633, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.7686977386474609, -0.002750634215772152, -6.198873961693607e-06, 0.0, -0.08055591583251953, -5.7220458984375e-06, 0.0, -0.0004901885986328125, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0001518726348876953, -4.458427429199219e-05, -7.62939453125e-06, -2.47955322265625e-05, -0.000133514404296875, -0.0019741058349609375, -2.47955322265625e-05, -0.0023975372314453125, -1.9073486328125e-06, -0.0012854337692260742, -0.0006561279296875, -1.1444091796875e-05, -0.02786099910736084, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -4.38690185546875e-05, -3.123283386230469e-05, -8.2254373410251e-06, -0.012808917090296745, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 6, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template60"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -3.5793879979953473, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -3.3763999938964844, -0.09315776824951172, -1.1920922133867862e-06, -9.333934576716274e-05, -7.283686863956973e-05, -0.000152587890625, -0.007919060997664928, 0.0, -0.00115203857421875, 0.0, -0.002791762351989746, -0.00013554096221923828, -5.7220458984375e-06, -0.043033599853515625, -0.00022375582193490118, -8.34464663057588e-06, 0.0, -0.0007534027099609375, 0.0, -7.62939453125e-06, -0.0002651214599609375, -1.9073486328125e-06, -0.000141143798828125, -7.62939453125e-06, -0.00012290476297494024, -0.00018012523651123047, -5.7220458984375e-06, -2.288818359375e-05, -0.0001506805419921875, -0.0008411407470703125, -1.9073486328125e-05, -0.008880615234375, -3.814697265625e-06, -0.0018829107284545898, -0.000728607177734375, -5.7220458984375e-06, -0.018352985382080078, -1.9073486328125e-06, -2.300739288330078e-05, 0.0, -4.76837158203125e-05, -3.62396240234375e-05, -4.76837158203125e-05, -2.3603439331054688e-05, -5.7220440794480965e-06, -0.019490595906972885, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"_type": "Template61"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -3.8531396485018234, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -2.269947052001953, -0.29599079489707947, -0.0011904326966032386, 0.0, -0.9388017654418945, -0.00020599232811946422, -2.1695992472814396e-05, 0.0, -7.87973403930664e-05, -3.0517578125e-05, -5.0067777920048684e-05, 0.0, -0.0001316070556640625, -0.00014495849609375, -1.52587890625e-05, -4.0411949157714844e-05, -1.537795105832629e-05, -0.02617621421813965, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.012687193809583, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.6694965362548828, -0.040016353130340576, -4.887569048150908e-06, 0.0, -2.7280139923095703, -5.91278076171875e-05, -5.7220458984375e-06, -0.014347314834594727, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.00015175342559814453, -0.0001347064971923828, -5.7220458984375e-06, -0.000125885009765625, 0.0, -1.728534698486328e-05, 0.0, -4.1961669921875e-05, -2.288818359375e-05, -5.7220458984375e-05, -3.2901763916015625e-05, -1.0132780516869389e-05, -0.01143097784370184, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template60"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.017883585415333, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.7686977386474609, -0.002750634215772152, -6.198873961693607e-06, 0.0, -2.671504020690918, -8.20159912109375e-05, -5.7220458984375e-06, -0.013729333877563477, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.00015401840209960938, -6.99758529663086e-05, -5.7220458984375e-06, -0.00012981891632080078, 0.0, -1.919269561767578e-05, 0.0, -4.1961669921875e-05, -2.288818359375e-05, -5.7220458984375e-05, -3.2901763916015625e-05, -1.0371197276981547e-05, -0.011850117705762386, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"elts": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}, {"hole2": 2, "hole0": "Give", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 321, 71, 181, 322, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 80, 231, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeHealth(2))], SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.018221979853912, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -2.0007009506225586, -0.0001888275146484375, -0.00063323974609375, -0.009311676025390625, -0.0064220428466796875, -0.0002880096435546875, -0.07076835632324219, -0.0018863677978515625, -1.1444091796875e-05, -0.0037312470376491547, -4.458427429199219e-05, -0.08210209012031555, 0.0, -0.5521879196166992, -0.0009784698486328125, -0.07962989807128906, -2.288818359375e-05, -0.0007288455963134766, -0.3052244186401367, -5.7220458984375e-06, -0.04089445620775223, -9.1552734375e-05, -0.0002002716064453125, -0.1358928680419922, -6.4849853515625e-05, -0.5358951091766357, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0011887549189850688, -1.9073486328125e-06, -4.792177060153335e-05, 0.0, -0.0001506805419921875, -0.0003757476806640625, -4.76837158203125e-05, -4.017353057861328e-05, -2.70602813543519e-05, -0.01373434066772461, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template60"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "ROGUE", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.187158723014804, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -2.210012435913086, -1.9073486328125e-06, -0.0043792724609375, -1.9073486328125e-06, -0.06906700134277344, -1.0765571594238281, -0.007218210492283106, -0.09015943855047226, -9.5367431640625e-06, -0.5937290191650391, -0.002736566122621298, -6.914126061019488e-06, 0.0, -0.04837608337402344, -7.62939453125e-06, 0.0, -0.0005016326904296875, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.00014030933380126953, -4.2557716369628906e-05, -7.62939453125e-06, -2.47955322265625e-05, -0.0001583099365234375, -0.0020389556884765625, -2.09808349609375e-05, -0.002498626708984375, -1.9073486328125e-06, -0.0012930631637573242, -0.000713348388671875, -1.1444091796875e-05, -0.025207877159118652, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -4.76837158203125e-05, -3.123283386230469e-05, -8.463855920126662e-06, -0.01251816563308239, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"_type": "Template60"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 103, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.319203037735392, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -2.269947052001953, -0.29599079489707947, -0.0011904326966032386, 0.0, -1.328587532043457, -0.07700420171022415, -5.125998541188892e-06, 0.0, -5.3763389587402344e-05, -2.09808349609375e-05, -3.147123061353341e-05, 0.0, -0.0001735687255859375, -0.000118255615234375, -1.71661376953125e-05, -4.0411949157714844e-05, -1.3351411325857043e-05, -0.025710225105285645, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 6, "hole3": "battlecry", "hole4": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"_type": "Template60"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "ROGUE", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 103, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.376635234170394, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -2.210012435913086, -1.9073486328125e-06, -0.0043792724609375, -1.9073486328125e-06, -0.06906700134277344, -0.4261608123779297, -0.35735589265823364, -0.00120329181663692, -1.9073486328125e-06, -1.1778850555419922, -0.06411416828632355, -5.006789251638111e-06, 0.0, -5.9485435485839844e-05, -2.288818359375e-05, -3.528591332724318e-05, 0.0, -0.000133514404296875, -0.000125885009765625, -1.52587890625e-05, -4.0411949157714844e-05, -1.3709036466025282e-05, -0.02646315097808838, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 6, "hole3": "battlecry", "hole4": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"_type": "Template61"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "ROGUE", "<EOS>", "battlecry", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.39774283167251, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -2.210012435913086, -1.9073486328125e-06, -0.0043792724609375, -1.9073486328125e-06, -0.06906700134277344, -0.4261608123779297, -0.35735589265823364, -0.00120329181663692, -1.9073486328125e-06, -1.2627077102661133, -0.000199197354959324, -1.9788669305853546e-05, -1.1920928244535389e-07, -0.0001035928726196289, -2.86102294921875e-05, -6.091572868172079e-05, 0.0, -9.34600830078125e-05, -0.000152587890625, -1.52587890625e-05, -4.0411949157714844e-05, -1.549716034787707e-05, -0.026584267616271973, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "PlayerSelector", "hole0": "DamageMinionSelector", "hole1": [{"hole0": "RandomPicker", "_type": "Template46"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "Minion", "Selector", "<EOS>", 320, 93, 255, "Random", "Picker", "<EOS>", "Player", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DamageMinionSelector(\n            RandomPicker()), PlayerSelector(players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.417238248178805, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -3.354165554046631, -0.0011525154113769531, -3.254413604736328e-05, -0.0005035400390625, -0.019603729248046875, -1.9073486328125e-06, -0.3209220767021179, -0.012308478355407715, -3.814697265625e-06, -0.04201221093535423, -5.7220458984375e-06, -1.9073486328125e-06, -0.12405204772949219, -1.9073486328125e-06, -2.47955322265625e-05, -0.04160881042480469, -1.9073486328125e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0002752542495727539, -5.447864532470703e-05, -9.5367431640625e-06, -2.09808349609375e-05, -0.0001373291015625, -0.001495361328125, -8.392333984375e-05, -0.001491546630859375, -1.9073486328125e-06, -0.001214146614074707, -0.0005702972412109375, -9.5367431640625e-06, -0.04141092300415039, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.47955322265625e-05, -4.00543212890625e-05, -3.314018249511719e-05, -7.987019671418238e-06, -0.012998221442103386, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "DamageElemental", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "Elemental", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DamageElemental(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -4.435607137752399, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -3.6296029090881348, -0.043671607971191406, -1.9073486328125e-06, -0.049887657165527344, -0.14838384091854095, -2.50339189733495e-06, 0.0, -0.0761556625366211, -3.814697265625e-06, 0.0, -0.0017719268798828125, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0002524852752685547, -6.949901580810547e-05, -7.62939453125e-06, -2.09808349609375e-05, -0.000148773193359375, -0.002498626708984375, -2.86102294921875e-05, -0.0020389556884765625, -1.9073486328125e-06, -0.001323103904724121, -0.0007534027099609375, -9.5367431640625e-06, -0.025829672813415527, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.288818359375e-05, -4.38690185546875e-05, -3.314018249511719e-05, -8.463855920126662e-06, -0.012105106376111507, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_weapon(self, player):\n        return Minion(6, 5)\n", "score": -4.881971346781469, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.6694965362548828, -0.040016353130340576, -4.887569048150908e-06, 0.0, -0.07608318328857422, -5.7220458984375e-06, 0.0, -0.000667572021484375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.00014972686767578125, -6.937980651855469e-05, -7.62939453125e-06, -2.288818359375e-05, -0.00012969970703125, -0.0019683837890625, -3.0517578125e-05, -0.0020809173583984375, -1.9073486328125e-06, -0.0012929439544677734, -0.0006160736083984375, -1.1444091796875e-05, -3.526838541030884, -1.33514404296875e-05, -7.05718994140625e-05, 0.0, -0.000179290771484375, -0.001804351806640625, -0.0001220703125, -1.537799835205078e-05, -1.4185883628670126e-05, -0.011542200110852718, -1.1444091796875e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"elts": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}, {"hole2": 2, "hole0": "Give", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template11", "hole0": "Fire Elemental"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 6, "hole1": 5, "_type": "Template32"}], "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 321, 71, 181, 322, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 80, 231, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeHealth(2))], PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score": -5.032515293196852, "score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -2.0007009506225586, -0.0001888275146484375, -0.00063323974609375, -0.009311676025390625, -0.0064220428466796875, -0.0002880096435546875, -0.07076835632324219, -0.0018863677978515625, -1.1444091796875e-05, -0.0037312470376491547, -4.458427429199219e-05, -0.08210209012031555, 0.0, -0.5521879196166992, -0.0009784698486328125, -0.07962989807128906, -2.288818359375e-05, -0.0007288455963134766, -0.3052244186401367, -5.7220458984375e-06, -0.04089445620775223, -9.1552734375e-05, -0.0002002716064453125, -0.1358928680419922, -6.4849853515625e-05, -1.5494287014007568, -2.1457672119140625e-06, 0.0, -0.0007786750793457031, -1.9073486328125e-06, -2.539156957936939e-05, 0.0, -8.7738037109375e-05, -0.000110626220703125, -4.57763671875e-05, -4.208087921142578e-05, -3.5285567719256505e-05, -0.015244722366333008, -9.5367431640625e-06]}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -1.6234312534121216, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.0893921852111816, -0.0002360078797210008, -4.6491426473949105e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.008731367066502571, -2.3841855067985307e-07, -0.0016211270121857524, -5.7220458984375e-06, -0.0953272134065628, -0.0008844400872476399, -0.3316808044910431, -1.9073486328125e-06, -5.960462772236497e-07, -0.028055191040039062, -0.0003032684326171875, 0.0, -0.038886189460754395, -1.33514404296875e-05, -0.0007801055908203125, -1.71661376953125e-05, -0.016329169273376465, -0.0002256631851196289, -3.814697265625e-06, -0.0037938356399536133, 0.0, -2.6106834411621094e-05, 0.0, -0.000194549560546875, -0.0015926361083984375, -0.0002117156982421875, -5.960462772236497e-07, -6.603976362384856e-05, -2.145765392924659e-06, -4.52994936495088e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "Draw", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Draw", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), Draw(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -3.2834481184119966, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.0893921852111816, -0.0002360078797210008, -4.6491426473949105e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.008731367066502571, -2.3841855067985307e-07, -0.0016211270121857524, -5.7220458984375e-06, -0.0953272134065628, -0.0008844400872476399, -1.5735903978347778, -2.0265579223632812e-06, -0.33096885681152344, -0.0003528594970703125, 0.0, -0.16170501708984375, -9.5367431640625e-06, -0.0043201446533203125, -1.33514404296875e-05, -0.006112098693847656, -0.0013774633407592773, -3.814697265625e-06, -0.0020257234573364258, 0.0, -2.7894973754882812e-05, 0.0, -0.0001659393310546875, -0.0012645721435546875, -0.0002002716064453125, -7.152555099310121e-07, -5.864924969500862e-05, -2.145765392924659e-06, -4.768367489305092e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Draw", "hole5": "WeaponSelector", "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", "Weapon", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), WeaponSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.218408211416481, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -3.324077606201172, -1.5258699932019226e-05, -1.6450876501039602e-05, -2.0265579223632812e-06, 0.0, -0.023113461211323738, -3.576278118089249e-07, -0.036608219146728516, -1.9073486328125e-06, -0.3753940761089325, -2.3841830625315197e-06, -0.37846681475639343, -8.237361907958984e-05, -1.1920928244535389e-07, -9.72747802734375e-05, -0.022869110107421875, -1.33514404296875e-05, -0.04855363816022873, -0.00030728429555892944, -2.288818359375e-05, -3.814697265625e-06, -3.814697265625e-06, -7.450580596923828e-05, 0.0, -0.00075531005859375, -0.0025634765625, -0.000278472900390625, -7.152555099310121e-07, -0.00011276583973085508, -2.145765392924659e-06, -5.841247457283316e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "Draw", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Draw", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), Draw(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.228953261530563, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.0893921852111816, -0.0002360078797210008, -4.6491426473949105e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.008731367066502571, -2.3841855067985307e-07, -0.0016211270121857524, -5.7220458984375e-06, -0.0953272134065628, -0.0008844400872476399, -1.5735903978347778, -2.0265579223632812e-06, -1.418604850769043, -6.866455078125e-05, 0.0, -0.012848854064941406, 0.0, -0.0022869110107421875, -5.7220458984375e-06, -0.0008679628372192383, -1.03711727206246e-05, -1.52587890625e-05, -9.5367431640625e-06, -0.00042724609375, -0.01134037971496582, -4.9591064453125e-05, -0.001026153564453125, -7.62939453125e-06, -0.002421140670776367, -0.00016486644744873047, -2.09808349609375e-05, -0.0026322603225708008, -1.9073486328125e-06, -4.649162292480469e-05, 0.0, -0.0001468658447265625, -0.0009479522705078125, -0.0001201629638671875, -8.344646857949556e-07, -3.9457496313843876e-05, -2.145765392924659e-06, -4.768367489305092e-06]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.229395922120645, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -2.4177660942077637, -1.394745322613744e-05, -4.0173526940634474e-05, -2.2649765014648438e-06, 0.0, -0.019823921844363213, -1.1920928244535389e-07, -0.0006483793258666992, -6.29425048828125e-05, -0.12995944917201996, -0.00010418867168482393, -0.0001735687255859375, -0.05005931854248047, -7.05718994140625e-05, -0.001163482666015625, -0.009283065795898438, -0.0008182525634765625, -0.0008426904678344727, -4.1961669921875e-05, -0.00017869332805275917, -0.12994515895843506, 0.0, -0.005292530637234449, 0.0, -0.7169475555419922, -0.0007610321044921875, -0.002488374710083008, 0.0, -0.0018426179885864258, -0.00989079475402832, 0.0, -0.029235834255814552, 0.0, -0.006824493408203125, -0.0014723539352416992, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -0.000762939453125, -0.010234832763671875, -1.9073486328125e-06, -1.9073486328125e-06, -0.05756700038909912, -0.005640983581542969, -3.576278118089249e-07, -0.000461578369140625, -0.05053901672363281, -0.054617881774902344, -0.01647937297821045, -2.47955322265625e-05, -0.002338409423828125, -1.9073486328125e-06, -0.00234067440032959, -0.0010569095611572266, 0.0, -0.00035858154296875, -2.6702880859375e-05, -0.0003871917724609375, -0.20805931091308594, -5.7220458984375e-06, -0.00040435791015625, -0.000110626220703125, -1.33514404296875e-05, -5.7220458984375e-06, -0.0138243418186903, -0.0030677414033561945, -1.5497195136049413e-06, -2.6702880859375e-05, -0.00045013427734375, -9.5367431640625e-05, -2.86102294921875e-05, -2.288818359375e-05, -0.011336326599121094, -1.1920928244535389e-07, -0.10295605659484863, -0.00010704994201660156, -0.000110626220703125, -0.001102447509765625, -0.000133514404296875, -0.0027208328247070312, 0.0, -0.13092803955078125, -0.000408172607421875, -1.9073486328125e-06, -3.5881996154785156e-05, 0.0, -0.0041961669921875, -0.0047206878662109375, -0.0008373260498046875, -1.311301275563892e-06, -6.270212179515511e-05, -2.0265574676159304e-06, -7.271752110682428e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Draw", "hole5": "PlayerSelector", "_type": "Template6", "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.456831000455395, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -3.4062604904174805, -4.410734163684538e-06, -2.4676315661054105e-05, -1.9073486328125e-06, 0.0, -0.01201546285301447, -1.311301275563892e-06, -0.19386577606201172, 0.0, -0.8361461162567139, -6.794906312279636e-06, -0.00062165642157197, -7.152556463552173e-06, 0.0, -9.202957153320312e-05, 0.0, -3.170956551912241e-05, 0.0, -0.0001010894775390625, -0.002346038818359375, -0.000118255615234375, -2.1457672119140625e-06, -0.00021181287593208253, -2.026557694989606e-06, -7.390960945485858e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"_type": "Template62_expr_seq"}], "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.483315684765721, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.8861737251281738, -0.0001234989904332906, -2.3365011657006107e-05, -1.9073486328125e-06, 0.0, -0.016674518585205078, -3.576278118089249e-07, -0.0467602014541626, 0.0, -0.6228646039962769, -1.2278503163543064e-05, -0.14053088426589966, -2.8848648071289062e-05, -1.1920928244535389e-07, -0.0035495758056640625, -0.0004024505615234375, -0.1366119384765625, -3.0517578125e-05, -1.33514404296875e-05, -0.7845909595489502, -0.009847401641309261, -5.841255187988281e-06, -0.001239776611328125, -0.7974023818969727, -8.7738037109375e-05, -0.010263442993164062, -0.0002931356430053711, -1.9073486328125e-05, -0.00034725593286566436, 0.0, -0.0002880096435546875, -0.019156455993652344, -0.000782012939453125, -2.1457672119140625e-06, -0.00020978674001526088, -2.0265574676159304e-06, -1.3351374946068972e-05]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), SelfSelector()]), PlayerSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.664215378754406, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -2.4177660942077637, -1.394745322613744e-05, -4.0173526940634474e-05, -2.2649765014648438e-06, 0.0, -0.019823921844363213, -1.1920928244535389e-07, -0.0006483793258666992, -6.29425048828125e-05, -0.12995944917201996, -0.00010418867168482393, -0.0001735687255859375, -0.05005931854248047, -7.05718994140625e-05, -0.001163482666015625, -0.009283065795898438, -0.0008182525634765625, -0.0008426904678344727, -4.1961669921875e-05, -0.00017869332805275917, -0.12994515895843506, 0.0, -0.005292530637234449, 0.0, -0.7616214752197266, -0.01682567596435547, -0.0009307861328125, -0.002674340968951583, -0.0008871555328369141, -1.1920928244535389e-07, -0.3015698492527008, 0.0, 0.0, -4.00543212890625e-05, -0.06623077392578125, -0.07260417938232422, 0.0, -1.9073486328125e-06, -0.03506481647491455, -0.0015236139297485352, -2.1457672119140625e-06, -0.0001811981201171875, -0.06542778015136719, -0.07447052001953125, -0.015237092971801758, -5.14984130859375e-05, -0.0022039413452148438, -3.814697265625e-06, -0.002116560935974121, -0.0008832216262817383, 0.0, -0.0003757476806640625, -2.47955322265625e-05, -0.0004596710205078125, -0.18621349334716797, -5.7220458984375e-06, -0.000522613525390625, -9.5367431640625e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.013230680488049984, -0.00261041522026062, -1.1920922133867862e-06, -2.47955322265625e-05, -0.00060272216796875, -5.53131103515625e-05, -2.47955322265625e-05, -1.52587890625e-05, -0.020763397216796875, 0.0, -0.10239231586456299, -0.00010502338409423828, -0.0001392364501953125, -0.0009784698486328125, -0.0001678466796875, -0.0022029876708984375, 0.0, -0.13147640228271484, -0.000385284423828125, -1.9073486328125e-06, -3.5762786865234375e-05, 0.0, -0.0038013458251953125, -0.0047760009765625, -0.00083160400390625, -1.4305104514278355e-06, -6.305972783593461e-05, -2.0265574676159304e-06, -7.390960945485858e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -4.93230872107236, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.0893921852111816, -0.0002360078797210008, -4.6491426473949105e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.008731367066502571, -2.3841855067985307e-07, -0.0016211270121857524, -5.7220458984375e-06, -0.0953272134065628, -0.0008844400872476399, -0.3316808044910431, -1.9073486328125e-06, -5.960462772236497e-07, -0.028055191040039062, -0.0003032684326171875, 0.0, -3.365091323852539, 0.0, -0.0001773834228515625, -9.5367431640625e-06, -0.00045299530029296875, -8.427952707279474e-05, -3.4332275390625e-05, -0.0002803802490234375, 0.0, -0.00016033649444580078, 0.0, -0.0028171539306640625, -0.00168609619140625, -0.0001735687255859375, -7.152555099310121e-07, -4.875540980719961e-05, -2.264971953991335e-06, -5.960462203802308e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Draw", "hole5": "PlayerSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsWeapon", "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 251, "Is", "Weapon", "<EOS>", 320, 105, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(CardQuery(\n            conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.17440375917095, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -3.0640130043029785, -5.602836154139368e-06, -1.7642974853515625e-05, -8.225440979003906e-06, -1.9073486328125e-06, -0.015164079144597054, -1.1920928244535389e-07, -0.0019429922103881836, -5.7220458984375e-06, -0.26451626420021057, -1.4305104514278355e-06, -0.00012969970703125, -0.0011959075927734375, -0.3888216018676758, -1.1444091796875e-05, -0.000156402587890625, -3.62396240234375e-05, -0.0020543336868286133, -7.2479248046875e-05, -0.09428215026855469, -0.0001678466796875, -9.5367431640625e-06, -0.06885051727294922, -9.5367431640625e-06, -0.17194080352783203, -0.32244873046875, -0.0014115571975708008, -0.2521132230758667, -0.000789642333984375, -2.288818359375e-05, -0.04308509826660156, -0.23123854398727417, -3.814697265625e-06, 0.0, -0.21187210083007812, -4.9591064453125e-05, -2.288818359375e-05, -0.030185699462890625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -0.00012600421905517578, -3.1590217986376956e-05, -2.47955322265625e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.001605987548828125, -0.00054168701171875, -0.0001068115234375, -3.576278118089249e-07, -7.795983401592821e-05, -2.0265570128685795e-06, -6.914134246471804e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"hole0": "Give", "hole1": [{"hole0": "Draw", "_type": "Template46"}], "hole3": "PlayerSelector", "_type": "Template23"}], "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 93, 255, "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.DRAGON)), ActionTag(Give(Draw()),\n            PlayerSelector())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.191238058407343, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.8861737251281738, -0.0001234989904332906, -2.3365011657006107e-05, -1.9073486328125e-06, 0.0, -0.016674518585205078, -3.576278118089249e-07, -0.0467602014541626, 0.0, -0.6228646039962769, -1.2278503163543064e-05, -0.14053088426589966, -2.8848648071289062e-05, -1.1920928244535389e-07, -0.0035495758056640625, -0.0004024505615234375, -0.1366119384765625, -3.0517578125e-05, -1.33514404296875e-05, -0.7845909595489502, -0.009847401641309261, -5.841255187988281e-06, -0.001239776611328125, -0.6022195816040039, -0.0001697540283203125, -0.0003833770751953125, -1.52587890625e-05, -0.0016689300537109375, -1.9431114196777344e-05, -0.6059448719024658, -6.103515625e-05, -5.7220458984375e-06, -0.0946054458618164, -0.05067634582519531, -0.06251823902130127, -1.1563301086425781e-05, -5.7220458984375e-06, -0.02303314208984375, -0.0010128021240234375, -0.0469934344291687, -1.8596609152154997e-05, -0.04593944549560547, 0.0, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.00011861324310302734, 0.0, -0.000286102294921875, -0.0006656646728515625, -6.103515625e-05, -7.152555099310121e-07, -0.0003109692770522088, -2.0265574676159304e-06, -7.033342626527883e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            IsType(MINION_TYPE.DRAGON), players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.313632185732146, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -3.539750099182129, -3.5523738915799186e-05, -7.61745177442208e-05, -2.384185791015625e-06, 0.0, -0.01703132502734661, -1.1920928244535389e-07, -0.022119879722595215, -1.9073486328125e-06, -0.5686448812484741, -7.271752110682428e-06, -0.049659594893455505, -5.364418029785156e-05, -1.1920928244535389e-07, -0.0022335052490234375, -2.86102294921875e-05, -0.026638031005859375, -3.0517578125e-05, -4.00543212890625e-05, -0.024829506874084473, -0.00478756008669734, -8.106231689453125e-06, -0.010001182556152344, -0.21680450439453125, -0.000904083251953125, -0.00018310546875, -2.09808349609375e-05, -0.000385284423828125, -4.5299530029296875e-06, -0.7455586194992065, -5.352497100830078e-05, -0.025033950805664062, -3.4332275390625e-05, -1.9073486328125e-06, -0.03786468505859375, 0.0, -0.0003376007080078125, -5.7220458984375e-06, -0.001028299331665039, -4.529942543740617e-06, -2.86102294921875e-05, -3.4332275390625e-05, -0.0002689361572265625, -0.0069266557693481445, -3.0517578125e-05, -0.0006351470947265625, -3.814697265625e-06, -0.00437009334564209, -0.00021398067474365234, -5.14984130859375e-05, -0.0011063814163208008, -1.9073486328125e-06, -5.5789947509765625e-05, 0.0, -0.000125885009765625, -0.0004634857177734375, -8.7738037109375e-05, -5.960462772236497e-07, -5.113947918289341e-05, -2.0265570128685795e-06, -5.245203283266164e-06]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), SelfSelector()]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -5.853466761596884, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -2.4177660942077637, -1.394745322613744e-05, -4.0173526940634474e-05, -2.2649765014648438e-06, 0.0, -0.019823921844363213, -1.1920928244535389e-07, -0.0006483793258666992, -6.29425048828125e-05, -0.12995944917201996, -0.00010418867168482393, -0.0001735687255859375, -0.05005931854248047, -7.05718994140625e-05, -0.001163482666015625, -0.009283065795898438, -0.0008182525634765625, -0.0008426904678344727, -4.1961669921875e-05, -0.00017869332805275917, -0.12994515895843506, 0.0, -0.005292530637234449, 0.0, -0.7616214752197266, -0.01682567596435547, -0.0009307861328125, -0.002674340968951583, -0.0008871555328369141, -1.1920928244535389e-07, -1.4633692502975464, 0.0, 0.0, -4.76837158203125e-05, -0.009181976318359375, -0.10031414031982422, 0.0, -1.9073486328125e-06, -0.03246128559112549, -0.0017583370208740234, -2.2649765014648438e-06, -0.0001697540283203125, -0.12371063232421875, -0.07355499267578125, -0.016785860061645508, -5.340576171875e-05, -0.0023021697998046875, -3.814697265625e-06, -0.002263307571411133, -0.0008584260940551758, 0.0, -0.00037384033203125, -2.47955322265625e-05, -0.00046539306640625, -0.18656253814697266, -5.7220458984375e-06, -0.0005397796630859375, -9.34600830078125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.013034223578870296, -0.0025869207456707954, -1.1920922133867862e-06, -2.47955322265625e-05, -0.000576019287109375, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -0.020516395568847656, -1.1920928244535389e-07, -0.10180103778839111, -0.00010502338409423828, -0.000141143798828125, -0.00098419189453125, -0.00016021728515625, -0.0022182464599609375, 0.0, -0.1321401596069336, -0.0003814697265625, -1.9073486328125e-06, -3.5762786865234375e-05, 0.0, -0.0038776397705078125, -0.0047626495361328125, -0.00083160400390625, -1.4305104514278355e-06, -6.294052582234144e-05, -2.0265574676159304e-06, -7.390960945485858e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 273, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -6.357358889702198, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -3.5790228843688965, -0.0003443369932938367, -6.067751382943243e-05, -2.0265579223632812e-06, 0.0, -0.02231789194047451, -2.3841855067985307e-07, -0.19613301753997803, -1.9073486328125e-06, -0.31789323687553406, -2.3841855067985307e-07, -0.008268579840660095, -1.9073486328125e-06, 0.0, -0.191497802734375, -7.62939453125e-06, 0.0, -0.0020084381103515625, -1.9073486328125e-06, -0.0004138946533203125, -1.9073486328125e-06, -0.005236387252807617, -5.3881249186815694e-05, -4.1961669921875e-05, -4.1961669921875e-05, -9.72747802734375e-05, -0.002701878547668457, -1.52587890625e-05, -0.00020599365234375, -1.9073486328125e-06, -0.013473272323608398, -0.0001175403522211127, -2.288818359375e-05, 0.0, -0.34779930114746094, -0.2753772735595703, 0.0, 0.0, -0.3967132568359375, -0.0015319585800170898, 0.0, -3.4332275390625e-05, -0.029578208923339844, -0.1083078384399414, -0.004271864891052246, -8.0108642578125e-05, -0.0034646987915039062, -5.7220458984375e-06, -0.007558584213256836, -0.0009194612503051758, 0.0, -0.000186920166015625, -2.09808349609375e-05, -0.0001506805419921875, -0.5085077285766602, -7.62939453125e-06, -0.0005588531494140625, -0.000171661376953125, -3.814697265625e-06, -3.814697265625e-06, -0.015853524208068848, -0.0031280468683689833, -7.152555099310121e-07, -1.71661376953125e-05, -0.0022983551025390625, -3.0517578125e-05, -2.288818359375e-05, -9.5367431640625e-06, -0.039757728576660156, 0.0, -0.10340511798858643, -0.00010120868682861328, -0.0001049041748046875, -0.0008525848388671875, -0.0001277923583984375, -0.0027170181274414062, 0.0, -0.14396190643310547, -0.0003986358642578125, -1.9073486328125e-06, -3.3855438232421875e-05, 0.0, -0.004734039306640625, -0.008832931518554688, -0.0006847381591796875, -4.29153169534402e-06, -6.472854875028133e-05, -2.0265574676159304e-06, -6.556489552167477e-06]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template61"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Gnomish Inventor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 4, "_type": "Template32"}], "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 47, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=3)))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score": -6.9699913815601775, "score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -2.4177660942077637, -1.394745322613744e-05, -4.0173526940634474e-05, -2.2649765014648438e-06, 0.0, -0.019823921844363213, -1.1920928244535389e-07, -0.0006483793258666992, -6.29425048828125e-05, -0.12995944917201996, -0.00010418867168482393, -0.0001735687255859375, -0.05005931854248047, -7.05718994140625e-05, -0.001163482666015625, -0.009283065795898438, -0.0008182525634765625, -0.0008426904678344727, -4.1961669921875e-05, -0.00017869332805275917, -0.12994515895843506, 0.0, -0.005292530637234449, 0.0, -0.7169475555419922, -0.0007610321044921875, -0.002488374710083008, 0.0, -0.0018426179885864258, -0.00989079475402832, 0.0, -0.029235834255814552, 0.0, -0.006824493408203125, -0.0014723539352416992, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -0.000762939453125, -0.010234832763671875, -1.9073486328125e-06, -1.9073486328125e-06, -0.05756700038909912, -0.005640983581542969, -3.576278118089249e-07, -0.000461578369140625, -0.05053901672363281, -0.054617881774902344, -0.01647937297821045, -2.47955322265625e-05, -0.002338409423828125, -1.9073486328125e-06, -0.00234067440032959, -0.0010569095611572266, 0.0, -0.00035858154296875, -2.6702880859375e-05, -0.0003871917724609375, -0.20805931091308594, -5.7220458984375e-06, -0.00040435791015625, -0.000110626220703125, -1.33514404296875e-05, -5.7220458984375e-06, -0.0138243418186903, -0.0030677414033561945, -1.5497195136049413e-06, -2.6702880859375e-05, -0.00045013427734375, -9.5367431640625e-05, -2.86102294921875e-05, -2.288818359375e-05, -0.011336326599121094, -1.1920928244535389e-07, -0.10295605659484863, -0.00010704994201660156, -0.000110626220703125, -0.001102447509765625, -0.000133514404296875, -0.0027208328247070312, 0.0, -2.858283042907715, -0.016025543212890625, 0.0, -3.027914499398321e-05, 0.0, -0.0024127960205078125, -0.00421142578125, -0.0007534027099609375, -4.768370445162873e-07, -6.997340824455023e-05, -2.14576584767201e-06, -7.867794920457527e-06]}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(2)\n", "score": -0.4246355639554622, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -0.2143024206161499, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(3)\n", "score": -2.119757805929339, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -1.9093750715255737, -5.14984130859375e-05]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "hero", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(0)\n        player.hero.change_temp_attack(2)\n", "score": -3.1317873925220283, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -2.8213183879852295, -0.0015565156936645508, -0.022986412048339844, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0006465911865234375, 0.0, -2.86102294921875e-05, -0.00013959009083919227, -3.933906555175781e-06, -0.06463348865509033, 0.0, -0.18312130868434906, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "increase_armor", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "score": -3.3609174219675424, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -3.208906650543213, 0.0, -0.012683091685175896, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "hero", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(0)\n", "score": -4.04536369906441, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -3.833582878112793, -0.0014495849609375]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "</def>", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(0)\n        player.hero.change_temp_attack(2)\n", "score": -4.0923861488920465, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -3.86401629447937, -0.002649545669555664, -0.012806892395019531, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0010623931884765625, 0.0, -4.57763671875e-05, -0.00020502555707935244, -7.867813110351562e-06, -0.041350722312927246, 0.0, -0.1328757256269455, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 4, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "4", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(4)\n", "score": -4.558603559599078, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -4.348133087158203, -0.0001392364501953125]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "heal", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.heal(2)\n", "score": -4.593140934572375, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -3.9814534187316895, 0.0, -0.4723617434501648, 0.0]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "hero", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(0)\n        player.hero.change_temp_attack(3)\n", "score": -4.97904275658243, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -2.8213183879852295, -0.0015565156936645508, -0.022986412048339844, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0006465911865234375, 0.0, -2.86102294921875e-05, -0.00013959009083919227, -3.933906555175781e-06, -0.06463348865509033, 0.0, -2.030287027359009, -9.1552734375e-05]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "heal", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "hero", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.heal(0)\n", "score": -5.289046560392535, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -3.9814534187316895, 0.0, -1.165621042251587, -0.002646327018737793]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "<cost>", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(0)\n        player.hero.change_temp_attack(2)\n", "score": -5.595228336773516, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -5.36685848236084, -0.002649545669555664, -0.012806892395019531, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0010623931884765625, 0.0, -4.57763671875e-05, -0.00020502555707935244, -7.867813110351562e-06, -0.041350722312927246, 0.0, -0.1328757256269455, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "increase_armor", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "hero", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(0)\n        player.hero.increase_armor(2)\n", "score": -5.938207826788357, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -2.8213183879852295, -0.0015565156936645508, -0.022986412048339844, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0006465911865234375, 0.0, -2.86102294921875e-05, -0.00013959009083919227, -3.933906555175781e-06, -3.0435590744018555, 0.0, -0.010616157203912735, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "<cost>", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(0)\n", "score": -5.945935879812396, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -5.735416412353516, -0.0001882314682006836]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "</def>", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(0)\n", "score": -6.23356691466347, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -6.02304744720459, -0.0001882314682006836]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole0": "Heroic Strike", "hole1": 2, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 0, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "heal", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 2, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", "hero", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(0)\n        player.hero.change_temp_attack(2)\n", "score": -6.307343464963424, "score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -5.883552074432373, 0.0, -0.18776948750019073, -0.0008512735366821289, -0.055047035217285156, -5.7220458984375e-06, -3.0517578125e-05, -3.814697265625e-06, -0.000659942626953125, 0.0, -2.6702880859375e-05, -0.00019953135051764548, -4.0531158447265625e-06, -0.018516898155212402, 0.0, -0.12717527151107788, -1.9073486328125e-06]}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -0.4277680228932752, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -0.03528594970703125, 0.0, -0.000118255615234375, -0.0004367828369140625, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016364455223083496, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "IronbarkProtector"}, "choice_history": [121, 198, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -1.9424611936791791, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -1.757584810256958, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -0.03528594970703125, 0.0, -0.000118255615234375, -0.0004367828369140625, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016364455223083496, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -2.5670597731604445, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -2.2859604358673096, -7.62939453125e-06, -0.002132415771484375, 0.0, -0.007904052734375, 0.0, -9.1552734375e-05, -0.0004291534423828125, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015326030552387238, -3.814697265625e-06, -0.0003248453140258789, 0.0, -0.0002231597900390625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "ForceTankProtector"}, "choice_history": [121, 198, "Force", "Tank", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class ForceTankProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -3.6302104510758966, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -3.3071787357330322, -0.16647416353225708, -0.0010111888404935598, -9.894371032714844e-06, -4.768007784150541e-07, -7.62939453125e-06, -3.314018249511719e-05, -4.57763671875e-05, -0.0018215179443359375, -0.0010242462158203125, -0.00015841660206206143, -1.5616416931152344e-05, -2.384185791015625e-06, 0.0, -0.004574821330606937, 0.0, -0.10317623615264893, -3.814697265625e-06, -0.0002422332763671875, 0.0, -0.04303550720214844, 0.0, -0.0001239776611328125, -0.0004978179931640625, -1.33514404296875e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.0001574978232383728, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(8, 8, taunt=True)\n", "score": -3.9946256132333744, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -3.602151870727539, -1.9073486328125e-06, -8.0108642578125e-05, -0.0005855560302734375, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00014410819858312607, -1.9073486328125e-06, -0.0003018379211425781, 0.0, -0.0001239776611328125]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "IronbarkProtector"}, "choice_history": [121, 198, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -4.0817529439463485, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -1.757584810256958, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -2.2859604358673096, -7.62939453125e-06, -0.002132415771484375, 0.0, -0.007904052734375, 0.0, -9.1552734375e-05, -0.0004291534423828125, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00015326030552387238, -3.814697265625e-06, -0.0003248453140258789, 0.0, -0.0002231597900390625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK><UNK>"}, "choice_history": [121, 198, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -4.6230340703858985, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -4.21723747253418, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -0.03528594970703125, 0.0, -0.000118255615234375, -0.0004367828369140625, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016364455223083496, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -5.070325996866757, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -4.796979904174805, -2.09808349609375e-05, -0.000255584716796875, 0.0, -0.0020732879638671875, 0.0, -0.0001220703125, -0.0003643035888671875, -1.52587890625e-05, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.0001514805480837822, -5.7220458984375e-06, -0.0003172159194946289, 0.0, -0.0002040863037109375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>"}, "choice_history": [121, 198, "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -5.4119437865282976, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -5.0514116287231445, -0.00013895356096327305, -1.537799835205078e-05, -2.4080276489257812e-05, -6.103515625e-05, -0.0010623931884765625, -0.00067138671875, -0.0004303721070755273, -1.7523765563964844e-05, -1.1444046322139911e-05, 0.0, -0.01788412407040596, 0.0, -0.061557888984680176, -3.814697265625e-06, -0.0002460479736328125, 0.0, -0.034285545349121094, 0.0, -0.0001277923583984375, -0.000316619873046875, -1.52587890625e-05, -2.3841855067985307e-07, -2.3841855067985307e-07, -0.0001651570200920105, -5.7220458984375e-06, -0.0003057718276977539, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "IronbarkProtector"}, "choice_history": [121, 198, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(8, 8, taunt=True)\n", "score": -5.509318784019278, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -1.757584810256958, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -3.602151870727539, -1.9073486328125e-06, -8.0108642578125e-05, -0.0005855560302734375, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00014410819858312607, -1.9073486328125e-06, -0.0003018379211425781, 0.0, -0.0001239776611328125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "_", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(8, 8, taunt=True)\n", "score": -5.587884037895428, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -5.195285797119141, -3.4332275390625e-05, -6.67572021484375e-05, -0.00070953369140625, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -8.454732596874237e-05, -2.0265579223632812e-06, -0.0003350973129272461, 0.0, -0.0001316070556640625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "ForceProtector"}, "choice_history": [121, 198, "Force", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class ForceProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.020929598350932, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -3.3071787357330322, -2.4954121112823486, -0.08596821129322052, -2.741115167737007e-06, -7.748603820800781e-06, -2.765655517578125e-05, -5.7220458984375e-05, -0.0015201568603515625, -0.000545501708984375, -0.00022063204960431904, -1.7523765563964844e-05, -8.344646857949556e-07, 0.0, -0.007183302193880081, 0.0, -0.08458149433135986, -5.7220458984375e-06, -0.0002899169921875, 0.0, -0.03661155700683594, 0.0, -0.0001239776611328125, -0.0003871917724609375, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.000166282057762146, -3.814697265625e-06, -0.0003057718276977539, 0.0, -0.00022125244140625]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "ForceTankProtector"}, "choice_history": [121, 198, "Force", "Tank", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class ForceTankProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.058535665499157, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -3.3071787357330322, -0.16647416353225708, -0.0010111888404935598, -9.894371032714844e-06, -4.768007784150541e-07, -7.62939453125e-06, -3.314018249511719e-05, -4.57763671875e-05, -0.0018215179443359375, -0.0010242462158203125, -0.00015841660206206143, -1.5616416931152344e-05, -2.384185791015625e-06, 0.0, -0.004574821330606937, 0.0, -2.5619239807128906, -5.7220458984375e-06, -0.0016384124755859375, 0.0, -0.011235237121582031, 0.0, -0.0001010894775390625, -0.0004901885986328125, -1.33514404296875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00014299247413873672, -3.814697265625e-06, -0.0003229379653930664, 0.0, -0.000225067138671875]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Ironbark<UNK>"}, "choice_history": [121, 198, "Ironbark", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Ironbark<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.1377272411718025, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -1.757584810256958, -4.21723747253418, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -0.03528594970703125, 0.0, -0.000118255615234375, -0.0004367828369140625, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016364455223083496, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Ironbark Protector", "hole1": 8, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 8, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "TankProtector"}, "choice_history": [121, 198, "Tank", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class TankProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score": -6.470842637132847, "score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -6.3372297286987305, -0.00011944102152483538, -2.3841830625315197e-06, -3.576133167371154e-07, -9.5367431640625e-06, -2.7418136596679688e-05, -4.9591064453125e-05, -0.002292633056640625, -0.000576019287109375, -8.40390202938579e-05, -1.7523765563964844e-05, -1.0728830375228426e-06, 0.0, -0.009169233031570911, 0.0, -0.07765018939971924, -3.814697265625e-06, -0.00028228759765625, 0.0, -0.04204273223876953, 0.0, -0.0001239776611328125, -0.0003719329833984375, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016573630273342133, -3.814697265625e-06, -0.0003076791763305664, 0.0, -0.00022125244140625]}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -0.5300042276030581, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025531768798828, -0.0001049041748046875, -0.02420330047607422, -0.0002574920654296875, -0.00394439697265625, -0.0064341360703110695, -5.7220458984375e-06, -0.0001544952392578125, -0.03454875946044922, -9.34600830078125e-05, -0.0050182342529296875, -1.9073486328125e-06, -2.47955322265625e-05, -0.0042425282299518585, -7.998638466233388e-05, -1.33514404296875e-05, -0.007354736328125, -0.0019321441650390625, -0.014981269836425781, -0.026086926460266113, -3.814697265625e-06, -0.004567146301269531]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -2.5364215602949116, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -2.1473350524902344, 0.0, -0.0014972686767578125, -6.67572021484375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.000125885009765625, -1.9073486328125e-06, -0.11399078369140625, -5.7220458984375e-06, 0.0, -2.2411340978578664e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.00010967254638671875, -4.00543212890625e-05, -0.031327247619628906, -0.000102996826171875, -0.032036781311035156, -0.0002651214599609375, -0.0038442611694335938, -0.006572357844561338, -5.7220458984375e-06, -0.0001621246337890625, -0.03450298309326172, -9.34600830078125e-05, -0.00506591796875, -1.9073486328125e-06, -2.47955322265625e-05, -0.004207957535982132, -7.986718264874071e-05, -1.1444091796875e-05, -0.007309913635253906, -0.0018463134765625, -0.015115737915039062, -0.026021122932434082, -3.814697265625e-06, -0.004673957824707031]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -2.783625551372097, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -2.2937440872192383, -0.000255584716796875, -0.000354766845703125, -0.03769874572753906, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -1.9907929527107626e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -2.09808349609375e-05, -0.0001710653305053711, -3.0517578125e-05, -0.02236652374267578, -5.53131103515625e-05, -0.015045166015625, -0.0002593994140625, -0.010245323181152344, -0.008150031790137291, -3.814697265625e-06, -0.0001239776611328125, -0.061743736267089844, -0.000125885009765625, -0.013533592224121094, -3.814697265625e-06, -2.288818359375e-05, -0.004410837776958942, -6.973513518460095e-05, -1.33514404296875e-05, -0.00696563720703125, -0.0018596649169921875, -0.015368461608886719, -0.030132412910461426, -3.814697265625e-06, -0.0039958953857421875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfOfWild"}, "choice_history": [121, 200, "Mark", "Of", "Of", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfOfWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.022099754365627, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -3.553802967071533, -0.014680369757115841, -0.0005061461124569178, -1.0966788977384567e-05, -1.71661376953125e-05, -5.7220458984375e-06, -0.000270843505859375, -8.20159912109375e-05, -1.52587890625e-05, -0.0001373291015625, -0.00019073486328125, -0.0001811981201171875, -2.6702880859375e-05, -0.000171661376953125, -0.0003376007080078125, -6.246371776796877e-05, -0.0004830360412597656, -0.0002505774318706244, -4.9591064453125e-05, -0.015423844568431377, -0.000293731689453125, -0.0006920066080056131, 0.0, -0.0014095306396484375, -0.0008335113525390625, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.15851879119873047, 0.0, -0.0001087188720703125, -5.91278076171875e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10783958435058594, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.030274391174316406, -0.0001068115234375, -0.024217605590820312, -0.0002574920654296875, -0.003933906555175781, -0.006438317243009806, -5.7220458984375e-06, -0.0001544952392578125, -0.034516334533691406, -9.34600830078125e-05, -0.005015373229980469, -1.9073486328125e-06, -2.47955322265625e-05, -0.004241574555635452, -7.998638466233388e-05, -1.33514404296875e-05, -0.0073528289794921875, -0.0019321441650390625, -0.014987945556640625, -0.026084065437316895, -3.814697265625e-06, -0.0045680999755859375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n", "score": -4.562679627302714, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025531768798828, -0.0001049041748046875, -0.02420330047607422, -0.0002574920654296875, -0.00394439697265625, -0.0064341360703110695, -5.7220458984375e-06, -0.0001544952392578125, -3.4048166275024414, -1.1444091796875e-05, -0.00018310546875, -0.002017974853515625, -5.7220458984375e-06, -0.7244617938995361, -5.7220458984375e-06, -0.0001220703125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "Taunt", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n", "score": -4.608174660566874, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025531768798828, -0.0001049041748046875, -0.02420330047607422, -0.0002574920654296875, -0.00394439697265625, -0.0064341360703110695, -5.7220458984375e-06, -0.0001544952392578125, -3.4048166275024414, -1.1444091796875e-05, -0.00018310546875, -0.002017974853515625, -5.7220458984375e-06, -0.7692160606384277, -0.0001780986785888672, -0.000690460205078125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOf<UNK>"}, "choice_history": [121, 200, "Mark", "Of", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOf<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.673731626411609, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -4.205989837646484, -0.00013577460777014494, -1.9550236174836755e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.0003185272216796875, -5.7220458984375e-05, -2.288818359375e-05, -8.7738037109375e-05, -0.0002155303955078125, -0.0001220703125, -3.814697265625e-05, -0.0001888275146484375, -0.000598907470703125, -6.007967749610543e-05, -0.0005445480346679688, -0.00024330538872163743, -5.91278076171875e-05, -0.0029973129276186228, -0.0039033889770507812, -0.0003780091064982116, 0.0, -0.0009555816650390625, -0.000850677490234375, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -3.445148468017578e-05, -1.9073486328125e-06, -0.15704691410064697, 0.0, -9.72747802734375e-05, -5.7220458984375e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.53131103515625e-05, -1.9073486328125e-06, -0.13264751434326172, -3.814697265625e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.030773162841796875, -0.0001068115234375, -0.024361610412597656, -0.0002574920654296875, -0.0038309097290039062, -0.006446829065680504, -5.7220458984375e-06, -0.0001544952392578125, -0.034295082092285156, -9.34600830078125e-05, -0.005001068115234375, -1.9073486328125e-06, -2.47955322265625e-05, -0.00423406483605504, -8.02247814135626e-05, -1.33514404296875e-05, -0.007342338562011719, -0.0019245147705078125, -0.015109062194824219, -0.026086926460266113, -3.814697265625e-06, -0.00458526611328125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.680859197467726, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -4.3613481521606445, -3.814697265625e-06, -0.000736236572265625, -0.0001010894775390625, -1.9073486328125e-06, -7.62939453125e-06, -9.34600830078125e-05, -1.9073486328125e-06, -0.05261993408203125, -5.7220458984375e-06, 0.0, -2.2292131689027883e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.00010955333709716797, -4.38690185546875e-05, -0.031174659729003906, -0.0001049041748046875, -0.02547168731689453, -0.0002727508544921875, -0.0043621063232421875, -0.0065167732536792755, -5.7220458984375e-06, -0.000156402587890625, -0.033466339111328125, -9.5367431640625e-05, -0.0050945281982421875, -1.9073486328125e-06, -2.47955322265625e-05, -0.0042282226495444775, -7.998638466233388e-05, -1.1444091796875e-05, -0.007287025451660156, -0.0018711090087890625, -0.01493072509765625, -0.02611076831817627, -3.814697265625e-06, -0.004549980163574219]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.74124251948524, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -2.1473350524902344, 0.0, -0.0014972686767578125, -6.67572021484375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.000125885009765625, -1.9073486328125e-06, -2.258328437805176, -0.000690460205078125, -0.0004367828369140625, -0.03384590148925781, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -1.9431096006883308e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -2.09808349609375e-05, -0.0001766681671142578, -3.0517578125e-05, -0.022718429565429688, -5.53131103515625e-05, -0.01636219024658203, -0.0002689361572265625, -0.011551856994628906, -0.008100483566522598, -3.814697265625e-06, -0.0001277923583984375, -0.0626373291015625, -0.0001239776611328125, -0.01371002197265625, -3.814697265625e-06, -2.47955322265625e-05, -0.0043939100578427315, -6.925832713022828e-05, -1.33514404296875e-05, -0.006930351257324219, -0.001834869384765625, -0.015429496765136719, -0.030297398567199707, -3.814697265625e-06, -0.0040378570556640625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfSpellCard"}, "choice_history": [121, 200, "Mark", "Of", "Spell", "Card", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfSpellCard(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.762172718939837, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -4.0380144119262695, -0.2586156129837036, -3.814697265625e-06, -0.0008194055408239365, -2.288818359375e-05, -3.814697265625e-06, -0.0004215240478515625, -7.62939453125e-05, -1.1444091796875e-05, -8.20159912109375e-05, -0.000392913818359375, -0.0002117156982421875, -5.340576171875e-05, -0.00017547607421875, -0.0003681182861328125, -9.059495641849935e-05, -0.0004208087921142578, -0.0002712006098590791, -4.57763671875e-05, -0.003023576457053423, -0.002315521240234375, -0.0003963652125094086, 0.0, -0.0009002685546875, -0.0009899139404296875, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.445148468017578e-05, -1.9073486328125e-06, -0.15719735622406006, 0.0, -9.918212890625e-05, -6.4849853515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.13134765625, -3.814697265625e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025341033935547, -0.0001068115234375, -0.024786949157714844, -0.000255584716796875, -0.0038042068481445312, -0.006462882272899151, -5.7220458984375e-06, -0.0001544952392578125, -0.03417015075683594, -9.34600830078125e-05, -0.0049953460693359375, -1.9073486328125e-06, -2.47955322265625e-05, -0.004241813439875841, -7.998638466233388e-05, -1.33514404296875e-05, -0.0073604583740234375, -0.001949310302734375, -0.015002250671386719, -0.026044011116027832, -3.814697265625e-06, -0.004588127136230469]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of of Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "of", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of of Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.989187036615476, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -4.342519760131836, -0.0001888275146484375, -0.019006365910172462, -1.9073486328125e-06, -0.0027408599853515625, -0.00078582763671875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -2.872943878173828e-05, 0.0, -0.2068113088607788, 0.0, -0.0001087188720703125, -4.9591064453125e-05, -7.62939453125e-06, -9.5367431640625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.1724996566772461, -5.7220458984375e-06, 0.0, -2.2768967028241605e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00011730194091796875, -3.814697265625e-05, -0.030065536499023438, -0.0001049041748046875, -0.022546768188476562, -0.0002574920654296875, -0.00383758544921875, -0.006398007273674011, -5.7220458984375e-06, -0.0001544952392578125, -0.034277915954589844, -9.1552734375e-05, -0.005005836486816406, -1.9073486328125e-06, -2.47955322265625e-05, -0.00422643544152379, -8.046318544074893e-05, -1.1444091796875e-05, -0.0073680877685546875, -0.00189971923828125, -0.015053749084472656, -0.026401638984680176, -3.814697265625e-06, -0.004582405090332031]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -5.086687699136746, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -4.72844123840332, 0.0, -0.0003147125244140625, -0.0001087188720703125, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-05, -1.9073486328125e-06, -0.0981912612915039, -5.7220458984375e-06, 0.0, -2.3245802367455326e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.00011157989501953125, -4.1961669921875e-05, -0.03301525115966797, -0.000102996826171875, -0.021289825439453125, -0.0002651214599609375, -0.0043811798095703125, -0.006394610740244389, -5.7220458984375e-06, -0.0001544952392578125, -0.030542373657226562, -9.72747802734375e-05, -0.005028724670410156, -1.9073486328125e-06, -2.47955322265625e-05, -0.004469024017453194, -7.855598232708871e-05, -1.33514404296875e-05, -0.007628440856933594, -0.0022220611572265625, -0.012969970703125, -0.026231884956359863, -3.814697265625e-06, -0.004474639892578125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"id": "minion", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 25, 186, "minion", "<EOS>", "spell_targetable", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(minion.\n            spell_targetable()), self)\n", "score": -6.170707548106293, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025531768798828, -0.0001049041748046875, -0.02420330047607422, -0.0002574920654296875, -0.00394439697265625, -0.0064341360703110695, -5.7220458984375e-06, -0.0001544952392578125, -0.03454875946044922, -9.34600830078125e-05, -0.0050182342529296875, -1.9073486328125e-06, -2.47955322265625e-05, -0.0042425282299518585, -7.998638466233388e-05, -1.33514404296875e-05, -0.007354736328125, -0.0019321441650390625, -4.3185014724731445, -3.814697265625e-06, -0.006687164306640625, 0.0, -1.3604652881622314, 0.0, -0.0006847381591796875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"targets": [{"id": "lightwarden", "_type": "Name"}], "value": {"hole0": "Taunt", "_type": "Template46"}, "_type": "Assign"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110, 126, 155, 320, 73, 186, "lightwarden", "<EOS>", 39, 255, "Taunt", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n        lightwarden = Taunt()\n        self.target.heal(player.effective_heal_power(2), self)\n", "score": -6.4669361038577335, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -3.737765312194824, -1.52587890625e-05, -0.0421295166015625, -3.0517578125e-05, -6.4849853515625e-05, -0.0008680820465087891, 0.0, -0.000865936279296875, -0.014430046081542969, -1.9073486328125e-06, -6.4849853515625e-05, -0.0010786056518554688, -1.9073486328125e-06, -0.721966028213501, -7.62939453125e-06, -6.4849853515625e-05, -0.0049896240234375, -0.0001354217529296875, -1.1444091796875e-05, -0.026988983154296875, -2.47955322265625e-05, -0.10583853721618652, 0.0, -0.12338066101074219, -0.00052642822265625, -0.08987124264240265, -0.0015002409927546978, -0.1925792694091797, 0.0, -0.0017147064208984375, -0.8348811864852905, 0.0, -0.0013904571533203125, -0.005833625793457031, 0.0, -3.0517578125e-05, -0.006136059761047363, 0.0, -0.18600070476531982, 0.0, -5.14984130859375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"targets": [{"id": "lightwarden", "_type": "Name"}], "value": {"hole0": "Taunt", "_type": "Template46"}, "_type": "Assign"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "Taunt", "<EOS>", 110, 126, 155, 320, 73, 186, "lightwarden", "<EOS>", 39, 255, "Taunt", "<EOS>", 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n        lightwarden = Taunt()\n        self.target.heal(player.effective_heal_power(2), self)\n", "score": -6.624380527213361, "score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -3.737765312194824, -1.52587890625e-05, -0.0421295166015625, -3.0517578125e-05, -6.4849853515625e-05, -0.0008680820465087891, 0.0, -0.000865936279296875, -0.014430046081542969, -1.9073486328125e-06, -6.4849853515625e-05, -0.0010786056518554688, -1.9073486328125e-06, -0.7497857809066772, -0.00030088418861851096, -0.000377655029296875, -0.0081024169921875, -0.0002384185791015625, -1.1444091796875e-05, -0.1042470932006836, -0.0001049041748046875, -0.14047598838806152, 0.0, -0.12185955047607422, -0.0007953643798828125, -0.09701324999332428, -0.0013964156387373805, -0.15499305725097656, 0.0, -0.0024623870849609375, -0.8831560611724854, 0.0, -0.001758575439453125, -0.006744384765625, 0.0, -3.24249267578125e-05, -0.0051833391189575195, -1.9073486328125e-06, -0.18227362632751465, 0.0, -5.340576171875e-05]}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Multi-Shot", "hole1": 4, "_type": "Template14"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "Multi-Shot"}, "choice_history": [121, 200, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Multi-Shot", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -1.6460281068771678, "score_history": [-1.9073486328125e-05, -1.027754783630371, -7.5101784204889555e-06, -5.483625955093885e-06, -1.1559954145923257e-05, -9.5367431640625e-06, -5.841255187988281e-06, -0.0001220703125, -0.29935359954833984, -0.0001583099365234375, -4.887580871582031e-06, -1.9073486328125e-06, -0.00017166136240120977, 0.0, -0.24568963050842285, -2.09808349609375e-05, -9.357929229736328e-05, 0.0, -2.491462328180205e-05, 0.0, -1.9073486328125e-06, -0.000141143798828125, -3.62396240234375e-05, -3.933906555175781e-06, 0.0, -0.0058917999267578125, -0.0001201629638671875, -0.0001735687255859375, -9.72747802734375e-05, -0.0008544921875, -7.62939453125e-06, -0.022337662056088448, -5.960462772236497e-07, -0.0001468658447265625, -0.004688262939453125, -1.52587890625e-05, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.022307634353637695, -3.62396240234375e-05, -0.0008764266385696828, 0.0, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -4.1961669921875e-05, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -5.9604644775390625e-06, -5.483612312673358e-06, -0.0002912280906457454, -2.7418097943154862e-06, -0.006427922286093235, -1.1444091796875e-05, -3.814697265625e-05, -0.000888824462890625, 0.0, -0.00014495849609375, 0.0, -0.0011218086583539844, -3.40932747349143e-05, -8.284697833005339e-05, 0.0, -0.000133514404296875, -0.004664421081542969, -1.9073486328125e-06, -2.09808349609375e-05, -0.0001062154769897461, -3.576272320060525e-06, -0.0003855213290080428, -6.31808916295995e-06, -0.0001506805419921875]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "Multi-Shot"}, "choice_history": [121, 200, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -2.681019132905192, "score_history": [-1.9073486328125e-05, -1.027754783630371, -7.5101784204889555e-06, -5.483625955093885e-06, -1.1559954145923257e-05, -9.5367431640625e-06, -5.841255187988281e-06, -0.0001220703125, -1.4169139862060547, -5.340576171875e-05, -3.5643577575683594e-05, -1.9073486328125e-06, -0.0003210306167602539, 0.0, -0.021661758422851562, -2.288818359375e-05, -0.000789642333984375, -7.43865966796875e-05, -5.7220458984375e-05, 0.0, -5.841253368998878e-06, 0.0, 0.0, -3.814697265625e-05, -1.9073486328125e-05, -3.933906555175781e-06, 0.0, -0.15113067626953125, -0.0002307891845703125, -0.0001811981201171875, -9.1552734375e-05, -0.0007495880126953125, -5.7220458984375e-06, -0.015955684706568718, -3.576278118089249e-07, -0.0009899139404296875, -0.00678253173828125, -7.62939453125e-06, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.021240234375, -3.4332275390625e-05, -0.0009214877500198781, 0.0, -3.814697265625e-06, -0.0001544952392578125, -1.9073486328125e-06, -4.00543212890625e-05, -1.33514404296875e-05, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -6.318072337307967e-06, -0.0002837179054040462, -3.099436753473128e-06, -0.006260185968130827, -1.33514404296875e-05, -3.62396240234375e-05, -0.0009746551513671875, 0.0, -0.00014495849609375, 0.0, -0.001126097864471376, -3.433168603805825e-05, -8.332377183251083e-05, 0.0, -0.000133514404296875, -0.0046844482421875, -1.9073486328125e-06, -2.09808349609375e-05, -0.0001062154769897461, -3.576272320060525e-06, -0.0003852829395327717, -6.31808916295995e-06, -0.000148773193359375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "_type": "Template14"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "Multi-Shot"}, "choice_history": [121, 200, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -3.1549018180443227, "score_history": [-1.9073486328125e-05, -1.027754783630371, -7.5101784204889555e-06, -5.483625955093885e-06, -1.1559954145923257e-05, -9.5367431640625e-06, -5.841255187988281e-06, -0.0001220703125, -0.29935359954833984, -0.0001583099365234375, -4.887580871582031e-06, -1.9073486328125e-06, -0.00017166136240120977, 0.0, -1.7649548053741455, -7.82012939453125e-05, -6.4849853515625e-05, 0.0, -1.8596609152154997e-05, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -3.0517578125e-05, -3.933906555175781e-06, 0.0, -0.0029964447021484375, -8.0108642578125e-05, -0.000171661376953125, -4.9591064453125e-05, -0.000606536865234375, -3.814697265625e-06, -0.015569405630230904, -8.344646857949556e-07, -0.0001220703125, -0.0019779205322265625, -3.4332275390625e-05, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -0.025002121925354004, -4.1961669921875e-05, -0.000877976359333843, 0.0, -3.814697265625e-06, -0.000179290771484375, -1.9073486328125e-06, -4.1961669921875e-05, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -5.483612312673358e-06, -0.00028908232343383133, -2.622600959512056e-06, -0.006097279954701662, -1.33514404296875e-05, -3.814697265625e-05, -0.00089263916015625, 0.0, -0.0001506805419921875, 0.0, -0.001099631073884666, -3.3378044463461265e-05, -8.117817924357951e-05, 0.0, -0.000133514404296875, -0.004687309265136719, -1.9073486328125e-06, -2.288818359375e-05, -0.0001043081283569336, -3.6954811548639555e-06, -0.000382660364266485, -6.31808916295995e-06, -0.000148773193359375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"id": "targets", "_type": "Name"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -3.6232656488790482, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.9722251892089844, -6.29425048828125e-05, -0.0008182525634765625, -3.814697265625e-06, -5.7220458984375e-06, -6.866455078125e-05, -1.9073486328125e-06, -0.012774347327649593, -1.3709068298339844e-05, -9.5367431640625e-06, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.07867622375488281, 0.0, -0.004260658286511898, -6.914138793945312e-05, -0.0010045765666291118, 0.0, -1.33514404296875e-05, -0.0006885528564453125, -1.9073486328125e-06, -5.7220458984375e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -6.079673767089844e-06, -9.536697689327411e-06, -0.0003100631874985993, -5.245203283266164e-06, -0.00785486213862896, -1.33514404296875e-05, -0.0001373291015625, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.0028591156005859375, -6.866455078125e-05, -0.003689050441607833, -5.7220458984375e-06, -0.0001735687255859375, -4.38690185546875e-05, -1.9073486328125e-06, -0.16083717346191406, -0.0007200241088867188, 0.0, -0.04093360900878906, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -0.001520395278930664, -2.0265579223632812e-06, -0.6727895736694336, -5.7220458984375e-06, -0.0020020008087158203, -7.05718994140625e-05, -0.00061798095703125, -0.32828521728515625, -3.24249267578125e-05, -0.0008544921875, -1.9073486328125e-06, -7.402723713312298e-05, -1.358979079668643e-05, -0.0013579416554421186, 0.0, -4.57763671875e-05, -0.0032806396484375, -1.9073486328125e-06, -2.47955322265625e-05, -8.07046890258789e-05, -4.768367489305092e-06, -0.0008485165890306234, -1.1920919860131107e-05, -3.4332275390625e-05, -0.0004978179931640625, -0.0016651153564453125, -5.7220458984375e-06, -0.0005393027677200735, -5.7220458984375e-06, -0.00235748291015625, -2.09808349609375e-05, -0.0025653839111328125, -4.9591064453125e-05, -0.0001811981201171875, -3.62396240234375e-05, -0.0003108978271484375, -0.0012874603271484375, -6.866455078125e-05, -3.24249267578125e-05, -2.09808349609375e-05, -3.4332275390625e-05, -6.484978803200647e-05, -3.814697265625e-06, -0.00010144705447601154, 0.0, -0.00018322467803955078, 0.0, -0.0004711151123046875, 0.0, -0.0064239501953125, -9.5367431640625e-06, -8.96453857421875e-05, -4.57763671875e-05, -9.5367431640625e-06, 0.0, -6.699560617562383e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.022151947021484375, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -4.601478576660156e-05, -4.768370445162873e-07, -0.0005220174789428711, -2.622604142743512e-06, -0.00024568644585087895, -1.9073486328125e-06, -0.0002498626708984375, -0.0100555419921875, -0.0010929107666015625, -0.5781373977661133]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "minions", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "minions", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -3.7282821158745065, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -0.29003071784973145, -9.5367431640625e-06, -0.000545501708984375, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.033428192138671875, 0.0, -0.005691527854651213, -8.463859558105469e-05, -0.0010577439097687602, 0.0, -1.33514404296875e-05, -0.0006313323974609375, -3.814697265625e-06, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.00033700448693707585, -5.483620952873025e-06, -0.008703834377229214, -1.1444091796875e-05, -0.024274826049804688, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027892470359802246, -5.7220458984375e-06, -8.20159912109375e-05, -9.918212890625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015344583662226796, -4.41074053014745e-06, -0.0001068115234375, -0.000148773193359375, -0.47132110595703125, -0.04844093322753906, -0.000453948974609375, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.001740574836730957, -4.172325134277344e-06, -0.0002536773681640625, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007179970853030682, -1.8954096958623268e-05, -0.003390789031982422, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.4807969331741333, -2.1457672119140625e-06, -0.0001850128173828125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.02942800521850586, -8.606910705566406e-05, -0.0438445508480072, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0036287307739257812, -1.9073486328125e-06, -0.0018254518508911133, -7.987022399902344e-06, -0.0008544921875, -1.52587890625e-05, -0.0003643035888671875, -1.9073486328125e-06, -0.005174517631530762, -2.7537309506442398e-05, -0.001579392934218049, 0.0, -0.0001277923583984375, -0.001796722412109375, -1.9073486328125e-06, -1.9073486328125e-05, -7.164478302001953e-05, -2.3841855067985307e-07, -0.017220228910446167, 0.0, -6.866455078125e-05, -0.0001506805419921875, -0.005138397216796875, -9.5367431640625e-06, -0.0003405809111427516, -1.52587890625e-05, -0.0001735687255859375, -4.9591064453125e-05, -0.000759124755859375, -7.62939453125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.000400543212890625, -0.0009765625, -0.00012969970703125, -2.6702880859375e-05, -2.288818359375e-05, -4.76837158203125e-05, -5.3286406910046935e-05, -3.933906555175781e-06, -0.00010681143612600863, 0.0, -0.0003396272659301758, 0.0, -0.0004673004150390625, 0.0, -0.009924888610839844, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021154403686523438, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.589557647705078e-05, -4.768370445162873e-07, -0.0005320310592651367, -2.741813204920618e-06, -0.0002506923920009285, -1.9073486328125e-06, -0.0002307891845703125, -0.00982666015625, -0.001331329345703125, -0.5506439208984375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"id": "targets", "_type": "Name"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n", "score": -3.891253853835103, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.9722251892089844, -6.29425048828125e-05, -0.0008182525634765625, -3.814697265625e-06, -5.7220458984375e-06, -6.866455078125e-05, -1.9073486328125e-06, -0.012774347327649593, -1.3709068298339844e-05, -9.5367431640625e-06, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.07867622375488281, 0.0, -0.004260658286511898, -6.914138793945312e-05, -0.0010045765666291118, 0.0, -1.33514404296875e-05, -0.0006885528564453125, -1.9073486328125e-06, -5.7220458984375e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -6.079673767089844e-06, -9.536697689327411e-06, -0.0003100631874985993, -5.245203283266164e-06, -0.00785486213862896, -1.33514404296875e-05, -0.0001373291015625, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.0028591156005859375, -6.866455078125e-05, -0.003689050441607833, -5.7220458984375e-06, -0.0001735687255859375, -4.38690185546875e-05, -1.9073486328125e-06, -0.16083717346191406, -0.0007200241088867188, 0.0, -0.04093360900878906, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -0.001520395278930664, -2.0265579223632812e-06, -0.6727895736694336, -5.7220458984375e-06, -0.0020020008087158203, -7.05718994140625e-05, -0.00061798095703125, -0.32828521728515625, -3.24249267578125e-05, -0.0008544921875, -1.9073486328125e-06, -7.402723713312298e-05, -1.358979079668643e-05, -0.0013579416554421186, 0.0, -4.57763671875e-05, -0.0032806396484375, -1.9073486328125e-06, -2.47955322265625e-05, -8.07046890258789e-05, -4.768367489305092e-06, -0.0008485165890306234, -1.1920919860131107e-05, -3.4332275390625e-05, -0.0004978179931640625, -0.0016651153564453125, -5.7220458984375e-06, -0.0005393027677200735, -5.7220458984375e-06, -0.00235748291015625, -2.09808349609375e-05, -0.0025653839111328125, -4.9591064453125e-05, -0.0001811981201171875, -3.62396240234375e-05, -0.0003108978271484375, -0.0012874603271484375, -6.866455078125e-05, -3.24249267578125e-05, -2.09808349609375e-05, -3.4332275390625e-05, -6.484978803200647e-05, -3.814697265625e-06, -0.00010144705447601154, 0.0, -0.00018322467803955078, 0.0, -0.0004711151123046875, 0.0, -0.0064239501953125, -9.5367431640625e-06, -8.96453857421875e-05, -4.57763671875e-05, -9.5367431640625e-06, 0.0, -6.699560617562383e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.022151947021484375, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -4.601478576660156e-05, -4.768370445162873e-07, -0.0005220174789428711, -2.622604142743512e-06, -0.00024568644585087895, -1.9073486328125e-06, -0.0002498626708984375, -0.0100555419921875, -0.0010929107666015625, -0.846125602722168]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "minions", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "minions", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n", "score": -4.062193057952143, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -0.29003071784973145, -9.5367431640625e-06, -0.000545501708984375, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.033428192138671875, 0.0, -0.005691527854651213, -8.463859558105469e-05, -0.0010577439097687602, 0.0, -1.33514404296875e-05, -0.0006313323974609375, -3.814697265625e-06, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.00033700448693707585, -5.483620952873025e-06, -0.008703834377229214, -1.1444091796875e-05, -0.024274826049804688, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027892470359802246, -5.7220458984375e-06, -8.20159912109375e-05, -9.918212890625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015344583662226796, -4.41074053014745e-06, -0.0001068115234375, -0.000148773193359375, -0.47132110595703125, -0.04844093322753906, -0.000453948974609375, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.001740574836730957, -4.172325134277344e-06, -0.0002536773681640625, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007179970853030682, -1.8954096958623268e-05, -0.003390789031982422, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.4807969331741333, -2.1457672119140625e-06, -0.0001850128173828125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.02942800521850586, -8.606910705566406e-05, -0.0438445508480072, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0036287307739257812, -1.9073486328125e-06, -0.0018254518508911133, -7.987022399902344e-06, -0.0008544921875, -1.52587890625e-05, -0.0003643035888671875, -1.9073486328125e-06, -0.005174517631530762, -2.7537309506442398e-05, -0.001579392934218049, 0.0, -0.0001277923583984375, -0.001796722412109375, -1.9073486328125e-06, -1.9073486328125e-05, -7.164478302001953e-05, -2.3841855067985307e-07, -0.017220228910446167, 0.0, -6.866455078125e-05, -0.0001506805419921875, -0.005138397216796875, -9.5367431640625e-06, -0.0003405809111427516, -1.52587890625e-05, -0.0001735687255859375, -4.9591064453125e-05, -0.000759124755859375, -7.62939453125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.000400543212890625, -0.0009765625, -0.00012969970703125, -2.6702880859375e-05, -2.288818359375e-05, -4.76837158203125e-05, -5.3286406910046935e-05, -3.933906555175781e-06, -0.00010681143612600863, 0.0, -0.0003396272659301758, 0.0, -0.0004673004150390625, 0.0, -0.009924888610839844, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021154403686523438, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.589557647705078e-05, -4.768370445162873e-07, -0.0005320310592651367, -2.741813204920618e-06, -0.0002506923920009285, -1.9073486328125e-06, -0.0002307891845703125, -0.00982666015625, -0.001331329345703125, -0.8845548629760742]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "minions", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -4.390338249436674, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -0.29003071784973145, -9.5367431640625e-06, -0.000545501708984375, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.033428192138671875, 0.0, -0.005691527854651213, -8.463859558105469e-05, -0.0010577439097687602, 0.0, -1.33514404296875e-05, -0.0006313323974609375, -3.814697265625e-06, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.00033700448693707585, -5.483620952873025e-06, -0.008703834377229214, -1.1444091796875e-05, -0.024274826049804688, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027892470359802246, -5.7220458984375e-06, -8.20159912109375e-05, -9.918212890625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015344583662226796, -4.41074053014745e-06, -0.0001068115234375, -0.000148773193359375, -0.47132110595703125, -0.04844093322753906, -0.000453948974609375, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.001740574836730957, -4.172325134277344e-06, -0.0002536773681640625, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007179970853030682, -1.8954096958623268e-05, -0.003390789031982422, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.9750233888626099, -1.609325408935547e-05, -0.0014400482177734375, -7.62939453125e-06, -8.20159912109375e-05, 0.0, -0.16356587409973145, -7.855892181396484e-05, -0.07441192865371704, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002361297607421875, 0.0, -0.0012704133987426758, -6.318092346191406e-06, -0.001064300537109375, -1.33514404296875e-05, -0.000331878662109375, -1.9073486328125e-06, -0.007129669189453125, -2.8252539777895436e-05, -0.0014534711372107267, 0.0, -0.0001163482666015625, -0.0021266937255859375, -1.9073486328125e-06, -1.9073486328125e-05, -8.106231689453125e-05, -1.1920928244535389e-07, -0.017999611794948578, 0.0, -6.866455078125e-05, -0.000152587890625, -0.005089759826660156, -9.5367431640625e-06, -0.00038778778980486095, -1.52587890625e-05, -0.000179290771484375, -4.9591064453125e-05, -0.0007476806640625, -7.62939453125e-05, -0.0003147125244140625, -1.71661376953125e-05, -0.0004024505615234375, -0.0009746551513671875, -0.00012969970703125, -2.6702880859375e-05, -2.47955322265625e-05, -4.76837158203125e-05, -5.3405616199597716e-05, -3.933906555175781e-06, -0.00010693064541555941, 0.0, -0.0003434419631958008, 0.0, -0.00046539306640625, 0.0, -0.009840011596679688, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021116256713867188, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.601478576660156e-05, -4.768370445162873e-07, -0.0005321502685546875, -2.741813204920618e-06, -0.0002510499907657504, -1.9073486328125e-06, -0.0002307891845703125, -0.009814262390136719, -0.0013332366943359375, -0.5513143539428711]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "minions", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n", "score": -4.722599334946928, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -0.29003071784973145, -9.5367431640625e-06, -0.000545501708984375, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.033428192138671875, 0.0, -0.005691527854651213, -8.463859558105469e-05, -0.0010577439097687602, 0.0, -1.33514404296875e-05, -0.0006313323974609375, -3.814697265625e-06, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.00033700448693707585, -5.483620952873025e-06, -0.008703834377229214, -1.1444091796875e-05, -0.024274826049804688, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027892470359802246, -5.7220458984375e-06, -8.20159912109375e-05, -9.918212890625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015344583662226796, -4.41074053014745e-06, -0.0001068115234375, -0.000148773193359375, -0.47132110595703125, -0.04844093322753906, -0.000453948974609375, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.001740574836730957, -4.172325134277344e-06, -0.0002536773681640625, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007179970853030682, -1.8954096958623268e-05, -0.003390789031982422, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.9750233888626099, -1.609325408935547e-05, -0.0014400482177734375, -7.62939453125e-06, -8.20159912109375e-05, 0.0, -0.16356587409973145, -7.855892181396484e-05, -0.07441192865371704, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002361297607421875, 0.0, -0.0012704133987426758, -6.318092346191406e-06, -0.001064300537109375, -1.33514404296875e-05, -0.000331878662109375, -1.9073486328125e-06, -0.007129669189453125, -2.8252539777895436e-05, -0.0014534711372107267, 0.0, -0.0001163482666015625, -0.0021266937255859375, -1.9073486328125e-06, -1.9073486328125e-05, -8.106231689453125e-05, -1.1920928244535389e-07, -0.017999611794948578, 0.0, -6.866455078125e-05, -0.000152587890625, -0.005089759826660156, -9.5367431640625e-06, -0.00038778778980486095, -1.52587890625e-05, -0.000179290771484375, -4.9591064453125e-05, -0.0007476806640625, -7.62939453125e-05, -0.0003147125244140625, -1.71661376953125e-05, -0.0004024505615234375, -0.0009746551513671875, -0.00012969970703125, -2.6702880859375e-05, -2.47955322265625e-05, -4.76837158203125e-05, -5.3405616199597716e-05, -3.933906555175781e-06, -0.00010693064541555941, 0.0, -0.0003434419631958008, 0.0, -0.00046539306640625, 0.0, -0.009840011596679688, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021116256713867188, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.601478576660156e-05, -4.768370445162873e-07, -0.0005321502685546875, -2.741813204920618e-06, -0.0002510499907657504, -1.9073486328125e-06, -0.0002307891845703125, -0.009814262390136719, -0.0013332366943359375, -0.883575439453125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "minions", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -4.737425763481646, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.9722251892089844, -6.29425048828125e-05, -0.0008182525634765625, -3.814697265625e-06, -5.7220458984375e-06, -6.866455078125e-05, -1.9073486328125e-06, -0.012774347327649593, -1.3709068298339844e-05, -9.5367431640625e-06, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.07867622375488281, 0.0, -0.004260658286511898, -6.914138793945312e-05, -0.0010045765666291118, 0.0, -1.33514404296875e-05, -0.0006885528564453125, -1.9073486328125e-06, -5.7220458984375e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -6.079673767089844e-06, -9.536697689327411e-06, -0.0003100631874985993, -5.245203283266164e-06, -0.00785486213862896, -1.33514404296875e-05, -0.0001373291015625, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.0028591156005859375, -6.866455078125e-05, -0.003689050441607833, -5.7220458984375e-06, -0.0001735687255859375, -4.38690185546875e-05, -1.9073486328125e-06, -0.16083717346191406, -0.0007200241088867188, 0.0, -0.04093360900878906, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -0.001520395278930664, -2.0265579223632812e-06, -0.7159891128540039, -0.1583995819091797, -0.05451202392578125, 0.0, -0.1624596118927002, -5.006785613659304e-06, -0.0004100799560546875, -0.000873565673828125, -0.3864173889160156, -0.10610294342041016, -0.000682830810546875, -2.288818359375e-05, -3.4332275390625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0007706880569458008, -6.318092346191406e-06, -0.00038909912109375, -0.0002727508544921875, -1.33514404296875e-05, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0006159538170322776, -2.2172682292875834e-05, -0.0033560991287231445, -2.861022494471399e-06, -3.814697265625e-06, -2.288818359375e-05, -9.5367431640625e-06, -0.44169068336486816, -2.1457672119140625e-06, -0.000156402587890625, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -0.029218196868896484, -9.369850158691406e-05, -0.04407533258199692, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0037059783935546875, -1.9073486328125e-06, -0.0017129182815551758, -1.0013580322265625e-05, -0.0009212493896484375, -1.71661376953125e-05, -0.0003566741943359375, -1.9073486328125e-06, -0.0051032304763793945, -2.8014143026666716e-05, -0.0015899856807664037, 0.0, -0.000125885009765625, -0.0021677017211914062, -1.9073486328125e-06, -1.71661376953125e-05, -7.224082946777344e-05, -1.1920928244535389e-07, -0.018533838912844658, 0.0, -6.67572021484375e-05, -0.000148773193359375, -0.004904747009277344, -9.5367431640625e-06, -0.0003981589979957789, -1.52587890625e-05, -0.00017547607421875, -4.9591064453125e-05, -0.000762939453125, -7.62939453125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.0004024505615234375, -0.0010013580322265625, -0.00014495849609375, -2.86102294921875e-05, -1.9073486328125e-05, -4.38690185546875e-05, -5.233271804172546e-05, -3.933906555175781e-06, -0.00010478487820364535, 0.0, -0.0003319978713989258, 0.0, -0.000469207763671875, 0.0, -0.009961128234863281, -7.62939453125e-06, -0.0001049041748046875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021221160888671875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.589557647705078e-05, -3.576278118089249e-07, -0.0005339384078979492, -2.741813204920618e-06, -0.0002502156130503863, -1.9073486328125e-06, -0.0002307891845703125, -0.009823799133300781, -0.0013294219970703125, -0.5598716735839844]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Multi-Shot", "hole1": 4, "_type": "Template14"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"id": "targets", "_type": "Name"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Multi-Shot", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -4.762915148873496, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -1.7133216857910156, -6.866455078125e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -0.00014710421964991838, -1.9073486328125e-06, -0.034648895263671875, -0.0001068115234375, -9.1552734375e-05, 0.0, -0.0003052949905395508, 0.0, -1.1444091796875e-05, -0.0001277923583984375, -5.7220458984375e-05, -9.655952453613281e-06, -1.1920928244535389e-07, -0.34055233001708984, -8.96453857421875e-05, -0.000644683837890625, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.018480539321899414, -1.7404556274414062e-05, -1.9073486328125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -0.3010215759277344, 0.0, -0.008035778068006039, -6.520748138427734e-05, -0.0013225077418610454, 0.0, -9.5367431640625e-06, -0.000942230224609375, -1.9073486328125e-06, -4.9591064453125e-05, -9.5367431640625e-06, -8.392333984375e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.0003263948892708868, -5.722038622479886e-06, -0.0072769527323544025, -1.1444091796875e-05, -0.0002269744873046875, -3.814697265625e-06, -5.7220458984375e-05, 0.0, -0.0028142929077148438, -7.43865966796875e-05, -0.0045011043548583984, -3.814697265625e-06, -0.0001277923583984375, -4.00543212890625e-05, -1.9073486328125e-06, -0.16527080535888672, -0.0006531476974487305, 0.0, -0.04964923858642578, -2.47955322265625e-05, -5.7220458984375e-06, 0.0, -0.0015404224395751953, -2.0265579223632812e-06, -0.7031183242797852, -5.7220458984375e-06, -0.002004861831665039, -6.866455078125e-05, -0.000614166259765625, -0.3215007781982422, -3.24249267578125e-05, -0.000865936279296875, -1.9073486328125e-06, -7.462325447704643e-05, -1.358979079668643e-05, -0.001378893735818565, 0.0, -4.57763671875e-05, -0.003276824951171875, -1.9073486328125e-06, -2.47955322265625e-05, -8.07046890258789e-05, -4.768367489305092e-06, -0.0008505431469529867, -1.1920919860131107e-05, -3.4332275390625e-05, -0.0004978179931640625, -0.0016641616821289062, -5.7220458984375e-06, -0.0005391835584305227, -5.7220458984375e-06, -0.0023517608642578125, -2.09808349609375e-05, -0.002410888671875, -5.14984130859375e-05, -0.000179290771484375, -3.62396240234375e-05, -0.0003147125244140625, -0.0012912750244140625, -6.67572021484375e-05, -3.24249267578125e-05, -2.09808349609375e-05, -3.4332275390625e-05, -6.473057874245569e-05, -3.814697265625e-06, -0.00010144705447601154, 0.0, -0.00018513202667236328, 0.0, -0.0004711151123046875, 0.0, -0.006488800048828125, -9.5367431640625e-06, -8.96453857421875e-05, -4.57763671875e-05, -9.5367431640625e-06, 0.0, -6.699560617562383e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.022184371948242188, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -4.410743713378906e-05, -4.768370445162873e-07, -0.0005239248275756836, -2.622604142743512e-06, -0.00024532884708605707, -1.9073486328125e-06, -0.00025177001953125, -0.010057449340820312, -0.0010929107666015625, -0.5755205154418945]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"body": [{"targets": [{"id": "minion", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "minions", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole0": {"id": "minions", "_type": "Name"}, "hole1": "remove", "_type": "Template44"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -4.877903013614585, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -1.435701608657837, -2.5033950805664062e-05, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, 0.0, -0.04137420654296875, 0.0, -0.002491115825250745, -6.711483001708984e-05, -0.0009533166303299367, 0.0, -1.33514404296875e-05, -0.0008182525634765625, -3.814697265625e-06, -6.29425048828125e-05, -9.5367431640625e-06, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.1205610462639015e-05, -0.0003324745048303157, -5.6028297876764555e-06, -0.0075807697139680386, -1.1444091796875e-05, -0.024036407470703125, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027615904808044434, -5.7220458984375e-06, -7.82012939453125e-05, -9.5367431640625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.001565929502248764, -4.41074053014745e-06, -0.0001049041748046875, -0.0001506805419921875, -0.47339439392089844, -0.048686981201171875, -0.0004520416259765625, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.0017415285110473633, -4.172325134277344e-06, -0.0002498626708984375, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007199044339358807, -1.9073304429184645e-05, -0.003391742706298828, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.4805690050125122, -2.1457672119140625e-06, -0.0001850128173828125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.02937459945678711, -8.606910705566406e-05, -0.04381322115659714, -1.1920928244535389e-07, -1.1444091796875e-05, -0.003627777099609375, -1.9073486328125e-06, -0.0018254518508911133, -7.987022399902344e-06, -0.0008544921875, -1.52587890625e-05, -0.0003643035888671875, -1.9073486328125e-06, -0.005166888236999512, -2.7537309506442398e-05, -0.0015786790754646063, 0.0, -0.0001277923583984375, -0.001800537109375, -1.9073486328125e-06, -1.9073486328125e-05, -7.164478302001953e-05, -2.3841855067985307e-07, -0.017238803207874298, 0.0, -6.866455078125e-05, -0.0001506805419921875, -0.005141258239746094, -9.5367431640625e-06, -0.0003405809111427516, -1.52587890625e-05, -0.0001735687255859375, -4.9591064453125e-05, -0.000759124755859375, -7.62939453125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.000400543212890625, -0.0009765625, -0.00012969970703125, -2.6702880859375e-05, -2.47955322265625e-05, -4.76837158203125e-05, -5.3286406910046935e-05, -3.933906555175781e-06, -0.00010693064541555941, 0.0, -0.0003415346145629883, 0.0, -0.0004673004150390625, 0.0, -0.009922027587890625, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021150588989257812, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.589557647705078e-05, -4.768370445162873e-07, -0.0005320310592651367, -2.741813204920618e-06, -0.0002506923920009285, -1.9073486328125e-06, -0.0002307891845703125, -0.009827613830566406, -0.001331329345703125, -0.5498991012573242]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -5.127094504447307, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -3.5999069213867188, -0.0003337860107421875, -0.000164031982421875, -0.00032806396484375, -0.0011138916015625, -7.62939453125e-06, -0.1252957582473755, -4.768370445162873e-07, -0.0009708404541015625, -0.012208938598632812, -1.1444091796875e-05, -1.9073486328125e-06, -0.0005359649658203125, 0.0, -0.026883244514465332, -7.069110870361328e-05, -0.0012048481730744243, 0.0, -5.7220458984375e-06, -0.00029754638671875, -1.9073486328125e-06, -4.1961669921875e-05, -1.71661376953125e-05, -3.24249267578125e-05, 0.0, -6.079673767089844e-06, -1.156323378381785e-05, -0.0003063676704186946, -8.583047019783407e-06, -0.015005274675786495, -9.5367431640625e-06, -3.4332275390625e-05, -0.0010242462158203125, 0.0, -0.000133514404296875, 0.0, -0.0014047493459656835, -4.470248313737102e-05, -8.213178080040962e-05, 0.0, -0.000110626220703125, -0.0043735504150390625, -1.9073486328125e-06, -2.09808349609375e-05, -0.0001270771026611328, -3.3378546504536644e-06, -0.0003917200956493616, -6.0796710386057384e-06, -0.000164031982421875, -0.0001277923583984375, -0.0021963119506835938, -9.5367431640625e-06, -0.00041186806629411876, -7.62939453125e-06, -0.0025577545166015625, -1.9073486328125e-05, -0.00272369384765625, -4.57763671875e-05, -0.000164031982421875, -4.00543212890625e-05, -0.0003147125244140625, -0.0014247894287109375, -6.4849853515625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -3.4332275390625e-05, -6.556503649335355e-05, -3.814697265625e-06, -9.512896940577775e-05, 0.0, -0.00018513202667236328, 0.0, -0.000499725341796875, 0.0, -0.006847381591796875, -9.5367431640625e-06, -9.1552734375e-05, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -6.723401747876778e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.0224456787109375, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -4.601478576660156e-05, -4.768370445162873e-07, -0.0005276203155517578, -2.622604142743512e-06, -0.0002446136495564133, -1.9073486328125e-06, -0.0002536773681640625, -0.010089874267578125, -0.0011043548583984375, -0.5884923934936523]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Multi-Shot", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"body": [{"test": {"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "IsNot"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DEMON", "_type": "Attribute"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "iter": {"id": "targets", "_type": "Name"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 25, 186, "targets", "<EOS>", 332, 133, 173, 21, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 13, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            if minion.card.minion_type is not MINION_TYPE.DEMON:\n                minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -5.145504465575804, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.9722251892089844, -6.29425048828125e-05, -0.0008182525634765625, -3.814697265625e-06, -5.7220458984375e-06, -6.866455078125e-05, -1.9073486328125e-06, -0.012774347327649593, -1.3709068298339844e-05, -9.5367431640625e-06, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.07867622375488281, 0.0, -0.004260658286511898, -6.914138793945312e-05, -0.0010045765666291118, 0.0, -1.33514404296875e-05, -0.0006885528564453125, -1.9073486328125e-06, -5.7220458984375e-05, -9.5367431640625e-06, -3.24249267578125e-05, 0.0, -6.079673767089844e-06, -9.536697689327411e-06, -0.0003100631874985993, -5.245203283266164e-06, -0.00785486213862896, -1.33514404296875e-05, -0.0001373291015625, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.0028591156005859375, -6.866455078125e-05, -0.003689050441607833, -5.7220458984375e-06, -0.0001735687255859375, -4.38690185546875e-05, -1.9073486328125e-06, -0.16083717346191406, -0.0007200241088867188, 0.0, -0.04093360900878906, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -0.001520395278930664, -2.0265579223632812e-06, -0.6727895736694336, -5.7220458984375e-06, -0.0020020008087158203, -7.05718994140625e-05, -0.00061798095703125, -1.3085956573486328, -5.14984130859375e-05, -0.0767364501953125, -9.34600830078125e-05, -0.0038585662841796875, -1.9073486328125e-06, -0.0010662078857421875, -1.33514404296875e-05, -0.0006999969482421875, -1.52587890625e-05, -0.0011277198791503906, -6.4373016357421875e-06, -0.0019489408005028963, -7.62939453125e-06, -0.06682520359754562, -3.814697265625e-06, -0.000835418701171875, -0.20346641540527344, -5.7220458984375e-06, -0.026885986328125, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.14133071899414062, -7.05718994140625e-05, -0.00395965576171875, -0.004608154296875, 0.0, -0.0034427642822265625, -3.814697265625e-06, -0.0010543751996010542, -0.00021872676734346896, -2.932505594799295e-05, 0.0, -3.814697265625e-05, -0.0040283203125, -1.9073486328125e-06, -4.76837158203125e-05, -7.11679458618164e-05, -3.933898824470816e-06, -0.0005059154354967177, -1.0967240996251348e-05, -7.43865966796875e-05, -0.000164031982421875, -0.0049591064453125, -1.33514404296875e-05, -0.00048100942512974143, -9.5367431640625e-06, -0.0022563934326171875, -1.9073486328125e-05, -0.0028591156005859375, -4.1961669921875e-05, -0.0001773834228515625, -4.57763671875e-05, -0.000324249267578125, -0.00146484375, -7.2479248046875e-05, -3.0517578125e-05, -1.9073486328125e-05, -3.62396240234375e-05, -6.270402082009241e-05, -3.814697265625e-06, -9.512896940577775e-05, 0.0, -0.00018131732940673828, 0.0, -0.0005054473876953125, 0.0, -0.00753021240234375, -1.1444091796875e-05, -9.1552734375e-05, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -6.735322676831856e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.022569656372070312, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -4.601478576660156e-05, -3.576278118089249e-07, -0.0005276203155517578, -2.622604142743512e-06, -0.00024568644585087895, -1.9073486328125e-06, -0.0002536773681640625, -0.010119438171386719, -0.0011157989501953125, -0.5785751342773438]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Multi-Shot", "hole1": 4, "_type": "Template14"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"_type": "Template50"}, "attr": "find_enemy_minion_battlecry_target", "_type": "Attribute"}, "args": [{"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, {"body": {"_type": "Template79"}, "args": {"hole0": "x", "_type": "Template26"}, "_type": "Lambda"}], "_type": "Call"}, "_type": "Assign"}, {"targets": [{"id": "target", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "target", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template59"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "can_use", "_type": "FunctionDef"}], "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 139, 204, "Multi-Shot", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 40, "find_enemy_minion_battlecry_target", "<EOS>", 321, 65, 156, 50, "game", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 62, 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(\n            player.game, lambda x: True)\n        target = game.random_choice(targets)\n        target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "score": -5.148745453294239, "score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -1.7133216857910156, -6.866455078125e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -0.00014710421964991838, -1.9073486328125e-06, -0.034648895263671875, -0.0001068115234375, -9.1552734375e-05, 0.0, -0.0003052949905395508, 0.0, -1.1444091796875e-05, -0.0001277923583984375, -5.7220458984375e-05, -9.655952453613281e-06, -1.1920928244535389e-07, -0.34055233001708984, -8.96453857421875e-05, -0.000644683837890625, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.018480539321899414, -1.7404556274414062e-05, -1.9073486328125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -1.3844280242919922, -0.046408772468566895, -0.0003719329833984375, -0.0001850128173828125, -0.0017824172973632812, -1.1444091796875e-05, -0.0034942626953125, -0.005465011578053236, -1.1920928244535389e-07, -0.00023651123046875, -4.57763671875e-05, -0.0001010894775390625, -9.72747802734375e-05, -0.0024265034589916468, -2.09808349609375e-05, -0.3840160369873047, -0.0043048858642578125, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.003209829330444336, -1.6689286894688848e-06, -7.62939453125e-06, -3.4332275390625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001773834228515625, -1.52587890625e-05, -0.0002204179036198184, -9.298280929215252e-06, -0.00288999080657959, -2.1457672119140625e-06, -1.9073486328125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -0.058231353759765625, -9.655952453613281e-06, -0.0016078948974609375, -6.29425048828125e-05, -9.5367431640625e-05, 0.0, -0.08550465106964111, -1.883488948806189e-05, -0.002626413945108652, 0.0, -8.7738037109375e-05, -0.015344619750976562, 0.0, -1.1444091796875e-05, -9.59634780883789e-05, -2.3841855067985307e-07, -0.0032095613423734903, -2.1457672119140625e-06, -3.4332275390625e-05, -0.0008029937744140625, -0.0010080337524414062, -3.814697265625e-06, -0.0009337663068436086, -5.7220458984375e-06, -0.000316619873046875, -2.86102294921875e-05, -0.0014801025390625, -5.14984130859375e-05, -0.0001735687255859375, -2.6702880859375e-05, -0.000537872314453125, -0.001007080078125, -7.82012939453125e-05, -2.288818359375e-05, -2.6702880859375e-05, -4.00543212890625e-05, -6.65186089463532e-05, -3.814697265625e-06, -9.834760567173362e-05, 0.0, -0.0002557039260864258, 0.0, -0.0004825592041015625, 0.0, -0.007350921630859375, -7.62939453125e-06, -9.5367431640625e-05, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.057188486214727e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.02159881591796875, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -4.220008850097656e-05, -4.768370445162873e-07, -0.0005280971527099609, -2.622604142743512e-06, -0.0002497391833458096, -1.9073486328125e-06, -0.000247955322265625, -0.009960174560546875, -0.0011768341064453125, -0.5351848602294922]}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power Word Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWord"}, "choice_history": [121, 200, "Power", "Word", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", "Word", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWord(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n        player.draw()\n", "score": -3.422202614376033, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -0.4252879321575165, -3.932946128770709e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -4.00543212890625e-05, -0.00025177001953125, -9.5367431640625e-06, -6.4849853515625e-05, -5.7220458984375e-05, -2.09808349609375e-05, -0.009576797485351562, -1.9073486328125e-05, -2.47955322265625e-05, -1.1444026313256472e-05, -1.9550323486328125e-05, -0.5913026332855225, -0.004336357116699219, -0.0011992439394816756, 0.0, -0.21950435638427734, -8.7738037109375e-05, -1.1444091796875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.00015652179718017578, -3.814697265625e-06, -0.11622536182403564, 0.0, -0.000644683837890625, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0001544952392578125, -7.82012939453125e-05, -0.00029754638671875, -0.16921448707580566, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -8.07046890258789e-05, -1.9073486328125e-06, -0.007747650146484375, -0.0004177093505859375, -0.0825653076171875, -1.52587890625e-05, -0.00054168701171875, -0.46997469663619995, -1.9073486328125e-06, -0.00030517578125, -0.0017795562744140625, -0.0004119873046875, -0.0001087188720703125, -0.030066847801208496, -1.9073486328125e-06, -0.004196524620056152, 0.0, -0.000102996826171875, -0.000225067138671875, -4.9591064453125e-05, -0.003299713134765625, -9.1552734375e-05, -0.0002899169921875, -0.0004355907440185547, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power : Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWord"}, "choice_history": [121, 200, "Power", "Word", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", ":", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWord(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power : Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n        player.draw()\n", "score": -3.6381297383994706, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -0.4252879321575165, -3.932946128770709e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -4.00543212890625e-05, -0.00025177001953125, -9.5367431640625e-06, -6.4849853515625e-05, -5.7220458984375e-05, -2.09808349609375e-05, -0.009576797485351562, -1.9073486328125e-05, -2.47955322265625e-05, -1.1444026313256472e-05, -1.9550323486328125e-05, -0.80722975730896, -0.004336357116699219, -0.0011992439394816756, 0.0, -0.21950435638427734, -8.7738037109375e-05, -1.1444091796875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.00015652179718017578, -3.814697265625e-06, -0.11622536182403564, 0.0, -0.000644683837890625, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0001544952392578125, -7.82012939453125e-05, -0.00029754638671875, -0.16921448707580566, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -8.07046890258789e-05, -1.9073486328125e-06, -0.007747650146484375, -0.0004177093505859375, -0.0825653076171875, -1.52587890625e-05, -0.00054168701171875, -0.46997469663619995, -1.9073486328125e-06, -0.00030517578125, -0.0017795562744140625, -0.0004119873046875, -0.0001087188720703125, -0.030066847801208496, -1.9073486328125e-06, -0.004196524620056152, 0.0, -0.000102996826171875, -0.000225067138671875, -4.9591064453125e-05, -0.003299713134765625, -9.1552734375e-05, -0.0002899169921875, -0.0004355907440185547, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power Word Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWordShield"}, "choice_history": [121, 200, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", "Word", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n        player.draw()\n", "score": -3.904789308598879, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -1.0639945268630981, -6.127181404735893e-05, -1.5242258086800575e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.91278076171875e-05, -0.0002231597900390625, -7.62939453125e-06, -6.4849853515625e-05, -4.9591064453125e-05, -1.71661376953125e-05, -0.010488510131835938, -1.52587890625e-05, -2.86102294921875e-05, -8.940656698541716e-06, -1.990795135498047e-05, -0.46029818058013916, -0.00024521350860595703, -0.0014243109617382288, 0.0, -0.19545936584472656, -8.0108642578125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -0.00015842914581298828, -1.9073486328125e-06, -0.1217118501663208, 0.0, -0.0006389617919921875, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.000156402587890625, -7.62939453125e-05, -0.0002956390380859375, -0.1665661334991455, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.288818359375e-05, -7.87973403930664e-05, -1.9073486328125e-06, -0.007818222045898438, -0.00041961669921875, -0.08300971984863281, -1.52587890625e-05, -0.00054168701171875, -0.46853816509246826, -1.9073486328125e-06, -0.00030517578125, -0.001796722412109375, -0.0004100799560546875, -0.0001087188720703125, -0.02998673915863037, -1.9073486328125e-06, -0.00420224666595459, 0.0, -0.000102996826171875, -0.000225067138671875, -4.9591064453125e-05, -0.00330352783203125, -9.1552734375e-05, -0.0002899169921875, -0.0004355907440185547, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power : Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWordShield"}, "choice_history": [121, 200, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", ":", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power : Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n        player.draw()\n", "score": -4.4430831470998555, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -1.0639945268630981, -6.127181404735893e-05, -1.5242258086800575e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.91278076171875e-05, -0.0002231597900390625, -7.62939453125e-06, -6.4849853515625e-05, -4.9591064453125e-05, -1.71661376953125e-05, -0.010488510131835938, -1.52587890625e-05, -2.86102294921875e-05, -8.940656698541716e-06, -1.990795135498047e-05, -0.9985920190811157, -0.00024521350860595703, -0.0014243109617382288, 0.0, -0.19545936584472656, -8.0108642578125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -0.00015842914581298828, -1.9073486328125e-06, -0.1217118501663208, 0.0, -0.0006389617919921875, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.000156402587890625, -7.62939453125e-05, -0.0002956390380859375, -0.1665661334991455, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.288818359375e-05, -7.87973403930664e-05, -1.9073486328125e-06, -0.007818222045898438, -0.00041961669921875, -0.08300971984863281, -1.52587890625e-05, -0.00054168701171875, -0.46853816509246826, -1.9073486328125e-06, -0.00030517578125, -0.001796722412109375, -0.0004100799560546875, -0.0001087188720703125, -0.02998673915863037, -1.9073486328125e-06, -0.00420224666595459, 0.0, -0.000102996826171875, -0.000225067138671875, -4.9591064453125e-05, -0.00330352783203125, -9.1552734375e-05, -0.0002899169921875, -0.0004355907440185547, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power Word Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Health", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "Health", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWord"}, "choice_history": [121, 200, "Power", "Word", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", "Word", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "Health", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Health", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWord(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(BuffUntil(Health(), TurnEnded()))\n        player.draw()\n", "score": -5.589484027765025, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -0.4252879321575165, -3.932946128770709e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -4.00543212890625e-05, -0.00025177001953125, -9.5367431640625e-06, -6.4849853515625e-05, -5.7220458984375e-05, -2.09808349609375e-05, -0.009576797485351562, -1.9073486328125e-05, -2.47955322265625e-05, -1.1444026313256472e-05, -1.9550323486328125e-05, -0.5913026332855225, -0.004336357116699219, -0.0011992439394816756, 0.0, -0.21950435638427734, -8.7738037109375e-05, -1.1444091796875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.00015652179718017578, -3.814697265625e-06, -0.11622536182403564, 0.0, -0.000644683837890625, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0001544952392578125, -7.82012939453125e-05, -0.00029754638671875, -0.16921448707580566, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -8.07046890258789e-05, -1.9073486328125e-06, -0.007747650146484375, -0.0004177093505859375, -0.0825653076171875, -1.52587890625e-05, -0.00054168701171875, -1.216522455215454, 0.0, -0.0002689361572265625, -0.001659393310546875, -9.34600830078125e-05, -0.0029249191284179688, 0.0, -0.03566873073577881, -0.00032150745391845703, -8.678092126501724e-05, -0.000423431396484375, -0.0009212493896484375, -3.814697265625e-06, -0.30309391021728516, -0.00020599212439265102, -0.00569915771484375, -3.814697265625e-06, -0.2536674439907074, -0.8263405561447144, -3.504698179312982e-05, -0.00244903564453125, -7.62939453125e-06, -0.027593612670898438, -9.1552734375e-05, -0.000308990478515625, -0.0002317427279194817, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Power : Shield", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Health", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "Health", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "PowerWord"}, "choice_history": [121, 200, "Power", "Word", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Power", " ", ":", " ", "Shield", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "Health", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Health", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWord(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power : Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(BuffUntil(Health(), TurnEnded()))\n        player.draw()\n", "score": -5.805411151788462, "score_history": [-1.268228530883789, -0.0002918243408203125, -4.768370445162873e-07, -0.011854052543640137, -0.4252879321575165, -3.932946128770709e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -4.00543212890625e-05, -0.00025177001953125, -9.5367431640625e-06, -6.4849853515625e-05, -5.7220458984375e-05, -2.09808349609375e-05, -0.009576797485351562, -1.9073486328125e-05, -2.47955322265625e-05, -1.1444026313256472e-05, -1.9550323486328125e-05, -0.80722975730896, -0.004336357116699219, -0.0011992439394816756, 0.0, -0.21950435638427734, -8.7738037109375e-05, -1.1444091796875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.00015652179718017578, -3.814697265625e-06, -0.11622536182403564, 0.0, -0.000644683837890625, -1.9073486328125e-05, -0.0001373291015625, -1.71661376953125e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0001544952392578125, -7.82012939453125e-05, -0.00029754638671875, -0.16921448707580566, 0.0, -1.3470649719238281e-05, 0.0, -0.00014829634164925665, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -8.07046890258789e-05, -1.9073486328125e-06, -0.007747650146484375, -0.0004177093505859375, -0.0825653076171875, -1.52587890625e-05, -0.00054168701171875, -1.216522455215454, 0.0, -0.0002689361572265625, -0.001659393310546875, -9.34600830078125e-05, -0.0029249191284179688, 0.0, -0.03566873073577881, -0.00032150745391845703, -8.678092126501724e-05, -0.000423431396484375, -0.0009212493896484375, -3.814697265625e-06, -0.30309391021728516, -0.00020599212439265102, -0.00569915771484375, -3.814697265625e-06, -0.2536674439907074, -0.8263405561447144, -3.504698179312982e-05, -0.00244903564453125, -7.62939453125e-06, -0.027593612670898438, -9.1552734375e-05, -0.000308990478515625, -0.0002317427279194817, 0.0]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "WARRIOR", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "character", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "character", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    character.increase_health(1)\n", "score": -6.9535920712641754, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -0.6339273452758789, -2.47955322265625e-05, -0.0021953582763671875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006875991821289062, 0.0, -0.2816963195800781, 0.0, -0.4098701477050781, -0.0042705535888671875, -0.009273529052734375, -2.288818359375e-05, -0.08895301818847656, -1.9073486328125e-06, -0.0034694671630859375, -4.57763671875e-05, -1.2737879753112793, -1.9073486328125e-06, -0.024549484252929688, -1.1444091796875e-05, -0.04181957244873047, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.8867759704589844, -1.9073486328125e-06, -0.3787720203399658, 0.0, -0.20606069266796112, 0.0, -0.02398681640625]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "WARRIOR", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "target", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    target.increase_health(1)\n", "score": -7.385473826854614, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -0.6339273452758789, -2.47955322265625e-05, -0.0021953582763671875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006875991821289062, 0.0, -0.2816963195800781, 0.0, -0.4098701477050781, -0.0042705535888671875, -0.009273529052734375, -2.288818359375e-05, -0.08895301818847656, -1.9073486328125e-06, -0.0034694671630859375, -4.57763671875e-05, -1.2737879753112793, -1.9073486328125e-06, -0.024549484252929688, -1.1444091796875e-05, -0.04181957244873047, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.5314030647277832, 0.0, -0.2004372924566269, 0.0, -0.1762200891971588, 0.0, -0.019418716430664062]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "PALADIN", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "character", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "character", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    character.increase_health(1)\n", "score": -7.3884940062543905, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.4666615724563599, 0.0, -0.20395004749298096, 0.0, -0.0006262062815949321, 0.0, -0.00160980224609375, -0.0640859603881836, -5.7220458984375e-06, -0.0009601116180419922, -8.58306884765625e-05, -0.00051116943359375, -0.0019092559814453125, -8.20159912109375e-05, -5.91278076171875e-05, -0.6772458553314209, -1.1920928244535389e-07, -0.01502227783203125, -0.004077911376953125, -0.0005359649658203125, -0.000247955322265625, -0.0018711090087890625, -9.34600830078125e-05, -0.0036468505859375, -5.7220458984375e-06, -0.009012222290039062, -1.33514404296875e-05, -0.007450103759765625, -3.814697265625e-06, -0.019646883010864258, -2.4318689611391164e-05, -0.029885411262512207, -1.33514404296875e-05, -0.00873419176787138, -7.62939453125e-06, -0.0001354217529296875, -0.6390933990478516, -2.47955322265625e-05, -0.0020294189453125, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006923675537109375, 0.0, -0.2801847457885742, 0.0, -0.4129610061645508, -0.0043392181396484375, -0.009282112121582031, -2.288818359375e-05, -0.08968830108642578, -1.9073486328125e-06, -0.0034637451171875, -4.57763671875e-05, -1.2746262550354004, -1.9073486328125e-06, -0.024242401123046875, -1.1444091796875e-05, -0.041271209716796875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.8893470764160156, -1.9073486328125e-06, -0.376812219619751, 0.0, -0.20620492100715637, 0.0, -0.023983001708984375]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "Choice", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "WARRIOR", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "Choice", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            Choice)\n    player.draw()\n\n\nplayer.draw()\n", "score": -7.549772465556053, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -0.6339273452758789, -2.47955322265625e-05, -0.0021953582763671875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006875991821289062, 0.0, -0.2816963195800781, 0.0, -0.4098701477050781, -0.0042705535888671875, -0.009273529052734375, -2.288818359375e-05, -0.08895301818847656, -1.9073486328125e-06, -0.0034694671630859375, -4.57763671875e-05, -1.301462173461914, -0.015217065811157227, -0.5819635391235352, -1.9073486328125e-06, -0.8794698715209961, -0.000377655029296875, -0.12851905822753906, -0.0005748271942138672, -2.2649765014648438e-06, -0.5189189910888672, -1.33514404296875e-05, -0.001842498779296875, -0.0003643035888671875, -0.0029048919677734375, -0.00032341480255126953, -1.9073486328125e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "PRIEST", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "character", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "character", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    character.increase_health(1)\n", "score": -7.574187112866603, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.8329182863235474, -5.7220458984375e-06, -0.01601278781890869, -1.9073486328125e-06, -0.00034022319596260786, 0.0, -0.0019741058349609375, -0.06730842590332031, -3.814697265625e-06, -0.0010269880294799805, -8.392333984375e-05, -0.000545501708984375, -0.001678466796875, -8.20159912109375e-05, -6.103515625e-05, -0.6729637384414673, -2.3841855067985307e-07, -0.017711639404296875, -0.004387855529785156, -0.0005321502685546875, -0.0002346038818359375, -0.0019016265869140625, -9.1552734375e-05, -0.00337982177734375, -3.814697265625e-06, -0.009138107299804688, -1.33514404296875e-05, -0.008229255676269531, -3.814697265625e-06, -0.0200045108795166, -2.4557106371503323e-05, -0.03026401996612549, -1.71661376953125e-05, -0.008222075179219246, -7.62939453125e-06, -0.000133514404296875, -0.638758659362793, -2.47955322265625e-05, -0.002696990966796875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006885528564453125, 0.0, -0.2819089889526367, 0.0, -0.41870880126953125, -0.0043239593505859375, -0.009192466735839844, -2.288818359375e-05, -0.08853340148925781, -1.9073486328125e-06, -0.0034961700439453125, -4.38690185546875e-05, -1.2749638557434082, -1.9073486328125e-06, -0.0242919921875, -1.1444091796875e-05, -0.041355133056640625, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.8864741325378418, -1.9073486328125e-06, -0.3780233860015869, 0.0, -0.20539890229701996, 0.0, -0.024013519287109375]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "PALADIN", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "target", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    target.increase_health(1)\n", "score": -7.813868499257282, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.4666615724563599, 0.0, -0.20395004749298096, 0.0, -0.0006262062815949321, 0.0, -0.00160980224609375, -0.0640859603881836, -5.7220458984375e-06, -0.0009601116180419922, -8.58306884765625e-05, -0.00051116943359375, -0.0019092559814453125, -8.20159912109375e-05, -5.91278076171875e-05, -0.6772458553314209, -1.1920928244535389e-07, -0.01502227783203125, -0.004077911376953125, -0.0005359649658203125, -0.000247955322265625, -0.0018711090087890625, -9.34600830078125e-05, -0.0036468505859375, -5.7220458984375e-06, -0.009012222290039062, -1.33514404296875e-05, -0.007450103759765625, -3.814697265625e-06, -0.019646883010864258, -2.4318689611391164e-05, -0.029885411262512207, -1.33514404296875e-05, -0.00873419176787138, -7.62939453125e-06, -0.0001354217529296875, -0.6390933990478516, -2.47955322265625e-05, -0.0020294189453125, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006923675537109375, 0.0, -0.2801847457885742, 0.0, -0.4129610061645508, -0.0043392181396484375, -0.009282112121582031, -2.288818359375e-05, -0.08968830108642578, -1.9073486328125e-06, -0.0034637451171875, -4.57763671875e-05, -1.2746262550354004, -1.9073486328125e-06, -0.024242401123046875, -1.1444091796875e-05, -0.041271209716796875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.5264549255371094, 0.0, -0.19979487359523773, 0.0, -0.17605319619178772, 0.0, -0.019420623779296875]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Eq"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "WARRIOR", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"value": {"hole2": 1, "hole0": {"id": "character", "_type": "Name"}, "hole1": "increase_health", "_type": "Template37"}, "_type": "Expr"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 8, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "character", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type == MINION_TYPE.BEAST and self.target in\n            targets)\n    character.increase_health(1)\n", "score": -7.835823425977615, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -1.4264030456542969, 0.0, -0.011301040649414062, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -0.000423431396484375, 0.0, -0.356634259223938, 0.0, -0.41118431091308594, -0.006256103515625, -0.0104522705078125, -2.288818359375e-05, -0.08648967742919922, -1.9073486328125e-06, -0.0041561126708984375, -3.814697265625e-05, -1.2834229469299316, -1.9073486328125e-06, -0.02624034881591797, -1.1444091796875e-05, -0.04317665100097656, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.8644301891326904, -1.9073486328125e-06, -0.3975071907043457, 0.0, -0.20049171149730682, 0.0, -0.023769378662109375]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "minion", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"_type": "Template52"}, "ops": [{"_type": "In"}], "comparators": [{"id": "Choice", "_type": "Name"}], "_type": "Compare"}], "_type": "BoolOp"}, "args": {"hole0": "minion", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "WARRIOR", "hole1": 1, "hole3": "FREE", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole7": "filter_func", "hole0": "Power Word Shield"}, {"body": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Health", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "Health", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "PowerWordShield", "_type": "ClassDef"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "Choice", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "Health", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Health", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            Choice)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.Health(BuffUntil(Health(), TurnEnded()))\n\n\nplayer.draw()\n", "score": -8.119835584761823, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -0.6339273452758789, -2.47955322265625e-05, -0.0021953582763671875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006875991821289062, 0.0, -0.2816963195800781, 0.0, -0.4098701477050781, -0.0042705535888671875, -0.009273529052734375, -2.288818359375e-05, -0.08895301818847656, -1.9073486328125e-06, -0.0034694671630859375, -4.57763671875e-05, -1.301462173461914, -0.015217065811157227, -0.9078893661499023, -2.6702880859375e-05, -0.011991620063781738, 0.0, -0.0006542205810546875, -0.18012237548828125, -0.0036602020263671875, -0.009561538696289062, -8.96453857421875e-05, -0.0001316070556640625, -0.4112100303173065, 0.0, -0.000125885009765625, -0.0032405853271484375, -0.0001220703125, -0.005837440490722656, 0.0, -0.0133819580078125, -0.00037157529732212424, -0.00018905647448264062, -0.0001964569091796875, -0.0011348724365234375, -1.71661376953125e-05, -0.2594585418701172, -0.00013017626770306379, -0.010206222534179688, -7.62939453125e-06, -0.13864175975322723, -0.3186955451965332, -1.358979079668643e-05, -0.3847990036010742, -4.1961669921875e-05, -0.018522262573242188, -0.0002651214599609375, -0.0041255950927734375, -0.00047981739044189453, 0.0]}, {"model_output": {"body": [], "_type": "Module"}, "choice_history": [120, 185, 331], "inferred_code": "", "score": -20.417268753051758, "score_history": [-0.3390636444091797, -2.47955322265625e-05, -20.07818031311035]}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -0.3098994148114116, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -0.0013561248779296875, -1.9073486328125e-06, -0.00020599365234375, 0.0, -0.0002804994583129883, 0.0, -9.72747802734375e-05, -7.2479248046875e-05, -3.814697265625e-05, -3.0994406188256107e-06, -1.0728830375228426e-06, -0.001543520949780941, -3.814697265625e-06, -0.0004119873046875, 0.0, -0.0004634857177734375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -1.7478367936953418, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -1.6706466674804688, -7.62939453125e-06, -0.0010890960693359375, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0002957582473754883, 0.0, -0.0001087188720703125, -8.20159912109375e-05, -3.814697265625e-05, -2.861022494471399e-06, -9.536738616588991e-07, -0.001543520949780941, -3.814697265625e-06, -0.000385284423828125, 0.0, -0.000637054443359375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Shieldmasta"}, "choice_history": [121, 198, "<UNK>", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Shieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -3.0151752260663898, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -2.7706458568573, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -0.0013561248779296875, -1.9073486328125e-06, -0.00020599365234375, 0.0, -0.0002804994583129883, 0.0, -9.72747802734375e-05, -7.2479248046875e-05, -3.814697265625e-05, -3.0994406188256107e-06, -1.0728830375228426e-06, -0.001543520949780941, -3.814697265625e-06, -0.0004119873046875, 0.0, -0.0004634857177734375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Shieldmasta"}, "choice_history": [121, 198, "<UNK>", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Shieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -4.45311260495032, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -2.7706458568573, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -1.6706466674804688, -7.62939453125e-06, -0.0010890960693359375, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0002957582473754883, 0.0, -0.0001087188720703125, -8.20159912109375e-05, -3.814697265625e-05, -2.861022494471399e-06, -9.536738616588991e-07, -0.001543520949780941, -3.814697265625e-06, -0.000385284423828125, 0.0, -0.000637054443359375]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -4.533977116729261, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -4.4571332931518555, 0.0, -0.0008736848831176758, 0.0, -0.00018310546875, 0.0, -0.00046372413635253906, 0.0, -0.0001049041748046875, -8.392333984375e-05, -3.62396240234375e-05, -2.3841855636419496e-06, -1.5497195136049413e-06, -0.0012922281166538596, -3.814697265625e-06, -0.000396728515625, 0.0, -0.00058746337890625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jin<UNK>"}, "choice_history": [121, 198, "Sen'jin", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jin<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -5.607021889105567, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -5.302664279937744, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -0.0013561248779296875, -1.9073486328125e-06, -0.00020599365234375, 0.0, -0.0002804994583129883, 0.0, -9.72747802734375e-05, -7.2479248046875e-05, -3.814697265625e-05, -3.0994406188256107e-06, -1.0728830375228426e-06, -0.001543520949780941, -3.814697265625e-06, -0.0004119873046875, 0.0, -0.0004634857177734375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -6.591842736388685, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -6.514805793762207, -9.5367431640625e-06, -0.0013427734375, 0.0, -0.0001678466796875, 0.0, -0.00046563148498535156, 0.0, -9.918212890625e-05, -0.000102996826171875, -3.814697265625e-05, -2.861022494471399e-06, -1.4305104514278355e-06, -0.0011456006905063987, -3.814697265625e-06, -0.00042724609375, 0.0, -0.000415802001953125]}, {"model_output": {"hole2": [{"hole2": "taunt", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.taunt,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -6.6146093263911325, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -6.534878730773926, 0.0, -0.004108548164367676, 0.0, -0.00011444091796875, 0.0, -0.00020051002502441406, 0.0, -8.20159912109375e-05, -0.0001373291015625, -4.38690185546875e-05, -2.861022494471399e-06, -1.0728830375228426e-06, -0.0013217919040471315, -3.814697265625e-06, -0.00040435791015625, 0.0, -0.00049591064453125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "score": -6.831948485147336, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -0.0013561248779296875, -1.9073486328125e-06, -0.00020599365234375, 0.0, -0.0002804994583129883, 0.0, -9.72747802734375e-05, -7.2479248046875e-05, -3.814697265625e-05, -3.0994406188256107e-06, -1.0728830375228426e-06, -6.523926258087158, -3.933906555175781e-06, -0.00019073486328125, 0.0, -0.0003509521484375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jin<UNK>"}, "choice_history": [121, 198, "Sen'jin", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jin<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.044959267989498, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -5.302664279937744, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -1.6706466674804688, -7.62939453125e-06, -0.0010890960693359375, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0002957582473754883, 0.0, -0.0001087188720703125, -8.20159912109375e-05, -3.814697265625e-05, -2.861022494471399e-06, -9.536738616588991e-07, -0.001543520949780941, -3.814697265625e-06, -0.000385284423828125, 0.0, -0.000637054443359375]}, {"model_output": {"hole2": [{"hole2": "4", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "4", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.4,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.139041031865986, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -7.049411773681641, 0.0, -0.0134735107421875, -1.9073486328125e-06, -0.0001544952392578125, 0.0, -0.0008126497268676758, 0.0, -0.000102996826171875, -0.0001544952392578125, -4.9591064453125e-05, -2.861022494471399e-06, -1.0728830375228426e-06, -0.001210927264764905, -3.814697265625e-06, -0.0004119873046875, 0.0, -0.00043487548828125]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Shieldmasta"}, "choice_history": [121, 198, "<UNK>", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Shieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.239252927984239, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -2.7706458568573, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -4.4571332931518555, 0.0, -0.0008736848831176758, 0.0, -0.00018310546875, 0.0, -0.00046372413635253906, 0.0, -0.0001049041748046875, -8.392333984375e-05, -3.62396240234375e-05, -2.3841855636419496e-06, -1.5497195136049413e-06, -0.0012922281166538596, -3.814697265625e-06, -0.000396728515625, 0.0, -0.00058746337890625]}, {"model_output": {"hole2": [{"hole2": "increase_health", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "increase_health", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.\n            increase_health, CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.451467122105896, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -7.3735504150390625, 0.0, -0.0014172792434692383, 0.0, -0.0001373291015625, 0.0, -0.001100778579711914, 0.0, -0.000118255615234375, -0.0001068115234375, -4.00543212890625e-05, -2.980231556648505e-06, -1.311301275563892e-06, -0.0012756579089909792, -3.814697265625e-06, -0.0004062652587890625, 0.0, -0.000492095947265625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.483623589776698, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -7.3615570068359375, 0.0, -0.045729875564575195, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0007573366165161133, 0.0, -8.392333984375e-05, -7.82012939453125e-05, -3.24249267578125e-05, -2.384185791015625e-06, -1.6689286894688848e-06, -0.0015233750455081463, -3.814697265625e-06, -0.0004291534423828125, 0.0, -0.0005245208740234375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sen'jin Shieldmasta", "hole1": 4, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 3, "hole1": 5, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score": -7.595312799248177, "score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -7.284820556640625, 0.0, -0.0002117156982421875, 0.0, -0.0023404359817504883, 0.0, -9.918212890625e-05, -9.72747802734375e-05, -4.38690185546875e-05, -5.483625500346534e-06, -9.536738616588991e-07, -0.0014035692438483238, -3.814697265625e-06, -0.0004291534423828125, 0.0, -0.0004367828369140625]}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -0.5259687288965651, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -0.05596518516540527, -2.3841855067985307e-07, -0.01133665256202221, -4.768370445162873e-07, -0.0007256047101691365, 0.0, -0.00067901611328125, -8.0108642578125e-05, -7.43865966796875e-05, -0.0001850128173828125, -0.0002595186233520508, -2.861018856492592e-06, -0.0015610409900546074, -8.225431884056889e-06, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -1.3259866412238566, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -1.1665353775024414, -2.288818359375e-05, -0.0003108978271484375, -3.24249267578125e-05, -0.04682159423828125, -5.960462772236497e-07, -0.003452301025390625, -0.000408172607421875, -0.0003814697265625, 0.0, -0.00018310546875, 0.0, -0.0069092512130737305, -7.62939453125e-06, -0.0003886222839355469, 0.0, -3.0517578125e-05, -0.0005588531494140625, -1.9073486328125e-06, -1.52587890625e-05, -3.0517578125e-05, -4.9591064453125e-05, 0.0, -6.866455078125e-05, -1.6689286894688848e-06, -0.00024580955505371094, -1.1920928244535389e-07, -0.007028300315141678, 0.0, -0.0014171600341796875, -6.29425048828125e-05, 0.0, -0.0002422332763671875, -7.62939453125e-06, -0.00038134882925078273, -0.00028606137493625283, -0.00017081219993997365, -2.3841855067985307e-07, -3.24249267578125e-05, -0.009423255920410156, -0.0001220703125, -1.9073486328125e-05, -0.00010919570922851562, -3.158996332786046e-05, -0.001484751352109015, -1.3113007298670709e-05, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -3.281503722926878, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -2.840982437133789, -3.814697265625e-06, -0.000621795654296875, -9.5367431640625e-06, -0.0005435943603515625, -1.9073486328125e-06, -2.3722594050923362e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-05, -6.29425048828125e-05, -1.728534698486328e-05, 0.0, -0.0011539459228515625, -3.24249267578125e-05, -0.36057090759277344, -0.000377655029296875, -0.0011844635009765625, -1.1444091796875e-05, -0.0001773834228515625, -7.62939453125e-06, -0.0007991790771484375, -1.9073486328125e-06, -0.0001304149627685547, -1.1920928244535389e-07, -0.05479323863983154, -2.3841855067985307e-07, -0.011411739513278008, -4.768370445162873e-07, -0.0007244148873724043, 0.0, -0.0007228851318359375, -8.0108642578125e-05, -7.43865966796875e-05, -0.000186920166015625, -0.0002576112747192383, -2.861018856492592e-06, -0.0015630675479769707, -8.225431884056889e-06, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "current_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.current_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -3.5465354648958893, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -3.0502288341522217, 0.0, -0.036484476178884506, -1.311301275563892e-06, -0.0023000072687864304, 0.0, -0.0003833770751953125, -7.62939453125e-05, -8.392333984375e-05, -0.000133514404296875, -0.0002843141555786133, -2.9802276912960224e-06, -0.0014603098388761282, -7.629387255292386e-06, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -4.131493705169554, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -2.840982437133789, -3.814697265625e-06, -0.000621795654296875, -9.5367431640625e-06, -0.0005435943603515625, -1.9073486328125e-06, -2.3722594050923362e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-05, -6.29425048828125e-05, -1.728534698486328e-05, 0.0, -0.0011539459228515625, -3.24249267578125e-05, -1.196122169494629, -2.09808349609375e-05, -0.0003070831298828125, -3.24249267578125e-05, -0.05268251895904541, -5.960462772236497e-07, -0.0034332275390625, -0.0004253387451171875, -0.0003871917724609375, 0.0, -0.0001811981201171875, 0.0, -0.007407069206237793, -7.62939453125e-06, -0.0003895759582519531, 0.0, -3.0517578125e-05, -0.0005702972412109375, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -4.9591064453125e-05, 0.0, -6.866455078125e-05, -1.6689286894688848e-06, -0.00024580955505371094, -1.1920928244535389e-07, -0.006954151671379805, 0.0, -0.0013904571533203125, -6.103515625e-05, 0.0, -0.000244140625, -7.62939453125e-06, -0.0003800375561695546, -0.0002847504511009902, -0.00017081219993997365, -2.3841855067985307e-07, -3.24249267578125e-05, -0.009383201599121094, -0.0001220703125, -1.9073486328125e-05, -0.00010919570922851562, -3.158996332786046e-05, -0.0014829632127657533, -1.3113007298670709e-05, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"targets": [{"id": "targets", "_type": "Name"}], "value": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"id": "target", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "target", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"id": "range", "_type": "Name"}, "args": [{"_type": "Template76"}, {"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}], "_type": "Call"}, "target": {"id": "i", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 335, 126, 155, 320, 73, 186, "targets", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "append", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 126, 155, 320, 73, 186, "target", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 145, 250, 25, 186, "target", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(3), self)\n", "score": -5.0057899165258775, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -1.1665353775024414, -2.288818359375e-05, -0.0003108978271484375, -3.24249267578125e-05, -3.3066282272338867, -1.9073486328125e-06, -0.0001735687255859375, -1.33514404296875e-05, -0.06402015686035156, 0.0, -0.0005236857105046511, -8.34464663057588e-06, -0.0006351470947265625, -0.005057334899902344, -0.11223316192626953, -0.0002384185791015625, -0.000774383544921875, -0.0007033348083496094, -6.794906312279636e-06, -0.0031130127608776093, -1.060962586052483e-05, -0.007831573486328125, -0.003662109375, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-05, -5.7220458984375e-06, -0.008782744407653809, -6.866455078125e-05, -9.72747802734375e-05, -2.47955322265625e-05, -0.0002002716064453125, 0.0, -0.0052776336669921875, -1.9073486328125e-06, -0.00784599781036377, -0.00011646747589111328, -0.0006718635559082031, 0.0, -7.43865966796875e-05, -0.0009555816650390625, -3.814697265625e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0002079010009765625, 0.0, -4.1961669921875e-05, -4.410734163684538e-06, -0.00024271011352539062, -4.768370445162873e-07, -0.0017151720821857452, 0.0, -8.58306884765625e-05, 0.0, -2.6702880859375e-05, 0.0, -0.00086212158203125, -7.62939453125e-06, -0.010385621339082718, 0.0, 0.0, -0.0026836395263671875, 0.0, -0.000156402587890625, -0.0001049041748046875, -3.4332275390625e-05, 0.0, -0.0002803802490234375, -1.1920928244535389e-07, -0.031446218490600586, -3.576278118089249e-07, -0.006779171992093325, -8.940695806813892e-06, -0.0025157928466796875, -1.9073486328125e-05, -2.6702880859375e-05, -0.0018787384033203125, 0.0, -0.038794517517089844, -6.079673767089844e-06, -0.009523391723632812, -4.1961669921875e-05, -0.00011444091796875, 0.0, -0.0002765655517578125, -3.814697265625e-06, -0.029570460319519043, -2.396077979938127e-05, -0.009919047355651855, -4.768370445162873e-07, -6.4849853515625e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.04895639419555664, -2.0265579223632812e-06, -0.000408172607421875, -1.1444091796875e-05, -0.0003871917724609375, -1.9073486328125e-06, -0.0014643669128417969, -2.7060192223871127e-05, -0.0028656020294874907, 0.0, -1.71661376953125e-05, -0.026157379150390625, -6.4849853515625e-05, -2.86102294921875e-05, -0.00027883052825927734, -1.0728830375228426e-06, -0.0016726837493479252, -4.172325134277344e-06, -6.866455078125e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -5.436950021743847, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -5.004913330078125, -1.9073486328125e-06, -0.002208709716796875, -3.814697265625e-06, -0.0004901885986328125, -1.9073486328125e-06, -2.4795466742943972e-05, 0.0, -3.814697265625e-06, -8.96453857421875e-05, -6.103515625e-05, -1.728534698486328e-05, 0.0, -0.00122833251953125, -3.24249267578125e-05, -0.3495330810546875, -0.0003833770751953125, -0.001178741455078125, -1.1444091796875e-05, -0.000179290771484375, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001323223114013672, -1.1920928244535389e-07, -0.055879950523376465, -2.3841855067985307e-07, -0.011332719586789608, -4.768370445162873e-07, -0.0007353741675615311, 0.0, -0.000675201416015625, -8.0108642578125e-05, -7.43865966796875e-05, -0.000186920166015625, -0.0002576112747192383, -2.861018856492592e-06, -0.0015630675479769707, -8.225431884056889e-06, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "<UNK>", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "<UNK>", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.<UNK>.damage(player.effective_spell_damage(3), self)\n", "score": -5.783231341478498, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -0.05596518516540527, -2.3841855067985307e-07, -4.985101222991943, -1.1920928244535389e-07, -0.284611314535141, 0.0, -0.0005512237548828125, -0.0001068115234375, -7.43865966796875e-05, -0.000118255615234375, -0.0003968477249145508, -2.7418097943154862e-06, -0.0012116394937038422, -6.675716122117592e-06, -4.38690185546875e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -6.320194023989892, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -5.004913330078125, -1.9073486328125e-06, -0.002208709716796875, -3.814697265625e-06, -0.0004901885986328125, -1.9073486328125e-06, -2.4795466742943972e-05, 0.0, -3.814697265625e-06, -8.96453857421875e-05, -6.103515625e-05, -1.728534698486328e-05, 0.0, -0.00122833251953125, -3.24249267578125e-05, -1.2220277786254883, -2.288818359375e-05, -0.000308990478515625, -3.24249267578125e-05, -0.0500103235244751, -5.960462772236497e-07, -0.0034961700439453125, -0.0004100799560546875, -0.000377655029296875, 0.0, -0.00018310546875, 0.0, -0.007190585136413574, -7.62939453125e-06, -0.0003895759582519531, 0.0, -3.0517578125e-05, -0.0005664825439453125, -1.9073486328125e-06, -1.52587890625e-05, -2.86102294921875e-05, -4.9591064453125e-05, 0.0, -6.866455078125e-05, -1.6689286894688848e-06, -0.00024580955505371094, -1.1920928244535389e-07, -0.007022339850664139, 0.0, -0.00140380859375, -6.103515625e-05, 0.0, -0.000244140625, -7.62939453125e-06, -0.0003800375561695546, -0.0002843929105438292, -0.00017116976960096508, -2.3841855067985307e-07, -3.24249267578125e-05, -0.009418487548828125, -0.0001220703125, -1.9073486328125e-05, -0.00010919570922851562, -3.158996332786046e-05, -0.0014848705613985658, -1.3113007298670709e-05, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "current_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.current_player.hero.damage(player.effective_spell_damage(3), self)\n", "score": -6.324808066577127, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -2.840982437133789, -3.814697265625e-06, -0.000621795654296875, -9.5367431640625e-06, -0.0005435943603515625, -1.9073486328125e-06, -2.3722594050923362e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-05, -6.29425048828125e-05, -1.728534698486328e-05, 0.0, -0.0011539459228515625, -3.24249267578125e-05, -0.36057090759277344, -0.000377655029296875, -0.0011844635009765625, -1.1444091796875e-05, -0.0001773834228515625, -7.62939453125e-06, -0.0007991790771484375, -1.9073486328125e-06, -0.0001304149627685547, -1.1920928244535389e-07, -3.070770025253296, 0.0, -0.03760361298918724, -1.311301275563892e-06, -0.00231178174726665, 0.0, -0.0004024505615234375, -7.62939453125e-05, -8.20159912109375e-05, -0.000133514404296875, -0.0002804994583129883, -2.9802276912960224e-06, -0.0014603098388761282, -7.629387255292386e-06, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "target": {"id": "deathrattle", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "deathrattle", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for deathrattle in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -6.350405692261418, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -1.1665353775024414, -2.288818359375e-05, -0.0003108978271484375, -3.24249267578125e-05, -5.021097183227539, -1.1920928244535389e-07, -0.003604888916015625, -9.1552734375e-05, -0.04610633850097656, 0.0, -5.14984130859375e-05, 0.0, -0.007976889610290527, -3.4332275390625e-05, -0.0015990734100341797, 0.0, -2.288818359375e-05, -0.0008029937744140625, -1.9073486328125e-06, -1.33514404296875e-05, -2.288818359375e-05, -2.288818359375e-05, 0.0, -8.96453857421875e-05, -1.0728830375228426e-06, -0.0002701282501220703, -1.1920928244535389e-07, -0.010605071671307087, 0.0, -0.001201629638671875, -6.4849853515625e-05, -1.9073486328125e-06, -0.000209808349609375, -7.62939453125e-06, -0.0003507109940983355, -0.00039176418795250356, -0.000153648856212385, -2.3841855067985307e-07, -3.4332275390625e-05, -0.00812530517578125, -0.00011444091796875, -1.9073486328125e-05, -0.00011098384857177734, -2.8013790142722428e-05, -0.001567720901221037, -1.0013571227318607e-05, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "iter": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"id": "targets", "_type": "Name"}], "_type": "Call"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "targets", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.random_choice(targets):\n            minion.damage(player.effective_spell_damage(3), self)\n", "score": -6.5885142441651965, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -1.1665353775024414, -2.288818359375e-05, -0.0003108978271484375, -3.24249267578125e-05, -0.04682159423828125, -5.960462772236497e-07, -0.003452301025390625, -0.000408172607421875, -0.0003814697265625, 0.0, -0.00018310546875, 0.0, -5.094463348388672, -1.0728830375228426e-06, -0.10796499252319336, 0.0, -3.814697265625e-06, -0.025931358337402344, -5.7220458984375e-06, -0.018414020538330078, -1.9073486328125e-06, -0.02667999267578125, -0.004383087158203125, -1.9073486328125e-06, -0.0069713592529296875, -1.9073486328125e-06, -0.0010282918810844421, -0.0007655103108845651, -1.5020326827652752e-05, 0.0, -9.5367431640625e-06, -0.0032405853271484375, -0.0001583099365234375, -5.91278076171875e-05, -0.00017380714416503906, -2.622600959512056e-06, -0.0013848323142156005, -7.987019671418238e-06, -2.86102294921875e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "deathrattle", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "deathrattle", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.deathrattle.damage(player.effective_spell_damage(\n            3), self)\n", "score": -6.739893047567612, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -0.05596518516540527, -2.3841855067985307e-07, -6.191262245178223, -7.62939453125e-06, -0.03547057881951332, 0.0, -0.0001468658447265625, -9.918212890625e-05, -7.05718994140625e-05, -0.0001220703125, -0.00046372413635253906, -3.2186455882765586e-06, -0.00119173270650208, -7.033342626527883e-06, -4.1961669921875e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "HUNTER", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.HUNTER.hero.damage(player.effective_spell_damage(3), self)\n", "score": -6.76698221914409, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -6.030172824859619, 0.0, -0.27807092666625977, -1.0728830375228426e-06, -0.0011737627210095525, 0.0, -0.000423431396484375, -8.0108642578125e-05, -8.20159912109375e-05, -0.0001430511474609375, -0.0002671480178833008, -2.9802276912960224e-06, -0.0014690120005980134, -7.390969585685525e-06, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Sinister Strike", "hole1": 1, "hole3": "FREE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(0), self)\n", "score": -7.717854681737968, "score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -0.05596518516540527, -2.3841855067985307e-07, -0.01133665256202221, -4.768370445162873e-07, -0.0007256047101691365, 0.0, -0.00067901611328125, -8.0108642578125e-05, -7.43865966796875e-05, -0.0001850128173828125, -0.0002595186233520508, -2.861018856492592e-06, -7.193472862243652, -3.3378546504536644e-06, -2.86102294921875e-05]}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "Discard", "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole2": "taunt", "hole0": 4, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 213, "Discard", "<EOS>", "Player", "Selector", "<EOS>", 149, 291, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -3.6512836344991157, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.4877490997314453, -0.012457610107958317, -0.47422751784324646, -0.03153064101934433, -2.2649765014648438e-06, 0.0, -0.26933956146240234, -0.0035066604614257812, -6.985545041970909e-05, -0.0010871996637433767, -9.572086128173396e-05, -1.1920928244535389e-07, -0.06844782829284668, 0.0, -0.0006580352783203125, -2.86102294921875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "Discard", "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Succubus"}, {"hole2": "taunt", "hole0": 4, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 213, "Discard", "<EOS>", "Player", "Selector", "<EOS>", 149, 291, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(\n            Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -4.313683918939198, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.1325387954711914, -1.33514404296875e-05, -0.0006335973739624023, 0.0, -0.006005287170410156, -1.8814268112182617, -0.013247974216938019, -0.4666690230369568, -0.032108888030052185, -4.172325134277344e-06, 0.0, -0.2620553970336914, -0.003383636474609375, -7.557707431260496e-05, -0.0005940128467045724, -0.0001081171358237043, -1.1920928244535389e-07, -0.05992996692657471, 0.0, -0.0005626678466796875, -3.0517578125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Discard", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Discard", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Discard(IsType(MINION_TYPE.BEAST)), MinionSelector(players=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.384862192782094, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.710190773010254, -0.02083474025130272, -0.4651290774345398, -1.9073486328125e-06, -0.0009307861328125, -0.16768741607666016, -0.004187583923339844, -1.71661376953125e-05, -0.15926635265350342, -0.005903363227844238, -1.7642971215536818e-05, -1.71661376953125e-05, -0.0017547607421875, -5.91278076171875e-05, -0.000186920166015625, -5.7220458984375e-06, -9.34600830078125e-05, 0.0, -0.3424797058105469, -7.62939453125e-06, -0.12195813655853271, -2.0265579223632812e-06, -2.1457672119140625e-06, -0.00359344482421875, -7.62939453125e-06, -3.814697265625e-06, -0.007099151611328125, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -0.06775856018066406, -2.861022494471399e-06, -1.9073486328125e-06, -0.0007381439208984375, -0.0027332305908203125, -5.960462772236497e-07, -5.817244164063595e-05, -9.775161743164062e-06, -2.3841855067985307e-07, -1.71661376953125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "Discardcard", "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole2": "taunt", "hole0": 4, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 213, "Discard", "card", "<EOS>", "Player", "Selector", "<EOS>", 149, 291, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Discardcard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "score": -4.523264670679502, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.4877490997314453, -0.012457610107958317, -0.9965547323226929, -0.09496099501848221, -0.1791692078113556, -5.6028297876764555e-06, 0.0, -0.39379024505615234, -0.0036535263061523438, -7.748440111754462e-05, -0.0007746620685793459, -0.00011765299859689549, -1.1920928244535389e-07, -0.05109834671020508, 0.0, -0.0007495880126953125, -2.288818359375e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "DiscardcardPlayerSelector", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 217, "Discard", "card", "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            DiscardcardPlayerSelector(IsType(MINION_TYPE.BEAST)),\n            MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.8432730967854525, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.710190773010254, -0.02083474025130272, -1.0159790515899658, -0.16397379338741302, -0.0014204978942871094, 0.0, -1.9073486328125e-06, -0.00251007080078125, -0.0002346038818359375, -2.09808349609375e-05, -2.86102294921875e-05, -0.0039604902267456055, -0.003612995147705078, -9.059905096364673e-06, -1.71661376953125e-05, -0.00177764892578125, -4.1961669921875e-05, -0.0001316070556640625, -7.62939453125e-06, -0.0001354217529296875, 0.0, -0.4330921173095703, -5.7220458984375e-06, -0.10882067680358887, -3.933906555175781e-06, -2.0265579223632812e-06, -0.0043315887451171875, -5.7220458984375e-06, -3.814697265625e-06, -0.016582489013671875, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -0.04984092712402344, -2.861022494471399e-06, -1.9073486328125e-06, -0.0007648468017578125, -0.00273895263671875, -5.960462772236497e-07, -5.4834770708112046e-05, -9.775161743164062e-06, -2.3841855067985307e-07, -1.71661376953125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "AddCard", "hole1": [{"hole0": "card", "_type": "Template46"}, {"_type": "Template59"}], "hole3": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 218, "Add", "Card", "<EOS>", 321, 93, 255, "card", "<EOS>", 102, "Player", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(\n            AddCard(card(), 2), PlayerSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.12367745278425, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.1325387954711914, -1.33514404296875e-05, -0.0006335973739624023, 0.0, -0.006005287170410156, -2.0804028511047363, -0.1314966231584549, -0.0008802413940429688, -0.00020253658294677734, -0.23762130737304688, -0.03621959686279297, -3.62396240234375e-05, -0.12847021222114563, -0.1237991526722908, -0.142242431640625, -0.0006789139588363469, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.011205673217773438, -7.82012939453125e-05, -0.6362873315811157, -2.682186823221855e-05, -1.9073486328125e-06, -0.0001583099365234375, -0.0002422332763671875, -5.125993993715383e-06, -7.688718324061483e-05, -1.3828277587890625e-05, 0.0, -3.24249267578125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "AddCard", "hole1": [{"hole0": "card", "_type": "Template46"}, {"_type": "Template59"}], "hole3": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 218, "Add", "Card", "<EOS>", 321, 93, 255, "card", "<EOS>", 102, "Player", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            AddCard(card(), 2), PlayerSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.320479873795186, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -2.2958974838256836, -0.14537227153778076, -0.001155853271484375, -0.00010704994201660156, -0.2629585266113281, -0.05061054229736328, -3.62396240234375e-05, -0.1221645250916481, -0.11027544736862183, -0.14042282104492188, -0.0008282826165668666, -1.3470649719238281e-05, 0.0, -3.814697265625e-06, -0.008096694946289062, -9.34600830078125e-05, -0.8797513246536255, -3.9100152207538486e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.000270843505859375, -5.125993993715383e-06, -8.368157432414591e-05, -1.3828277587890625e-05, -1.1920928244535389e-07, -3.24249267578125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(Give(\n            [Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), PlayerSelector\n            (IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.516622621082149, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.1325387954711914, -1.33514404296875e-05, -0.0006335973739624023, 0.0, -0.006005287170410156, -0.9648618698120117, -0.4912421405315399, -0.01906559430062771, -1.9073486328125e-06, -0.16640949249267578, -0.000514984130859375, -0.8712739944458008, -0.006938934326171875, -0.00089263916015625, -3.254413604736328e-05, 0.0, -0.0001107453863369301, -0.005444526672363281, 0.0, -0.009004115127027035, -3.814697265625e-06, -0.00037384033203125, -0.0001659393310546875, -9.1552734375e-05, -1.9073486328125e-06, -0.00013923643564339727, -0.007071971893310547, 0.0, -0.04574477672576904, -2.288818359375e-05, -0.00032806396484375, -0.3814293146133423, 0.0, 0.0, -3.814697265625e-06, -0.0001049041748046875, -0.000492095947265625, -3.814697265625e-06, -2.288818359375e-05, -0.0030002593994140625, -0.0008698701858520508, -5.733966827392578e-05, -7.62939453125e-05, -0.23373985290527344, -5.7220458984375e-06, -2.6702880859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, 0.0, -0.6183128356933594, -5.7220458984375e-06, -0.003894805908203125, -0.0001964569091796875, -6.866455078125e-05, -0.02703857421875, 0.0, -0.016798973083496094, -0.045909881591796875, -0.0011425018310546875, -1.1324815204716288e-05, -1.2874543244834058e-05, -5.400180089054629e-05, -3.576278118089249e-07, -5.14984130859375e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Give(\n            [Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), PlayerSelector\n            (IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.651060403747522, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.5548806190490723, -0.3702549338340759, -0.028647530823946, -1.9073486328125e-06, -0.20944690704345703, -0.000728607177734375, -0.8576526641845703, -0.008645057678222656, -0.0012054443359375, -3.635883331298828e-05, 0.0, -0.00012040131696267053, -0.006114006042480469, 0.0, -0.008957385085523129, -5.7220458984375e-06, -0.0004119873046875, -0.00017547607421875, -9.5367431640625e-05, -1.9073486328125e-06, -0.00014317034219857305, -0.007208347320556641, 0.0, -0.04465377330780029, -2.09808349609375e-05, -0.0003490447998046875, -0.3121434450149536, 0.0, 0.0, -3.814697265625e-06, -5.91278076171875e-05, -0.0005474090576171875, -1.9073486328125e-06, -2.6702880859375e-05, -0.00287628173828125, -0.0008058547973632812, -4.971027374267578e-05, -8.0108642578125e-05, -0.23335838317871094, -5.7220458984375e-06, -2.86102294921875e-05, -9.5367431640625e-06, -6.103515625e-05, 0.0, -0.5999078750610352, -5.7220458984375e-06, -0.0053768157958984375, -0.0001811981201171875, -6.67572021484375e-05, -0.03164100646972656, 0.0, -0.017683982849121094, -0.043010711669921875, -0.0011577606201171875, -1.1444023584772367e-05, -1.2993750715395436e-05, -5.412101018009707e-05, -3.576278118089249e-07, -5.14984130859375e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "PIRATE", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give\n            ([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\n            PlayerSelector(IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.810334307576284, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.641963005065918, -0.0001735687255859375, -0.00037384033203125, -1.9073486328125e-06, -0.0056629180908203125, -0.9781560897827148, -0.4413273334503174, -0.029144853353500366, -1.9073486328125e-06, -0.18060874938964844, -0.0008220672607421875, -0.6900320053100586, -0.009364128112792969, -0.00128936767578125, -3.445148468017578e-05, 0.0, -0.00012147420784458518, -0.005244255065917969, 0.0, -0.008818506263196468, -5.7220458984375e-06, -0.0004177093505859375, -0.00017547607421875, -9.72747802734375e-05, -1.9073486328125e-06, -0.00014126299356576055, -0.007090091705322266, 0.0, -0.045149803161621094, -2.09808349609375e-05, -0.000362396240234375, -0.3642033338546753, 0.0, 0.0, -3.814697265625e-06, -4.9591064453125e-05, -0.000553131103515625, -3.814697265625e-06, -2.47955322265625e-05, -0.0035152435302734375, -0.000960230827331543, -4.017353057861328e-05, -7.82012939453125e-05, -0.22858238220214844, -5.7220458984375e-06, -2.86102294921875e-05, -9.5367431640625e-06, -5.91278076171875e-05, 0.0, -0.6083202362060547, -5.7220458984375e-06, -0.0033721923828125, -0.00018310546875, -5.91278076171875e-05, -0.03418922424316406, 0.0, -0.020101547241210938, -0.04380989074707031, -0.0011425018310546875, -1.1682439435389824e-05, -1.2397711543599144e-05, -5.6147568102460355e-05, -3.576278118089249e-07, -5.340576171875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(Give(\n            [Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), PlayerSelector\n            (IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.932569463249706, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.1325387954711914, -1.33514404296875e-05, -0.0006335973739624023, 0.0, -0.006005287170410156, -0.9648618698120117, -0.4912421405315399, -0.01906559430062771, -1.9073486328125e-06, -0.16640949249267578, -0.000514984130859375, -0.5644626617431641, -0.00141143798828125, -0.000255584716796875, -0.00022721290588378906, 0.0, -0.0017895698547363281, -0.19702434539794922, 0.0, -0.003929853439331055, -7.62939453125e-06, -0.0040531158447265625, -0.00061798095703125, -4.589557647705078e-05, -1.9073486328125e-06, -0.00023508068989031017, -0.058971524238586426, 0.0, -0.011968135833740234, -7.62939453125e-06, -0.14000511169433594, -0.13428592681884766, -0.6432900428771973, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001125335693359375, -0.0003528594970703125, -3.814697265625e-06, -2.288818359375e-05, -0.00240325927734375, -0.0005172491073608398, -4.780292510986328e-05, -6.29425048828125e-05, -0.21333694458007812, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -5.91278076171875e-05, -1.9073486328125e-06, -0.6091070175170898, -3.814697265625e-06, -0.0030002593994140625, -0.0002460479736328125, -7.82012939453125e-05, -0.04691123962402344, 0.0, -0.01702117919921875, -0.03970527648925781, -0.0011997222900390625, -1.120560773415491e-05, -1.573553163325414e-05, -5.793570744572207e-05, -4.768370445162873e-07, -5.91278076171875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DEMON", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Give(\n            [Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), PlayerSelector\n            (IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -5.949807467129972, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.5548806190490723, -0.3702549338340759, -0.028647530823946, -1.9073486328125e-06, -0.20944690704345703, -0.000728607177734375, -0.574519157409668, -0.0016880035400390625, -0.000316619873046875, -0.00022351741790771484, 0.0, -0.0018047094345092773, -0.18868446350097656, 0.0, -0.0036664006765931845, -9.5367431640625e-06, -0.004184722900390625, -0.00058746337890625, -4.017353057861328e-05, -1.9073486328125e-06, -0.00023424621031153947, -0.06014358997344971, 0.0, -0.011727571487426758, -7.62939453125e-06, -0.15671062469482422, -0.13659191131591797, -0.3901273012161255, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -0.0004100799560546875, -3.814697265625e-06, -2.47955322265625e-05, -0.00257110595703125, -0.0005320310592651367, -3.826618194580078e-05, -6.103515625e-05, -0.21549034118652344, -5.7220458984375e-06, -2.86102294921875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -1.9073486328125e-06, -0.6198873519897461, -3.814697265625e-06, -0.0036716461181640625, -0.0002307891845703125, -7.82012939453125e-05, -0.05234527587890625, 0.0, -0.018499374389648438, -0.03708076477050781, -0.00122833251953125, -1.1324815204716288e-05, -1.5973946574376896e-05, -5.793570744572207e-05, -4.768370445162873e-07, -5.91278076171875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.<UNK>, battlecry=Battlecry(Give(\n            [Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), PlayerSelector\n            (IsType(MINION_TYPE.DRAGON), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -6.3827433171226176, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.1325387954711914, -1.33514404296875e-05, -0.0006335973739624023, 0.0, -0.006005287170410156, -0.9648618698120117, -0.4912421405315399, -0.01906559430062771, -1.9073486328125e-06, -0.16640949249267578, -0.000514984130859375, -0.8712739944458008, -0.006938934326171875, -0.00089263916015625, -3.254413604736328e-05, 0.0, -0.0001107453863369301, -0.005444526672363281, 0.0, -0.009004115127027035, -3.814697265625e-06, -0.00037384033203125, -0.0001659393310546875, -9.1552734375e-05, -1.9073486328125e-06, -0.00013923643564339727, -0.007071971893310547, 0.0, -0.04574477672576904, -2.288818359375e-05, -0.00032806396484375, -0.3814293146133423, 0.0, 0.0, -3.814697265625e-06, -0.0001049041748046875, -0.000492095947265625, -3.814697265625e-06, -2.288818359375e-05, -0.0030002593994140625, -0.0008698701858520508, -5.733966827392578e-05, -7.62939453125e-05, -0.23373985290527344, -5.7220458984375e-06, -2.6702880859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, 0.0, -1.5109786987304688, -1.33514404296875e-05, -0.000453948974609375, -0.0001201629638671875, -5.14984130859375e-05, -0.009500503540039062, 0.0, -0.014657974243164062, -0.042385101318359375, -0.0013217926025390625, -9.775112630450167e-06, -1.6689191397745162e-05, -5.006789797334932e-05, -4.768370445162873e-07, -5.91278076171875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "FREE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "PIRATE", "hole7": "battlecry", "hole0": "Succubus"}, {"hole0": 4, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Succubus", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 105, "Player", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 150, 302, "4", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give\n            ([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\n            PlayerSelector(IsType(MINION_TYPE.BEAST), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -6.44672523271754, "score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -1.641963005065918, -0.0001735687255859375, -0.00037384033203125, -1.9073486328125e-06, -0.0056629180908203125, -0.9781560897827148, -0.4413273334503174, -0.029144853353500366, -1.9073486328125e-06, -0.18060874938964844, -0.0008220672607421875, -0.7286624908447266, -0.001529693603515625, -0.00032806396484375, -0.00020623207092285156, 0.0, -0.0018466711044311523, -0.15296268463134766, 0.0, -0.0037561652716249228, -9.5367431640625e-06, -0.0045795440673828125, -0.000667572021484375, -4.208087921142578e-05, -1.9073486328125e-06, -0.00023186202452052385, -0.06483280658721924, 0.0, -0.011755824089050293, -7.62939453125e-06, -0.1452655792236328, -0.13447093963623047, -0.5013707876205444, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -0.0003795623779296875, -3.814697265625e-06, -1.9073486328125e-05, -0.0029773712158203125, -0.0007176399230957031, -3.075599670410156e-05, -6.67572021484375e-05, -0.2014484405517578, -5.7220458984375e-06, -2.86102294921875e-05, -1.1444091796875e-05, -6.103515625e-05, -1.9073486328125e-06, -0.6329927444458008, -5.7220458984375e-06, -0.0024356842041015625, -0.00022125244140625, -6.67572021484375e-05, -0.06074237823486328, 0.0, -0.02150726318359375, -0.03649711608886719, -0.0012111663818359375, -1.1801646905951202e-05, -1.549711487314198e-05, -5.9962265368085355e-05, -4.768370445162873e-07, -5.91278076171875e-05]}, {"model_output": {"body": [], "_type": "Module"}, "choice_history": [120, 185, 331], "inferred_code": "", "score": -20.76134490966797, "score_history": [-0.002410888671875, -2.47955322265625e-05, -20.758909225463867]}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "War Golem", "hole1": 7, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -1.4783087553096195, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.8510818481445312, -0.0006580352783203125, -1.1920928244535389e-07, -0.0002918243408203125, -2.1457672119140625e-06, 0.0, -2.2292000721790828e-05, 0.0, -0.0947912409901619, 0.0, -3.159045081702061e-05, 0.0, -9.250411676475778e-05, 0.0, -3.24249267578125e-05, -0.027242660522460938, -7.62939453125e-06, -1.4662635294371285e-05, -3.814697265625e-06, -5.6861270422814414e-05, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DREAM", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "War", " ", "Golem", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 4, CHARACTER_CLASS.DREAM, CARD_RARITY\n            .COMMON, False, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -2.6402142763390657, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.9658880233764648, -0.000179290771484375, -6.29425048828125e-05, -1.9073468138230965e-06, -5.0425398512743413e-05, -0.0002871344913728535, -1.9073486328125e-06, -0.3061256408691406, -0.09216117858886719, -1.71661376953125e-05, -3.4332275390625e-05, 0.0, -3.0517578125e-05, -7.62939453125e-06, -0.08550643920898438, -3.24249267578125e-05, -0.0001850128173828125, -0.0009899139404296875, -0.0028972625732421875, 0.0, -0.011013031005859375, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.001117706298828125, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.00837719440460205, 0.0, -0.00081634521484375, -0.009016036987304688, -9.5367431640625e-06, -8.22540732769994e-06, -1.1444091796875e-05, -0.00021383997227530926, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -2.6601011741624916, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.4830493927001953, -0.0001239776611328125, -7.43865966796875e-05, -1.7881377516459906e-06, -3.0398339731618762e-05, -0.00017260048480238765, 0.0, -0.6023883819580078, -0.15958786010742188, -0.25017738342285156, -1.9073486328125e-06, -0.0006351470947265625, -0.007445216178894043, -9.5367431640625e-06, -0.0008106231689453125, -0.000102996826171875, 0.0, -2.86102294921875e-05, 0.0, -0.0001087188720703125, -0.00012969970703125, -7.62939453125e-06, -2.253030106658116e-05, -7.62939453125e-06, -5.304715159581974e-05, -6.29425048828125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceTankGolem"}, "choice_history": [121, 198, "Force", "Tank", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 75, 190, "7", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceTankGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -2.6954836110194265, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -0.45180508494377136, -0.004477111157029867, -7.331358210649341e-05, -3.6951605579815805e-06, -2.0265579223632812e-06, -1.0132789611816406e-05, -0.000110626220703125, -0.0034122467041015625, -0.00058746337890625, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, -0.15888500213623047, -9.34600830078125e-05, -6.4849853515625e-05, -2.861018856492592e-06, -2.9444672691170126e-05, -0.0001624693686608225, 0.0, -0.9858989715576172, -0.0008029937744140625, -5.221631727181375e-05, -8.106222594506107e-06, -0.028553009033203125, -0.0002346038818359375, 0.0, -0.0012359619140625, -0.01268017292022705, -4.76837158203125e-05, -0.0002803802490234375, -0.0001068115234375, 0.0, -1.9073486328125e-05, 0.0, -0.000118255615234375, -0.0001220703125, -7.62939453125e-06, -1.8954096958623268e-05, -5.7220458984375e-06, -4.3868349166586995e-05, -6.67572021484375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceTankGolem"}, "choice_history": [121, 198, "Force", "Tank", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceTankGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -2.703318757679426, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -0.45180508494377136, -0.004477111157029867, -7.331358210649341e-05, -3.6951605579815805e-06, -2.0265579223632812e-06, -1.0132789611816406e-05, -0.000110626220703125, -0.0034122467041015625, -0.00058746337890625, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, -0.15888500213623047, -9.34600830078125e-05, -6.4849853515625e-05, -2.861018856492592e-06, -2.9444672691170126e-05, -0.0001624693686608225, 0.0, -0.7270641326904297, -0.1263713836669922, -0.17605018615722656, -1.9073486328125e-06, -0.0006008148193359375, -0.006743311882019043, -1.1444091796875e-05, -0.0007171630859375, -0.0001125335693359375, 0.0, -3.24249267578125e-05, 0.0, -0.0001068115234375, -0.0001678466796875, -9.5367431640625e-06, -2.4318398573086597e-05, -7.62939453125e-06, -5.209344089962542e-05, -6.4849853515625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 75, 190, "7", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -2.8990950608606454, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.4830493927001953, -0.0001239776611328125, -7.43865966796875e-05, -1.7881377516459906e-06, -3.0398339731618762e-05, -0.00017260048480238765, 0.0, -1.2165813446044922, -0.0008335113525390625, -5.5793148931115866e-05, -1.0251987987430766e-05, -0.027553558349609375, -0.00023651123046875, 0.0, -0.0013179779052734375, -0.013126492500305176, -4.57763671875e-05, -0.0003147125244140625, -9.918212890625e-05, 0.0, -1.71661376953125e-05, 0.0, -0.0001201629638671875, -0.000118255615234375, -7.62939453125e-06, -1.883488948806189e-05, -5.7220458984375e-06, -4.410675319377333e-05, -6.67572021484375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceGolem"}, "choice_history": [121, 198, "Force", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.438172864710168, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -1.1901344060897827, -0.015741178765892982, -7.151698810048401e-06, -3.814697265625e-06, -1.0132789611816406e-05, -0.0001068115234375, -0.0026645660400390625, -0.0004940032958984375, -1.9073486328125e-06, -0.00029754638671875, -1.1444091796875e-05, -0.2115640640258789, -9.72747802734375e-05, -5.91278076171875e-05, -3.099436753473128e-06, -2.9325463401619345e-05, -0.00019834496197290719, 0.0, -0.6144723892211914, -0.12492942810058594, -0.2229766845703125, -1.9073486328125e-06, -0.00055694580078125, -0.007338285446166992, -9.5367431640625e-06, -0.0006923675537109375, -9.72747802734375e-05, 0.0, -3.24249267578125e-05, 0.0, -0.0001163482666015625, -0.0001201629638671875, -9.5367431640625e-06, -2.2172682292875834e-05, -7.62939453125e-06, -5.376237822929397e-05, -6.29425048828125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceGolem"}, "choice_history": [121, 198, "Force", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 75, 190, "7", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.630574636072879, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -1.1901344060897827, -0.015741178765892982, -7.151698810048401e-06, -3.814697265625e-06, -1.0132789611816406e-05, -0.0001068115234375, -0.0026645660400390625, -0.0004940032958984375, -1.9073486328125e-06, -0.00029754638671875, -1.1444091796875e-05, -0.2115640640258789, -9.72747802734375e-05, -5.91278076171875e-05, -3.099436753473128e-06, -2.9325463401619345e-05, -0.00019834496197290719, 0.0, -1.1206274032592773, -0.0007419586181640625, -5.8178342442261055e-05, -1.0371197276981547e-05, -0.027315139770507812, -0.000263214111328125, 0.0, -0.001178741455078125, -0.012869000434875488, -5.7220458984375e-05, -0.0002956390380859375, -8.7738037109375e-05, 0.0, -1.71661376953125e-05, 0.0, -0.0001201629638671875, -0.0001163482666015625, -7.62939453125e-06, -1.883488948806189e-05, -5.7220458984375e-06, -4.434516449691728e-05, -6.67572021484375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "War", " ", "Golem", "<EOS>", 75, 190, "7", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.7724170292967756, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.9658880233764648, -0.000179290771484375, -6.29425048828125e-05, -1.9073468138230965e-06, -5.0425398512743413e-05, -0.0002871344913728535, -1.9073486328125e-06, -1.4443235397338867, -0.00038909912109375, -4.506411642068997e-05, -4.1723224057932384e-06, -0.060512542724609375, -0.0010890960693359375, 0.0, -0.004721641540527344, -0.012601852416992188, -7.82012939453125e-05, -0.052857398986816406, -0.047931671142578125, -1.9073486328125e-06, -0.01355743408203125, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.008595466613769531, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0011197328567504883, 0.0, -0.0003070831298828125, -0.0024509429931640625, -7.62939453125e-06, -9.775113539944869e-06, -1.1444091796875e-05, -0.00018654653104022145, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.933655257835426, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.4830493927001953, -0.0001239776611328125, -7.43865966796875e-05, -1.7881377516459906e-06, -3.0398339731618762e-05, -0.00017260048480238765, 0.0, -0.6023883819580078, -0.15958786010742188, -1.5241937637329102, -0.0002803802490234375, -0.0004138946533203125, 0.0, -0.0031222105026245117, 0.0, -0.0001068115234375, -0.004779815673828125, -5.7220458984375e-06, -7.486063259420916e-05, -9.5367431640625e-06, -6.008003401802853e-05, -0.000110626220703125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DREAM", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceTankGolem"}, "choice_history": [121, 198, "Force", "Tank", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "War", " ", "Golem", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceTankGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 4, CHARACTER_CLASS.DREAM, CARD_RARITY\n            .COMMON, False, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -3.9795043482897654, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -0.45180508494377136, -0.004477111157029867, -7.331358210649341e-05, -3.6951605579815805e-06, -2.0265579223632812e-06, -1.0132789611816406e-05, -0.000110626220703125, -0.0034122467041015625, -0.00058746337890625, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, -1.9271535873413086, -0.0001220703125, -5.7220458984375e-05, -2.0265558760002023e-06, -4.8279689508490264e-05, -0.00026258407160639763, -1.9073486328125e-06, -0.35201358795166016, -0.07894229888916016, -1.33514404296875e-05, -3.62396240234375e-05, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.0806417465209961, -3.0517578125e-05, -0.000202178955078125, -0.00091552734375, -0.00278472900390625, 0.0, -0.010533332824707031, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.0010995864868164062, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.008386731147766113, 0.0, -0.0008106231689453125, -0.009119033813476562, -9.5367431640625e-06, -8.106198947643861e-06, -1.1444091796875e-05, -0.00021276730694808066, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 7, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "_type": "Template10", "hole0": "War Golem"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -4.268224251219152, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -3.546755790710449, -0.0002346038818359375, -1.311301275563892e-06, -0.00017189979553222656, -2.3841855067985307e-07, 0.0, -3.564315920812078e-05, 0.0, -0.0014230012893676758, 0.0, -0.000499725341796875, 0.0, -0.001239776611328125, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, -9.1552734375e-05, -3.814697265625e-06, -0.21234416961669922, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -3.814697265625e-06, 0.0, -8.58306884765625e-05, -0.001110076904296875, -9.5367431640625e-06, -1.1920858014491387e-05, -7.62939453125e-06, -7.366901263594627e-05, -8.58306884765625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceTankGolem"}, "choice_history": [121, 198, "Force", "Tank", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceTankGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -4.370638886891811, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -0.45180508494377136, -0.004477111157029867, -7.331358210649341e-05, -3.6951605579815805e-06, -2.0265579223632812e-06, -1.0132789611816406e-05, -0.000110626220703125, -0.0034122467041015625, -0.00058746337890625, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, -0.15888500213623047, -9.34600830078125e-05, -6.4849853515625e-05, -2.861018856492592e-06, -2.9444672691170126e-05, -0.0001624693686608225, 0.0, -0.7270641326904297, -0.1263713836669922, -1.8413257598876953, -0.0003185272216796875, -0.000377655029296875, 0.0, -0.0037415027618408203, 0.0, -0.0001125335693359375, -0.0059108734130859375, -5.7220458984375e-06, -7.295342220459133e-05, -7.62939453125e-06, -6.401369319064543e-05, -8.58306884765625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DREAM", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "ForceGolem"}, "choice_history": [121, 198, "Force", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "War", " ", "Golem", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class ForceGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 4, CHARACTER_CLASS.DREAM, CARD_RARITY\n            .COMMON, False, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -4.463959935894081, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -1.045176386833191, -1.1901344060897827, -0.015741178765892982, -7.151698810048401e-06, -3.814697265625e-06, -1.0132789611816406e-05, -0.0001068115234375, -0.0026645660400390625, -0.0004940032958984375, -1.9073486328125e-06, -0.00029754638671875, -1.1444091796875e-05, -1.6653375625610352, -0.0001506805419921875, -6.4849853515625e-05, -2.0265558760002023e-06, -5.0783077313099056e-05, -0.00029500003438442945, 0.0, -0.33426761627197266, -0.09797286987304688, -1.33514404296875e-05, -3.24249267578125e-05, 0.0, -3.0517578125e-05, -7.62939453125e-06, -0.0769510269165039, -3.0517578125e-05, -0.0002040863037109375, -0.00096893310546875, -0.0027790069580078125, 0.0, -0.010320663452148438, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -0.0010967254638671875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.008367657661437988, 0.0, -0.0008182525634765625, -0.009134292602539062, -9.5367431640625e-06, -8.106198947643861e-06, -1.1444091796875e-05, -0.00021336320787668228, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 7, "hole1": 7, "_type": "Template32"}], "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score": -4.580678103535547, "score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.4830493927001953, -0.0001239776611328125, -7.43865966796875e-05, -1.7881377516459906e-06, -3.0398339731618762e-05, -0.00017260048480238765, 0.0, -0.6023883819580078, -1.9202966690063477, -1.1444091796875e-05, -2.86102294921875e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -0.3778902292251587, 0.0, -0.024537086486816406, -0.000812530517578125, -0.01143646240234375, 0.0, -0.0042438507080078125, 0.0, -0.00019073486328125, -0.0001087188720703125, -5.7220458984375e-06, -2.038458114839159e-05, -1.71661376953125e-05, -6.770917389076203e-05, -8.58306884765625e-05]}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -3.1568771581198547, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -0.2961008548736572, -1.9073486328125e-06, -0.000213623046875, -4.76837158203125e-05, -0.0013519525527954102, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22167527675628662, -1.9073486328125e-06, -0.5618833303451538, -0.000240325927734375, -0.0033817291259765625, -0.3668738603591919, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.013078689575195312]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -3.4696764066404597, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -0.3080427646636963, -1.9073486328125e-06, -0.0002155303955078125, -4.76837158203125e-05, -0.0013576745986938477, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22085416316986084, -1.9073486328125e-06, -0.5613360404968262, -0.000240325927734375, -0.00341033935546875, -0.3628894090652466, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.013338088989257812]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(1))]), SelfSelector()))])\n", "score": -3.6157052497412536, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -0.2961008548736572, -1.9073486328125e-06, -0.000213623046875, -4.76837158203125e-05, -0.0013519525527954102, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22167527675628662, -1.9073486328125e-06, -0.9085173606872559, -8.7738037109375e-05, -0.0015888214111328125, -0.47384369373321533, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -0.020246505737304688]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(1))]), SelfSelector()))])\n", "score": -3.9301764085478084, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -0.3080427646636963, -1.9073486328125e-06, -0.0002155303955078125, -4.76837158203125e-05, -0.0013576745986938477, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22085416316986084, -1.9073486328125e-06, -0.909188985824585, -8.7738037109375e-05, -0.001613616943359375, -0.4698296785354614, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -0.020992279052734375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "TargetSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Target", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), TargetSelector()))])\n", "score": -3.9918171147848938, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -0.2961008548736572, -1.9073486328125e-06, -0.000213623046875, -4.76837158203125e-05, -0.0013519525527954102, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22167527675628662, -1.9073486328125e-06, -0.5618833303451538, -0.000240325927734375, -0.0033817291259765625, -1.1956244707107544, -8.392333984375e-05, 0.0, -1.9073486328125e-06, -0.019193649291992188]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "TargetSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Target", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(1))]), TargetSelector()))])\n", "score": -4.130244014694867, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -0.2961008548736572, -1.9073486328125e-06, -0.000213623046875, -4.76837158203125e-05, -0.0013519525527954102, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22167527675628662, -1.9073486328125e-06, -0.9085173606872559, -8.7738037109375e-05, -0.0015888214111328125, -0.9866219758987427, -9.72747802734375e-05, 0.0, -1.9073486328125e-06, -0.021921157836914062]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -4.132536051706879, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -1.4157699346542358, 0.0, -0.000186920166015625, -5.340576171875e-05, -0.0017116069793701172, -1.9073486328125e-06, -8.70227722771233e-06, -0.18918418884277344, -3.814697265625e-06, -0.44120049476623535, -0.0001811981201171875, -0.00244140625, -0.37683308124542236, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.01294708251953125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeAttack(2))]), SelfSelector()))])\n", "score": -4.145787952377972, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -0.20161056518554688, -0.0008907318115234375, -0.00252532958984375, -0.00299835205078125, -0.0003795623779296875, -0.0002148151397705078, -1.1444091796875e-05, -0.0002294778823852539, -0.0015240907669067383, -1.9073486328125e-06, -0.2961008548736572, -1.9073486328125e-06, -0.000213623046875, -4.76837158203125e-05, -0.0013519525527954102, -1.9073486328125e-06, -1.1801716937043238e-05, -1.622886061668396, -3.814697265625e-06, -0.02353811264038086, -0.000171661376953125, -0.00385284423828125, -0.4881354570388794, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.017457962036132812]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Damage", "<EOS>", 320, 103, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Damage(1),\n            SelfSelector()))])\n", "score": -4.220030544180396, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -2.616731882095337, -1.1920928244535389e-07, -1.9073486328125e-06, -0.016521453857421875, -0.0005303620710037649, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -0.23199462890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(\n            ChangeAttack(2)), SelfSelector()))])\n", "score": -4.2827987651401, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -2.606684684753418, -0.00081634521484375, -0.07349526882171631, -7.43865966796875e-05, -0.0003453493118286133, 0.0, 0.0, -3.814697265625e-06, -0.11976432800292969]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "TargetSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Target", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), TargetSelector()))])\n", "score": -4.317786605615069, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -0.3080427646636963, -1.9073486328125e-06, -0.0002155303955078125, -4.76837158203125e-05, -0.0013576745986938477, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22085416316986084, -1.9073486328125e-06, -0.5613360404968262, -0.000240325927734375, -0.00341033935546875, -1.204774022102356, -8.392333984375e-05, 0.0, -1.9073486328125e-06, -0.019489288330078125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(\n            ChangeHealth(1)), SelfSelector()))])\n", "score": -4.31944644256167, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.8555765151977539, 0.0, -3.814697265625e-06, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.29622650146484375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.000171661376953125, -0.0006256103515625, 0.0, -9.5367431640625e-05, -0.014612197875976562, -0.0001983642578125, -0.13242816925048828, -0.0001163482666015625, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0002918243408203125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.4795190256554633e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029107093811035156, -0.010893071070313454, -6.890296936035156e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010843276977539062, -0.12578892707824707, -0.001590728759765625, -1.9073486328125e-06, -2.743098258972168, -0.000782012939453125, -0.08391320705413818, 0.0, -0.0016498565673828125, 0.0, 0.0, -9.5367431640625e-06, -0.008378982543945312]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -4.395414622088751, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -1.3804230690002441, 0.0, -0.0001888275146484375, -5.340576171875e-05, -0.0016601085662841797, -1.9073486328125e-06, -8.70227722771233e-06, -0.18754196166992188, -3.814697265625e-06, -0.4388624429702759, -0.0001811981201171875, -0.0024738311767578125, -0.3728095293045044, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.013278961181640625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "TargetSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Target", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(1))]), TargetSelector()))])\n", "score": -4.455233247537066, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -0.3080427646636963, -1.9073486328125e-06, -0.0002155303955078125, -4.76837158203125e-05, -0.0013576745986938477, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22085416316986084, -1.9073486328125e-06, -0.909188985824585, -8.7738037109375e-05, -0.001613616943359375, -0.9932996034622192, -9.5367431640625e-05, 0.0, -1.9073486328125e-06, -0.022495269775390625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 4, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Damage", "<EOS>", 320, 103, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Damage(1),\n            SelfSelector()))])\n", "score": -4.536164434157605, "score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -2.6139585971832275, -1.1920928244535389e-07, -1.9073486328125e-06, -0.01617145538330078, -0.0005381106748245656, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, -0.24494171142578125]}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -0.9786784543229814, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.5003585815429688, -3.24249267578125e-05, -0.001956939697265625, -7.2479248046875e-05, -0.0001964569091796875, -1.1920928244535389e-07, 0.0, -0.09096431732177734, -0.0013980865478515625, -7.62939453125e-06, -4.1961669921875e-05, 0.0, -3.4928321838378906e-05, -1.9073486328125e-06, -0.004311323165893555, 0.0, -0.003924369812011719, -0.0001201629638671875, -0.00011444091796875, -0.0032978057861328125, -0.0001659393310546875, -0.00023651123046875, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -3.445148468017578e-05, 0.0, -0.0005397796630859375, -0.008710861206054688, -0.000156402587890625, -8.20159912109375e-05, -5.722029527532868e-06, -2.038478669419419e-05, -2.3841855067985307e-07, -0.0018172162817791104, 0.0, -0.0003871917724609375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template10", "hole0": "Boar"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Boar", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -1.3659003943210948, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -1.2403240203857422, -0.001842498779296875, -1.4781842764932662e-05, 0.0, -1.6450881958007812e-05, -4.768370445162873e-07, -0.07175302505493164, 0.0, -1.1682510375976562e-05, 0.0, -0.000255584716796875, -0.0005340576171875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0009081363677978516, -1.33514404296875e-05, -0.043532609939575195, 0.0, -8.20159912109375e-05, 0.0, -5.424022674560547e-05, 0.0, -0.0020160675048828125, -0.0008335113525390625, -0.0001049041748046875, -0.00017559528350830078, -1.9073468138230965e-06, -2.9087063012411818e-05, -1.1920928244535389e-07, -0.0017483209958299994, 0.0, -0.000339508056640625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 104, 95, 96, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "score": -2.504856277878332, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -0.5236072540283203, -0.10610580444335938, -0.18928146362304688, -2.86102294921875e-05, -0.00018680095672607422, -1.9073486328125e-06, -0.002132041845470667, -3.814697265625e-06, -8.0108642578125e-05, -0.3842935562133789, -6.4849853515625e-05, -4.398822784423828e-05, -2.1815061700181104e-05, -8.58306884765625e-06, -3.576278118089249e-07, -0.0016078416956588626, 0.0, -0.000186920166015625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template67"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 2, "_type": "Template32"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 109, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "score": -2.910074944025837, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -1.2248010635375977, -0.0015811920166015625, -0.13810348510742188, -2.09808349609375e-05, -3.0875205993652344e-05, 0.0, -0.02160346321761608, -3.814697265625e-06, -5.91278076171875e-05, -0.2258739471435547, -4.1961669921875e-05, -6.437199772335589e-06, -1.1086463018727954e-05, -0.0007369489758275449, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 2, "_type": "Template32"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 104, 95, 96, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "score": -3.288856016632053, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -0.5236072540283203, -0.10610580444335938, -0.18928146362304688, -2.86102294921875e-05, -0.00018680095672607422, -1.9073486328125e-06, -0.002132041845470667, -3.814697265625e-06, -8.0108642578125e-05, -1.1690073013305664, -6.29425048828125e-05, -5.125300958752632e-06, -1.454353241570061e-05, -0.001135830651037395, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template67"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 109, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -3.794152362341201, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.5003585815429688, -3.24249267578125e-05, -0.001956939697265625, -7.2479248046875e-05, -0.0001964569091796875, -1.1920928244535389e-07, 0.0, -2.6170196533203125, -0.034717559814453125, -0.1628274917602539, -2.86102294921875e-05, -0.0003795623779296875, -0.0005092620849609375, -9.72747802734375e-05, -0.0005359649658203125, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.0020728111267089844, 0.0, -0.000492095947265625, -0.11094093322753906, -0.0001430511474609375, -0.00011444091796875, -1.3589766240329482e-05, -1.811981201171875e-05, -3.576278118089249e-07, -0.001608713180758059, 0.0, -0.0003299713134765625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 2, "_type": "Template32"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 104, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "score": -4.193416823864936, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -0.5236072540283203, -0.10610580444335938, -1.9526920318603516, -3.0517578125e-05, -3.2901763916015625e-05, 0.0, -0.02115488052368164, -3.814697265625e-06, -6.67572021484375e-05, -0.29171085357666016, -4.57763671875e-05, -6.437199772335589e-06, -1.1205671398784034e-05, -0.0007480288040824234, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template67"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 109, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "score": -4.331620424793044, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -1.2248010635375977, -0.0015811920166015625, -0.13810348510742188, -2.09808349609375e-05, -3.0875205993652344e-05, 0.0, -0.02160346321761608, -3.814697265625e-06, -5.91278076171875e-05, -1.6461906433105469, -0.000240325927734375, -9.1552734375e-05, -1.549708758830093e-05, -1.0490416570974048e-05, -2.3841855067985307e-07, -0.0014573059743270278, 0.0, -0.000209808349609375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -4.366054400786936, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -0.5236072540283203, -2.322138786315918, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -3.1113624572753906e-05, -2.0265579223632812e-06, -0.018526434898376465, 0.0, -0.006519317626953125, -7.2479248046875e-05, -0.0003414154052734375, 0.0, -0.1921464204788208, 0.0, -0.0009441375732421875, -0.0015468597412109375, -7.05718994140625e-05, -0.00018703937530517578, -1.07287787614041e-05, -3.004073914780747e-05, -5.960462772236497e-07, -0.0022990559227764606, 0.0, -0.00034332275390625]}, {"model_output": {"hole2": [{"hole2": "FREE", "hole1": 3, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template10", "hole0": "Boar"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Boar", "<EOS>", "3", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -4.631777164224211, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -1.2403240203857422, -0.001842498779296875, -1.4781842764932662e-05, 0.0, -1.6450881958007812e-05, -4.768370445162873e-07, -3.3184762001037598, 0.0, -0.0002486705780029297, 0.0, -0.0001125335693359375, -0.0004367828369140625, -5.7220458984375e-06, -5.7220458984375e-06, -0.0014878511428833008, -3.814697265625e-06, -0.0628974437713623, 0.0, -7.05718994140625e-05, 0.0, -3.707408905029297e-05, 0.0, -0.0014667510986328125, -0.0006256103515625, -9.72747802734375e-05, -0.00019085407257080078, -1.9073468138230965e-06, -2.6941295800497755e-05, -1.1920928244535389e-07, -0.0017238829750567675, 0.0, -0.0003662109375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}, "_type": "Template10", "hole0": "Boar"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Boar", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -4.706252572174087, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -1.2403240203857422, -0.001842498779296875, -1.4781842764932662e-05, 0.0, -1.6450881958007812e-05, -4.768370445162873e-07, -0.07175302505493164, 0.0, -1.1682510375976562e-05, 0.0, -0.000255584716796875, -0.0005340576171875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0009081363677978516, -1.33514404296875e-05, -3.382438898086548, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -8.225440979003906e-06, 0.0, -0.003940582275390625, -0.000423431396484375, -9.34600830078125e-05, -0.00016796588897705078, -1.7881377516459906e-06, -2.9087063012411818e-05, -1.1920928244535389e-07, -0.0017507054144516587, 0.0, -0.000331878662109375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"_type": "Template48"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 2, "_type": "Template32"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 75, 190, "3", "<EOS>", 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "score": -4.733058549376437, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -2.9406251907348633, -7.43865966796875e-05, -0.00024235091404989362, -0.00019953830633312464, -0.13544654846191406, -0.2740917205810547, -3.814697265625e-06, -0.00200653076171875, -0.05365300178527832, -5.340576171875e-05, -0.0030469894409179688, -3.0517578125e-05, 0.0, -0.000209808349609375, 0.0, -0.00576019287109375, -0.02022552490234375, -2.288818359375e-05, -5.8412542784935795e-06, -4.291534423828125e-06, -0.00015544651250820607, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Boar", "hole1": 3, "hole3": "FREE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boar", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -4.748759948203201, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -4.567032814025879, -0.00095367431640625, -2.50339189733495e-06, -1.9073486328125e-06, -3.218649908376392e-06, -3.576278118089249e-07, -6.699562072753906e-05, -1.9073486328125e-06, -0.1734764575958252, 0.0, -0.0001461505889892578, 0.0, -0.00014638900756835938, 0.0, -0.0011806488037109375, -0.0020580291748046875, -1.33514404296875e-05, -0.00016605854034423828, -6.437280717364047e-06, -1.3828277587890625e-05, -3.576278118089249e-07, -0.0017684334889054298, 0.0, -0.000423431396484375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template63"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 2, "_type": "Template32"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 106, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "4", "<EOS>", "2", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(4, 2)\n", "score": -5.144254369631199, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -2.8465871810913086, -0.5568723678588867, -0.26406097412109375, -2.86102294921875e-05, -2.8967857360839844e-05, 0.0, -0.034233689308166504, -3.814697265625e-06, -5.53131103515625e-05, -0.1444549560546875, -4.00543212890625e-05, -8.344577508978546e-06, -1.1205671398784034e-05, -0.0006683305837213993, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 4, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Boar", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score": -5.191680416920292, "score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.9332523345947266, -0.0009288787841796875, -0.003040313720703125, -0.0002765655517578125, -3.0517578125e-05, -1.311301275563892e-06, 0.0, -2.8465871810913086, -0.8576545715332031, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.006886482238769531, 0.0, -0.011019706726074219, -8.0108642578125e-05, -0.0003681182861328125, 0.0, -0.16625607013702393, 0.0, -0.000942230224609375, -0.001720428466796875, -6.29425048828125e-05, -0.00021755695343017578, -1.0251946150674485e-05, -3.004073914780747e-05, -5.960462772236497e-07, -0.0022066691890358925, 0.0, -0.0003414154052734375]}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -1.5459864302965727, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -0.13322138786315918, 0.0, -3.4332275390625e-05, -0.2627582550048828, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.0002049462782451883, 0.0, -0.04877281188964844, 0.0, -8.96453857421875e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -1.777626331952888, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.8941001892089844, -1.9073486328125e-06, -0.000362396240234375, 0.0, -5.7220458984375e-06, 0.0, -0.28259146213531494, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.0002002716064453125, 0.0, -2.6702880859375e-05, -0.020328521728515625, -1.9073486328125e-06, 0.0, 0.0, -0.00031835390836931765, 0.0, -0.011672377586364746, 0.0, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -2.961996145487312, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.8941001892089844, -1.9073486328125e-06, -0.000362396240234375, 0.0, -5.7220458984375e-06, 0.0, -1.4793354272842407, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -3.62396240234375e-05, -0.0066013336181640625, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00029964910936541855, 0.0, -0.013198494911193848, 0.0, -5.14984130859375e-05]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.171915231911946, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -1.0615653991699219, -1.9073486328125e-06, -0.0002956390380859375, 0.0, -7.62939453125e-06, 0.0, -0.30464673042297363, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -4.00543212890625e-05, -0.008172988891601562, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.000291532400297001, 0.0, -0.014759540557861328, 0.0, -5.53131103515625e-05]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.222196003348465, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -0.4416332244873047, -8.0108642578125e-05, -5.7220458984375e-06, -0.5024232864379883, 0.0, -4.9591064453125e-05, -0.45081424713134766, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00023415476607624441, 0.0, -0.04482376575469971, 0.0, -0.000110626220703125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "_type": "Template36"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -3.2631869538154135, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -0.13322138786315918, 0.0, -3.4332275390625e-05, -1.5333709716796875, -0.48372745513916016, -2.0265579223632812e-06, -0.011854171752929688, -1.1920928244535389e-07, 0.0, -7.346429629251361e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.5898258933293548, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -2.465603828430176, 0.0, -0.00025343894958496094, 0.0, -0.5528125762939453, -0.0001125335693359375, -3.814697265625e-06, -0.04192554950714111, 0.0, -5.14984130859375e-05, -0.3925914764404297, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00022962912044022232, 0.0, -0.04541349411010742, 0.0, -0.0001010894775390625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n", "score": -3.622225672413151, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -2.087427854537964, -1.9073486328125e-05, -3.0517578125e-05, -0.37945079803466797, -1.9073486328125e-06, 0.0, 0.0, -0.00031558636692352593, 0.0, -0.05396437644958496, 0.0, -0.0001125335693359375]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n", "score": -3.7761332383079207, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -0.4416332244873047, -8.0108642578125e-05, -5.7220458984375e-06, -0.9340248107910156, -2.47955322265625e-05, -3.814697265625e-05, -0.5609025955200195, -1.9073486328125e-06, 0.0, 0.0, -0.000372237351257354, 0.0, -0.05691027641296387, 0.0, -0.0001201629638671875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 2, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -3.868004152841422, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -2.465603828430176, 0.0, -0.00025343894958496094, 0.0, -0.8781366348266602, -1.9073486328125e-06, -0.000396728515625, 0.0, -5.7220458984375e-06, 0.0, -0.3795936107635498, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0001220703125, 0.0, -3.0517578125e-05, -0.03870105743408203, -1.9073486328125e-06, 0.0, 0.0, -0.00032182238646782935, 0.0, -0.014035582542419434, 0.0, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "_type": "Template36"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -4.1058663389694345, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -0.4416332244873047, -8.0108642578125e-05, -5.7220458984375e-06, -0.5024232864379883, 0.0, -4.9591064453125e-05, -1.0466499328613281, -0.322296142578125, -1.9073486328125e-06, -0.010614395141601562, -2.3841855067985307e-07, 0.0, -9.253970347344875e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "_type": "Template36"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "p", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(2, 2)\n", "score": -4.120482001256214, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -0.4416332244873047, -8.0108642578125e-05, -5.7220458984375e-06, -0.9340248107910156, -2.47955322265625e-05, -3.814697265625e-05, -0.8801755905151367, -0.06680965423583984, -2.0265579223632812e-06, -0.015558242797851562, -3.576278118089249e-07, -1.1920928244535389e-07, -0.00010995160118909553, 0.0]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Anodized<UNK>Cub"}, "choice_history": [121, 198, "Anodized", "<UNK>", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Anodized<UNK>Cub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -4.220988647589358, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -2.742478847503662, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -0.13322138786315918, 0.0, -3.4332275390625e-05, -0.2627582550048828, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.0002049462782451883, 0.0, -0.04877281188964844, 0.0, -8.96453857421875e-05]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 2, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "score": -4.315569944271374, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -1.6859235763549805, 0.0, -0.005370736122131348, 0.0, -1.0615653991699219, -1.9073486328125e-06, -0.0002956390380859375, 0.0, -7.62939453125e-06, 0.0, -1.424734354019165, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.0002765655517578125, 0.0, -3.0517578125e-05, -0.03364276885986328, -1.9073486328125e-06, 0.0, 0.0, -0.0003222966624889523, 0.0, -0.012603044509887695, 0.0, -4.9591064453125e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Anodized Robo Cub"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True, taunt=True)\n", "score": -4.938200137868073, "score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -0.13322138786315918, 0.0, -3.4332275390625e-05, -1.5333709716796875, -0.9895715713500977, 0.0, -0.0005016326904296875, -1.1920928244535389e-07, 0.0, -6.571519770659506e-05, 0.0, -0.0002040863037109375, -1.1444091796875e-05, -1.9073486328125e-06, -0.3226841688156128, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -4.1961669921875e-05, -0.856414794921875, 0.0, -0.0011196136474609375]}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -3.7456988845460657, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -1.1177730560302734, -0.000152587890625, -0.25571727752685547, -0.011541604995727539, 0.0, -0.02401256561279297]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -3.827007717404051, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -1.1337890625, -3.814697265625e-06, 0.0, -0.00040435791015625, -7.62939453125e-06, -3.814697265625e-05, 0.0, -0.02521038055419922, 0.0, -0.27667903900146484, -3.814697265625e-06, -0.00276947021484375, -0.002148151397705078, -2.0265579223632812e-06, -0.0010890960693359375, -2.09808349609375e-05, -2.86102294921875e-05, -0.0040988922119140625, -1.9073486328125e-06, -0.0019359588623046875, -4.9591064453125e-05, -0.0003299713134765625, -0.005251288414001465, 0.0, -5.340576171875e-05, 0.0, -0.0026586055755615234, 0.0, -2.09808349609375e-05, -2.47955322265625e-05, -0.0001068115234375, -0.00027382373809814453, 0.0, -0.864405632019043, -1.71661376953125e-05, -0.0032634735107421875, -0.000720977783203125, -1.71661376953125e-05, -0.006346669048070908, 0.0, -6.67572021484375e-05, -0.0295867919921875, -0.001434326171875, -0.0013599395751953125, -1.52587890625e-05, -2.86102294921875e-05, -0.02507994882762432, -3.2186455882765586e-06, -3.814697265625e-06, -1.1103763580322266, -0.000152587890625, -0.24710750579833984, -0.011367082595825195, 0.0, -0.024103164672851562]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -4.309811777852012, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -1.5175457000732422, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -4.38690185546875e-05, 0.0, -0.11117267608642578, 0.0, -0.3062562942504883, -3.814697265625e-06, -0.0009517669677734375, -0.0029796361923217773, -1.9073486328125e-06, -0.000720977783203125, -2.47955322265625e-05, -4.57763671875e-05, -0.002513885498046875, -1.9073486328125e-06, -0.001605987548828125, -5.53131103515625e-05, -0.000324249267578125, -0.005101561546325684, 0.0, -4.76837158203125e-05, 0.0, -0.003629326820373535, 0.0, -1.9073486328125e-05, -2.47955322265625e-05, -9.918212890625e-05, -0.00027763843536376953, 0.0, -0.8596086502075195, -1.71661376953125e-05, -0.00316619873046875, -0.00070953369140625, -1.9073486328125e-05, -0.0059278965927660465, 0.0, -6.866455078125e-05, -0.02912139892578125, -0.0014362335205078125, -0.0013427734375, -1.52587890625e-05, -2.86102294921875e-05, -0.025331947952508926, -3.2186455882765586e-06, -3.814697265625e-06, -1.1137256622314453, -0.0001544952392578125, -0.23556995391845703, -0.011283159255981445, 0.0, -0.024237632751464844]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"id": "<UNK>", "_type": "Name"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(<UNK>), self)\n", "score": -4.44264908162949, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -1.6740150451660156, -0.000118255615234375, -0.005277752876281738, -1.6569954823353328e-05, -0.42671966552734375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"id": "<UNK>", "_type": "Name"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(<UNK>), self)\n", "score": -4.541168040406994, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -1.1337890625, -3.814697265625e-06, 0.0, -0.00040435791015625, -7.62939453125e-06, -3.814697265625e-05, 0.0, -0.02521038055419922, 0.0, -0.27667903900146484, -3.814697265625e-06, -0.00276947021484375, -0.002148151397705078, -2.0265579223632812e-06, -0.0010890960693359375, -2.09808349609375e-05, -2.86102294921875e-05, -0.0040988922119140625, -1.9073486328125e-06, -0.0019359588623046875, -4.9591064453125e-05, -0.0003299713134765625, -0.005251288414001465, 0.0, -5.340576171875e-05, 0.0, -0.0026586055755615234, 0.0, -2.09808349609375e-05, -2.47955322265625e-05, -0.0001068115234375, -0.00027382373809814453, 0.0, -0.864405632019043, -1.71661376953125e-05, -0.0032634735107421875, -0.000720977783203125, -1.71661376953125e-05, -0.006346669048070908, 0.0, -6.67572021484375e-05, -0.0295867919921875, -0.001434326171875, -0.0013599395751953125, -1.52587890625e-05, -2.86102294921875e-05, -0.02507994882762432, -3.2186455882765586e-06, -3.814697265625e-06, -1.667093276977539, -0.0001163482666015625, -0.005368351936340332, -1.6689160474925302e-05, -0.43467235565185547]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"id": "<UNK>", "_type": "Name"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(<UNK>), self)\n", "score": -5.028870291351488, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -1.5175457000732422, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -4.38690185546875e-05, 0.0, -0.11117267608642578, 0.0, -0.3062562942504883, -3.814697265625e-06, -0.0009517669677734375, -0.0029796361923217773, -1.9073486328125e-06, -0.000720977783203125, -2.47955322265625e-05, -4.57763671875e-05, -0.002513885498046875, -1.9073486328125e-06, -0.001605987548828125, -5.53131103515625e-05, -0.000324249267578125, -0.005101561546325684, 0.0, -4.76837158203125e-05, 0.0, -0.003629326820373535, 0.0, -1.9073486328125e-05, -2.47955322265625e-05, -9.918212890625e-05, -0.00027763843536376953, 0.0, -0.8596086502075195, -1.71661376953125e-05, -0.00316619873046875, -0.00070953369140625, -1.9073486328125e-05, -0.0059278965927660465, 0.0, -6.866455078125e-05, -0.02912139892578125, -0.0014362335205078125, -0.0013427734375, -1.52587890625e-05, -2.86102294921875e-05, -0.025331947952508926, -3.2186455882765586e-06, -3.814697265625e-06, -1.6664695739746094, -0.00011444091796875, -0.005357861518859863, -1.680836794548668e-05, -0.4320707321166992]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 17, 156, 50, "hero", "<EOS>", "calculate_attack", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(player.hero.\n            calculate_attack()), self)\n", "score": -5.405262299298435, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -1.1177730560302734, -0.000152587890625, -1.5435476303100586, -3.814697265625e-06, -0.18839168548583984, -0.03270720690488815, -4.768370445162873e-07, -0.16972362995147705, 0.0, -0.016460418701171875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "Is<UNK>", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Is", "<UNK>", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(Is<UNK>(player.minions)))), PlayerSelector())\n", "score": -8.267121747501633, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -0.3733406066894531, 0.0, -1.8136991262435913, -0.0980907678604126, -8.463837730232626e-06, -0.011983871459960938, -0.0028238296508789062, -1.9073486328125e-06, -0.020139694213867188, -8.404254913330078e-05, -5.7220458984375e-06, -0.4032154083251953, -0.000408172607421875, -0.6774144172668457, -0.001480698585510254, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(player.minions)))), PlayerSelector())\n", "score": -8.895759538203336, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -1.8200321197509766, -3.814697265625e-06, -0.2307262420654297, -0.0141676664352417, -1.9073486328125e-06, -0.2611818313598633, -0.0001163482666015625, -0.1304241418838501, -0.0009719133377075195, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "damage", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "damage", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(Summon(damage(), PlayerSelector()))))), self)\n", "score": -9.302723171993257, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -0.3209514617919922, -0.0026531219482421875, -0.23328495025634766, 0.0, -1.8156765699386597, -3.015955189766828e-05, -0.1014556884765625, -0.016330718994140625, -5.340576171875e-05, -0.07453158497810364, -0.0016307288315147161, -0.12742042541503906, -1.9073486328125e-06, -0.10002787411212921, -0.0005211803363636136, -1.1920928244535389e-07, -0.07001972198486328]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "<UNK>", "_type": "Name"}, "args": [{"hole0": "<UNK>", "hole1": 0, "_type": "Template41"}, {"hole0": "Draw", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "take", "<EOS>", 93, 255, "Draw", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 110], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(<UNK>(<UNK>(0), Draw(), PlayerSelector()))))),\n            self)\n", "score": -11.978128729483913, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -0.3209514617919922, -0.0026531219482421875, -0.23328495025634766, 0.0, -0.8957690000534058, -0.002872248413041234, -0.6224775314331055, -0.6229209899902344, -0.00628662109375, -0.012108953669667244, -0.06425468623638153, -0.7830474972724915, -0.0017370651476085186, -0.115936279296875, -5.7220458984375e-06, -0.807361364364624, -6.556510470545618e-06, -0.09607791900634766, -7.62939453125e-06, -0.9111809730529785, -0.0005882968544028699, 0.0, -0.04046630859375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "<UNK>", "_type": "Name"}, "args": [{"hole0": "<UNK>", "hole1": 0, "_type": "Template41"}, {"hole0": "Draw", "_type": "Template46"}, {"hole0": "Draw", "_type": "Template46"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"id": "Player", "_type": "Name"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "take", "<EOS>", 93, 255, "Draw", "<EOS>", 93, 255, "Draw", "<EOS>", 73, 186, "Player", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(<UNK>(<UNK>(0), Draw(), Draw()))))), Player)\n", "score": -12.44118732136225, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -0.3209514617919922, -0.0026531219482421875, -0.23328495025634766, 0.0, -0.8957690000534058, -0.002872248413041234, -0.6224775314331055, -0.6229209899902344, -0.00628662109375, -0.012108953669667244, -0.06425468623638153, -0.7830474972724915, -0.0017370651476085186, -0.115936279296875, -5.7220458984375e-06, -0.807361364364624, -6.556510470545618e-06, -0.09607791900634766, -7.62939453125e-06, -0.7098860740661621, -5.960462772236497e-07, -0.1911449432373047, -0.0003299713134765625, -0.5129766464233398, -0.0009559392929077148]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "<UNK>", "_type": "Name"}, "args": [{"hole0": "<UNK>", "hole1": 0, "_type": "Template41"}, {"hole0": "Draw", "_type": "Template46"}, {"hole0": "Draw", "_type": "Template46"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"id": "Player", "_type": "Name"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "take", "<EOS>", 93, 255, "Draw", "<EOS>", 93, 255, "Draw", "<EOS>", 73, 186, "Player", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(<UNK>(<UNK>(0), Draw(), Draw()))))), Player)\n", "score": -12.55693458932491, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -1.1337890625, -3.814697265625e-06, 0.0, -0.00040435791015625, -7.62939453125e-06, -3.814697265625e-05, 0.0, -0.02521038055419922, 0.0, -0.27667903900146484, -3.814697265625e-06, -0.00276947021484375, -0.002148151397705078, -2.0265579223632812e-06, -0.0010890960693359375, -2.09808349609375e-05, -2.86102294921875e-05, -0.0040988922119140625, -1.9073486328125e-06, -0.0019359588623046875, -4.9591064453125e-05, -0.0003299713134765625, -0.005251288414001465, 0.0, -5.340576171875e-05, 0.0, -0.0026586055755615234, 0.0, -2.09808349609375e-05, -2.47955322265625e-05, -0.0001068115234375, -0.00027382373809814453, 0.0, -0.864405632019043, -1.71661376953125e-05, -0.0032634735107421875, -0.000720977783203125, -1.71661376953125e-05, -0.006346669048070908, 0.0, -6.67572021484375e-05, -0.0295867919921875, -0.001434326171875, -0.0013599395751953125, -1.52587890625e-05, -2.86102294921875e-05, -0.02507994882762432, -3.2186455882765586e-06, -3.814697265625e-06, -0.9570379257202148, -0.00131988525390625, -0.017190933227539062, -3.814697265625e-06, -0.3038606643676758, -1.9073486328125e-06, -0.036180973052978516, -1.1920928244535389e-07, -0.00025176999042741954, -2.3841855067985307e-07, -0.0185699462890625, -0.4192228317260742, -0.004322052001953125, -0.3711366653442383, 0.0, -0.017404556274414062, -1.9073486328125e-06, -0.022142648696899414, 0.0, -0.001466989517211914, -3.576278118089249e-07, -0.07166481018066406, -0.2939777374267578, -0.0032625198364257812, -1.3071279525756836, -1.9073486328125e-06, -0.0048313140869140625, 0.0, -0.008735418319702148, 0.0, -0.03485572338104248, -3.576278118089249e-07, -0.22542762756347656, -0.3215599060058594, -0.0026540756225585938, -0.23225784301757812, 0.0, -0.8960846662521362, -0.0028715350199490786, -0.6225795745849609, -0.6231880187988281, -0.0062770843505859375, -0.012153898365795612, -0.06437139213085175, -0.781708836555481, -0.001737541169859469, -0.11580181121826172, -5.7220458984375e-06, -0.8076142072677612, -6.556510470545618e-06, -0.09608840942382812, -7.62939453125e-06, -0.7100214958190918, -5.960462772236497e-07, -0.19111919403076172, -0.000331878662109375, -0.5136408805847168, -0.0009492635726928711]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "<UNK>", "_type": "Name"}, "args": [{"hole0": "<UNK>", "hole1": 0, "_type": "Template41"}, {"hole0": "PlayerSelector", "_type": "Template46"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "draw", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(<UNK>(<UNK>(0), PlayerSelector(), len(player.\n            minions)))))), PlayerSelector())\n", "score": -13.748028306876058, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -0.3209514617919922, -0.0026531219482421875, -0.23328495025634766, 0.0, -0.8957690000534058, -0.002872248413041234, -0.6224775314331055, -0.6229209899902344, -0.00628662109375, -0.012108953669667244, -0.06425468623638153, -0.9279816150665283, -0.0003230392176192254, -0.028824806213378906, -5.7220458984375e-06, -0.9184708595275879, -0.0001853654976002872, -1.1920928244535389e-07, -0.09111499786376953, -0.09720325469970703, -3.62396240234375e-05, 0.0, -0.04275703430175781, -2.0861445591435768e-05, -1.33514404296875e-05, -0.0001316070556640625, 0.0, -0.011980056762695312, -6.4849853515625e-05, -3.814697265625e-06, -2.1171603202819824, -0.00034332275390625, -0.2876635789871216, -0.0020303723867982626, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "args": [{"func": {"id": "<UNK>", "_type": "Name"}, "args": [{"hole0": "<UNK>", "hole1": 0, "_type": "Template41"}, {"hole0": "PlayerSelector", "_type": "Template46"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}], "_type": "Call"}, {"body": {"left": {"func": {"id": "type", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "args": {"hole0": "x", "_type": "Template26"}, "_type": "Lambda"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "draw", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "minions", "<EOS>", 70, 180, 4, 229, "x", "<EOS>", 21, 166, 20, 163, 25, 186, "type", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 8, 320, 113], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(game.<UNK>(<UNK>(<UNK>(0), PlayerSelector(), len(player.\n            minions)))))), lambda x: type(game.other_player.minions) == 0)\n", "score": -15.289227143717483, "score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -1.2991018295288086, -1.9073486328125e-06, -0.0048389434814453125, 0.0, -0.008684873580932617, 0.0, -0.035057902336120605, -3.576278118089249e-07, -0.22602272033691406, -0.3209514617919922, -0.0026531219482421875, -0.23328495025634766, 0.0, -0.8957690000534058, -0.002872248413041234, -0.6224775314331055, -0.6229209899902344, -0.00628662109375, -0.012108953669667244, -0.06425468623638153, -0.9279816150665283, -0.0003230392176192254, -0.028824806213378906, -5.7220458984375e-06, -0.9184708595275879, -0.0001853654976002872, -1.1920928244535389e-07, -0.09111499786376953, -0.09720325469970703, -3.62396240234375e-05, 0.0, -0.04275703430175781, -2.0861445591435768e-05, -1.33514404296875e-05, -0.0001316070556640625, 0.0, -0.011980056762695312, -6.4849853515625e-05, -3.814697265625e-06, -0.41522884368896484, -0.0023336410522460938, -0.0020771026611328125, -1.71661376953125e-05, -0.19830821454524994, -1.1444091796875e-05, -0.9561395645141602, -0.0001201629638671875, -0.44742679595947266, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.6722756624221802, -2.1219222617219202e-05, -0.000152587890625, -0.0587310791015625, -1.9073486328125e-06, -0.13673686981201172, 0.0, -0.01618194580078125, 0.0, -0.02097296714782715, 0.0, -0.1040031909942627, -1.1920928244535389e-07, -0.015476228669285774, 0.0, -0.000293731689453125, -0.5395183563232422, -1.9073486328125e-06, -0.36234283447265625]}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"_type": "Template60"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 46, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -1.8142586754775039, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -0.4492950439453125, -4.9591064453125e-05, -0.3045539855957031, -5.53131103515625e-05, -0.0001888275146484375, -0.0004901885986328125, 0.0, -0.00109100341796875, -0.0001430511474609375, -0.000118255615234375, -0.0001392364501953125, -4.38690185546875e-05, -0.000331878662109375, -9.30981186684221e-05, 0.0, -4.9591064453125e-05, -0.0007038116455078125, -1.9073486328125e-06, -2.6702880859375e-05, -0.00021004676818847656, -3.933904736186378e-06, -0.0008681963663548231, -3.8384725485229865e-05, -1.52587890625e-05, -0.0004024505615234375]}, {"model_output": {"body": [{"body": [{"hole8": {"_type": "Template60"}, "hole2": "SHAMAN", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 46, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -1.948366622677895, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.1323063373565674, -2.86102294921875e-05, -0.0012340545654296875, 0.0, -0.00012969970703125, 0.0, -0.000835418701171875, -0.001270294189453125, -3.814697265625e-06, -0.46164798736572266, -5.14984130859375e-05, -0.31780147552490234, -5.91278076171875e-05, -0.00019073486328125, -0.0004596710205078125, 0.0, -0.0010776519775390625, -0.00014495849609375, -0.0001163482666015625, -0.0001373291015625, -4.1961669921875e-05, -0.000335693359375, -9.476689592702314e-05, 0.0, -4.9591064453125e-05, -0.0007038116455078125, -1.9073486328125e-06, -2.6702880859375e-05, -0.00021004676818847656, -3.8146954466355965e-06, -0.0008718918543308973, -3.826551983365789e-05, -1.52587890625e-05, -0.000400543212890625]}, {"model_output": {"body": [{"body": [{"hole8": {"_type": "Template60"}, "hole2": "WARRIOR", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 46, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -2.2407462406417835, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.2847340106964111, -0.0001583099365234375, -0.001171112060546875, 0.0, -0.00012969970703125, 0.0, -0.0011196136474609375, -0.0013713836669921875, -3.814697265625e-06, -0.6070423126220703, -5.7220458984375e-05, -0.31203746795654297, -6.103515625e-05, -0.0001888275146484375, -0.0003948211669921875, 0.0, -0.001026153564453125, -0.0001354217529296875, -0.0001201629638671875, -0.000133514404296875, -4.1961669921875e-05, -0.000324249267578125, -9.178694017464295e-05, 0.0, -4.9591064453125e-05, -0.000705718994140625, -1.9073486328125e-06, -2.6702880859375e-05, -0.00020813941955566406, -3.933904736186378e-06, -0.0008739184122532606, -3.8384725485229865e-05, -1.52587890625e-05, -0.0004024505615234375]}, {"model_output": {"body": [{"body": [{"hole8": {"_type": "Template59"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 45, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -3.1433677493341747, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -0.4492950439453125, -4.9591064453125e-05, -1.6297836303710938, -0.0017976760864257812, -6.4849853515625e-05, -0.00116729736328125, 0.0, -0.002777099609375, -8.0108642578125e-05, -6.103515625e-05, -6.67572021484375e-05, -0.000110626220703125, -0.000293731689453125, -8.141662692651153e-05, 0.0, -4.57763671875e-05, -0.0007877349853515625, -1.9073486328125e-06, -2.86102294921875e-05, -0.00021183490753173828, -3.8146954466355965e-06, -0.0008606865303590894, -4.5298667828319594e-05, -1.33514404296875e-05, -0.0003948211669921875]}, {"model_output": {"body": [{"body": [{"hole8": {"_type": "Template59"}, "hole2": "SHAMAN", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 45, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -3.2312100946010105, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.1323063373565674, -2.86102294921875e-05, -0.0012340545654296875, 0.0, -0.00012969970703125, 0.0, -0.000835418701171875, -0.001270294189453125, -3.814697265625e-06, -0.46164798736572266, -5.14984130859375e-05, -1.5963926315307617, -0.0020008087158203125, -6.866455078125e-05, -0.001247406005859375, 0.0, -0.002819061279296875, -8.20159912109375e-05, -6.103515625e-05, -6.866455078125e-05, -0.0001125335693359375, -0.000293731689453125, -8.11782301752828e-05, 0.0, -4.57763671875e-05, -0.000789642333984375, -1.9073486328125e-06, -2.86102294921875e-05, -0.00021183490753173828, -3.8146954466355965e-06, -0.0008623554604128003, -4.517946581472643e-05, -1.33514404296875e-05, -0.0003948211669921875]}, {"model_output": {"body": [{"body": [{"hole8": {"_type": "Template59"}, "hole2": "WARRIOR", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "overload", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 45, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -3.568327647645674, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.2847340106964111, -0.0001583099365234375, -0.001171112060546875, 0.0, -0.00012969970703125, 0.0, -0.0011196136474609375, -0.0013713836669921875, -3.814697265625e-06, -0.6070423126220703, -5.7220458984375e-05, -1.6357660293579102, -0.001766204833984375, -7.05718994140625e-05, -0.0010204315185546875, 0.0, -0.0027713775634765625, -7.43865966796875e-05, -6.67572021484375e-05, -6.67572021484375e-05, -0.000110626220703125, -0.00028228759765625, -7.664863369427621e-05, 0.0, -4.76837158203125e-05, -0.000782012939453125, -1.9073486328125e-06, -2.86102294921875e-05, -0.00020992755889892578, -3.8146954466355965e-06, -0.0008612825185991824, -4.541787347989157e-05, -1.33514404296875e-05, -0.000396728515625]}, {"model_output": {"body": [{"body": [{"hole8": {"elts": [{"hole0": "ManaChange", "hole1": [{"hole0": "Count", "hole1": {"id": "DeadMinionSelector", "_type": "Name"}, "hole3": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template35"}, {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "hole2": "WARRIOR", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "buffs", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 233, "Mana", "Change", "<EOS>", 321, 84, 238, "Count", "<EOS>", 25, 186, "Dead", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 115, 305, 152, 46, 105, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=\n            BothPlayer())), -1))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -3.8321556648793376, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.2847340106964111, -0.0001583099365234375, -0.001171112060546875, 0.0, -0.00012969970703125, 0.0, -0.0011196136474609375, -0.0013713836669921875, -3.814697265625e-06, -1.2408475875854492, -3.814697265625e-06, -0.932220458984375, -0.0002384185791015625, -0.0003337860107421875, -0.00324249267578125, -0.0049591064453125, -0.0038046836853027344, -0.002118706703186035, -0.001010894775390625, -2.6702880859375e-05, -0.05990123748779297, -0.006730079650878906, -0.0001574750931467861, -3.814697265625e-06, -0.00017547607421875, -1.1444091796875e-05, -0.0102006196975708, -0.014505624771118164, -0.00043487548828125, 0.0, -0.0004444122314453125, -9.5367431640625e-06, -4.57763671875e-05, -0.04434394836425781, -1.1444091796875e-05, -0.014129638671875, 0.0, -0.0003104209899902344, -2.6345251171733253e-05, -1.33514404296875e-05, -0.054962158203125, -0.0002384185791015625, -0.000949859619140625, -0.009676933288574219, -0.0028858184814453125, -0.10040760040283203, -0.0001068115234375, -0.0006313323974609375, 0.0, -0.0008754730224609375, -0.00026702880859375, -6.4849853515625e-05, -4.9591064453125e-05, -9.72747802734375e-05, -0.0002117156982421875, -0.00023183516168501228, 0.0, -3.24249267578125e-05, -0.0015430450439453125, -1.9073486328125e-06, -2.288818359375e-05, -0.00021016597747802734, -4.053113570989808e-06, -0.0011372544104233384, -4.291450386517681e-05, -1.71661376953125e-05, -0.0004596710205078125]}, {"model_output": {"body": [{"body": [{"hole8": {"elts": [{"hole0": "ManaChange", "hole1": [{"hole0": "Count", "hole1": {"id": "DeadMinionSelector", "_type": "Name"}, "hole3": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template35"}, {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "buffs", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 233, "Mana", "Change", "<EOS>", 321, 84, 238, "Count", "<EOS>", 25, 186, "Dead", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 115, 305, 152, 46, 105, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=\n            BothPlayer())), -1))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -3.9140305117239222, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -1.564626693725586, -3.814697265625e-06, -0.9510326385498047, -0.0002460479736328125, -0.0003337860107421875, -0.0034399032592773438, -0.00516510009765625, -0.004062294960021973, -0.002191305160522461, -0.001041412353515625, -2.6702880859375e-05, -0.05946922302246094, -0.0067729949951171875, -0.00015759428788442165, -3.814697265625e-06, -0.0001811981201171875, -1.1444091796875e-05, -0.01024162769317627, -0.014461755752563477, -0.0004329681396484375, 0.0, -0.0004444122314453125, -9.5367431640625e-06, -4.57763671875e-05, -0.044220924377441406, -1.1444091796875e-05, -0.01407623291015625, 0.0, -0.0003104209899902344, -2.6345251171733253e-05, -1.33514404296875e-05, -0.055095672607421875, -0.000240325927734375, -0.00093841552734375, -0.009706497192382812, -0.0028362274169921875, -0.10079765319824219, -0.0001049041748046875, -0.000637054443359375, 0.0, -0.000873565673828125, -0.0002689361572265625, -6.4849853515625e-05, -4.9591064453125e-05, -9.72747802734375e-05, -0.0002117156982421875, -0.00023421879450324923, 0.0, -3.24249267578125e-05, -0.0015392303466796875, -1.9073486328125e-06, -2.288818359375e-05, -0.00021016597747802734, -4.053113570989808e-06, -0.0011373736197128892, -4.291450386517681e-05, -1.71661376953125e-05, -0.0004596710205078125]}, {"model_output": {"body": [{"body": [{"hole8": {"elts": [{"hole0": "ManaChange", "hole1": [{"hole0": "Count", "hole1": {"id": "DeadMinionSelector", "_type": "Name"}, "hole3": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template35"}, {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "hole2": "SHAMAN", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "buffs", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 233, "Mana", "Change", "<EOS>", 321, 84, 238, "Count", "<EOS>", 25, 186, "Dead", "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 115, 305, 152, 46, 105, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=\n            BothPlayer())), -1))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -4.040496308286038, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.1323063373565674, -2.86102294921875e-05, -0.0012340545654296875, 0.0, -0.00012969970703125, 0.0, -0.000835418701171875, -0.001270294189453125, -3.814697265625e-06, -1.5686264038085938, -5.7220458984375e-06, -0.9616765975952148, -0.0002613067626953125, -0.0003490447998046875, -0.0033979415893554688, -0.0051174163818359375, -0.003764629364013672, -0.0020607709884643555, -0.000988006591796875, -2.86102294921875e-05, -0.060878753662109375, -0.006751060485839844, -0.00015807111049070954, -3.814697265625e-06, -0.000171661376953125, -1.1444091796875e-05, -0.010237812995910645, -0.014489412307739258, -0.000431060791015625, 0.0, -0.000446319580078125, -9.5367431640625e-06, -4.57763671875e-05, -0.0446014404296875, -1.1444091796875e-05, -0.01416778564453125, 0.0, -0.0003104209899902344, -2.6345251171733253e-05, -1.33514404296875e-05, -0.055267333984375, -0.000240325927734375, -0.0009441375732421875, -0.009686470031738281, -0.0028858184814453125, -0.10251235961914062, -0.0001068115234375, -0.000637054443359375, 0.0, -0.0008754730224609375, -0.0002689361572265625, -6.4849853515625e-05, -4.9591064453125e-05, -9.5367431640625e-05, -0.000213623046875, -0.00023779422917868942, 0.0, -3.24249267578125e-05, -0.0015506744384765625, -1.9073486328125e-06, -2.288818359375e-05, -0.00021016597747802734, -4.053113570989808e-06, -0.0011389233404770494, -4.3033709516748786e-05, -1.71661376953125e-05, -0.000461578369140625]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"id": "target", "_type": "Name"}, "attr": "health", "_type": "Attribute"}, "ops": [{"_type": "Eq"}], "comparators": [{"hole0": {"id": "target", "_type": "Name"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Compare"}, {"hole0": {"id": "target", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "filter_func", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda target: target.health == target.\n            calculate_max_health() and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.3752845992157745, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -2.5892724990844727, -2.09808349609375e-05, -0.04349517822265625, -0.0005340576171875, -0.0015926361083984375, -0.000247955322265625, -0.11657083034515381, -1.9073486328125e-06, -0.08850860595703125, -0.0004119873046875, -0.0003948211669921875, -0.0013332366943359375, -0.0006389617919921875, -0.000156402587890625, -0.5359354019165039, -7.62939453125e-06, -0.0030460357666015625, 0.0, -0.010773658752441406, -9.5367431640625e-06, -0.005156752187758684, 0.0, -2.47955322265625e-05, -0.6877870559692383, -1.1444091796875e-05, -0.05720329284667969, -1.9073486328125e-05, -8.392333984375e-05, -7.62939453125e-06, -0.021950721740722656, -1.9073486328125e-06, -0.002698897384107113, -3.814697265625e-06, -0.08331775665283203, -6.866455078125e-05, -0.0001811981201171875, -2.6702880859375e-05, -0.01122283935546875, 0.0, -0.031844139099121094, -0.0017606019973754883, -0.0063571929931640625, -0.001773834228515625, -0.00014507770538330078, -1.52587890625e-05, -0.00025177001953125, -0.009735107421875, -2.6702880859375e-05, -2.47955322265625e-05, -5.7220458984375e-05, -0.0001506805419921875, -0.0009105842909775674, 0.0, -4.00543212890625e-05, -0.0021677017211914062, -3.814697265625e-06, -2.86102294921875e-05, -0.00030362606048583984, -4.649158654501662e-06, -0.0011425004340708256, -7.056967297103256e-05, -2.09808349609375e-05, -0.000385284423828125]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"id": "target", "_type": "Name"}, "attr": "health", "_type": "Attribute"}, "ops": [{"_type": "Eq"}], "comparators": [{"hole0": {"id": "target", "_type": "Name"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Compare"}, {"hole0": {"id": "target", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "SHAMAN", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "filter_func", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 8, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda target: target.health == target.\n            calculate_max_health() and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.462735096715733, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.1323063373565674, -2.86102294921875e-05, -0.0012340545654296875, 0.0, -0.00012969970703125, 0.0, -0.000835418701171875, -0.001270294189453125, -3.814697265625e-06, -2.5652103424072266, -2.288818359375e-05, -0.045517921447753906, -0.0005588531494140625, -0.0016651153564453125, -0.0002422332763671875, -0.11544203758239746, -1.9073486328125e-06, -0.08510875701904297, -0.000400543212890625, -0.0004119873046875, -0.001354217529296875, -0.00063323974609375, -0.000156402587890625, -0.5403261184692383, -7.62939453125e-06, -0.0030059814453125, 0.0, -0.010933876037597656, -7.62939453125e-06, -0.005142804700881243, 0.0, -2.47955322265625e-05, -0.6875104904174805, -1.1444091796875e-05, -0.057059288024902344, -1.9073486328125e-05, -8.392333984375e-05, -7.62939453125e-06, -0.02181529998779297, -1.9073486328125e-06, -0.002694367431104183, -3.814697265625e-06, -0.0847015380859375, -6.866455078125e-05, -0.00017547607421875, -2.6702880859375e-05, -0.011124610900878906, 0.0, -0.03194713592529297, -0.0017415285110473633, -0.0063323974609375, -0.001781463623046875, -0.00014507770538330078, -1.52587890625e-05, -0.00025177001953125, -0.009820938110351562, -2.6702880859375e-05, -2.47955322265625e-05, -5.7220458984375e-05, -0.0001506805419921875, -0.0009180876659229398, 0.0, -4.00543212890625e-05, -0.00215911865234375, -3.814697265625e-06, -2.86102294921875e-05, -0.00029981136322021484, -4.649158654501662e-06, -0.0011441693641245365, -7.045047095743939e-05, -2.09808349609375e-05, -0.000385284423828125]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"hole0": {"id": "target", "_type": "Name"}, "hole1": "calculate_attack", "_type": "Template43"}, "ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare"}, {"hole0": {"id": "target", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "filter_func", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda target: target.calculate_attack() <= 3 and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.568709661561115, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -2.5892724990844727, -2.09808349609375e-05, -0.04349517822265625, -0.0005340576171875, -0.0015926361083984375, -0.000247955322265625, -0.11657083034515381, -1.9073486328125e-06, -0.08850860595703125, -0.0004119873046875, -0.0003948211669921875, -0.0013332366943359375, -0.0006389617919921875, -0.000156402587890625, -0.8987064361572266, -5.340576171875e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.00043010711669921875, -1.9073486328125e-06, -0.10863320529460907, -3.814697265625e-06, -0.0001049041748046875, -0.5182113647460938, -3.814697265625e-05, -0.03887939453125, -0.0013217926025390625, -6.29425048828125e-05, -0.000934600830078125, -1.33514404296875e-05, -0.002872467041015625, -1.9073486328125e-06, -0.08745861053466797, -0.0002288818359375, -0.0023632049560546875, -0.0004329681396484375, -5.543231964111328e-05, -5.7220458984375e-06, -0.0002193450927734375, -0.00351715087890625, -2.47955322265625e-05, -3.4332275390625e-05, -7.82012939453125e-05, -0.0001125335693359375, -0.0010769545333459973, 0.0, -4.00543212890625e-05, -0.0022487640380859375, -1.9073486328125e-06, -2.86102294921875e-05, -0.00031697750091552734, -4.649158654501662e-06, -0.0011438115034252405, -6.604001100640744e-05, -1.9073486328125e-05, -0.0004062652587890625]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"hole0": {"id": "target", "_type": "Name"}, "hole1": "calculate_attack", "_type": "Template43"}, "ops": [{"_type": "LtE"}], "comparators": [{"_type": "Template61"}], "_type": "Compare"}, {"hole0": {"id": "target", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "SHAMAN", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "filter_func", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 37, 249, 25, 186, "target", "<EOS>", "calculate_attack", "<EOS>", 317, 15, 320, 104, 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda target: target.calculate_attack() <= 3 and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.644795931019871, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.1323063373565674, -2.86102294921875e-05, -0.0012340545654296875, 0.0, -0.00012969970703125, 0.0, -0.000835418701171875, -0.001270294189453125, -3.814697265625e-06, -2.5652103424072266, -2.288818359375e-05, -0.045517921447753906, -0.0005588531494140625, -0.0016651153564453125, -0.0002422332763671875, -0.11544203758239746, -1.9073486328125e-06, -0.08510875701904297, -0.000400543212890625, -0.0004119873046875, -0.001354217529296875, -0.00063323974609375, -0.000156402587890625, -0.8920373916625977, -4.9591064453125e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.00043201446533203125, -1.9073486328125e-06, -0.10896138846874237, -3.814697265625e-06, -0.0001087188720703125, -0.5186252593994141, -4.00543212890625e-05, -0.03827190399169922, -0.0013074874877929688, -6.103515625e-05, -0.00093841552734375, -1.33514404296875e-05, -0.0028486251831054688, -1.9073486328125e-06, -0.08801841735839844, -0.0002288818359375, -0.0023622512817382812, -0.000431060791015625, -5.543231964111328e-05, -5.7220458984375e-06, -0.0002193450927734375, -0.003509521484375, -2.47955322265625e-05, -3.4332275390625e-05, -7.82012939453125e-05, -0.0001125335693359375, -0.001087312470190227, 0.0, -4.00543212890625e-05, -0.0022554397583007812, -1.9073486328125e-06, -2.86102294921875e-05, -0.00031697750091552734, -4.649158654501662e-06, -0.0011436922941356897, -6.604001100640744e-05, -1.9073486328125e-05, -0.0004062652587890625]}, {"model_output": {"body": [{"body": [{"hole8": {"body": {"op": {"_type": "And"}, "values": [{"left": {"value": {"id": "target", "_type": "Name"}, "attr": "health", "_type": "Attribute"}, "ops": [{"_type": "NotEq"}], "comparators": [{"hole0": {"id": "target", "_type": "Name"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Compare"}, {"hole0": {"id": "target", "_type": "Name"}, "hole1": "spell_targetable", "_type": "Template43"}], "_type": "BoolOp"}, "args": {"hole0": "target", "_type": "Template26"}, "_type": "Lambda"}, "hole2": "MAGE", "hole1": 2, "hole3": "COMMON", "hole5": {"_type": "Template50"}, "hole4": "target_func", "_type": "Template0", "hole6": "find_spell_target", "hole7": "filter_func", "hole0": "Crackle"}, {"body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template65"}], "name": "Crackle", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "target", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 25, 186, "target", "<EOS>", "health", "<EOS>", 317, 16, 320, 90, 249, 25, 186, "target", "<EOS>", "calculate_max_health", "<EOS>", 90, 249, 25, 186, "target", "<EOS>", "spell_targetable", "<EOS>", 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            filter_func=lambda target: target.health != target.\n            calculate_max_health() and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score": -5.723926013411074, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -2.5892724990844727, -2.09808349609375e-05, -0.04349517822265625, -0.0005340576171875, -0.0015926361083984375, -0.000247955322265625, -0.11657083034515381, -1.9073486328125e-06, -0.08850860595703125, -0.0004119873046875, -0.0003948211669921875, -0.0013332366943359375, -0.0006389617919921875, -0.000156402587890625, -0.5359354019165039, -7.62939453125e-06, -0.0030460357666015625, 0.0, -0.010773658752441406, -9.5367431640625e-06, -0.005156752187758684, 0.0, -2.47955322265625e-05, -1.1292829513549805, -0.0001506805419921875, -0.008327484130859375, -2.09808349609375e-05, -0.00048828125, -1.9073486328125e-05, -0.0050907135009765625, -1.9073486328125e-06, -0.004962086211889982, -3.814697265625e-06, -0.05173301696777344, -8.392333984375e-05, -0.0001678466796875, -2.86102294921875e-05, -0.012440681457519531, 0.0, -0.034862637519836426, -0.0020362138748168945, -0.00634002685546875, -0.0016803741455078125, -0.00014317035675048828, -1.33514404296875e-05, -0.000240325927734375, -0.0070896148681640625, -2.6702880859375e-05, -2.6702880859375e-05, -5.7220458984375e-05, -0.0001430511474609375, -0.000888429582118988, 0.0, -3.814697265625e-05, -0.002094268798828125, -3.814697265625e-06, -2.86102294921875e-05, -0.00030171871185302734, -4.649158654501662e-06, -0.0011483416892588139, -7.140407979022712e-05, -2.09808349609375e-05, -0.000385284423828125]}, {"model_output": {"body": [], "_type": "Module"}, "choice_history": [120, 185, 331], "inferred_code": "", "score": -21.659961700439453, "score_history": [-0.001598358154296875, -5.7220458984375e-05, -21.658306121826172]}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(1), self)\n", "score": -1.1187238054389752, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.7899866104125977, -0.000213623046875, -0.000102996826171875, -0.12238693237304688, -2.3841855067985307e-07, -0.00041683288873173296, 0.0, -0.000457763671875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -1.625546612309222, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -0.26248735189437866, -4.768370445162873e-07, -1.33514404296875e-05, -0.027679443359375, -0.00069427490234375, -0.049933433532714844, -0.4673348665237427, -3.814697265625e-06, -0.0026865005493164062]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n", "score": -2.297879375981097, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -0.26248735189437866, -4.768370445162873e-07, -1.33514404296875e-05, -0.027679443359375, -0.00069427490234375, -0.049933433532714844, -1.139339566230774, 0.0, -0.0030183792114257812]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(1), self)\n", "score": -3.1971654630888224, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.7899866104125977, -0.000213623046875, -0.000102996826171875, -2.2008848190307617, -2.1457672119140625e-06, -0.00017177636618725955, 0.0, -0.000644683837890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_max_health()), self)\n", "score": -3.2990571041091243, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -1.5828218460083008, -1.1682462172757369e-05, -1.1444091796875e-05, -0.08820438385009766, -0.0010242462158203125, -0.38332271575927734, -0.427074670791626, -3.814697265625e-06, -0.00186920166015625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -3.8934150238545726, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -2.725137710571289, -2.86102294921875e-05, 0.0, -9.989736281568184e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -5.53131103515625e-05, -1.1563301086425781e-05, 0.0, -0.000743865966796875, -3.62396240234375e-05, -0.00189208984375, -0.001049041748046875, -0.017923355102539062, -0.05600690096616745, 0.0, -0.002422332763671875, -0.2246408462524414, -0.00030517578125, -0.000835418701171875, -3.814697265625e-06, -0.000102996826171875, -0.22558444738388062, -4.768370445162873e-07, -1.52587890625e-05, -0.033545494079589844, -0.000713348388671875, -0.050995826721191406, -0.5104180574417114, -3.814697265625e-06, -0.0027551651000976562]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -4.012405492780999, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -1.5828218460083008, -1.1682462172757369e-05, -1.1444091796875e-05, -0.08820438385009766, -0.0010242462158203125, -0.38332271575927734, -1.1399738788604736, 0.0, -0.0023221969604492188]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.294574436264156, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -3.6162071228027344, 0.0, -0.0001125335693359375, -0.016565322875976562, -0.0110321044921875, -0.5015385746955872, -0.0008057355880737305]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n", "score": -4.437241127065022, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -2.725137710571289, -2.86102294921875e-05, 0.0, -9.989736281568184e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -5.53131103515625e-05, -1.1563301086425781e-05, 0.0, -0.000743865966796875, -3.62396240234375e-05, -0.00189208984375, -0.001049041748046875, -0.017923355102539062, -0.05600690096616745, 0.0, -0.002422332763671875, -0.2246408462524414, -0.00030517578125, -0.000835418701171875, -3.814697265625e-06, -0.000102996826171875, -0.22558444738388062, -4.768370445162873e-07, -1.52587890625e-05, -0.033545494079589844, -0.000713348388671875, -0.050995826721191406, -1.0538979768753052, 0.0, -0.00310516357421875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(1), self)\n", "score": -4.545951192898428, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -2.725137710571289, -2.86102294921875e-05, 0.0, -9.989736281568184e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -5.53131103515625e-05, -1.1563301086425781e-05, 0.0, -0.000743865966796875, -3.62396240234375e-05, -0.00189208984375, -0.001049041748046875, -0.017923355102539062, -0.05600690096616745, 0.0, -0.002422332763671875, -1.6106548309326172, -0.000225067138671875, -9.1552734375e-05, -0.09046649932861328, -2.1457672119140625e-06, -0.0004268441116437316, 0.0, -0.0005893707275390625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "die", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "score": -5.06380891473782, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -4.859250068664551, -3.814697265625e-06, -7.2479248046875e-05, -0.05616950988769531]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "Frozen", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -5.51039766939175, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -3.6162071228027344, 0.0, -0.0001125335693359375, -0.016565322875976562, -0.0110321044921875, -1.717698335647583, -0.000469207763671875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "1", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "1", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(1()))\n", "score": -6.088650700168728, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -3.6162071228027344, 0.0, -0.0001125335693359375, -0.016565322875976562, -0.0110321044921875, -2.296416759490967, -3.814697265625e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": {"value": {"_type": "Template52"}, "attr": "deathrattle", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "deathrattle", "<EOS>", "append", "<EOS>", 320, 105], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.deathrattle.append()\n", "score": -6.617864426689259, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -4.443817138671875, 0.0, -0.0007991790771484375, -0.5443346500396729, -1.1920928244535389e-07, -0.5236157774925232, 0.0, -1.71661376953125e-05, -0.9690752029418945]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "<UNK>", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 17, 156, 41, "card", "<EOS>", "<UNK>", "<EOS>", 110], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.card.\n            <UNK>()), self)\n", "score": -6.904599525447793, "score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -1.5828218460083008, -1.1682462172757369e-05, -1.1444091796875e-05, -0.08820438385009766, -0.0010242462158203125, -1.4239110946655273, 0.0, -0.6777305603027344, -0.7208093404769897, -3.826618194580078e-05, -1.5939080715179443, -2.145764938177308e-06, -0.0014133453369140625]}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -0.20903512681690017, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -0.12312793731689453, -8.96453857421875e-05, -0.0007877349853515625]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, taunt=True)\n", "score": -3.384010522019537, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -3.2989044189453125, 0.0, -7.62939453125e-05]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(1, 4, windfury=True)\n", "score": -3.704515177222106, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -3.5380983352661133, -1.33514404296875e-05, -0.0001201629638671875, -0.03071308135986328, -2.47955322265625e-05, -1.072883515007561e-05, -1.0728830375228426e-06, -9.081626194529235e-05, -1.9073486328125e-06, -0.11075496673583984, -0.00011444091796875, -0.0003566741943359375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "score": -4.024713723313482, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -3.9395809173583984, 0.0, -0.000102996826171875]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True)\n", "score": -4.568601815354498, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -4.48335075378418, -1.9073486328125e-06, -0.0002193450927734375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.690430740069125, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -4.6298933029174805, -0.00017547607421875, -9.894352842820808e-06, -1.1920928244535389e-07, -2.6822088329936378e-05, -1.7523765563964844e-05]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Machine"}, "choice_history": [121, 198, "<UNK>", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class <UNK>Machine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -4.976424086232157, "score_history": [-0.00016021728515625, -2.288818359375e-05, -4.776168346405029, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -0.12312793731689453, -8.96453857421875e-05, -0.0007877349853515625]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -5.143183799924202, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -4.830787658691406, -0.0007762908935546875, -0.001468658447265625, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.07021713256835938, -9.775161743164062e-06, -2.86102294921875e-05, 0.0, -0.0034542083740234375, 0.0, -8.7738037109375e-05, -0.00205230712890625, -0.000152587890625, -1.3709068298339844e-05, -5.960462772236497e-07, -5.792853335151449e-05, -3.814697265625e-06, -0.21868419647216797, -9.918212890625e-05, -0.0020046234130859375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "divine_shield", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n", "score": -5.24781629289356, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -5.162342071533203, -3.814697265625e-06, -0.0004405975341796875]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "create_minion", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "create_minion", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, create_minion):\n        return Minion(1, 4, windfury=True)\n", "score": -5.610528513279405, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -5.408661842346191, 0.0, -9.72747802734375e-05, -0.05224418640136719, -4.57763671875e-05, -2.0384783056215383e-05, -9.536738616588991e-07, -0.00014871847815811634, -2.0265579223632812e-06, -0.12398052215576172, -0.0001068115234375, -0.0010051727294921875]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "COMMON", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, COMMON=True)\n", "score": -5.681904999863775, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -5.591431617736816, -3.814697265625e-06, -0.00543975830078125]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"arg": "windfury", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 328, 119, 310, "windfury", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True, taunt=True)\n", "score": -5.7873980777782705, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -5.0795135498046875, -0.12867069244384766, -1.1920917586394353e-07, -0.00019288063049316406, -5.364418029785156e-05, -1.1920928244535389e-07, -2.562817098805681e-05, -5.960462772236497e-07, -0.0018062591552734375, -0.00018310546875, -1.9073486328125e-06, -0.3567993640899658, -0.0001735687255859375, -0.0152130126953125, -0.0032482147216796875, -2.47955322265625e-05, -0.1372309923171997, 0.0, -0.0039520263671875]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 1, "hole1": 4, "hole3": {"elts": [{"hole0": "CantAttack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Cant", "Attack", "<EOS>", 105], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(CantAttack())])\n", "score": -6.272178111922415, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -5.262234687805176, -3.24249267578125e-05, -0.2302713394165039, -0.0023708343505859375, -0.0016021728515625, -0.0062885284423828125, -0.008456230163574219, -0.65924072265625, -0.016213983297348022, -8.26120376586914e-05, -0.000354766845703125]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "4", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "4", "<EOS>", 62], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, 4=True)\n", "score": -6.313665120255621, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -5.980615139007568, 0.0, -0.24802017211914062]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Flying Machine"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 4, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, enrage=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "score": -6.375154761919305, "score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -4.941778659820557, -1.9073486328125e-06, -0.06217384338378906, -0.000400543212890625, -0.0064849853515625, -1.1444091796875e-05, -0.000652313232421875, -0.001346588134765625, -0.0001201629638671875, -0.8722607493400574, -1.0967253729177173e-05, -0.1262044906616211, -0.0110931396484375, -0.04070174694061279, -0.0008362531661987305, -3.933904736186378e-06, -0.00031280517578125, 0.0, -0.00019741058349609375, -0.006589412689208984, -2.86102294921875e-05, -0.0067844390869140625, -0.061004638671875, -0.000270843505859375, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.13104724884033203, -1.71661376953125e-05, -5.7220458984375e-05, -0.01971435546875]}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -1.8077524881438194, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -0.2419595718383789, -0.0002498626708984375, -3.62396240234375e-05, 0.0, -0.019017696380615234, -0.0003997086314484477, -0.00023365020751953125, -3.24249267578125e-05, -0.15503692626953125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.09891128540039062, -0.00020420551300048828, -0.087554931640625, -0.015507698059082031, -2.4078501155599952e-05, -0.00032412115251645446, -0.00029695031116716564, -3.3736228942871094e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "PIRATE", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.357112900953439, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -2.0204036235809326, -3.62396240234375e-05, -0.0011963837314397097, 0.0, -0.004702568054199219, -0.19672584533691406, -0.007913107052445412, -3.5881970688933507e-05, -1.71661376953125e-05, -0.0066661834716796875, -0.00040435791015625, -0.0008240809547714889, -1.9073486328125e-05, -0.00042986677726730704, -0.004000413231551647, 0.0, -0.18862980604171753, -1.71661376953125e-05, -0.15103960037231445, 0.0, -2.503394853192731e-06, -0.000225067138671875, -0.23431015014648438, -0.00030517578125, -4.1961669921875e-05, 0.0, -0.017184734344482422, -0.000428438070230186, -0.00020301342010498047, -3.0517578125e-05, -0.17086124420166016, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.09738552570343018, -0.00020802021026611328, -0.08656597137451172, -0.015646934509277344, -2.4078472051769495e-05, -0.00031875743297860026, -0.0002890824980568141, -3.170967102050781e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"value": "Null", "_type": "NameConstant"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(Null)))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.3828709212313015, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -2.044353485107422, -6.103515625e-05, -0.02203500270843506, -4.5299530029296875e-06, -0.12487220764160156, -0.0027313232421875, -5.2450704970397055e-06, -3.3974538382608443e-05, -0.0009114742279052734, -7.748603820800781e-06, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.6919614086947377, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -0.2419595718383789, -0.0002498626708984375, -3.62396240234375e-05, 0.0, -0.019017696380615234, -0.0003997086314484477, -0.00023365020751953125, -3.24249267578125e-05, -2.190174102783203, -0.0226593017578125, -0.029050827026367188, -2.3841830625315197e-06, -0.00019907174282707274, -6.008147829561494e-05, -3.349781036376953e-05, -1.9073486328125e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.7298890933083158, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -2.338426113128662, -2.47955322265625e-05, -0.07345424592494965, -1.9073486328125e-06, -2.0265579223632812e-06, -0.0003032684326171875, -0.19569015502929688, -8.0108642578125e-05, -1.71661376953125e-05, 0.0, -0.012411713600158691, -0.00042176235001534224, -0.00019741058349609375, -3.62396240234375e-05, -0.08474922180175781, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -5.53131103515625e-05, -3.933906555175781e-06, -0.09198379516601562, -0.0001888275146484375, -0.09226036071777344, -0.014635086059570312, -2.3721106117591262e-05, -0.00031744554871693254, -0.00026404857635498047, -2.5987625122070312e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(1))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -3.9365516577885273, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -2.3342502117156982, -3.814697265625e-06, -0.20559002459049225, -1.9073486328125e-06, -4.5299530029296875e-06, -0.000335693359375, -0.23408985137939453, -0.0001239776611328125, -4.9591064453125e-05, 0.0, -0.02645266056060791, -0.000378847005777061, -0.00023353099822998047, -3.4332275390625e-05, -0.10840606689453125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0955132246017456, -0.00019466876983642578, -0.09098052978515625, -0.01486968994140625, -2.4197623133659363e-05, -0.00032221328001469374, -0.00028085705707781017, -3.1828880310058594e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"value": "Null", "_type": "NameConstant"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Self", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), SelfSelector(Null)))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.177444347470896, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -2.513735055923462, -0.0004216432571411133, 0.0, -3.814697265625e-06, -0.5011634826660156, -0.0001068115234375, -0.02832341194152832, -4.410743713378906e-06, -0.08173656463623047, -0.0041599273681640625, -5.245048669166863e-06, -3.075590211665258e-05, -0.0007600784301757812, -9.655952453613281e-06, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.253399676349886, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -2.9145052433013916, 0.0, -0.0005661248578689992, 0.0, -0.0021724700927734375, -0.2717123031616211, -0.024093864485621452, -2.0980818590032868e-05, -1.52587890625e-05, -0.007900238037109375, -0.0003528594970703125, -0.0007467203540727496, -1.9073486328125e-05, -0.0003261539968661964, -0.004563314840197563, 0.0, -0.1817154735326767, -1.52587890625e-05, -0.12930834293365479, -1.9073486328125e-06, -2.2649765014648438e-06, -0.000194549560546875, -0.1643390655517578, -0.000354766845703125, -3.814697265625e-05, 0.0, -0.02249765396118164, -0.00042259684414602816, -0.00024700164794921875, -3.24249267578125e-05, -0.1737966537475586, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -6.103515625e-05, -3.933906555175781e-06, -0.10170173645019531, -0.00019657611846923828, -0.08539390563964844, -0.0154876708984375, -2.407853025943041e-05, -0.00032185623422265053, -0.0002888440794777125, -3.1828880310058594e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.3711814782367355, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -2.368645668029785, -0.5401731729507446, -1.5377991076093167e-05, -0.0001010894775390625, -0.005738258361816406, -0.012151718139648438, -0.008487630635499954, -0.011297590099275112, -9.894371032714844e-06, -5.7220458984375e-06, -0.09200763702392578, -0.0010833740234375, -0.1873793601989746, -8.0108642578125e-05, -0.0028781890869140625, -0.0018768310546875, -0.0015316009521484375, -0.0001583099365234375, -1.9073486328125e-06, 0.0, -0.0026187889743596315, -0.0007047348190099001, -0.00018405914306640625, -0.0001239776611328125, -0.13523483276367188, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -8.392333984375e-05, -9.775161743164062e-06, -0.2247309684753418, -0.000125885009765625, -0.11498916149139404, -1.3589850823336747e-05, 0.0, -0.08412837982177734, -0.0012969970703125, -6.779638351872563e-05, -1.0848039892152883e-05, -8.594988321419805e-05, -2.0265579223632812e-06, -1.9073486328125e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.428608562210798, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -2.758042573928833, -3.814697265625e-06, -0.0114670991897583, 0.0, -0.001871943473815918, -3.0517578125e-05, -0.0007534027099609375, 0.0, -0.0003986358642578125, -1.0728830375228426e-06, -0.36065053939819336, -1.9073486328125e-06, -0.001068711280822754, 0.0, -0.0021381378173828125, -0.2274923324584961, -0.015999553725123405, -2.8848629881395027e-05, -1.71661376953125e-05, -0.0088043212890625, -0.00037384033203125, -0.000833493540994823, -2.288818359375e-05, -0.00037216965574771166, -0.004517180845141411, 0.0, -0.22627504169940948, -1.71661376953125e-05, -0.1436988115310669, 0.0, -2.503394853192731e-06, -0.000225067138671875, -0.2550363540649414, -0.0002422332763671875, -3.4332275390625e-05, 0.0, -0.018984317779541016, -0.0004014967707917094, -0.00023174285888671875, -3.24249267578125e-05, -0.151458740234375, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.09711623191833496, -0.00020420551300048828, -0.0870065689086914, -0.01546478271484375, -2.4078472051769495e-05, -0.0003234057512599975, -0.00029301640461198986, -3.3736228942871094e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MURLOC", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.469016288124635, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -3.1303303241729736, -7.62939453125e-06, -0.00039589405059814453, 0.0, -0.0027790069580078125, -0.28328800201416016, -0.012848850339651108, -2.4437898900941946e-05, -1.33514404296875e-05, -0.007843017578125, -0.000392913818359375, -0.0007522025844082236, -1.52587890625e-05, -0.0003547647502273321, -0.0043923696503043175, 0.0, -0.1734466701745987, -1.52587890625e-05, -0.15724480152130127, -1.9073486328125e-06, -2.2649765014648438e-06, -0.000148773193359375, -0.1568288803100586, -0.0003986358642578125, -3.814697265625e-05, 0.0, -0.01959550380706787, -0.0004239081754349172, -0.00024497509002685547, -3.4332275390625e-05, -0.16559886932373047, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -6.103515625e-05, -3.933906555175781e-06, -0.09983301162719727, -0.00020039081573486328, -0.08543968200683594, -0.015427589416503906, -2.3959408281370997e-05, -0.0003255514893680811, -0.00028097626636736095, -3.170967102050781e-05, -3.814697265625e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "weapon", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "weapon", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(weapon(Buff(ChangeAttack(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.796734446289861, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -2.368645668029785, -0.877373218536377, -0.02130448818206787, -0.000690460205078125, -0.007944107055664062, -0.017608642578125, -0.007639029063284397, -0.007738191168755293, -4.0531158447265625e-06, -1.52587890625e-05, -0.16571903228759766, -0.0009708404541015625, -0.18896710872650146, -5.14984130859375e-05, -0.002780914306640625, -0.001804351806640625, -0.0020751953125, -0.0001773834228515625, -1.9073486328125e-06, 0.0, -0.0023652310483157635, -0.0006491891690529883, -0.0001976490020751953, -0.0001125335693359375, -0.13867759704589844, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -8.7738037109375e-05, -7.867813110351562e-06, -0.21576261520385742, -0.0001239776611328125, -0.11524760723114014, -1.3709059203392826e-05, 0.0, -0.07745647430419922, -0.0012054443359375, -7.029611151665449e-05, -1.0490413842489943e-05, -8.630750380689278e-05, -2.0265579223632812e-06, -1.9073486328125e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole0": 3, "hole1": 2, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score": -4.850052153189033, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -3.0473837852478027, -0.004237002227455378, -4.23191740992479e-05, -1.9073486328125e-06, -0.20322322845458984, -0.017525672912597656, -0.0017703595804050565, -1.52587890625e-05, -0.0031972790602594614, -0.007245564833283424, 0.0, -0.16271817684173584, -1.9073486328125e-05, -0.15800118446350098, 0.0, -9.5367431640625e-06, -2.09808349609375e-05, -0.1526813507080078, -8.392333984375e-05, -3.814697265625e-06, 0.0, -0.10545837879180908, -0.0004273652739357203, -0.00012314319610595703, -0.0001583099365234375, -0.11112022399902344, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.000102996826171875, -5.602836608886719e-05, -0.14429497718811035, -0.0003643035888671875, -0.0035228729248046875, -0.0008258819580078125, -0.0008373260498046875, -0.12110018730163574, -4.38690185546875e-05, -0.00075531005859375, -5.340576171875e-05, -0.007737872190773487, -0.013858795166015625, -3.814697265625e-06, -0.0020427703857421875, -0.0053653717041015625, -6.913469405844808e-06, -4.6490938984788954e-05, -0.00041866302490234375, -1.1920928244535389e-07, -1.9073486328125e-06]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"hole2": "taunt", "hole0": 3, "hole1": 2, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 149, 291, "3", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2, taunt=True)\n", "score": -5.1326085381653, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -0.2419595718383789, -0.0002498626708984375, -3.62396240234375e-05, 0.0, -0.019017696380615234, -0.0003997086314484477, -0.00023365020751953125, -3.24249267578125e-05, -0.15503692626953125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.09891128540039062, -0.00020420551300048828, -3.2188806533813477, -0.03387260437011719, -0.0020840023644268513, -0.0017261491157114506, -0.0003181520733051002, -3.898143768310547e-05, -0.15753880143165588, 0.0, -0.013573646545410156, -0.000568389892578125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 2, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Goblin Auto-Barber"}, {"body": [{"_type": "Template19"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "args": {"_type": "Template17"}, "name": "use", "_type": "FunctionDef"}], "bases": [{"_type": "Template57"}], "name": "GoblinAuto-Barber", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 132, 170, "use", "<EOS>", 2, 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.MURLOC))))\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(3)\n        player.hero.change_temp_attack(3)\n", "score": -7.395595402885306, "score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -0.2419595718383789, -0.0002498626708984375, -3.62396240234375e-05, 0.0, -0.019017696380615234, -0.0003997086314484477, -0.00023365020751953125, -3.24249267578125e-05, -0.15503692626953125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -2.8313121795654297, -0.001316070556640625, -0.5026655197143555, -0.0006465911865234375, -0.3658754825592041, 0.0, -0.005236625671386719, -0.5965375900268555, -0.002773284912109375, -0.11810493469238281, -0.00019073486328125, -5.7220458984375e-06, -0.0004215240478515625, -0.2518939971923828, -9.5367431640625e-06, -0.007929801940917969, -0.1515815705060959, -1.3470649719238281e-05, -0.06008565425872803, -1.9073486328125e-06, -0.00861421599984169, -1.52587890625e-05, -0.017258644104003906, -0.00052642822265625, -1.9073486328125e-05, -0.00040435791015625, -0.10310745239257812, -1.9073486328125e-06, -0.12074851989746094, -0.14752289652824402, -9.5367431640625e-06, -0.4858131408691406, -1.9073486328125e-06, -0.009672913700342178, -1.9073486328125e-05, -0.0003662109375]}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -1.6852787820710518, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -0.9835996627807617, -3.4332275390625e-05, -0.000904083251953125, -8.20159912109375e-05, -0.0008525848388671875, -7.2479248046875e-05, -0.04764270782470703, 0.0, -0.0001239776611328125, 0.0, -1.1444091796875e-05, 0.0, -0.0001392364501953125, -0.0002899169921875, -0.0001239776611328125, -3.814689534920035e-06, -4.112651004106738e-05, -5.960462772236497e-07, 0.0, -0.0007567400461994112, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -0.12140178680419922, -0.00016260147094726562, -0.011999130249023438, -4.768367489305092e-06, -2.47955322265625e-05, -0.0001163482666015625, -0.1038522720336914, -0.01589951105415821, -0.00013172625040169805, -7.62939453125e-06, -0.08928203582763672, -0.00098419189453125, -0.0017368787666782737, -3.814697265625e-06, -0.0013732090592384338, -0.0001926422119140625, -3.814697265625e-06, -0.000213623046875, -1.33514404296875e-05, -0.001445770263671875, -0.027410507202148438, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.002459287643432617, -3.159046173095703e-05, 0.0, 0.0, -0.000396728515625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -2.1586354750951244, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -1.4804658889770508, -4.57763671875e-05, -0.0046977996826171875, -7.05718994140625e-05, -0.0005092620849609375, -0.0001068115234375, -0.019796371459960938, -1.9073486328125e-06, -0.00012969970703125, 0.0, -1.1444091796875e-05, 0.0, -0.0001201629638671875, -0.000301361083984375, -0.0001277923583984375, -3.3378541957063135e-06, -4.339139923104085e-05, -4.768370445162873e-07, 0.0, -0.0007673497311770916, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.12019920349121094, -0.0001684427261352539, -0.0125885009765625, -5.006785613659304e-06, -2.47955322265625e-05, -0.000118255615234375, -0.1070241928100586, -0.01421544048935175, -0.00013947485422249883, -7.62939453125e-06, -0.0894479751586914, -0.0009670257568359375, -0.0017540449043735862, -3.814697265625e-06, -0.0013579204678535461, -0.0001926422119140625, -1.9073486328125e-06, -0.0002117156982421875, -1.33514404296875e-05, -0.0014553070068359375, -0.027204513549804688, -5.7220458984375e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.002454519271850586, -3.159046173095703e-05, 0.0, 0.0, -0.000400543212890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -2.4432276929431254, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -1.6097402572631836, -5.7220458984375e-06, -0.0006961822509765625, -9.1552734375e-05, -0.0008392333984375, -6.866455078125e-05, -0.17745494842529297, 0.0, -0.000110626220703125, 0.0, -1.33514404296875e-05, 0.0, -0.0001430511474609375, -0.000270843505859375, -0.0001010894775390625, -3.933898369723465e-06, -3.623910015448928e-05, -5.960462772236497e-07, 0.0, -0.0007462495123036206, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.1206369400024414, -0.00016260147094726562, -0.011898994445800781, -4.649158654501662e-06, -2.6702880859375e-05, -0.0001201629638671875, -0.1049051284790039, -0.017129510641098022, -0.00012791155313607305, -7.62939453125e-06, -0.0902700424194336, -0.0009708404541015625, -0.00173020304646343, -3.814697265625e-06, -0.0013879090547561646, -0.00019073486328125, -3.814697265625e-06, -0.000213623046875, -1.33514404296875e-05, -0.001434326171875, -0.027322769165039062, -5.7220458984375e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.0024688243865966797, -3.159046173095703e-05, 0.0, 0.0, -0.0003948211669921875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -3.0937622351207636, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -2.4117774963378906, -1.9073486328125e-06, -0.001674652099609375, -0.0001087188720703125, -0.0007114410400390625, -9.5367431640625e-05, -0.02595996856689453, 0.0, -0.0001430511474609375, 0.0, -1.1444091796875e-05, 0.0, -0.0001430511474609375, -0.00028228759765625, -0.0001125335693359375, -3.0994362987257773e-06, -4.23185556428507e-05, -5.960462772236497e-07, 0.0, -0.0007798666483722627, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.12003612518310547, -0.0001665353775024414, -0.012335777282714844, -4.887576324108522e-06, -2.47955322265625e-05, -0.000118255615234375, -0.10639095306396484, -0.015583964064717293, -0.00012981890176888555, -7.62939453125e-06, -0.08971881866455078, -0.00096893310546875, -0.0017457002541050315, -3.814697265625e-06, -0.0013775676488876343, -0.00019073486328125, -1.9073486328125e-06, -0.0002117156982421875, -1.33514404296875e-05, -0.001445770263671875, -0.027103424072265625, -5.7220458984375e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.002455472946166992, -3.159046173095703e-05, 0.0, 0.0, -0.0003986358642578125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 5, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -3.108764605095402, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -1.5943784713745117, -0.00018310546875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -1.1003012657165527, -8.392333984375e-05, -0.003704071044921875, -8.20159912109375e-05, -0.00040435791015625, -8.0108642578125e-05, -0.023218154907226562, 0.0, -0.00014495849609375, 0.0, -7.62939453125e-06, 0.0, -6.29425048828125e-05, -0.0002841949462890625, -0.0001239776611328125, -3.3378541957063135e-06, -4.434503352968022e-05, -4.768370445162873e-07, 0.0, -0.0007845159852877259, -1.1920928244535389e-07, -3.814697265625e-06, -2.288818359375e-05, -0.12363338470458984, -0.0001722574234008789, -0.013304710388183594, -5.006785613659304e-06, -2.47955322265625e-05, -0.000118255615234375, -0.10750389099121094, -0.013961764052510262, -0.00013935564493294805, -7.62939453125e-06, -0.08848285675048828, -0.00092315673828125, -0.0017720455070957541, -3.814697265625e-06, -0.0013660043478012085, -0.000186920166015625, -1.9073486328125e-06, -0.000213623046875, -1.33514404296875e-05, -0.0014514923095703125, -0.0261305570602417, -5.7220458984375e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.0024335384368896484, -3.159046173095703e-05, 0.0, 0.0, -0.000396728515625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 5, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -3.419888967089534, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -1.5943784713745117, -0.00018310546875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -1.3922553062438965, -3.814697265625e-05, -0.00145721435546875, -9.1552734375e-05, -0.0008087158203125, -6.29425048828125e-05, -0.047249794006347656, 0.0, -0.00012969970703125, 0.0, -7.62939453125e-06, 0.0, -6.67572021484375e-05, -0.0002765655517578125, -0.0001201629638671875, -4.053107204526896e-06, -4.2795374611159787e-05, -5.960462772236497e-07, 0.0, -0.000773667823523283, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.12320327758789062, -0.00016641616821289062, -0.012380599975585938, -4.887576324108522e-06, -2.47955322265625e-05, -0.0001163482666015625, -0.10432147979736328, -0.015326591208577156, -0.00013554094766732305, -7.62939453125e-06, -0.08849525451660156, -0.000946044921875, -0.0017509454628452659, -3.814697265625e-06, -0.0013811811804771423, -0.0001850128173828125, -1.9073486328125e-06, -0.000213623046875, -1.33514404296875e-05, -0.0014476776123046875, -0.026357531547546387, -5.7220458984375e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.0024373531341552734, -3.159046173095703e-05, 0.0, 0.0, -0.000392913818359375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -3.7715632183809333, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -1.5943784713745117, -0.00018310546875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -1.7654805183410645, -1.9073486328125e-06, -0.002368927001953125, -0.0001220703125, -0.000446319580078125, -7.43865966796875e-05, -0.02485370635986328, 0.0, -0.0001659393310546875, 0.0, -7.62939453125e-06, 0.0, -7.82012939453125e-05, -0.0002727508544921875, -0.0001163482666015625, -2.980227463922347e-06, -4.351060124463402e-05, -4.768370445162873e-07, 0.0, -0.0008018012740649283, -1.1920928244535389e-07, -3.814697265625e-06, -2.288818359375e-05, -0.12215900421142578, -0.0001703500747680664, -0.013525962829589844, -5.006785613659304e-06, -2.47955322265625e-05, -0.0001163482666015625, -0.10541248321533203, -0.014343352988362312, -0.00013554094766732305, -7.62939453125e-06, -0.0889120101928711, -0.0009212493896484375, -0.0017729991814121604, -3.814697265625e-06, -0.001387670636177063, -0.0001850128173828125, -1.9073486328125e-06, -0.0002117156982421875, -1.33514404296875e-05, -0.0014514923095703125, -0.02594935894012451, -5.7220458984375e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.002432584762573242, -3.159046173095703e-05, 0.0, 0.0, -0.0003948211669921875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "TOTEM", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 96, 327, 118, 248, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.105374492228563, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -1.6097402572631836, -5.7220458984375e-06, -0.0006961822509765625, -9.1552734375e-05, -0.0008392333984375, -6.866455078125e-05, -1.847346305847168, 0.0, -0.000118255615234375, 0.0, -5.7220458984375e-06, 0.0, -0.000179290771484375, -0.000133514404296875, -6.29425048828125e-05, -2.7418095669418108e-06, -3.5762335755862296e-05, -5.960462772236497e-07, 0.0, -0.0007556669879704714, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -0.1141347885131836, -0.00014913082122802734, -0.012326240539550781, -4.41074053014745e-06, -3.0517578125e-05, -0.000133514404296875, -0.10371780395507812, -0.01777467131614685, -0.00012195108865853399, -7.62939453125e-06, -0.0894174575805664, -0.0009765625, -0.0017338985344395041, -3.814697265625e-06, -0.0013354495167732239, -0.000194549560546875, -3.814697265625e-06, -0.0002117156982421875, -1.52587890625e-05, -0.00147247314453125, -0.027200937271118164, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.0024431943893432617, -3.159046173095703e-05, 0.0, 0.0, -0.0003986358642578125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.321141484225606, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -0.9835996627807617, -3.4332275390625e-05, -0.000904083251953125, -8.20159912109375e-05, -0.0008525848388671875, -7.2479248046875e-05, -0.04764270782470703, 0.0, -0.0001239776611328125, 0.0, -1.1444091796875e-05, 0.0, -0.0001392364501953125, -0.0002899169921875, -0.0001239776611328125, -3.814689534920035e-06, -4.112651004106738e-05, -5.960462772236497e-07, 0.0, -0.0007567400461994112, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -0.12140178680419922, -0.00016260147094726562, -0.011999130249023438, -4.768367489305092e-06, -2.47955322265625e-05, -0.0001163482666015625, -0.1038522720336914, -0.01589951105415821, -0.00013172625040169805, -7.62939453125e-06, -2.553462028503418, -0.0004291534423828125, -0.07825520634651184, -8.0108642578125e-05, -0.010020614601671696, -1.9073486328125e-05, -1.52587890625e-05, -0.000186920166015625, -1.52587890625e-05, -0.0014743804931640625, -0.10481560230255127, -1.1444091796875e-05, -6.67572021484375e-05, -3.814697265625e-06, -0.011944174766540527, -5.53131103515625e-05, 0.0, 0.0, -0.000644683837890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.361283181899225, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -3.711505889892578, 0.0, -0.0006427764892578125, -4.38690185546875e-05, -0.0009613037109375, -0.0001239776611328125, -0.012885093688964844, 0.0, -0.000102996826171875, 0.0, -9.5367431640625e-06, 0.0, -0.000171661376953125, -0.0003185272216796875, -0.0001277923583984375, -2.980227463922347e-06, -3.254372131777927e-05, -4.768370445162873e-07, 0.0, -0.0007730717188678682, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.11289501190185547, -0.0001684427261352539, -0.011673927307128906, -5.006785613659304e-06, -2.288818359375e-05, -0.000118255615234375, -0.09802532196044922, -0.010405867360532284, -0.00017416475748177618, -5.7220458984375e-06, -0.09183788299560547, -0.0009822845458984375, -0.001773714437149465, -5.7220458984375e-06, -0.0013635456562042236, -0.0001964569091796875, -1.9073486328125e-06, -0.000202178955078125, -1.33514404296875e-05, -0.001491546630859375, -0.027872085571289062, -5.7220458984375e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.0024573802947998047, -3.349781036376953e-05, 0.0, 0.0, -0.0004062652587890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.472317628497748, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -1.5943784713745117, -0.00018310546875, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -2.4847006797790527, 0.0, -0.0003681182861328125, -6.29425048828125e-05, -0.00084686279296875, -8.7738037109375e-05, -0.019315719604492188, 0.0, -0.0001201629638671875, 0.0, -7.62939453125e-06, 0.0, -7.05718994140625e-05, -0.0002899169921875, -0.0001239776611328125, -3.3378541957063135e-06, -3.361657581990585e-05, -4.768370445162873e-07, 0.0, -0.0007811780669726431, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.11835479736328125, -0.0001722574234008789, -0.012363433837890625, -5.006785613659304e-06, -2.288818359375e-05, -0.000118255615234375, -0.099761962890625, -0.011312216520309448, -0.0001645088050281629, -5.7220458984375e-06, -0.09057998657226562, -0.0009403228759765625, -0.0017805094830691814, -3.814697265625e-06, -0.00138767808675766, -0.000186920166015625, -1.9073486328125e-06, -0.00020599365234375, -1.33514404296875e-05, -0.00147247314453125, -0.02662074565887451, -5.7220458984375e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.0024383068084716797, -3.349781036376953e-05, 0.0, 0.0, -0.000400543212890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DREAM", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DREAM", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.DREAM,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.607064814552629, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -3.9104814529418945, -4.1961669921875e-05, -0.0016803741455078125, -7.43865966796875e-05, -0.0006580352783203125, -0.000102996826171875, -0.03896522521972656, 0.0, -0.0001049041748046875, 0.0, -1.52587890625e-05, 0.0, -0.000171661376953125, -0.000293731689453125, -0.0001163482666015625, -4.768358849105425e-06, -4.148412335780449e-05, -5.960462772236497e-07, 0.0, -0.0007024997030384839, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -0.11881828308105469, -0.00016260147094726562, -0.011347770690917969, -4.649158654501662e-06, -2.47955322265625e-05, -0.0001201629638671875, -0.10691547393798828, -0.01749560423195362, -0.00012207029794808477, -7.62939453125e-06, -0.09037113189697266, -0.000980377197265625, -0.001719235791824758, -3.814697265625e-06, -0.0013829469680786133, -0.000194549560546875, -3.814697265625e-06, -0.000213623046875, -1.33514404296875e-05, -0.0014247894287109375, -0.02792942523956299, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.002470731735229492, -3.159046173095703e-05, 0.0, 0.0, -0.0003986358642578125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnEnded", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])\n", "score": -4.78806865402008, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -1.4804658889770508, -4.57763671875e-05, -0.0046977996826171875, -7.05718994140625e-05, -0.0005092620849609375, -0.0001068115234375, -0.019796371459960938, -1.9073486328125e-06, -0.00012969970703125, 0.0, -1.1444091796875e-05, 0.0, -0.0001201629638671875, -0.000301361083984375, -0.0001277923583984375, -3.3378541957063135e-06, -4.339139923104085e-05, -4.768370445162873e-07, 0.0, -0.0007673497311770916, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -0.12019920349121094, -0.0001684427261352539, -0.0125885009765625, -5.006785613659304e-06, -2.47955322265625e-05, -0.000118255615234375, -0.1070241928100586, -0.01421544048935175, -0.00013947485422249883, -7.62939453125e-06, -2.5501184463500977, -0.00041961669921875, -0.07612767815589905, -7.82012939453125e-05, -0.010224700905382633, -1.9073486328125e-05, -1.33514404296875e-05, -0.000186920166015625, -1.52587890625e-05, -0.00148773193359375, -0.10352432727813721, -1.1444091796875e-05, -6.67572021484375e-05, -3.814697265625e-06, -0.012018561363220215, -5.53131103515625e-05, 0.0, 0.0, -0.0006465911865234375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnEnded", "hole1": [{"hole0": "HasMech", "_type": "Template46"}], "hole3": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Effect", "hole1": [{"hole0": "TurnEnded", "hole1": "HasMech", "_type": "Template31"}, {"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Template45_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 228, "Turn", "Ended", "<EOS>", 320, 93, 255, "Has", "Mech", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 92, 254, "Effect", "<EOS>", 321, 82, 234, "Turn", "Ended", "<EOS>", "Has", "Mech", "<EOS>", 79, 223, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(HasMech()), ActionTag\n            (Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(\n            HasMech()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n", "score": -5.8417068721371805, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -0.9835996627807617, -3.4332275390625e-05, -0.000904083251953125, -8.20159912109375e-05, -0.0008525848388671875, -7.2479248046875e-05, -0.04764270782470703, 0.0, -0.0001239776611328125, 0.0, -1.1444091796875e-05, 0.0, -0.0001392364501953125, -0.0002899169921875, -0.0001239776611328125, -3.814689534920035e-06, -4.112651004106738e-05, -5.960462772236497e-07, 0.0, -0.0007567400461994112, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -2.2859277725219727, -0.00289762020111084, -0.008946418762207031, -0.0027992725372314453, -0.00250244140625, -0.03318500518798828, -0.0008335113525390625, -0.1334824562072754, -0.2583048343658447, -9.775153557711747e-06, -5.7220458984375e-06, -0.005809783935546875, -0.35808372497558594, -0.00010025500523624942, -7.62939453125e-06, -1.33514404296875e-05, -0.0176544189453125, -0.001720428466796875, -0.17336630821228027, -1.52587890625e-05, -0.00028645992279052734, -1.33514404296875e-05, 0.0, -1.33514404296875e-05, -0.15851402282714844, -0.000152587890625, -0.00044667720794677734, -0.001430511474609375, -0.0053997039794921875, -0.011595726013183594, -0.000362396240234375, -0.04511153697967529, -0.0011434555053710938, -1.454353241570061e-05, -0.5279207825660706, -0.13916149735450745, -0.00043383578304201365, -4.38690185546875e-05, -0.0062389373779296875, -0.0010629892349243164, -0.00041675567626953125, -2.288818359375e-05, -0.017547607421875, -0.0031642913818359375, -0.3280693292617798, 0.0, -0.001108404714614153, -0.0001735687255859375, 0.0, -8.96453857421875e-05, -6.103515625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 2, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnEnded", "hole1": [{"hole0": "HasMech", "_type": "Template46"}], "hole3": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Effect", "hole1": [{"hole0": "TurnEnded", "hole1": "HasMech", "_type": "Template31"}, {"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Template45_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 228, "Turn", "Ended", "<EOS>", 320, 93, 255, "Has", "Mech", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 92, 254, "Effect", "<EOS>", 321, 82, 234, "Turn", "Ended", "<EOS>", "Has", "Mech", "<EOS>", 79, 223, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(HasMech()), ActionTag\n            (Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(\n            HasMech()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n", "score": -6.30871957587793, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -1.4804658889770508, -4.57763671875e-05, -0.0046977996826171875, -7.05718994140625e-05, -0.0005092620849609375, -0.0001068115234375, -0.019796371459960938, -1.9073486328125e-06, -0.00012969970703125, 0.0, -1.1444091796875e-05, 0.0, -0.0001201629638671875, -0.000301361083984375, -0.0001277923583984375, -3.3378541957063135e-06, -4.339139923104085e-05, -4.768370445162873e-07, 0.0, -0.0007673497311770916, -1.1920928244535389e-07, -3.814697265625e-06, -2.47955322265625e-05, -2.2942657470703125, -0.002596259117126465, -0.009899139404296875, -0.002904176712036133, -0.0022068023681640625, -0.03360176086425781, -0.000823974609375, -0.12539267539978027, -0.2352498471736908, -9.775153557711747e-06, -5.7220458984375e-06, -0.0059185028076171875, -0.37421226501464844, -0.00010013579594669864, -7.62939453125e-06, -1.33514404296875e-05, -0.01771068572998047, -0.0017185211181640625, -0.17320799827575684, -1.71661376953125e-05, -0.00028836727142333984, -1.33514404296875e-05, 0.0, -1.33514404296875e-05, -0.158905029296875, -0.000152587890625, -0.00044476985931396484, -0.0014209747314453125, -0.005405426025390625, -0.011615753173828125, -0.0003604888916015625, -0.045128703117370605, -0.0011425018310546875, -1.454353241570061e-05, -0.5280842185020447, -0.1393033266067505, -0.00043300166726112366, -4.38690185546875e-05, -0.006245613098144531, -0.001064896583557129, -0.00041675567626953125, -2.288818359375e-05, -0.017545700073242188, -0.0031633377075195312, -0.32763540744781494, 0.0, -0.001108404714614153, -0.0001735687255859375, 0.0, -8.96453857421875e-05, -6.103515625e-05]}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -2.9926031784914287, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -0.7837066650390625, -0.05695260316133499, -0.00035828296677209437, -0.05464406684041023, -9.5367431640625e-06, -1.1920928244535389e-07, -0.06833362579345703, -9.5367431640625e-06, -0.0001964569091796875, -0.38385009765625, -4.1961669921875e-05, -6.103515625e-05, 0.0, -0.00023663043975830078, -4.935263859806582e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.288818359375e-05, -0.012297630310058594, -1.9073486328125e-06, -0.0002460479736328125, -1.9073486328125e-06, -0.07935010641813278, -0.00010120868682861328, -1.9073486328125e-06, -0.06795728206634521, 0.0, -5.841255187988281e-06, 0.0, -3.24249267578125e-05, -0.0016632080078125, -1.1444091796875e-05, -2.503394853192731e-06, 0.0, -6.556507287314162e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 9, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.DRAGON)))])\n", "score": -3.329719468079759, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -0.12620925903320312, -9.72747802734375e-05, -1.311301275563892e-06, -5.364403477869928e-06, -9.560128091834486e-05, -5.960462772236497e-07, -0.0019130706787109375, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001697540283203125, -0.0005645751953125, -0.0001697540283203125, -0.0001621246337890625, -0.0053577423095703125, -0.000293731689453125, -0.18596100807189941, 0.0, -0.010466575622558594, -0.0018901824951171875, -0.00020999833941459656, -4.291534423828125e-06, -5.841255187988281e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00038909912109375, -0.0002785921096801758, -3.814697265625e-06, -1.9073486328125e-05, -0.0024051666259765625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.402604103088379, -0.00014495849609375, -3.24249267578125e-05, -0.10742950439453125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 9, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -3.4248179651929718, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -0.12620925903320312, -9.72747802734375e-05, -1.311301275563892e-06, -5.364403477869928e-06, -9.560128091834486e-05, -5.960462772236497e-07, -0.0019130706787109375, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001697540283203125, -0.0005645751953125, -0.0001697540283203125, -0.0001621246337890625, -0.0053577423095703125, -0.000293731689453125, -0.18596100807189941, 0.0, -0.010466575622558594, -0.0018901824951171875, -0.00020999833941459656, -4.291534423828125e-06, -5.841255187988281e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00038909912109375, -0.0002785921096801758, -3.814697265625e-06, -1.9073486328125e-05, -0.0024051666259765625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.722804069519043, -1.33514404296875e-05, -1.1444091796875e-05, -0.0948333740234375, -0.0024394989013671875, -0.026458740234375, -0.00083160400390625, -0.0001316070556640625, -0.008753776550292969, -0.001220703125, -0.006165981292724609, -1.9073486328125e-06, -0.037502288818359375, -0.0033130645751953125, -0.00018072291277348995, -4.00543212890625e-05, -3.814697265625e-06, -8.392333984375e-05, -1.71661376953125e-05, -0.0024623870849609375, -0.0006561279296875, -1.9073486328125e-06, -1.9073486328125e-05, -0.00152587890625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.6951999664306641, -1.1444091796875e-05, -1.9073486328125e-06, -0.0005340576171875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 9, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "score": -3.4590663156139385, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -0.12620925903320312, -9.72747802734375e-05, -1.311301275563892e-06, -5.364403477869928e-06, -9.560128091834486e-05, -5.960462772236497e-07, -0.0019130706787109375, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001697540283203125, -0.0005645751953125, -0.0001697540283203125, -0.0001621246337890625, -0.0053577423095703125, -0.000293731689453125, -0.18596100807189941, 0.0, -0.010466575622558594, -0.0018901824951171875, -0.00020999833941459656, -4.291534423828125e-06, -5.841255187988281e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00038909912109375, -0.0002785921096801758, -3.814697265625e-06, -1.9073486328125e-05, -0.0024051666259765625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.6153440475463867, -9.5367431640625e-06, -4.57763671875e-05, -0.024158477783203125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "CharacterSelector", "hole0": "Damage", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Damage(2), CharacterSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -3.9530165062487868, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -2.095193386077881, -0.03075018711388111, -0.0005326054524630308, -5.7220458984375e-06, -0.05230712890625, -0.011795996688306332, -8.106222594506107e-06, 0.0, -0.004878997802734375, -3.4332275390625e-05, -3.814697265625e-06, -0.0021886825561523438, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -0.0004233121871948242, -8.20159912109375e-05, -3.814697265625e-06, -3.0517578125e-05, -1.71661376953125e-05, -0.02578449249267578, -5.7220458984375e-06, -0.000354766845703125, -1.9073486328125e-06, -0.18854570388793945, -0.000171661376953125, -1.9073486328125e-06, -0.057222723960876465, 0.0, -5.841255187988281e-06, 0.0, -3.814697265625e-05, -0.000148773193359375, -1.1444091796875e-05, -4.410743713378906e-06, 0.0, -7.152551916078664e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 9, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Immune", "_type": "Template46"}, {"hole0": "Attack<UNK>", "_type": "Template46"}], "_type": "Call"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Immune", "<EOS>", 93, 255, "Attack", "<UNK>", "<EOS>", "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def create_minion(self, player):\n        return Minion(9, 7, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "score": -4.143092635809268, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -1.8705167770385742, 0.0, -0.000209808349609375, -0.000102996826171875, -7.62939453125e-05, -0.0003261566162109375, -1.9073486328125e-06, -0.4262657165527344, 0.0, -5.7220458984375e-06, 0.0, -0.0011425018310546875, -0.13323593139648438, -6.4849853515625e-05, -2.3841852225814364e-07, -1.52587890625e-05, -0.0005284547805786133, -6.794906312279636e-06, -2.1457672119140625e-06, -2.3841855067985307e-07, -0.014562606811523438, -3.4332275390625e-05, -0.028612136840820312, -0.08293341100215912, -0.010620474815368652, -3.24249267578125e-05, -9.1552734375e-05, -0.0003719329833984375, -1.9073486328125e-06, -0.001596927409991622, -0.003684325609356165, -0.000789642333984375, 0.0, -0.0019512176513671875, -0.025989532470703125, -0.014905810356140137, -3.814697265625e-06, -5.7220458984375e-06, -0.07314300537109375, -1.52587890625e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.005925297737121582, -0.001784801366738975, -1.9431114196777344e-05, -0.0005016326904296875, -0.2079944610595703, -1.9073486328125e-06, -6.651727017015219e-05, -0.004566192161291838, -0.0056018829345703125, -1.1444091796875e-05, -0.2752469778060913, -0.020146846771240234, -0.0004003046196885407, -0.07113766670227051, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.000263214111328125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"_type": "Template67"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 109, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Damage(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -4.206430173863673, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -1.353006362915039, -0.33667314052581787, -2.2649703169008717e-05, 0.0, -1.0230627059936523, -0.007518171798437834, -2.0265579223632812e-06, -3.576278118089249e-07, -0.0015128850936889648, 0.0, -5.7220458984375e-05, 0.0, -0.0005474090576171875, -0.0015544891357421875, -2.09808349609375e-05, -3.8146954466355965e-06, -1.1920928244535389e-07, -7.033342626527883e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            picker=UserPicker(), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -4.243219140075773, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -0.7837066650390625, -0.05695260316133499, -0.00035828296677209437, -0.05464406684041023, -9.5367431640625e-06, -1.1920928244535389e-07, -0.06833362579345703, -9.5367431640625e-06, -0.0001964569091796875, -1.2289934158325195, -4.1961669921875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.5528903007507324, -0.0007171630859375, -1.9073486328125e-06, -8.96453857421875e-05, -0.000118255615234375, -0.010645866394042969, 0.0, -6.4849853515625e-05, 0.0, -0.00042307350668124855, -8.916854130802676e-05, -5.7220458984375e-06, -0.001033782958984375, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, -0.0013294219970703125, -2.288818359375e-05, -2.861022494471399e-06, 0.0, -5.6028297876764555e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 9, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.DRAGON)))])\n", "score": -4.250840113325296, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -0.12620925903320312, -9.72747802734375e-05, -1.311301275563892e-06, -5.364403477869928e-06, -9.560128091834486e-05, -5.960462772236497e-07, -0.0019130706787109375, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001697540283203125, -0.0005645751953125, -0.0001697540283203125, -0.0001621246337890625, -0.0053577423095703125, -0.000293731689453125, -0.18596100807189941, 0.0, -0.010466575622558594, -0.0018901824951171875, -0.00020999833941459656, -4.291534423828125e-06, -5.841255187988281e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00038909912109375, -0.0002785921096801758, -3.814697265625e-06, -1.9073486328125e-05, -0.0024051666259765625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.722804069519043, -1.33514404296875e-05, -1.1444091796875e-05, -0.0948333740234375, -0.0024394989013671875, -0.026458740234375, -0.00083160400390625, -0.0001316070556640625, -0.008753776550292969, -0.001220703125, -0.006165981292724609, -1.9073486328125e-06, -0.037502288818359375, -0.0033130645751953125, -0.00018072291277348995, -4.00543212890625e-05, -3.814697265625e-06, -8.392333984375e-05, -1.71661376953125e-05, -0.0024623870849609375, -0.0006561279296875, -1.9073486328125e-06, -1.9073486328125e-05, -0.00152587890625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -1.5214872360229492, -9.918212890625e-05, -5.7220458984375e-06, -0.0001773834228515625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 9, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.BEAST)))])\n", "score": -4.25127689616221, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -0.12620925903320312, -9.72747802734375e-05, -1.311301275563892e-06, -5.364403477869928e-06, -9.560128091834486e-05, -5.960462772236497e-07, -0.0019130706787109375, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001697540283203125, -0.0005645751953125, -0.0001697540283203125, -0.0001621246337890625, -0.0053577423095703125, -0.000293731689453125, -0.18596100807189941, 0.0, -0.010466575622558594, -0.0018901824951171875, -0.00020999833941459656, -4.291534423828125e-06, -5.841255187988281e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.00038909912109375, -0.0002785921096801758, -3.814697265625e-06, -1.9073486328125e-05, -0.0024051666259765625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.722804069519043, -1.33514404296875e-05, -1.1444091796875e-05, -0.0948333740234375, -0.0024394989013671875, -0.026458740234375, -0.00083160400390625, -0.0001316070556640625, -0.008753776550292969, -0.001220703125, -0.006165981292724609, -1.9073486328125e-06, -0.037502288818359375, -0.0033130645751953125, -0.00018072291277348995, -4.00543212890625e-05, -3.814697265625e-06, -8.392333984375e-05, -1.71661376953125e-05, -0.0024623870849609375, -0.0006561279296875, -1.9073486328125e-06, -1.9073486328125e-05, -0.00152587890625, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -1.5220766067504883, -7.62939453125e-06, -3.0517578125e-05, -9.1552734375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 9, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Immune", "_type": "Template46"}, {"hole0": "Attack<UNK>", "_type": "Template46"}], "_type": "Call"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Immune", "<EOS>", 93, 255, "Attack", "<UNK>", "<EOS>", "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "score": -4.499477635280471, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -1.0564651489257812, -0.00038909912109375, -0.00470733642578125, 0.0, -0.0002384185791015625, 0.0, -1.9073486328125e-06, 0.0, -9.1552734375e-05, -2.1453094482421875, -0.0002765655517578125, 0.0, -1.71661376953125e-05, -0.0005896091461181641, -5.006777428206988e-06, -2.1457672119140625e-06, -3.576278118089249e-07, -0.012884140014648438, -4.00543212890625e-05, -0.026599884033203125, -0.08336660265922546, -0.010119199752807617, -2.86102294921875e-05, -0.0001125335693359375, -0.0004787445068359375, -1.9073486328125e-06, -0.0016553399618715048, -0.003786837449297309, -0.0007610321044921875, 0.0, -0.00186920166015625, -0.023981094360351562, -0.014772176742553711, -3.814697265625e-06, -5.7220458984375e-06, -0.0638885498046875, -1.52587890625e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.006023526191711426, -0.0017906426219269633, -1.9431114196777344e-05, -0.00048828125, -0.23386287689208984, -1.9073486328125e-06, -6.389480404322967e-05, -0.004519938956946135, -0.0059108734130859375, -1.1444091796875e-05, -0.2862817347049713, -0.019837141036987305, -0.00039958933484740555, -0.0666203498840332, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00028228759765625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"_type": "Template59"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 9, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Immune", "_type": "Template46"}, {"hole0": "Attack<UNK>", "_type": "Template46"}], "_type": "Call"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 45, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Immune", "<EOS>", 93, 255, "Attack", "<UNK>", "<EOS>", "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=2)\n\n    def create_minion(self, player):\n        return Minion(9, 7, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "score": -4.583967742685097, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -2.5642852783203125, -0.0027866363525390625, 0.0, -1.9073486328125e-06, 0.0, -0.00032806396484375, -0.03687286376953125, -0.0005817413330078125, -8.344644584212801e-07, -9.5367431640625e-06, -0.00014901161193847656, -1.9073468138230965e-06, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.011140823364257812, -4.00543212890625e-05, -0.05222129821777344, -0.05552885681390762, -0.008983850479125977, -3.4332275390625e-05, -0.0001163482666015625, -0.0003185272216796875, -1.9073486328125e-06, -0.0015875098761171103, -0.003423854475840926, -0.0007476806640625, 0.0, -0.0019855499267578125, -0.02609539031982422, -0.015011191368103027, -3.814697265625e-06, -5.7220458984375e-06, -0.07245922088623047, -1.52587890625e-05, -0.000125885009765625, -1.9073486328125e-06, -0.006038784980773926, -0.0017868279246613383, -1.9431114196777344e-05, -0.00049591064453125, -0.21653366088867188, -1.9073486328125e-06, -6.353719800245017e-05, -0.0046044583432376385, -0.0057430267333984375, -1.1444091796875e-05, -0.2701341509819031, -0.01954805850982666, -0.0004011390556115657, -0.06763291358947754, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.000335693359375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole2": "HeroSelector", "hole0": "Damage", "hole1": [{"n": 9, "_type": "Num"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 216, "Damage", "<EOS>", 320, 75, 190, "9", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Damage(9), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -4.603160736830873, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -1.353006362915039, -0.33667314052581787, -2.2649703169008717e-05, 0.0, -0.9538888931274414, -0.015211105346679688, -0.4288617670536041, -0.0002630947274155915, -0.029723038896918297, -1.1920928244535389e-07, -2.384185791015625e-06, -0.0005877017974853516, 0.0, -1.3828277587890625e-05, 0.0, -0.0007953643798828125, -0.0016384124755859375, -2.288818359375e-05, -2.9802317840221804e-06, -1.1920928244535389e-07, -6.0796710386057384e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "use", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 9, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Immune", "_type": "Template46"}, {"hole0": "Attack<UNK>", "_type": "Template46"}], "_type": "Call"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Immune", "<EOS>", 93, 255, "Attack", "<UNK>", "<EOS>", "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player):\n        return Minion(9, 7, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "score": -4.808550608487963, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -1.8705167770385742, 0.0, -0.000209808349609375, -0.000102996826171875, -7.62939453125e-05, -0.0003261566162109375, -1.9073486328125e-06, -1.2184295654296875, 0.0, -3.814697265625e-06, 0.0, -0.005237579345703125, -0.0021686553955078125, -0.001407623291015625, 0.0, -0.00014495849609375, -0.00015461444854736328, -8.22540732769994e-06, -2.0265579223632812e-06, -4.768370445162873e-07, -0.01591205596923828, -3.62396240234375e-05, -0.055886268615722656, -0.08426795154809952, -0.012997865676879883, -1.9073486328125e-05, -9.72747802734375e-05, -0.000415802001953125, -1.9073486328125e-06, -0.001511335140094161, -0.003649621969088912, -0.000762939453125, 0.0, -0.0020275115966796875, -0.024250030517578125, -0.014240026473999023, -3.814697265625e-06, -5.7220458984375e-06, -0.07169723510742188, -1.52587890625e-05, -0.0001354217529296875, -1.9073486328125e-06, -0.006062626838684082, -0.0017732380656525493, -1.7523765563964844e-05, -0.0005168914794921875, -0.18601226806640625, -1.9073486328125e-06, -6.401400605682284e-05, -0.00466573191806674, -0.00528717041015625, -1.1444091796875e-05, -0.2698904573917389, -0.020154833793640137, -0.00039303285302594304, -0.06919050216674805, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.000335693359375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 9, "hole1": 7, "_type": "Template32"}], "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            players=BothPlayer(), picker=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score": -5.441890123498517, "score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -0.7837066650390625, -0.05695260316133499, -0.00035828296677209437, -0.05464406684041023, -9.5367431640625e-06, -1.1920928244535389e-07, -0.06833362579345703, -9.5367431640625e-06, -0.0001964569091796875, -0.38385009765625, -4.1961669921875e-05, -6.103515625e-05, 0.0, -0.00023663043975830078, -4.935263859806582e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.288818359375e-05, -0.012297630310058594, -1.9073486328125e-06, -0.0002460479736328125, -1.9073486328125e-06, -2.593000888824463, -0.00019907938258256763, -9.5367431640625e-06, -0.0024013519287109375, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -8.392333984375e-05, -0.0026035308837890625, -9.918212890625e-05, -5.483620952873025e-06, 0.0, -8.821463779895566e-06, 0.0]}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -2.6823372597668538, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -0.43190956115722656, 0.0, -0.0042629241943359375, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -2.86102294921875e-05, -0.0136260986328125, -3.62396240234375e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.7642974853515625e-05, -7.152555099310121e-07, -0.00014495849609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.00017547607421875, -0.8483791351318359, -0.010540236718952656, -8.869171142578125e-05, -1.52587890625e-05, -0.0069904327392578125, -0.0006341934204101562, -0.27037835121154785, -7.62939453125e-06, -1.1444091796875e-05, -0.047855377197265625, -0.0009614229202270508, -1.2636171959456988e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -2.970456484595779, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.2758569717407227, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -4.649162292480469e-05, -2.09808349609375e-05, -0.2339489459991455, -1.9073486328125e-06, -0.0016307830810546875, -7.82012939453125e-05, -0.002124786376953125, -2.86102294921875e-05, -0.17906665802001953, -1.9073486328125e-06, -0.00572967529296875, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -2.288818359375e-05, -0.0041103363037109375, -3.4332275390625e-05, -1.668928234721534e-06, -5.960462772236497e-07, -1.609325408935547e-05, -7.152555099310121e-07, -0.00013935565948486328, -1.1920922133867862e-06, -0.0001697540283203125, -0.000171661376953125, -0.8999233245849609, -0.010510939173400402, -8.869171142578125e-05, -1.52587890625e-05, -0.0073833465576171875, -0.0007266998291015625, -0.28775906562805176, -7.62939453125e-06, -1.1444091796875e-05, -0.05482006072998047, -0.0009442567825317383, -1.3113007298670709e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.1961669921875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 75, 190, "2", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -3.706086872966573, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.7858734130859375, -0.0001964569091796875, -0.005651354789733887, -2.3841830625315197e-06, -0.001129150390625, -1.9073486328125e-06, -0.0002422332763671875, 0.0, -4.076957702636719e-05, -9.5367431640625e-06, -0.5573440790176392, 0.0, -0.0004425048828125, -3.814697265625e-06, -0.010972976684570312, -4.57763671875e-05, -0.05196952819824219, 0.0, -0.001049041748046875, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -2.288818359375e-05, -0.0077152252197265625, -5.91278076171875e-05, -1.4305101103673223e-06, -1.0728830375228426e-06, -1.9788742065429688e-05, -7.152555099310121e-07, -0.00023090839385986328, -1.1920922133867862e-06, -0.0001773834228515625, -0.000179290771484375, -0.8296575546264648, -0.010389817878603935, -9.059906005859375e-05, -1.71661376953125e-05, -0.007534027099609375, -0.000701904296875, -0.37575459480285645, -7.62939453125e-06, -1.1444091796875e-05, -0.05249500274658203, -0.0009785890579223633, -1.2755381249007769e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.1961669921875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -3.8365333647306272, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -1.6637955904006958, -1.9073486328125e-06, -0.000591278076171875, -4.38690185546875e-05, -0.00440216064453125, -3.0517578125e-05, -0.2091045379638672, 0.0, -0.0059795379638671875, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -2.288818359375e-05, -0.0070133209228515625, -4.76837158203125e-05, -1.5497191725444281e-06, -5.960462772236497e-07, -1.5974044799804688e-05, -7.152555099310121e-07, -0.00014317035675048828, -1.1920922133867862e-06, -0.0001773834228515625, -0.0001735687255859375, -0.8929891586303711, -0.010518025606870651, -9.059906005859375e-05, -1.52587890625e-05, -0.0070171356201171875, -0.0006952285766601562, -0.2625734806060791, -7.62939453125e-06, -1.1444091796875e-05, -0.052727699279785156, -0.0009423494338989258, -1.2993798009119928e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -3.8476128660962843, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -1.7980775833129883, -1.9073486328125e-06, -0.0022716522216796875, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -1.9073486328125e-05, -0.006786346435546875, -2.09808349609375e-05, -8.344645721081179e-07, -4.768370445162873e-07, -1.5974044799804688e-05, -5.960462772236497e-07, -0.00010502338409423828, -1.0728830375228426e-06, -0.00018310546875, -0.00019073486328125, -0.7477321624755859, -0.010291717946529388, -8.678436279296875e-05, -1.52587890625e-05, -0.005199432373046875, -0.000518798828125, -0.18292832374572754, -7.62939453125e-06, -1.33514404296875e-05, -0.046054840087890625, -0.0009938478469848633, -1.2159336620243266e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "PIRATE", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "PIRATE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -4.314046108986524, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -1.9711008071899414, -5.7220458984375e-06, -0.01114654541015625, 0.0, -6.198883056640625e-06, 0.0, -2.6702880859375e-05, -0.02387237548828125, -6.29425048828125e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.9669532775878906e-05, -7.152555099310121e-07, -0.0001430511474609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.0001583099365234375, -0.9105596542358398, -0.010549881495535374, -9.059906005859375e-05, -1.52587890625e-05, -0.007503509521484375, -0.0006999969482421875, -0.2802565097808838, -7.62939453125e-06, -1.1444091796875e-05, -0.050604820251464844, -0.0009423494338989258, -1.2993798009119928e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.00543212890625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Damage", "<EOS>", 320, 103, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Damage(1),\n            SelfSelector()))])\n", "score": -4.439286446104688, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -0.43190956115722656, 0.0, -0.0042629241943359375, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -2.86102294921875e-05, -0.0136260986328125, -3.62396240234375e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.7642974853515625e-05, -7.152555099310121e-07, -0.00014495849609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.00017547607421875, -0.8483791351318359, -0.010540236718952656, -8.869171142578125e-05, -1.52587890625e-05, -0.0069904327392578125, -0.0006341934204101562, -2.040637254714966, -2.0265579223632812e-06, -3.814697265625e-06, -0.03229522705078125, -0.003098607063293457, -9.655952453613281e-06, 0.0, 0.0, -0.000171661376953125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n", "score": -4.660971874264412, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.2758569717407227, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -4.649162292480469e-05, -2.09808349609375e-05, -1.9795010089874268, 0.0, -0.0003986358642578125, -2.09808349609375e-05, -0.0064067840576171875, -3.0517578125e-05, -0.11775779724121094, 0.0, -0.0039386749267578125, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -2.86102294921875e-05, -0.008825302124023438, -2.47955322265625e-05, -9.536737479720614e-07, -1.0728830375228426e-06, -1.9550323486328125e-05, -7.152555099310121e-07, -0.0001354217529296875, -1.1920922133867862e-06, -0.0001697540283203125, -0.000171661376953125, -0.8723478317260742, -0.010556825436651707, -8.869171142578125e-05, -1.52587890625e-05, -0.0074367523193359375, -0.0006656646728515625, -0.32140088081359863, -7.62939453125e-06, -1.1444091796875e-05, -0.04906463623046875, -0.0009576082229614258, -1.2636171959456988e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -4.1961669921875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "Damaged", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Damage", "<EOS>", 320, 103, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Damage(1),\n            SelfSelector()))])\n", "score": -4.7423138654773425, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.2758569717407227, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -4.649162292480469e-05, -2.09808349609375e-05, -0.2339489459991455, -1.9073486328125e-06, -0.0016307830810546875, -7.82012939453125e-05, -0.002124786376953125, -2.86102294921875e-05, -0.17906665802001953, -1.9073486328125e-06, -0.00572967529296875, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -2.288818359375e-05, -0.0041103363037109375, -3.4332275390625e-05, -1.668928234721534e-06, -5.960462772236497e-07, -1.609325408935547e-05, -7.152555099310121e-07, -0.00013935565948486328, -1.1920922133867862e-06, -0.0001697540283203125, -0.000171661376953125, -0.8999233245849609, -0.010510939173400402, -8.869171142578125e-05, -1.52587890625e-05, -0.0073833465576171875, -0.0007266998291015625, -2.082038164138794, -2.0265579223632812e-06, -3.814697265625e-06, -0.02981090545654297, -0.003428339958190918, -9.655952453613281e-06, 0.0, -1.9073486328125e-06, -0.0001621246337890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Heal(4), HeroSelector()))])\n", "score": -4.7924072601822445, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -0.43190956115722656, 0.0, -0.0042629241943359375, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -2.86102294921875e-05, -0.0136260986328125, -3.62396240234375e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.7642974853515625e-05, -7.152555099310121e-07, -0.00014495849609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.00017547607421875, -0.5661792755126953, -0.8263877630233765, -0.09106934070587158, -0.000110626220703125, -0.3694581985473633, -3.4332275390625e-05, -0.009043693542480469, -5.7220458984375e-06, -0.03613471984863281, -0.0005017518997192383, -1.919269561767578e-05, -4.57763671875e-05, -0.4953880310058594, -6.103515625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0003681182861328125, -5.340576171875e-05, -0.3896188735961914, -1.71661376953125e-05, -1.1444091796875e-05, -0.006298065185546875, -0.14582538604736328, -0.10022735595703125, -9.5367431640625e-06, -8.0108642578125e-05, -0.25819873809814453, -0.0006999969482421875, -5.841255187988281e-06, 0.0, -3.814697265625e-06, -9.5367431640625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.MECH)\n            ), ActionTag(Heal(4), HeroSelector()))])\n", "score": -4.91922877812658, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -0.43190956115722656, 0.0, -0.0042629241943359375, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -2.86102294921875e-05, -0.0136260986328125, -3.62396240234375e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.7642974853515625e-05, -7.152555099310121e-07, -0.00014495849609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.00017547607421875, -0.5661792755126953, -0.8263877630233765, -0.09106934070587158, -0.000110626220703125, -0.3694581985473633, -3.4332275390625e-05, -0.009043693542480469, -5.7220458984375e-06, -0.03613471984863281, -0.0005017518997192383, -1.919269561767578e-05, -4.57763671875e-05, -0.941838264465332, -9.5367431640625e-06, -0.009613037109375, -8.0108642578125e-05, -0.17373371124267578, -5.7220458984375e-06, -1.1444091796875e-05, -0.3961324691772461, -0.0023441314697265625, -1.3470649719238281e-05, 0.0, -5.7220458984375e-06, -3.0517578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Heal(4), HeroSelector()))])\n", "score": -4.962973222972948, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.2758569717407227, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -4.649162292480469e-05, -2.09808349609375e-05, -0.2339489459991455, -1.9073486328125e-06, -0.0016307830810546875, -7.82012939453125e-05, -0.002124786376953125, -2.86102294921875e-05, -0.17906665802001953, -1.9073486328125e-06, -0.00572967529296875, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -2.288818359375e-05, -0.0041103363037109375, -3.4332275390625e-05, -1.668928234721534e-06, -5.960462772236497e-07, -1.609325408935547e-05, -7.152555099310121e-07, -0.00013935565948486328, -1.1920922133867862e-06, -0.0001697540283203125, -0.000171661376953125, -0.5287761688232422, -0.807654857635498, -0.08859360218048096, -0.0001163482666015625, -0.3838014602661133, -3.62396240234375e-05, -0.009767532348632812, -5.7220458984375e-06, -0.038315773010253906, -0.0005093812942504883, -1.919269561767578e-05, -4.57763671875e-05, -0.4872913360595703, -6.103515625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.000370025634765625, -4.9591064453125e-05, -0.39179420471191406, -1.71661376953125e-05, -1.1444091796875e-05, -0.0063953399658203125, -0.1493368148803711, -0.0993795394897461, -9.5367431640625e-06, -8.0108642578125e-05, -0.2614889144897461, -0.0006999969482421875, -5.841255187988281e-06, 0.0, -3.814697265625e-06, -9.34600830078125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template59"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 102, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.MECH)\n            ), ActionTag(Heal(4), HeroSelector()))])\n", "score": -5.110284433605273, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.2758569717407227, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -4.649162292480469e-05, -2.09808349609375e-05, -0.2339489459991455, -1.9073486328125e-06, -0.0016307830810546875, -7.82012939453125e-05, -0.002124786376953125, -2.86102294921875e-05, -0.17906665802001953, -1.9073486328125e-06, -0.00572967529296875, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -2.288818359375e-05, -0.0041103363037109375, -3.4332275390625e-05, -1.668928234721534e-06, -5.960462772236497e-07, -1.609325408935547e-05, -7.152555099310121e-07, -0.00013935565948486328, -1.1920922133867862e-06, -0.0001697540283203125, -0.000171661376953125, -0.5287761688232422, -0.807654857635498, -0.08859360218048096, -0.0001163482666015625, -0.3838014602661133, -3.62396240234375e-05, -0.009767532348632812, -5.7220458984375e-06, -0.038315773010253906, -0.0005093812942504883, -1.919269561767578e-05, -4.57763671875e-05, -0.9545974731445312, -9.5367431640625e-06, -0.009756088256835938, -8.20159912109375e-05, -0.17078208923339844, -7.62939453125e-06, -1.1444091796875e-05, -0.4067707061767578, -0.0023670196533203125, -1.3470649719238281e-05, 0.0, -5.7220458984375e-06, -3.0517578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 75, 190, "2", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Heal(4), HeroSelector()))])\n", "score": -5.696496830224305, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -1.7858734130859375, -0.0001964569091796875, -0.005651354789733887, -2.3841830625315197e-06, -0.001129150390625, -1.9073486328125e-06, -0.0002422332763671875, 0.0, -4.076957702636719e-05, -9.5367431640625e-06, -0.5573440790176392, 0.0, -0.0004425048828125, -3.814697265625e-06, -0.010972976684570312, -4.57763671875e-05, -0.05196952819824219, 0.0, -0.001049041748046875, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -2.288818359375e-05, -0.0077152252197265625, -5.91278076171875e-05, -1.4305101103673223e-06, -1.0728830375228426e-06, -1.9788742065429688e-05, -7.152555099310121e-07, -0.00023090839385986328, -1.1920922133867862e-06, -0.0001773834228515625, -0.000179290771484375, -0.58056640625, -0.7925901412963867, -0.09094822406768799, -0.00011444091796875, -0.3821992874145508, -3.62396240234375e-05, -0.010386466979980469, -5.7220458984375e-06, -0.041968345642089844, -0.0005055665969848633, -1.919269561767578e-05, -4.38690185546875e-05, -0.4656238555908203, -6.103515625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0003871917724609375, -4.9591064453125e-05, -0.3811216354370117, -1.71661376953125e-05, -1.1444091796875e-05, -0.0063877105712890625, -0.14864444732666016, -0.09591293334960938, -1.1444091796875e-05, -8.20159912109375e-05, -0.26956939697265625, -0.000701904296875, -5.841255187988281e-06, 0.0, -3.814697265625e-06, -9.5367431640625e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 4, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "Attack", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Heal(4), HeroSelector()))])\n", "score": -5.848409281017609, "score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -1.6637955904006958, -1.9073486328125e-06, -0.000591278076171875, -4.38690185546875e-05, -0.00440216064453125, -3.0517578125e-05, -0.2091045379638672, 0.0, -0.0059795379638671875, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -2.288818359375e-05, -0.0070133209228515625, -4.76837158203125e-05, -1.5497191725444281e-06, -5.960462772236497e-07, -1.5974044799804688e-05, -7.152555099310121e-07, -0.00014317035675048828, -1.1920922133867862e-06, -0.0001773834228515625, -0.0001735687255859375, -0.5337409973144531, -0.8043026924133301, -0.08886253833770752, -0.0001125335693359375, -0.36026954650878906, -3.4332275390625e-05, -0.009762763977050781, -5.7220458984375e-06, -0.03610420227050781, -0.0005036592483520508, -1.919269561767578e-05, -4.57763671875e-05, -0.4990825653076172, -6.103515625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0003681182861328125, -5.14984130859375e-05, -0.39381980895996094, -1.71661376953125e-05, -1.1444091796875e-05, -0.006389617919921875, -0.14768409729003906, -0.10143566131591797, -9.5367431640625e-06, -7.82012939453125e-05, -0.2559089660644531, -0.000698089599609375, -5.841255187988281e-06, 0.0, -3.814697265625e-06, -9.5367431640625e-05]}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -3.0545185140499456, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -0.3183172643184662, -5.53131103515625e-05, 0.0, -0.000850677490234375, -0.615199089050293, -0.017740726470947266, -2.384185791015625e-06, -3.0517578125e-05, -0.6213150024414062, -0.0001964569091796875, -0.09528931975364685, -2.47955322265625e-05, -0.012106135487556458, 0.0, -1.1920928244535389e-07, -0.0047779083251953125, -1.52587890625e-05, -0.00017547607421875, -0.028036117553710938, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.16244912147521973, -3.4451481042196974e-05, 0.0, 0.0, -0.0031108856201171875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 3, "hole1": 2, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole2": 2, "hole0": "Give", "hole1": "ChangeHealth", "_type": "Template28"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 80, 231, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 68, 162, 57, 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, deathrattle=Deathrattle(Give(ChangeHealth(2)),\n            MinionSelector(picker=RandomPicker())))\n", "score": -3.1221771888021976, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -1.0939712524414062, -1.71661376953125e-05, -4.291534423828125e-06, -8.821448318485636e-06, -0.024867026135325432, -2.2649765014648438e-06, -0.023285508155822754, -7.43865966796875e-05, -0.015336990356445312, -0.0002079010009765625, -8.58306884765625e-05, -1.33514404296875e-05, -0.0002346038818359375, -4.0531158447265625e-06, -0.0003528594970703125, -0.6250715255737305, -0.009882926940917969, -0.0076274871826171875, 0.0, -0.0002294739824719727, -0.15157699584960938, 0.0, -0.2675498127937317, -1.0251998901367188e-05, -0.0049076080322265625, -0.0005741119384765625, -0.1096649169921875, -0.000995635986328125, -7.62939453125e-06, -5.53131103515625e-05, -0.13339924812316895, -1.9550323486328125e-05, -2.09808349609375e-05, -1.33514404296875e-05, -0.01644275337457657, -0.0001637929235585034, 0.0]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -3.2453440043309385, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -0.3183172643184662, -5.53131103515625e-05, 0.0, -0.000850677490234375, -0.615199089050293, -0.017740726470947266, -2.384185791015625e-06, -3.0517578125e-05, -0.8803777694702148, -0.0017223358154296875, -0.02162015251815319, -9.5367431640625e-06, -0.06288428604602814, -3.814697265625e-06, 0.0, -0.012187957763671875, -1.9073486328125e-05, -0.0003185272216796875, -0.01116180419921875, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.12396156787872314, -3.659724825411104e-05, 0.0, 0.0, -0.0040607452392578125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.6888320824682452, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -1.4740055799484253, -0.0002046823501586914, -1.9073486328125e-06, -0.0008602142333984375, -0.5902881622314453, -0.00021183484932407737, -1.9073486328125e-06, -1.9073486328125e-06, -0.019704818725585938, -0.000308990478515625, -0.4177076816558838, -3.24249267578125e-05, -0.0015399456024169922, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.009197235107421875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "hole1": 3, "_type": "Template41"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 89, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(Null, EnemyPlayer(),\n            RandomPicker(3))))])\n", "score": -3.921242976734895, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -0.3183172643184662, -5.53131103515625e-05, 0.0, -0.000850677490234375, -1.1205577850341797, -0.13937246799468994, -1.5377907402580604e-05, -1.9073486328125e-06, -0.13667964935302734, -0.0064206053502857685, -0.0005127126933075488, 0.0, -0.0229949951171875, -0.11098575592041016, -5.7220458984375e-05, -2.5510787963867188e-05, 0.0, -0.012636184692382812, -5.7220458984375e-06, -0.08657073974609375, -9.775161743164062e-06, -1.9073486328125e-06, -0.03426837921142578, -0.000530242919921875, -0.5314528942108154, -0.0018913745880126953, -1.9073486328125e-06, -0.0317634642124176, 0.0, -3.814697265625e-06, -0.19050025939941406]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2)\n", "score": -3.9392020081943357, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -2.0341482162475586, -1.9073486328125e-06, -6.473064422607422e-05, 0.0, -0.12173759937286377, 0.0, -6.806848978158087e-05, 0.0, -8.7738037109375e-05, -0.00066375732421875, -1.7572975158691406, -0.0001115736595238559, -5.14984130859375e-05, -3.6954863844584906e-06, -2.6464111215318553e-05, -0.018926382064819336, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2)\n", "score": -3.975492768523047, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -1.2928868532180786, -3.814697265625e-06, -1.3589859008789062e-05, 0.0, -0.7095519304275513, 0.0, -4.053115480928682e-05, 0.0, -7.2479248046875e-05, -0.0008525848388671875, -1.9461736679077148, -0.00014411362644750625, -5.53131103515625e-05, -3.576277322281385e-06, -3.671578815556131e-05, -0.019644737243652344, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -4.178541416002979, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -1.2928868532180786, -3.814697265625e-06, -1.3589859008789062e-05, 0.0, -0.6794120073318481, 0.0, -2.1219253540039062e-05, 0.0, -3.24249267578125e-05, -0.14129066467285156, -0.0025081634521484375, -2.264974000354414e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.7404405298293568e-05, -0.027243375778198242, 0.0, -0.0005016326904296875, -0.000377655029296875, -0.021157264709472656, -0.07448127865791321, -0.015584945678710938, -3.4332275390625e-05, -2.6702880859375e-05, -0.0009937286376953125, -8.392333984375e-05, -0.0017192329978570342, -0.3583989143371582, -4.57763671875e-05, 0.0, -0.000865936279296875, -0.6018218994140625, -0.01724684238433838, -2.384185791015625e-06, -2.86102294921875e-05, -0.6227703094482422, -0.000202178955078125, -0.10083934664726257, -2.47955322265625e-05, -0.011852436698973179, 0.0, -1.1920928244535389e-07, -0.0046024322509765625, -1.52587890625e-05, -0.0001735687255859375, -0.026945114135742188, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.16507363319396973, -3.4451481042196974e-05, 0.0, 0.0, -0.0031585693359375]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -4.35253229775892, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -1.2928868532180786, -3.814697265625e-06, -1.3589859008789062e-05, 0.0, -0.7095519304275513, 0.0, -4.053115480928682e-05, 0.0, -7.2479248046875e-05, -0.0008525848388671875, -0.15574932098388672, -5.960462772236497e-07, -2.3841855067985307e-07, -2.503394853192731e-06, -9.65590606938349e-06, -0.02520430088043213, 0.0, -0.0007495880126953125, -0.0003566741943359375, -0.03033733367919922, -0.09928380697965622, -0.014426350593566895, -2.6702880859375e-05, -2.47955322265625e-05, -0.001049041748046875, -7.05718994140625e-05, -0.0018980437889695168, -0.45373785495758057, -3.814697265625e-05, 0.0, -0.0008373260498046875, -0.5878610610961914, -0.01633322238922119, -2.384185791015625e-06, -2.6702880859375e-05, -0.6312847137451172, -0.000225067138671875, -0.10683926194906235, -2.47955322265625e-05, -0.01185645442456007, 0.0, -1.1920928244535389e-07, -0.00432586669921875, -1.52587890625e-05, -0.0001735687255859375, -0.026010513305664062, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.17133843898773193, -3.4451481042196974e-05, 0.0, 0.0, -0.002910614013671875]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -4.358931093177375, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -1.2928868532180786, -3.814697265625e-06, -1.3589859008789062e-05, 0.0, -0.6794120073318481, 0.0, -2.1219253540039062e-05, 0.0, -3.24249267578125e-05, -0.14129066467285156, -0.0025081634521484375, -2.264974000354414e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.7404405298293568e-05, -0.027243375778198242, 0.0, -0.0005016326904296875, -0.000377655029296875, -0.021157264709472656, -0.07448127865791321, -0.015584945678710938, -3.4332275390625e-05, -2.6702880859375e-05, -0.0009937286376953125, -8.392333984375e-05, -0.0017192329978570342, -0.3583989143371582, -4.57763671875e-05, 0.0, -0.000865936279296875, -0.6018218994140625, -0.01724684238433838, -2.384185791015625e-06, -2.86102294921875e-05, -0.8736934661865234, -0.001667022705078125, -0.022228358313441277, -9.5367431640625e-06, -0.06353288888931274, -3.814697265625e-06, 0.0, -0.01169586181640625, -1.9073486328125e-05, -0.00031280517578125, -0.010860443115234375, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.12789452075958252, -3.659724825411104e-05, 0.0, 0.0, -0.0041370391845703125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 3, "hole1": 2, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole2": 3, "hole0": "Give", "hole1": "ChangeHealth", "_type": "Template28"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 80, 231, "Give", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 68, 162, 57, 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, deathrattle=Deathrattle(Give(ChangeHealth(3)),\n            MinionSelector(picker=RandomPicker())))\n", "score": -4.381890907251545, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -1.0939712524414062, -1.71661376953125e-05, -4.291534423828125e-06, -8.821448318485636e-06, -0.024867026135325432, -2.2649765014648438e-06, -0.023285508155822754, -7.43865966796875e-05, -0.015336990356445312, -0.0002079010009765625, -8.58306884765625e-05, -1.33514404296875e-05, -0.0002346038818359375, -4.0531158447265625e-06, -0.0003528594970703125, -0.6250715255737305, -0.009882926940917969, -0.0076274871826171875, 0.0, -0.0002294739824719727, -0.15157699584960938, 0.0, -1.4614973068237305, -4.00543212890625e-05, -7.82012939453125e-05, -0.0007476806640625, -0.004015922546386719, -0.000499725341796875, -5.7220458984375e-06, -2.6702880859375e-05, -0.30428993701934814, -1.9311904907226562e-05, -2.47955322265625e-05, -1.33514404296875e-05, -0.022143112495541573, -0.0001368514058412984, 0.0]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsHero", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Hero", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\n", "score": -4.470870890337203, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -1.4740055799484253, -0.0002046823501586914, -1.9073486328125e-06, -0.0008602142333984375, -0.5902881622314453, -0.00021183484932407737, -1.9073486328125e-06, -1.9073486328125e-06, -0.019704818725585938, -0.000308990478515625, -1.1347010135650635, -9.5367431640625e-06, -0.004815936088562012, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.07098960876464844]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -4.499964979627713, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -2.0341482162475586, -1.9073486328125e-06, -6.473064422607422e-05, 0.0, -0.12173759937286377, 0.0, -6.806848978158087e-05, 0.0, -8.7738037109375e-05, -0.00066375732421875, -0.19121932983398438, -7.152555099310121e-07, -2.3841855067985307e-07, -2.503394853192731e-06, -8.702239938429557e-06, -0.025795578956604004, 0.0, -0.000873565673828125, -0.000377655029296875, -0.03117084503173828, -0.10762415826320648, -0.014047741889953613, -2.6702880859375e-05, -2.47955322265625e-05, -0.0010890960693359375, -7.43865966796875e-05, -0.0017297219019383192, -0.4079112708568573, -4.38690185546875e-05, 0.0, -0.0008697509765625, -0.5906000137329102, -0.016764283180236816, -2.384185791015625e-06, -2.86102294921875e-05, -0.6227474212646484, -0.0002193450927734375, -0.10585829615592957, -2.47955322265625e-05, -0.011942548677325249, 0.0, -1.1920928244535389e-07, -0.0045108795166015625, -1.52587890625e-05, -0.0001773834228515625, -0.026294708251953125, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.172105073928833, -3.4451481042196974e-05, 0.0, 0.0, -0.0029315948486328125]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=\n            RandomPicker())))])\n", "score": -4.504142868718674, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -1.2928868532180786, -3.814697265625e-06, -1.3589859008789062e-05, 0.0, -0.7095519304275513, 0.0, -4.053115480928682e-05, 0.0, -7.2479248046875e-05, -0.0008525848388671875, -0.15574932098388672, -5.960462772236497e-07, -2.3841855067985307e-07, -2.503394853192731e-06, -9.65590606938349e-06, -0.02520430088043213, 0.0, -0.0007495880126953125, -0.0003566741943359375, -0.03033733367919922, -0.09928380697965622, -0.014426350593566895, -2.6702880859375e-05, -2.47955322265625e-05, -0.001049041748046875, -7.05718994140625e-05, -0.0018980437889695168, -0.45373785495758057, -3.814697265625e-05, 0.0, -0.0008373260498046875, -0.5878610610961914, -0.01633322238922119, -2.384185791015625e-06, -2.6702880859375e-05, -0.8559732437133789, -0.0015926361083984375, -0.023425457999110222, -9.5367431640625e-06, -0.0646316409111023, -3.814697265625e-06, 0.0, -0.010860443115234375, -1.9073486328125e-05, -0.00031280517578125, -0.010746002197265625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.1352217197418213, -3.671645754366182e-05, 0.0, 0.0, -0.003826141357421875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Powermace", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Weapon", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "OpponentMinionCountIsGreaterThan", "hole1": 6, "_type": "Template41"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CharacterAttack", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 89, 247, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "6", "<EOS>", 320, 105], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(Null, EnemyPlayer(),\n            OpponentMinionCountIsGreaterThan(6))))])\n", "score": -5.834932262251634, "score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -0.3183172643184662, -5.53131103515625e-05, 0.0, -0.000850677490234375, -1.1205577850341797, -0.13937246799468994, -1.5377907402580604e-05, -1.9073486328125e-06, -0.13667964935302734, -0.0064206053502857685, -0.0005127126933075488, 0.0, -0.0229949951171875, -0.11098575592041016, -5.7220458984375e-05, -2.5510787963867188e-05, 0.0, -0.012636184692382812, -5.7220458984375e-06, -0.08657073974609375, -9.775161743164062e-06, -1.9073486328125e-06, -0.03426837921142578, -0.000530242919921875, -1.605818510055542, -0.0023233890533447266, -0.009917259216308594, -0.0036468505859375, -0.02147233486175537, -0.0015869140625, -4.9591064453125e-05, -0.9121739268302917, -1.9073486328125e-06, -3.814697265625e-06, -0.11230850219726562]}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -1.2529099517431277, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -0.13101768493652344, -0.004131317138671875, -0.09430883824825287, -0.00020813765877392143, -0.002216178923845291, -1.5497207641601562e-05, -2.3841855067985307e-07, -7.62939453125e-05, -0.0003986358642578125, -0.0013675689697265625, -3.814697265625e-06, -0.000396728515625, -0.0002845525450538844, -0.000184535892913118, -0.004043936729431152, -0.0001239776611328125, -0.0019321441650390625, -4.76837158203125e-05, -0.001094818115234375, -0.0007724761962890625, -0.033266305923461914, -1.9073486328125e-06, -0.00037384033203125, -4.1961669921875e-05, -0.012727375142276287, -5.340576171875e-05, 0.0, -0.00157928466796875, -0.000293731689453125, -3.266301064286381e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PRIEST", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -1.8610573924105083, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -1.0477946996688843, -2.288818359375e-05, -4.4465065002441406e-05, -1.9073486328125e-06, -0.0028310848865658045, -9.1552734375e-05, -0.0002956390380859375, -1.71661376953125e-05, -0.0001926422119140625, -1.1920928244535389e-07, -0.42534875869750977, -1.9073486328125e-05, -0.0007032155408523977, 0.0, -0.0019359588623046875, -0.0767354965209961, -0.0006141345947980881, -0.003454923629760742, -0.0002002716064453125, -0.1320514678955078, -0.0041675567626953125, -0.09349332004785538, -0.00020301173208281398, -0.0022618062794208527, -1.5497207641601562e-05, -2.3841855067985307e-07, -7.62939453125e-05, -0.000396728515625, -0.0013713836669921875, -3.814697265625e-06, -0.0003948211669921875, -0.00027894970844499767, -0.00018465510220266879, -0.004059195518493652, -0.0001239776611328125, -0.00191497802734375, -4.76837158203125e-05, -0.0011081695556640625, -0.0007724761962890625, -0.03329014778137207, -1.9073486328125e-06, -0.0003757476806640625, -4.1961669921875e-05, -0.012745256535708904, -5.340576171875e-05, 0.0, -0.00157928466796875, -0.0002956390380859375, -3.266301064286381e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -2.4045385405100745, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -1.583713173866272, -5.7220458984375e-06, -0.003802700201049447, 0.0, -0.0037240982055664062, -0.03961372375488281, -0.0005818484351038933, -0.0029706954956054688, -0.0002593994140625, -0.14261436462402344, -0.00312042236328125, -0.08171965181827545, -0.0002852662291843444, -0.0019668154418468475, -1.5497207641601562e-05, -1.1920928244535389e-07, -6.103515625e-05, -0.0003986358642578125, -0.0011959075927734375, -3.814697265625e-06, -0.0004749298095703125, -0.00029623505542986095, -0.0001857279712567106, -0.00509798526763916, -0.0001392364501953125, -0.0016422271728515625, -5.340576171875e-05, -0.0011577606201171875, -0.000873565673828125, -0.03293263912200928, -1.9073486328125e-06, -0.000339508056640625, -4.38690185546875e-05, -0.012253637425601482, -5.14984130859375e-05, 0.0, -0.001575469970703125, -0.0002899169921875, -3.2543804991291836e-05, -4.768370445162873e-07, -4.124641418457031e-05, -5.602820692729438e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PRIEST", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -2.8490158294642782, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -1.0477946996688843, -2.288818359375e-05, -4.4465065002441406e-05, -1.9073486328125e-06, -0.0028310848865658045, -9.1552734375e-05, -0.0002956390380859375, -1.71661376953125e-05, -0.0001926422119140625, -1.1920928244535389e-07, -1.4492287635803223, -5.7220458984375e-06, -0.0038363151252269745, 0.0, -0.0036163330078125, -0.039157867431640625, -0.0005584917962551117, -0.0030257701873779297, -0.00026702880859375, -0.14274883270263672, -0.0031452178955078125, -0.08131828904151917, -0.00027835217770189047, -0.002022199332714081, -1.5497207641601562e-05, -1.1920928244535389e-07, -6.103515625e-05, -0.0003948211669921875, -0.0012054443359375, -3.814697265625e-06, -0.0004730224609375, -0.00029063221882097423, -0.0001857279712567106, -0.00510561466217041, -0.0001392364501953125, -0.0016345977783203125, -5.340576171875e-05, -0.0011730194091796875, -0.0008754730224609375, -0.03288686275482178, -1.9073486328125e-06, -0.0003414154052734375, -4.38690185546875e-05, -0.012268180958926678, -5.14984130859375e-05, 0.0, -0.001575469970703125, -0.0002918243408203125, -3.2543804991291836e-05, -4.768370445162873e-07, -4.124641418457031e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -3.4309911356266056, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -2.621939182281494, -3.4332275390625e-05, -0.0006269216537475586, 0.0, -0.0016279220581054688, -0.054821014404296875, -0.0005653910338878632, -0.003137350082397461, -0.0002079010009765625, -0.11083030700683594, -0.0036106109619140625, -0.09017642587423325, -0.00020956830121576786, -0.0018783994019031525, -1.3709068298339844e-05, -2.3841855067985307e-07, -6.4849853515625e-05, -0.00043487548828125, -0.001422882080078125, -3.814697265625e-06, -0.000438690185546875, -0.00026941296528093517, -0.0001795291027519852, -0.004653573036193848, -0.0001354217529296875, -0.001758575439453125, -5.14984130859375e-05, -0.001102447509765625, -0.0007457733154296875, -0.03410482406616211, -1.9073486328125e-06, -0.0003452301025390625, -4.38690185546875e-05, -0.012555712834000587, -5.340576171875e-05, 0.0, -0.0015716552734375, -0.0002956390380859375, -3.266301064286381e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -3.723786348002122, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -0.13101768493652344, -0.004131317138671875, -2.558832883834839, -0.00014709372771903872, -0.0058350712060928345, -9.655952453613281e-06, -1.1920928244535389e-07, -0.0003070831298828125, -0.0003223419189453125, -0.0023651123046875, -3.814697265625e-06, -0.0003757476806640625, -0.00033426281879656017, -0.0001859664189396426, -0.0025866031646728516, -0.000118255615234375, -0.002567291259765625, -3.814697265625e-05, -0.0012302398681640625, -0.0008602142333984375, -0.035062551498413086, -1.9073486328125e-06, -0.0003452301025390625, -4.1961669921875e-05, -0.013200038112699986, -5.340576171875e-05, 0.0, -0.00157928466796875, -0.0002880096435546875, -3.2543804991291836e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.1961669921875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PRIEST", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.174524126838001, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -1.0477946996688843, -2.288818359375e-05, -4.4465065002441406e-05, -1.9073486328125e-06, -0.0028310848865658045, -9.1552734375e-05, -0.0002956390380859375, -1.71661376953125e-05, -0.0001926422119140625, -1.1920928244535389e-07, -2.785398006439209, -3.0517578125e-05, -0.0006231069564819336, 0.0, -0.0015878677368164062, -0.054058074951171875, -0.0005429070442914963, -0.003211498260498047, -0.0002117156982421875, -0.11203575134277344, -0.0036449432373046875, -0.09013303369283676, -0.00020479998784139752, -0.0019129030406475067, -1.3589859008789062e-05, -2.3841855067985307e-07, -6.4849853515625e-05, -0.0004329681396484375, -0.001434326171875, -3.814697265625e-06, -0.0004405975341796875, -0.00026559826801531017, -0.0001795291027519852, -0.004666924476623535, -0.0001354217529296875, -0.001743316650390625, -5.14984130859375e-05, -0.0011157989501953125, -0.0007457733154296875, -0.03402090072631836, -1.9073486328125e-06, -0.0003490447998046875, -4.38690185546875e-05, -0.012560242787003517, -5.340576171875e-05, 0.0, -0.0015716552734375, -0.00029754638671875, -3.266301064286381e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PRIEST", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -4.342112883872559, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -1.0477946996688843, -2.288818359375e-05, -4.4465065002441406e-05, -1.9073486328125e-06, -0.0028310848865658045, -9.1552734375e-05, -0.0002956390380859375, -1.71661376953125e-05, -0.0001926422119140625, -1.1920928244535389e-07, -0.42534875869750977, -1.9073486328125e-05, -0.0007032155408523977, 0.0, -0.0019359588623046875, -0.0767354965209961, -0.0006141345947980881, -0.003454923629760742, -0.0002002716064453125, -0.1320514678955078, -0.0041675567626953125, -2.5681748390197754, -0.00014494826609734446, -0.0058747828006744385, -9.655952453613281e-06, -1.1920928244535389e-07, -0.000308990478515625, -0.0003204345703125, -0.002376556396484375, -3.814697265625e-06, -0.0003757476806640625, -0.00032854077289812267, -0.0001859664189396426, -0.0026323795318603516, -0.000118255615234375, -0.0025157928466796875, -3.814697265625e-05, -0.0012531280517578125, -0.00086212158203125, -0.03508353233337402, -1.9073486328125e-06, -0.0003490447998046875, -4.1961669921875e-05, -0.013224595226347446, -5.340576171875e-05, 0.0, -0.00157928466796875, -0.0002899169921875, -3.2543804991291836e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.1961669921875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.001381127972188, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -3.800090789794922, -0.0028018951416015625, -0.1486826241016388, -4.3272193579468876e-05, -0.007976479828357697, -3.933906555175781e-06, -2.0265579223632812e-06, -0.0001964569091796875, -0.00054168701171875, -0.001789093017578125, -3.814697265625e-06, -0.0005855560302734375, -0.0001492500159656629, -0.00014018996444065124, -0.003789186477661133, -0.0001354217529296875, -0.00145721435546875, -0.000125885009765625, -0.0015201568603515625, -0.0008411407470703125, -0.053050875663757324, -1.9073486328125e-06, -0.000644683837890625, -4.57763671875e-05, -0.012909766286611557, -4.9591064453125e-05, 0.0, -0.0015544891357421875, -0.0003032684326171875, -3.278221265645698e-05, -4.768370445162873e-07, -3.933906555175781e-05, -7.033323527139146e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "<UNK>", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.039005446689643, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -1.583713173866272, -5.7220458984375e-06, -0.003802700201049447, 0.0, -0.0037240982055664062, -0.03961372375488281, -0.0005818484351038933, -0.0029706954956054688, -0.0002593994140625, -0.14261436462402344, -0.00312042236328125, -2.71069598197937, -0.00017426945851184428, -0.004556208848953247, -1.1563301086425781e-05, -1.1920928244535389e-07, -0.0002346038818359375, -0.0003070831298828125, -0.0020847320556640625, -3.814697265625e-06, -0.00043487548828125, -0.00035607811878435314, -0.00019025790970772505, -0.004351258277893066, -0.0001392364501953125, -0.001766204833984375, -4.9591064453125e-05, -0.0013942718505859375, -0.0009918212890625, -0.0347822904586792, -1.9073486328125e-06, -0.000324249267578125, -4.38690185546875e-05, -0.012721413746476173, -5.340576171875e-05, 0.0, -0.001567840576171875, -0.000286102294921875, -3.2543804991291836e-05, -4.768370445162873e-07, -4.124641418457031e-05, -5.722029527532868e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PALADIN", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.136405830436011, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -4.291415691375732, -1.9073486328125e-06, -7.557858771178871e-05, 0.0, -0.0028915531001985073, -0.00019073486328125, -0.0002841949462890625, -2.47955322265625e-05, -0.000179290771484375, -1.1920928244535389e-07, -0.4503805637359619, -1.9073486328125e-05, -0.0007171630277298391, -1.9073486328125e-06, -0.0019693374633789062, -0.08000373840332031, -0.0005675125867128372, -0.0032235383987426758, -0.0002155303955078125, -0.13355350494384766, -0.00408172607421875, -0.09506774693727493, -0.00020229641813784838, -0.0024229437112808228, -1.5497207641601562e-05, -2.3841855067985307e-07, -7.05718994140625e-05, -0.0003795623779296875, -0.001262664794921875, -3.814697265625e-06, -0.000408172607421875, -0.0002787112898658961, -0.00018668166012503207, -0.004468441009521484, -0.0001316070556640625, -0.0017681121826171875, -5.14984130859375e-05, -0.00113677978515625, -0.000759124755859375, -0.03344762325286865, -1.9073486328125e-06, -0.0003719329833984375, -4.38690185546875e-05, -0.012763852253556252, -5.340576171875e-05, 0.0, -0.0015716552734375, -0.0002956390380859375, -3.2543804991291836e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.8412379075889476e-06, -4.38690185546875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.269243587356463, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -2.8725061416625977, -0.020560264587402344, -0.02588176727294922, -0.002471923828125, -0.0004978179931640625, -0.0029618735425174236, -5.7220458984375e-06, -0.00015497203276026994, -0.03018045425415039, -9.5367431640625e-06, -0.0010204315185546875, -3.62396240234375e-05, -0.0012531280517578125, -0.0001354217529296875, -0.0002573728561401367, -9.34600830078125e-05, -0.00010299681161995977, -0.21600425243377686, -7.43865966796875e-05, -0.0021953582763671875, -0.0003871917724609375, -0.5580320358276367, -0.4014549255371094, -0.02420222759246826, -0.000522613525390625, -5.91278076171875e-05, -9.5367431640625e-06, -0.00037384033203125, -0.0014476776123046875, -1.9073486328125e-06, -0.0001239776611328125, -0.0004477500624489039, -0.0002475970541127026, -0.005442261695861816, -0.0001239776611328125, -0.0012359619140625, -0.0001125335693359375, -0.009480476379394531, -0.001804351806640625, -0.10750997066497803, -2.503394853192731e-06, -0.0004444122314453125, -0.0001888275146484375, -0.015575522556900978, -4.9591064453125e-05, 0.0, -0.0013408660888671875, -0.000270843505859375, -3.0874867661623284e-05, -5.960462772236497e-07, -3.933906555175781e-05, -9.775113539944869e-06, -4.57763671875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole0": "Give", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Give", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(Give())]), MinionSelector(IsType(MINION_TYPE.MECH), picker\n            =UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.527311298143381, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -2.8725061416625977, -0.020560264587402344, -0.02588176727294922, -0.002471923828125, -0.0004978179931640625, -0.0029618735425174236, -5.7220458984375e-06, -0.00015497203276026994, -0.03018045425415039, -9.5367431640625e-06, -0.0010204315185546875, -3.62396240234375e-05, -0.0012531280517578125, -0.0001354217529296875, -0.0002573728561401367, -9.34600830078125e-05, -0.00010299681161995977, -0.21600425243377686, -7.43865966796875e-05, -0.0021953582763671875, -0.0003871917724609375, -1.138962745666504, -0.0030508041381835938, -0.10155842453241348, -0.006069675553590059, -0.0024700164794921875, -0.0020693540573120117, -0.00016224384307861328, -4.76837158203125e-05, -1.71661376953125e-05, -0.0023708343505859375, -0.0006961822509765625, -7.62939453125e-06, -0.0002994537353515625, -0.0005394220352172852, -0.0002602331805974245, -0.0026502609252929688, -0.000118255615234375, -0.001129150390625, -0.0001430511474609375, -0.011237144470214844, -0.001384735107421875, -0.09087264537811279, -2.741813204920618e-06, -0.0003833770751953125, -0.00034332275390625, -0.020012006163597107, -4.971027374267578e-05, 0.0, -0.0013751983642578125, -0.0002880096435546875, -2.968280932691414e-05, -5.960462772236497e-07, -3.921985626220703e-05, -1.07287787614041e-05, -4.76837158203125e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "PRIEST", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 323, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.8583671699403155, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -1.0477946996688843, -2.288818359375e-05, -4.4465065002441406e-05, -1.9073486328125e-06, -0.0028310848865658045, -9.1552734375e-05, -0.0002956390380859375, -1.71661376953125e-05, -0.0001926422119140625, -1.1920928244535389e-07, -0.42534875869750977, -1.9073486328125e-05, -0.0007032155408523977, 0.0, -0.0019359588623046875, -0.0767354965209961, -0.0006141345947980881, -0.003454923629760742, -0.0002002716064453125, -2.851162910461426, -0.021116256713867188, -0.025938987731933594, -0.002513885498046875, -0.0004978179931640625, -0.0029456610791385174, -5.7220458984375e-06, -0.00015497203276026994, -0.030338764190673828, -9.5367431640625e-06, -0.0010205507278442383, -3.62396240234375e-05, -0.0012569427490234375, -0.0001354217529296875, -0.0002573728561401367, -9.34600830078125e-05, -0.00010299681161995977, -0.2158726453781128, -7.43865966796875e-05, -0.0021982192993164062, -0.0003871917724609375, -0.559016227722168, -0.40227794647216797, -0.023789405822753906, -0.0005168914794921875, -6.103515625e-05, -9.5367431640625e-06, -0.0003719329833984375, -0.0014553070068359375, -1.9073486328125e-06, -0.0001239776611328125, -0.0004477500624489039, -0.00024783547269180417, -0.005447983741760254, -0.0001239776611328125, -0.0012359619140625, -0.0001125335693359375, -0.009613990783691406, -0.001800537109375, -0.10797238349914551, -2.503394853192731e-06, -0.0004482269287109375, -0.0001888275146484375, -0.015570754185318947, -4.9591064453125e-05, 0.0, -0.0013408660888671875, -0.000270843505859375, -3.0874867661623284e-05, -5.960462772236497e-07, -3.933906555175781e-05, -9.775113539944869e-06, -4.57763671875e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 4, "_type": "Template40"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "value", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "hole2": "HUNTER", "hole1": 4, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Screwjank Clunker"}, {"hole0": 2, "hole1": 5, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "ScrewjankClunker", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), value=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score": -5.923722801804068, "score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -0.13101768493652344, -0.004131317138671875, -0.09430883824825287, -0.00020813765877392143, -0.002216178923845291, -1.5497207641601562e-05, -2.3841855067985307e-07, -7.62939453125e-05, -0.0003986358642578125, -0.0013675689697265625, -3.814697265625e-06, -0.000396728515625, -0.0002845525450538844, -0.000184535892913118, -0.004043936729431152, -0.0001239776611328125, -0.0019321441650390625, -4.76837158203125e-05, -0.001094818115234375, -0.0007724761962890625, -3.5445139408111572, 0.0, -0.5798168182373047, -9.72747802734375e-05, -0.5921565294265747, -0.0004616975784301758, 0.0, -0.0017108917236328125, -0.0004215240478515625, -2.1099880541441962e-05, -3.576278118089249e-07, -3.314018249511719e-05, -5.125986263010418e-06, -3.814697265625e-05]}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -2.2345892525790987, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Shredder"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -2.7690474129794893, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.9956710338592529, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "legendaryOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "legendary", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(legendaryOld()),\n            PlayerSelector()))\n", "score": -3.223444584715253, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -1.3641541004180908, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Old"}, "choice_history": [121, 198, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -3.251423452007657, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -1.375350832939148, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 7, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "7", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -3.340872171468277, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -1.4027756452560425, 0.0, -0.0005478858365677297, 0.0, -0.0009038448333740234, 0.0, -0.015789031982421875, -1.9073486328125e-05, 0.0, -1.0967253729177173e-05, 0.0, -0.0001430511474609375, -0.001583099365234375, 0.0, 0.0, -2.2649765014648438e-06, -0.0021088561043143272, -1.4305104514278355e-06, -0.0005799531936645508, -0.0001373291015625, -0.00151824951171875, -0.000583648681640625, -0.0001544952392578125, -2.288818359375e-05, -0.0004730224609375, -2.622604142743512e-06, -0.009124755859375, -0.1391458511352539, -0.00025177001953125, -0.0025766082108020782, -0.0003007519990205765, -0.37544649839401245, -0.04006388038396835, -0.05163581296801567, -0.4335336685180664, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            HeroSelector(EnemyPlayer())))\n", "score": -3.4638415901708868, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -1.5016412734985352, -0.000911712646484375, -0.1633840799331665, -4.4107433495810255e-05, -2.384185791015625e-06, -0.0028923742938786745, -0.00023841846268624067, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Shredder"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "legendaryOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "legendary", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(legendaryOld()),\n            PlayerSelector()))\n", "score": -3.7579027451156435, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.9956710338592529, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -1.3641541004180908, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Shredder"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Old"}, "choice_history": [121, 198, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -3.7858816124080477, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -1.375350832939148, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.9956710338592529, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 7, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Shredder"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Shredder", "<EOS>", "7", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Shredder', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n", "score": -3.8753303318686676, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.9956710338592529, -0.02422928810119629, -1.4027756452560425, 0.0, -0.0005478858365677297, 0.0, -0.0009038448333740234, 0.0, -0.015789031982421875, -1.9073486328125e-05, 0.0, -1.0967253729177173e-05, 0.0, -0.0001430511474609375, -0.001583099365234375, 0.0, 0.0, -2.2649765014648438e-06, -0.0021088561043143272, -1.4305104514278355e-06, -0.0005799531936645508, -0.0001373291015625, -0.00151824951171875, -0.000583648681640625, -0.0001544952392578125, -2.288818359375e-05, -0.0004730224609375, -2.622604142743512e-06, -0.009124755859375, -0.1391458511352539, -0.00025177001953125, -0.0025766082108020782, -0.0003007519990205765, -0.37544649839401245, -0.04006388038396835, -0.05163581296801567, -0.4335336685180664, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Shredder"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            HeroSelector(EnemyPlayer())))\n", "score": -3.9982997505712774, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.9956710338592529, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -1.5016412734985352, -0.000911712646484375, -0.1633840799331665, -4.4107433495810255e-05, -2.384185791015625e-06, -0.0028923742938786745, -0.00023841846268624067, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": {"id": "CardQuery", "_type": "Name"}, "hole3": [{"arg": "conditions", "value": {"elts": [{"hole0": "ManaCost", "hole1": 2, "_type": "Template41"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsMinion", "_type": "Template45_expr_seq"}], "_type": "List"}, "_type": "keyword"}], "_type": "Template35"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 84, 238, "Summon", "<EOS>", 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 89, 247, "Mana", "Cost", "<EOS>", "2", "<EOS>", 92, 253, "Is", "Minion", "<EOS>", 320, 105, 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "score": -4.162864375224331, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -2.082416534423828, -0.6878957748413086, -0.004451989661902189, -0.00010979171929648146, -9.5367431640625e-06, 0.0, -0.010106086730957031, -0.000415802001953125, -8.96453857421875e-05, -0.006824493408203125, -2.6702880859375e-05, 0.0, -0.0033321380615234375, 0.0, -0.06474494934082031, -6.29425048828125e-05, -0.002574920654296875, -0.0014896392822265625, -0.000110626220703125, -0.0008921623229980469, -0.0030519943684339523, -7.62939453125e-06, -0.009220030158758163, -7.867813110351562e-06, -0.019609451293945312, -0.0004787445068359375, -0.011700484901666641, -0.06657810509204865, -2.6702880859375e-05, -0.0001583099365234375, -3.62396240234375e-05, -0.0050067901611328125, -0.0003223419189453125, -3.099438254139386e-05, -1.5497195136049413e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "legendaryOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Old"}, "choice_history": [121, 198, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "legendary", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(legendaryOld()),\n            PlayerSelector()))\n", "score": -4.240278784143811, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -1.375350832939148, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -1.3641541004180908, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 7, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "legendaryOld", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "7", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "legendary", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(legendaryOld()),\n            PlayerSelector()))\n", "score": -4.328735652513046, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -1.4027756452560425, 0.0, -0.0005478858365677297, 0.0, -0.0009038448333740234, 0.0, -0.015789031982421875, -1.9073486328125e-05, 0.0, -1.0967253729177173e-05, 0.0, -0.0001430511474609375, -0.001583099365234375, 0.0, 0.0, -2.2649765014648438e-06, -0.0021088561043143272, -1.4305104514278355e-06, -0.0005799531936645508, -0.0001373291015625, -0.00151824951171875, -0.000583648681640625, -0.0001544952392578125, -2.288818359375e-05, -0.0004730224609375, -2.622604142743512e-06, -0.009124755859375, -0.1391458511352539, -0.00025177001953125, -0.0025766082108020782, -0.0003007519990205765, -1.3633099794387817, -0.04006388038396835, -0.05163581296801567, -0.4335336685180664, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "legendaryOld", "_type": "Template31"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "legendary", "Old", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(legendaryOld()),\n            HeroSelector(EnemyPlayer())))\n", "score": -4.452696922307041, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -1.3641541004180908, -0.04088026285171509, -0.05161260440945625, -1.5016412734985352, -0.000911712646484375, -0.1633840799331665, -4.4107433495810255e-05, -2.384185791015625e-06, -0.0028923742938786745, -0.00023841846268624067, -7.62939453125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "<UNK> Old"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "SneedOld", "_type": "Template31"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "<UNK>Old"}, "choice_history": [121, 198, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            HeroSelector(EnemyPlayer())))\n", "score": -4.480675789599445, "score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -1.375350832939148, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -1.5016412734985352, -0.000911712646484375, -0.1633840799331665, -4.4107433495810255e-05, -2.384185791015625e-06, -0.0028923742938786745, -0.00023841846268624067, -7.62939453125e-06]}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"hole0": "WeaponSelector", "_type": "Template46"}], "_type": "Call"}], "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "<UNK>"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 7, "_type": "Template32"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "<UNK>", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 93, 255, "Weapon", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK>', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(Attribute\n            ('<UNK>', WeaponSelector()), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -5.1869963787630695, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.527717113494873, -0.6170071363449097, -0.0014042854309082031, -0.00041985511779785156, -4.172325134277344e-06, -0.010450069792568684, 0.0, -0.03380073979496956, -6.222722731763497e-05, -0.04494389146566391, -2.288818359375e-05, 0.0, -0.0043468475341796875, -0.054244041442871094, -0.006595611572265625, -0.00028228759765625, 0.0, -0.8447672128677368, -0.00038385388324968517, -0.009408950805664062, -0.00125885009765625, -0.00080108642578125, -0.0318383164703846, -0.00046372413635253906, -0.08544540405273438, -3.814697265625e-06, -0.05693519115447998, -0.0018186569213867188, 0.0, -0.21292877197265625, -7.05718994140625e-05, -1.9073486328125e-06, -1.3204517364501953, -5.7220458984375e-06, -0.00028228759765625, 0.0, -0.018828392028808594, -3.933904736186378e-06, -2.288818359375e-05, -4.38690185546875e-05, -3.24249267578125e-05, -0.00029754638671875, 0.0, -0.09753227233886719, -0.14892959594726562, -3.62396240234375e-05, -2.6821824576472864e-05, -2.0265579223632812e-06, -0.00025794876273721457, -1.1682510375976562e-05]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"hole0": "WeaponSelector", "_type": "Template46"}], "_type": "Call"}], "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Toshley"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 7, "_type": "Template32"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 93, 255, "Weapon", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(Attribute\n            ('<UNK>', WeaponSelector()), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score": -5.771503963334908, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.527717113494873, -1.201514720916748, -0.0014042854309082031, -0.00041985511779785156, -4.172325134277344e-06, -0.010450069792568684, 0.0, -0.03380073979496956, -6.222722731763497e-05, -0.04494389146566391, -2.288818359375e-05, 0.0, -0.0043468475341796875, -0.054244041442871094, -0.006595611572265625, -0.00028228759765625, 0.0, -0.8447672128677368, -0.00038385388324968517, -0.009408950805664062, -0.00125885009765625, -0.00080108642578125, -0.0318383164703846, -0.00046372413635253906, -0.08544540405273438, -3.814697265625e-06, -0.05693519115447998, -0.0018186569213867188, 0.0, -0.21292877197265625, -7.05718994140625e-05, -1.9073486328125e-06, -1.3204517364501953, -5.7220458984375e-06, -0.00028228759765625, 0.0, -0.018828392028808594, -3.933904736186378e-06, -2.288818359375e-05, -4.38690185546875e-05, -3.24249267578125e-05, -0.00029754638671875, 0.0, -0.09753227233886719, -0.14892959594726562, -3.62396240234375e-05, -2.6821824576472864e-05, -2.0265579223632812e-06, -0.00025794876273721457, -1.1682510375976562e-05]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Add Spare"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template46"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Draw", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add Spare', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            EnemyPlayer())))\n", "score": -5.938689227795237, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -0.49247026443481445, -0.0002713203430175781, -3.254413604736328e-05, -0.00011824991088360548, -0.03855883702635765, -7.62939453125e-06, -0.3635157346725464, -0.04050683230161667, -0.0001277923583984375, -0.11949443817138672, -0.007860183715820312, -0.036533355712890625, -0.23967838287353516, -0.00418853759765625, -0.01706695556640625, -3.24249267578125e-05, -0.0027713263407349586, -0.0035495758056640625, 0.0, -0.010929873213171959, 0.0, -0.0104522705078125, -0.0017242431640625, -0.0003566741943359375, -1.9073486328125e-05, -0.00019311904907226562, -0.004020333290100098, -1.9073486328125e-06, -0.020821526646614075, -5.7220458984375e-06, -0.0006198883056640625, -0.0066471099853515625, -2.1457672119140625e-06, 0.0, -0.0001735687255859375, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.0074253082275390625, -0.02516460418701172, -0.0001354217529296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020955178479198366, -5.960462772236497e-07, -0.05738508701324463, -2.86102294921875e-05, -0.08719539642333984, -0.0008106231689453125, -0.001056671142578125, -7.05718994140625e-05, -0.05949997901916504, -8.344646857949556e-07, -0.025754928588867188, -0.6701459884643555, -1.1444091796875e-05, -0.7332749366760254, -9.167194366455078e-05, -0.11738204956054688, -5.340576171875e-05, -0.04582318663597107, -8.225420970120467e-06, -1.9073486328125e-06, -0.002355449367314577, -0.0005724430084228516, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Toshley Spare"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template46"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Toshley", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Draw", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley Spare', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            EnemyPlayer())))\n", "score": -6.335818673270239, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -1.2230303287506104, -0.12141618132591248, -0.7927403450012207, -0.00010836123692570254, -3.635883331298828e-05, -7.33116758055985e-05, -0.08282076567411423, -5.7220458984375e-06, -0.19128377735614777, -0.04592549055814743, -0.00014495849609375, -0.06342697143554688, -0.0034618377685546875, -0.046929359436035156, -0.28806400299072266, -0.004416465759277344, -0.018723726272583008, -3.24249267578125e-05, -0.0021492987871170044, -0.0028009414672851562, 0.0, -0.008331969380378723, 0.0, -0.009378433227539062, -0.001369476318359375, -0.0003719329833984375, -1.9073486328125e-05, -0.00021600723266601562, -0.00390017032623291, -1.9073486328125e-06, -0.02017935924232006, -5.7220458984375e-06, -0.000606536865234375, -0.00634765625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.00727081298828125, -0.025193214416503906, -0.000133514404296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020847910491283983, -5.960462772236497e-07, -0.05734121799468994, -2.86102294921875e-05, -0.08708572387695312, -0.00080108642578125, -0.001064300537109375, -6.866455078125e-05, -0.05959820747375488, -8.344646857949556e-07, -0.02581787109375, -0.6692142486572266, -1.1444091796875e-05, -0.7336141467094421, -9.167194366455078e-05, -0.11756134033203125, -5.340576171875e-05, -0.045851558446884155, -8.225420970120467e-06, -1.9073486328125e-06, -0.0023564030416309834, -0.0005724430084228516, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Add Spare"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "AddCard", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add Spare', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(AddCard()),\n            PlayerSelector()))\n", "score": -6.490335355806053, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -0.49247026443481445, -0.0002713203430175781, -3.254413604736328e-05, -0.00011824991088360548, -0.03855883702635765, -7.62939453125e-06, -0.3635157346725464, -0.04050683230161667, -0.0001277923583984375, -0.11949443817138672, -0.007860183715820312, -0.036533355712890625, -0.23967838287353516, -0.00418853759765625, -0.01706695556640625, -3.24249267578125e-05, -0.0027713263407349586, -0.0035495758056640625, 0.0, -0.010929873213171959, 0.0, -0.0104522705078125, -0.0017242431640625, -0.0003566741943359375, -1.9073486328125e-05, -0.00019311904907226562, -0.004020333290100098, -1.9073486328125e-06, -0.020821526646614075, -5.7220458984375e-06, -0.0006198883056640625, -0.0066471099853515625, -2.1457672119140625e-06, 0.0, -0.0001735687255859375, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.0074253082275390625, -0.02516460418701172, -0.0001354217529296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020955178479198366, -5.960462772236497e-07, -0.05738508701324463, -2.86102294921875e-05, -0.08719539642333984, -0.0008106231689453125, -0.001056671142578125, -7.05718994140625e-05, -0.05949997901916504, -8.344646857949556e-07, -0.025754928588867188, -0.8515090942382812, -0.0012836456298828125, -0.11301334202289581, -0.0005739515763707459, -0.7182010412216187, -0.021047186106443405, -0.41525959968566895, -0.000324249267578125, -5.7220458984375e-06, -0.00015174630971159786, -2.9802317840221804e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Add Spare"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "AddCard", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add Spare', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(),\n            PlayerSelector()))\n", "score": -6.691645762079986, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -0.49247026443481445, -0.0002713203430175781, -3.254413604736328e-05, -0.00011824991088360548, -0.03855883702635765, -7.62939453125e-06, -0.3635157346725464, -0.04050683230161667, -0.0001277923583984375, -0.11949443817138672, -0.007860183715820312, -0.036533355712890625, -0.23967838287353516, -0.00418853759765625, -0.01706695556640625, -3.24249267578125e-05, -0.0027713263407349586, -0.0035495758056640625, 0.0, -0.010929873213171959, 0.0, -0.0104522705078125, -0.0017242431640625, -0.0003566741943359375, -1.9073486328125e-05, -0.00019311904907226562, -0.004020333290100098, -1.9073486328125e-06, -0.020821526646614075, -5.7220458984375e-06, -0.0006198883056640625, -0.0066471099853515625, -2.1457672119140625e-06, 0.0, -0.0001735687255859375, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.0074253082275390625, -0.02516460418701172, -0.0001354217529296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020955178479198366, -5.960462772236497e-07, -0.05738508701324463, -2.86102294921875e-05, -0.08719539642333984, -0.0008106231689453125, -0.001056671142578125, -7.05718994140625e-05, -0.05949997901916504, -8.344646857949556e-07, -0.025754928588867188, -0.6701459884643555, -1.1444091796875e-05, -0.8010125160217285, -0.13584363460540771, -0.014012694358825684, -0.6910610198974609, -9.5367431640625e-06, -0.010573375038802624, -1.2755388524965383e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Add AddCard"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template46"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Add", "Card", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Draw", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add AddCard', 6, CHARACTER_CLASS.ALL, CARD_RARITY\n            .LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            EnemyPlayer())))\n", "score": -6.880389035254609, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -1.1585372686386108, -0.25093650817871094, -0.08605623245239258, -0.003622946096584201, -0.0048141321167349815, -0.05083012580871582, -7.82012939453125e-05, -0.3498561382293701, -0.06243312358856201, -8.7738037109375e-05, -0.080718994140625, -0.0027484893798828125, -0.034877777099609375, -0.19113731384277344, -0.0025205612182617188, -0.014550089836120605, -2.288818359375e-05, -0.0024094395339488983, -0.003335714340209961, 0.0, -0.01864541508257389, 0.0, -0.008100509643554688, -0.0020618438720703125, -0.00036144256591796875, -1.9073486328125e-05, -0.00021398067474365234, -0.003999233245849609, -1.9073486328125e-06, -0.022434085607528687, -5.7220458984375e-06, -0.0006275177001953125, -0.006988525390625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -0.006793975830078125, -0.02823352813720703, -0.000133514404296875, -3.3855412766570225e-05, -2.741813204920618e-06, -0.0002093134098686278, -5.960462772236497e-07, -0.05751001834869385, -2.86102294921875e-05, -0.08697128295898438, -0.000823974609375, -0.001064300537109375, -6.866455078125e-05, -0.05961155891418457, -8.344646857949556e-07, -0.025728225708007812, -0.670323371887207, -1.1444091796875e-05, -0.7318751811981201, -9.167194366455078e-05, -0.11746978759765625, -5.340576171875e-05, -0.045764654874801636, -8.225420970120467e-06, -1.9073486328125e-06, -0.0023521115072071552, -0.0005714893341064453, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Toshley Spare"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "AddCard", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Toshley", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley Spare', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(AddCard()),\n            PlayerSelector()))\n", "score": -6.889187099741719, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -1.2230303287506104, -0.12141618132591248, -0.7927403450012207, -0.00010836123692570254, -3.635883331298828e-05, -7.33116758055985e-05, -0.08282076567411423, -5.7220458984375e-06, -0.19128377735614777, -0.04592549055814743, -0.00014495849609375, -0.06342697143554688, -0.0034618377685546875, -0.046929359436035156, -0.28806400299072266, -0.004416465759277344, -0.018723726272583008, -3.24249267578125e-05, -0.0021492987871170044, -0.0028009414672851562, 0.0, -0.008331969380378723, 0.0, -0.009378433227539062, -0.001369476318359375, -0.0003719329833984375, -1.9073486328125e-05, -0.00021600723266601562, -0.00390017032623291, -1.9073486328125e-06, -0.02017935924232006, -5.7220458984375e-06, -0.000606536865234375, -0.00634765625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.00727081298828125, -0.025193214416503906, -0.000133514404296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020847910491283983, -5.960462772236497e-07, -0.05734121799468994, -2.86102294921875e-05, -0.08708572387695312, -0.00080108642578125, -0.001064300537109375, -6.866455078125e-05, -0.05959820747375488, -8.344646857949556e-07, -0.02581787109375, -0.8525581359863281, -0.0012836456298828125, -0.1131400465965271, -0.0005740706692449749, -0.7181671857833862, -0.021056760102510452, -0.41544651985168457, -0.000324249267578125, -5.7220458984375e-06, -0.0001516271149739623, -2.9802317840221804e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Toshley AddCard"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Draw", "_type": "Template46"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Toshley", " ", "Add", "Card", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Draw", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley AddCard', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            EnemyPlayer())))\n", "score": -6.946201793031776, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -1.2230303287506104, -0.12141618132591248, -0.8537163734436035, -0.33095359802246094, -0.26722252368927, -0.0007047861581668258, -0.0020478982478380203, -0.02928280644118786, -3.4332275390625e-05, -0.20967364311218262, -0.08802354335784912, -0.000194549560546875, -0.06981563568115234, -0.0023136138916015625, -0.041581153869628906, -0.2341775894165039, -0.0026760101318359375, -0.016875267028808594, -2.47955322265625e-05, -0.0019450028194114566, -0.002638578414916992, 0.0, -0.011443535797297955, 0.0, -0.0070648193359375, -0.001468658447265625, -0.00036716461181640625, -2.09808349609375e-05, -0.00022351741790771484, -0.0037751197814941406, -1.9073486328125e-06, -0.02107546478509903, -5.7220458984375e-06, -0.000598907470703125, -0.00640869140625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -6.103515625e-05, 0.0, -0.0068302154541015625, -0.027393341064453125, -0.000133514404296875, -3.1948064133757725e-05, -2.741813204920618e-06, -0.00020895585475955158, -5.960462772236497e-07, -0.05746424198150635, -2.86102294921875e-05, -0.08699607849121094, -0.000804901123046875, -0.001041412353515625, -6.866455078125e-05, -0.0593111515045166, -8.344646857949556e-07, -0.025716781616210938, -0.6685161590576172, -1.1444091796875e-05, -0.731148898601532, -9.167194366455078e-05, -0.1174173355102539, -5.340576171875e-05, -0.04568001627922058, -8.225420970120467e-06, -1.9073486328125e-06, -0.002351038623601198, -0.0005714893341064453, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "_type": "Template10", "hole0": "Toshley"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"names": [{"name": "spare_part_list", "_type": "alias"}], "module": "<UNK>", "level": 0, "_type": "ImportFrom"}, {"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "AddCard", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 333, 134, 175, "<UNK>", "<EOS>", 311, 306, "spare_part_list", "<EOS>", "0", "<EOS>", 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        from <UNK> import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(),\n            PlayerSelector()))\n", "score": -7.083199020614721, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -3.595829963684082, -0.0004711151123046875, -0.00047874345909804106, -0.0005706548690795898, -0.0003343820571899414, -2.3841855067985307e-07, -0.003526924643665552, 0.0, -0.5407562255859375, 0.0, -0.12981796264648438, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.0003604888916015625, 0.0, -0.0008853673934936523, -0.00026416778564453125, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03696250915527344, -0.4193572998046875, -0.0005931854248046875, -0.004989135544747114, -1.52587890625e-05, -0.00229644775390625, -0.0002651214599609375, -0.08793627470731735, -0.0002522468566894531, -0.0018735253252089024, -1.9073486328125e-06, -0.6075506210327148, -0.004939079284667969, -0.002483849413692951, -1.1920928244535389e-07, -0.007517862133681774, -7.867811291362159e-06, -0.010649681091308594, -7.82012939453125e-05, -0.01384735107421875, -0.012015342712402344, -0.000598907470703125, -0.00011444091796875, -0.017434239387512207, -9.536738616588991e-07, -0.13418102264404297, -0.44283199310302734, -1.71661376953125e-05, -0.3504577577114105, -0.09790050983428955, -0.020192861557006836, -0.5047369003295898, -9.5367431640625e-06, -0.008843629620969296, -1.0490413842489943e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "AddCard", "hole5": "PlayerSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "LIST", "_type": "Attribute"}, "_type": "keyword"}, {"arg": "source_list", "value": {"id": "spare_part_list", "_type": "Name"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Toshley"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "AddCard", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 328, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 119, 310, "source_list", "<EOS>", 25, 186, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector\n            (players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(),\n            PlayerSelector()))\n", "score": -7.321802709785402, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -2.6403002738952637, -0.06335863471031189, -0.00014126300811767578, -9.143352508544922e-05, -7.152551916078664e-06, -0.006901951041072607, -1.9073486328125e-06, -0.6072758436203003, -0.1321030855178833, -0.00369107723236084, -0.32210731506347656, -0.003795623779296875, -0.40708351135253906, -0.0001735687255859375, -1.1444091796875e-05, -0.00040459632873535156, -0.0001983642578125, -8.20159912109375e-05, -0.000213623046875, -3.814697265625e-05, -1.52587890625e-05, -0.00414276123046875, -3.814697265625e-06, -0.0004291534423828125, -0.0003814697265625, -6.67572021484375e-05, 0.0, -0.003635406494140625, -0.001810312271118164, -0.011198997497558594, -0.00128936767578125, -3.814697265625e-05, -9.5367431640625e-06, -0.011406898498535156, -5.14984130859375e-05, -6.103515625e-05, 0.0, -0.6462736129760742, -0.00034332275390625, -0.05592172592878342, -7.62939453125e-05, 0.0, -0.0033283233642578125, -3.0517578125e-05, 0.0, -0.03574085235595703, 0.0, -0.000446319580078125, 0.0, -0.033774375915527344, -2.0265579223632812e-06, -9.5367431640625e-05, -4.00543212890625e-05, -2.6702880859375e-05, -0.000202178955078125, 0.0, -0.06858062744140625, -0.16849422454833984, -0.0001850128173828125, -3.0279152269940823e-05, -2.741813204920618e-06, -0.0003581683267839253, -4.768370445162873e-07, -0.0324326753616333, -2.288818359375e-05, -0.05403900146484375, -0.000766754150390625, -0.0004444122314453125, -0.0001049041748046875, -0.07464814186096191, -9.536738616588991e-07, -0.03613853454589844, -0.44922447204589844, -9.5367431640625e-06, -0.5615515112876892, -0.11049067974090576, -0.016750454902648926, -0.6864833831787109, -1.1444091796875e-05, -0.009394031949341297, -1.0967249181703664e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "AddCard", "hole5": "PlayerSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "LIST", "_type": "Attribute"}, "_type": "keyword"}, {"arg": "source_list", "value": {"id": "<UNK>", "_type": "Name"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Toshley"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "AddCard", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 328, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 119, 310, "source_list", "<EOS>", 25, 186, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector(players=\n            BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(),\n            PlayerSelector()))\n", "score": -7.404369985752908, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -2.6403002738952637, -0.06335863471031189, -0.00014126300811767578, -9.143352508544922e-05, -7.152551916078664e-06, -0.006901951041072607, -1.9073486328125e-06, -0.6072758436203003, -0.1321030855178833, -0.00369107723236084, -0.32210731506347656, -0.003795623779296875, -0.40708351135253906, -0.0001735687255859375, -1.1444091796875e-05, -0.00040459632873535156, -0.0001983642578125, -8.20159912109375e-05, -0.000213623046875, -3.814697265625e-05, -1.52587890625e-05, -0.00414276123046875, -3.814697265625e-06, -0.0004291534423828125, -0.0003814697265625, -6.67572021484375e-05, 0.0, -0.003635406494140625, -0.001810312271118164, -0.011198997497558594, -0.00128936767578125, -3.814697265625e-05, -9.5367431640625e-06, -0.011406898498535156, -5.14984130859375e-05, -6.103515625e-05, 0.0, -0.7859535217285156, -0.0004611015319824219, -0.01701343059539795, -1.33514404296875e-05, 0.0, -0.018350601196289062, -3.0517578125e-05, 0.0, -0.022446632385253906, 0.0, -0.0004253387451171875, 0.0, -0.047496795654296875, -2.0265579223632812e-06, -0.0001125335693359375, -4.1961669921875e-05, -2.47955322265625e-05, -0.000186920166015625, 0.0, -0.0770263671875, -0.1285562515258789, -0.00017547607421875, -3.218650090275332e-05, -2.741813204920618e-06, -0.0003740171086974442, -3.576278118089249e-07, -0.03148853778839111, -2.288818359375e-05, -0.05592060089111328, -0.00075531005859375, -0.000446319580078125, -0.0001049041748046875, -0.07438969612121582, -9.536738616588991e-07, -0.03620338439941406, -0.4487142562866211, -9.5367431640625e-06, -0.5692993998527527, -0.11040985584259033, -0.01661694049835205, -0.6764774322509766, -1.1444091796875e-05, -0.009435874409973621, -1.0967249181703664e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Add AddCard"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "AddCard", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Add", "Card", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add AddCard', 6, CHARACTER_CLASS.ALL, CARD_RARITY\n            .LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(AddCard()),\n            PlayerSelector()))\n", "score": -7.432586873883736, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -1.1585372686386108, -0.25093650817871094, -0.08605623245239258, -0.003622946096584201, -0.0048141321167349815, -0.05083012580871582, -7.82012939453125e-05, -0.3498561382293701, -0.06243312358856201, -8.7738037109375e-05, -0.080718994140625, -0.0027484893798828125, -0.034877777099609375, -0.19113731384277344, -0.0025205612182617188, -0.014550089836120605, -2.288818359375e-05, -0.0024094395339488983, -0.003335714340209961, 0.0, -0.01864541508257389, 0.0, -0.008100509643554688, -0.0020618438720703125, -0.00036144256591796875, -1.9073486328125e-05, -0.00021398067474365234, -0.003999233245849609, -1.9073486328125e-06, -0.022434085607528687, -5.7220458984375e-06, -0.0006275177001953125, -0.006988525390625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -0.006793975830078125, -0.02823352813720703, -0.000133514404296875, -3.3855412766570225e-05, -2.741813204920618e-06, -0.0002093134098686278, -5.960462772236497e-07, -0.05751001834869385, -2.86102294921875e-05, -0.08697128295898438, -0.000823974609375, -0.001064300537109375, -6.866455078125e-05, -0.05961155891418457, -8.344646857949556e-07, -0.025728225708007812, -0.8513584136962891, -0.0012798309326171875, -0.11333689093589783, -0.0005726409726776183, -0.7175503969192505, -0.021021908149123192, -0.41512227058410645, -0.000324249267578125, -5.7220458984375e-06, -0.00015150790568441153, -2.9802317840221804e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Toshley AddCard"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "AddCard", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Toshley", " ", "Add", "Card", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley AddCard', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(AddCard()),\n            PlayerSelector()))\n", "score": -7.502766489417297, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -1.2230303287506104, -0.12141618132591248, -0.8537163734436035, -0.33095359802246094, -0.26722252368927, -0.0007047861581668258, -0.0020478982478380203, -0.02928280644118786, -3.4332275390625e-05, -0.20967364311218262, -0.08802354335784912, -0.000194549560546875, -0.06981563568115234, -0.0023136138916015625, -0.041581153869628906, -0.2341775894165039, -0.0026760101318359375, -0.016875267028808594, -2.47955322265625e-05, -0.0019450028194114566, -0.002638578414916992, 0.0, -0.011443535797297955, 0.0, -0.0070648193359375, -0.001468658447265625, -0.00036716461181640625, -2.09808349609375e-05, -0.00022351741790771484, -0.0037751197814941406, -1.9073486328125e-06, -0.02107546478509903, -5.7220458984375e-06, -0.000598907470703125, -0.00640869140625, -2.1457672119140625e-06, 0.0, -0.00017547607421875, -1.9073486328125e-06, -6.103515625e-05, 0.0, -0.0068302154541015625, -0.027393341064453125, -0.000133514404296875, -3.1948064133757725e-05, -2.741813204920618e-06, -0.00020895585475955158, -5.960462772236497e-07, -0.05746424198150635, -2.86102294921875e-05, -0.08699607849121094, -0.000804901123046875, -0.001041412353515625, -6.866455078125e-05, -0.0593111515045166, -8.344646857949556e-07, -0.025716781616210938, -0.8536949157714844, -0.0012798309326171875, -0.1131434515118599, -0.0005729984259232879, -0.7172004580497742, -0.02104569599032402, -0.41500020027160645, -0.000324249267578125, -5.7220458984375e-06, -0.00015150790568441153, -2.9802317840221804e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole3": "AddCard", "hole5": "PlayerSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "LIST", "_type": "Attribute"}, "_type": "keyword"}, {"arg": "source_list", "value": {"id": "spare_part_list", "_type": "Name"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Toshley"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 5, "hole1": 7, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "AddCard", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 328, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 119, 310, "source_list", "<EOS>", 25, 186, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Add", "Card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector\n            (players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(AddCard()),\n            PlayerSelector()))\n", "score": -8.009359135802356, "score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -2.6403002738952637, -0.06335863471031189, -0.00014126300811767578, -9.143352508544922e-05, -7.152551916078664e-06, -0.006901951041072607, -1.9073486328125e-06, -0.6072758436203003, -0.1321030855178833, -0.00369107723236084, -0.32210731506347656, -0.003795623779296875, -0.40708351135253906, -0.0001735687255859375, -1.1444091796875e-05, -0.00040459632873535156, -0.0001983642578125, -8.20159912109375e-05, -0.000213623046875, -3.814697265625e-05, -1.52587890625e-05, -0.00414276123046875, -3.814697265625e-06, -0.0004291534423828125, -0.0003814697265625, -6.67572021484375e-05, 0.0, -0.003635406494140625, -0.001810312271118164, -0.011198997497558594, -0.00128936767578125, -3.814697265625e-05, -9.5367431640625e-06, -0.011406898498535156, -5.14984130859375e-05, -6.103515625e-05, 0.0, -0.6462736129760742, -0.00034332275390625, -0.05592172592878342, -7.62939453125e-05, 0.0, -0.0033283233642578125, -3.0517578125e-05, 0.0, -0.03574085235595703, 0.0, -0.000446319580078125, 0.0, -0.033774375915527344, -2.0265579223632812e-06, -9.5367431640625e-05, -4.00543212890625e-05, -2.6702880859375e-05, -0.000202178955078125, 0.0, -0.06858062744140625, -0.16849422454833984, -0.0001850128173828125, -3.0279152269940823e-05, -2.741813204920618e-06, -0.0003581683267839253, -4.768370445162873e-07, -0.0324326753616333, -2.288818359375e-05, -0.05403900146484375, -0.000766754150390625, -0.0004444122314453125, -0.0001049041748046875, -0.07464814186096191, -9.536738616588991e-07, -0.03613853454589844, -1.2392892837524414, -0.000804901123046875, -0.10105904936790466, -0.0004116672498639673, -0.6786160469055176, -0.014552555046975613, -0.4862633943557739, -0.000331878662109375, -5.7220458984375e-06, -0.00014578609261661768, -2.622604142743512e-06, 0.0]}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give\n            (Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -3.668251846720068, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -0.8717079162597656, 0.0, -0.0005054473876953125, 0.0, -0.0090789794921875, -0.20224475860595703, -0.030793696641921997, -0.00012099742889404297, -0.000774383544921875, -0.0005550384521484375, -0.037024497985839844, -0.007231712341308594, -0.0004527083074208349, -1.9073486328125e-06, -3.24249267578125e-05, -0.06665992736816406, -0.0013523101806640625, -0.01320338249206543, -1.919269561767578e-05, -0.0027408599853515625, -0.00087738037109375, -0.00278472900390625, -0.0002727508544921875, -2.09808349609375e-05, 0.0, -0.007461905479431152, -0.00030827498994767666, -2.872943878173828e-05, -9.72747802734375e-05, -0.0071010589599609375, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.13214397430419922, -1.9073486328125e-06, -0.007068753242492676, -3.4332275390625e-05, 0.0, -0.42789363861083984, -0.04487419128417969, -0.10235819965600967, -6.318092346191406e-06, -0.010346615687012672, -1.9073486328125e-05, -0.021286843344569206, -1.9073486328125e-06, -0.03604602813720703, -0.0004405975341796875]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -3.6687104495629157, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -1.5198111534118652, -7.62939453125e-06, -0.2562694549560547, -3.814697265625e-06, -0.000209808349609375, 0.0, -0.00014495849609375, 0.0, -0.7313411235809326, -1.9073486328125e-06, -0.0001506805419921875, 0.0, -0.004710197448730469, 0.0, -2.6702880859375e-05, -0.0035076141357421875, -2.6702880859375e-05, -4.768370445162873e-07, -2.2649765014648438e-06, -0.0002529618504922837, -2.0265579223632812e-06, -0.01967751979827881, -2.288818359375e-05, -0.0021486282348632812, -0.000682830810546875, -0.0077648162841796875, -4.57763671875e-05, -0.0005092620849609375, -0.000370025634765625, -6.29425048828125e-05, -0.1608593463897705, -4.8160552978515625e-05, -0.002681732177734375, -6.4849853515625e-05, -0.06866252422332764, -1.7762184143066406e-05, -1.1920928244535389e-07, -2.6702880859375e-05, -0.00081634521484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "battlecry", "hole4": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 3, "_type": "Template32"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "3", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, battlecry=Battlecry(Give(Buff(ChangeAttack(Count(\n            MinionSelector(IsType(MINION_TYPE.BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n", "score": -3.7500255917092318, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -0.26209306716918945, 0.0, -0.0015401840209960938, -0.3933677673339844, -1.050009846687317, -0.0001525875850347802, -0.000583648681640625, -0.5655384063720703, -0.010656356811523438, -0.0035784237552434206, -0.0004672496870625764, -1.9431114196777344e-05, -1.9073486328125e-05, -0.07246971130371094, -0.004033088684082031, -0.06406927108764648, -3.635883331298828e-05, -0.0048656463623046875, -0.00601959228515625, -0.054508209228515625, -0.000316619873046875, -9.5367431640625e-06, 0.0, -0.006593465805053711, -0.0006320398533716798, -4.029273986816406e-05, -5.91278076171875e-05, -0.0053081512451171875, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001010894775390625, 0.0, -0.162109375, -3.814697265625e-06, -0.006651043891906738, -1.52587890625e-05, 0.0, -0.000396728515625, 0.0, -0.0002155303955078125, 0.0, -0.0001506805419921875, -0.18403053283691406, -8.0108642578125e-05, -0.0008780676289461553, -1.9073486328125e-06, -0.0006083946209400892, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -3.918768169239904, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -1.5198111534118652, -7.62939453125e-06, -0.2562694549560547, -3.814697265625e-06, -0.000209808349609375, 0.0, -0.00014495849609375, 0.0, -0.9782311916351318, 0.0, -0.0002002716064453125, 0.0, -0.0005664825439453125, 0.0, -4.38690185546875e-05, -0.0033626556396484375, -3.62396240234375e-05, -4.768370445162873e-07, -2.1457672119140625e-06, -0.0002833602484315634, -2.0265579223632812e-06, -0.01765298843383789, -2.288818359375e-05, -0.002254486083984375, -0.0006275177001953125, -0.007405281066894531, -4.57763671875e-05, -0.00048828125, -0.0003757476806640625, -5.91278076171875e-05, -0.16515815258026123, -4.0411949157714844e-05, -0.0029478073120117188, -5.91278076171875e-05, -0.07384004443883896, -1.7881393432617188e-05, -1.1920928244535389e-07, -2.47955322265625e-05, -0.00079345703125]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -3.9863388555801578, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -1.3789629936218262, -3.814697265625e-06, -1.3299059867858887, 0.0, -0.40865516662597656, -5.7220458984375e-06, -0.0028057098388671875, 0.0, -2.6702880859375e-05, 0.0, -0.20120644569396973, 0.0, -6.103515625e-05, 0.0, -0.000606536865234375, 0.0, -4.1961669921875e-05, -0.00341796875, -3.814697265625e-05, -5.960462772236497e-07, -2.1457672119140625e-06, -0.0003042218741029501, -2.0265579223632812e-06, -0.017279982566833496, -2.288818359375e-05, -0.0022525787353515625, -0.000629425048828125, -0.007164955139160156, -4.38690185546875e-05, -0.0004825592041015625, -0.0004100799560546875, -4.38690185546875e-05, -0.1718895435333252, -2.6941299438476562e-05, -0.0031251907348632812, -5.14984130859375e-05, -0.07884993404150009, -1.5974044799804688e-05, -2.3841855067985307e-07, -2.47955322265625e-05, -0.0009174346923828125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -4.36261658920165, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -1.5198111534118652, -7.62939453125e-06, -1.6797494888305664, -0.0003528594970703125, -1.9073486328125e-06, -0.007364630699157715, 0.0, -0.0001239776611328125, -0.013078689575195312, -4.76837158203125e-05, -1.1920922133867862e-06, -7.152555099310121e-07, -0.0004705188621301204, -2.0265579223632812e-06, -0.027080059051513672, -2.288818359375e-05, -0.00182342529296875, -0.00042724609375, -0.006184577941894531, -4.9591064453125e-05, -0.000469207763671875, -0.00035858154296875, -6.29425048828125e-05, -0.16314411163330078, -4.8279762268066406e-05, -0.0049877166748046875, -5.91278076171875e-05, -0.048155736178159714, -1.2874602361989673e-05, -5.960462772236497e-07, -3.4332275390625e-05, -0.000904083251953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Warbot"}, {"hole0": 1, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "1", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give\n            (Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n", "score": -4.375262269553332, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -0.8717079162597656, 0.0, -0.0005054473876953125, 0.0, -0.0090789794921875, -0.20224475860595703, -0.030793696641921997, -0.00012099742889404297, -0.000774383544921875, -0.0005550384521484375, -0.037024497985839844, -0.007231712341308594, -0.0004527083074208349, -1.9073486328125e-06, -3.24249267578125e-05, -0.06665992736816406, -0.0013523101806640625, -0.01320338249206543, -1.919269561767578e-05, -0.0027408599853515625, -0.00087738037109375, -0.00278472900390625, -0.0002727508544921875, -2.09808349609375e-05, 0.0, -0.007461905479431152, -0.00030827498994767666, -2.872943878173828e-05, -9.72747802734375e-05, -0.0071010589599609375, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.13214397430419922, -1.9073486328125e-06, -0.007068753242492676, -3.4332275390625e-05, 0.0, -1.2710742950439453, -0.00067901611328125, -0.07251844555139542, -1.9073486328125e-06, -0.005527493543922901, -1.537799835205078e-05, -0.0004673004150390625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MURLOC", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(\n            Give(Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -4.521193398344167, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -1.8858604431152344, -3.62396240234375e-05, -0.00031280517578125, 0.0, -0.0054836273193359375, -0.172149658203125, -0.05425863340497017, -0.0004678964614868164, -0.00035858154296875, -0.0009899139404296875, -0.04161262512207031, -0.007551670074462891, -0.0005357766058295965, -1.9073486328125e-06, -4.1961669921875e-05, -0.06763172149658203, -0.00133514404296875, -0.013275742530822754, -1.919269561767578e-05, -0.00433349609375, -0.000621795654296875, -0.005126953125, -0.0002994537353515625, -2.288818359375e-05, 0.0, -0.00692296028137207, -0.00030004954896867275, -2.47955322265625e-05, -0.0001010894775390625, -0.0073089599609375, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.125823974609375, -1.9073486328125e-06, -0.004833221435546875, -2.47955322265625e-05, 0.0, -0.29052257537841797, -0.052181243896484375, -0.08390433341264725, -8.225440979003906e-06, -0.007782017346471548, -1.71661376953125e-05, -0.016390202566981316, -1.9073486328125e-06, -0.04001617431640625, -0.0004215240478515625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "battlecry", "hole4": {"hole2": "SelfSelector", "hole0": "Enrage", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 3, "_type": "Template32"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Enrage", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "3", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, battlecry=Battlecry(Enrage(Buff(ChangeAttack(Count(\n            MinionSelector(IsType(MINION_TYPE.BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n", "score": -4.690698942982522, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -0.26209306716918945, 0.0, -0.0015401840209960938, -0.3933677673339844, -0.8702365159988403, -0.00049792998470366, -0.0030651092529296875, -1.1121349334716797, -0.6548089981079102, -0.0025826692581176758, -0.0007160867680795491, -2.0265579223632812e-06, -3.814697265625e-05, -0.059983253479003906, -0.0024261474609375, -0.05727231502532959, -2.09808349609375e-05, -0.0025949478149414062, -0.00731658935546875, -0.03835582733154297, -0.0002288818359375, -5.7220458984375e-06, 0.0, -0.005094289779663086, -0.0005128346965648234, -3.635883331298828e-05, -7.05718994140625e-05, -0.005107879638671875, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.1296215057373047, -3.814697265625e-06, -0.006712079048156738, -1.52587890625e-05, 0.0, -0.000396728515625, 0.0, -0.0002307891845703125, 0.0, -0.0001544952392578125, -0.18395614624023438, -8.0108642578125e-05, -0.0009232072625309229, -1.9073486328125e-06, -0.0006282980320975184, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "battlecry", "hole4": {"hole2": "HeroSelector", "hole0": "Enrage", "hole1": [{"_type": "Template61"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 1, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Enrage", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, battlecry=Battlecry(Enrage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -4.971299593682659, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -0.26209306716918945, 0.0, -0.0015401840209960938, -0.3933677673339844, -0.8702365159988403, -0.00049792998470366, -0.0030651092529296875, -1.6743059158325195, -0.10150015354156494, -0.00019669532775878906, -2.622600959512056e-06, -0.0001525875850347802, 0.0, -0.0009979007299989462, 0.0, -3.814697265625e-05, -0.5911064147949219, -0.000347137451171875, -1.7881377516459906e-06, -4.172325134277344e-06, -0.0008474584901705384, -3.933906555175781e-06, -0.0279923677444458, -2.288818359375e-05, -0.0026311874389648438, -0.0008640289306640625, -0.00762176513671875, -5.7220458984375e-05, -0.00040435791015625, -0.0006313323974609375, -0.0001583099365234375, -0.11214768141508102, -4.2557716369628906e-05, -0.0024280548095703125, -5.14984130859375e-05, -0.02748117968440056, -1.4662702596979216e-05, -5.960462772236497e-07, -3.814697265625e-05, -0.0006275177001953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "PIRATE", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(\n            Give(Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -5.209041999135934, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -2.4102959632873535, -5.7220458984375e-06, -0.0006943941116333008, 0.0, -0.0063495635986328125, -0.33501625061035156, -0.04955129325389862, -0.001022934913635254, -0.0003814697265625, -0.00116729736328125, -0.03884696960449219, -0.007502317428588867, -0.0005549550987780094, -1.9073486328125e-06, -3.24249267578125e-05, -0.07078361511230469, -0.00162506103515625, -0.017863988876342773, -2.110004425048828e-05, -0.0032186508178710938, -0.0007266998291015625, -0.0041522979736328125, -0.000274658203125, -2.09808349609375e-05, 0.0, -0.007031798362731934, -0.0002977845724672079, -2.6702880859375e-05, -0.0001010894775390625, -0.0071430206298828125, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.12770748138427734, -1.9073486328125e-06, -0.0050201416015625, -3.62396240234375e-05, 0.0, -0.2912130355834961, -0.04945945739746094, -0.08594770729541779, -8.225440979003906e-06, -0.008346755057573318, -1.71661376953125e-05, -0.017467735335230827, -1.9073486328125e-06, -0.036418914794921875, -0.000408172607421875]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(\n            Give(Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -5.221598238720162, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -2.561314105987549, -3.814697265625e-06, -0.0008907318115234375, 0.0, -0.01650714874267578, -0.15917682647705078, -0.050186239182949066, -0.0002123117446899414, -0.000537872314453125, -0.00075531005859375, -0.03900146484375, -0.008231759071350098, -0.0005443600239232183, 0.0, -4.00543212890625e-05, -0.06756401062011719, -0.00141143798828125, -0.01325535774230957, -2.110004425048828e-05, -0.005313873291015625, -0.0006999969482421875, -0.006374359130859375, -0.0002994537353515625, -2.6702880859375e-05, 0.0, -0.006860971450805664, -0.0002934930089395493, -2.47955322265625e-05, -9.72747802734375e-05, -0.008100509643554688, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.12643718719482422, -1.9073486328125e-06, -0.00666046142578125, -2.47955322265625e-05, 0.0, -0.32199859619140625, -0.04906177520751953, -0.08436593413352966, -6.318092346191406e-06, -0.00828748568892479, -1.9073486328125e-05, -0.01689898781478405, -1.9073486328125e-06, -0.03740406036376953, -0.0004062652587890625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "HUNTER", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MECH", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(\n            Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.BEAST\n            )))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -5.31678978514492, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -0.4008418321609497, -1.9073486328125e-06, -0.007732391357421875, 0.0, -0.001219034194946289, -1.9073486328125e-06, -0.0006542205810546875, 0.0, -3.4332275390625e-05, 0.0, -2.5682849884033203, -1.9073486328125e-06, -0.0003757476806640625, 0.0, -0.007381439208984375, -0.21649837493896484, -0.034374088048934937, -0.00013256072998046875, -0.000621795654296875, -0.000782012939453125, -0.046283721923828125, -0.008240461349487305, -0.0004734525573439896, -1.9073486328125e-06, -3.4332275390625e-05, -0.06344413757324219, -0.0013294219970703125, -0.012776970863342285, -1.919269561767578e-05, -0.003996849060058594, -0.0006999969482421875, -0.00498199462890625, -0.000293731689453125, -2.47955322265625e-05, 0.0, -0.00715947151184082, -0.0002973077062051743, -2.47955322265625e-05, -9.918212890625e-05, -0.00738525390625, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.1259469985961914, -1.9073486328125e-06, -0.006479382514953613, -3.24249267578125e-05, 0.0, -0.37816524505615234, -0.046416282653808594, -0.08669574558734894, -6.198883056640625e-06, -0.008447994478046894, -1.9073486328125e-05, -0.017606137320399284, -1.9073486328125e-06, -0.03824901580810547, -0.000423431396484375]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "PALADIN", "hole1": 1, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Warbot"}, {"hole2": "taunt", "hole0": 1, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template7"}], "bases": [{"_type": "Template57"}], "name": "Warbot", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Warbot", "<EOS>", 320, 100, 333, 136, 197, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", 149, 291, "1", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give\n            (Buff(ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.\n            BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3, taunt=True)\n", "score": -5.408620664099999, "score_history": [-1.1913175582885742, -4.1961669921875e-05, -0.0002536773681640625, -0.002155303955078125, -0.00012969970703125, -0.000302030734019354, -0.00015674822498112917, -3.814697265625e-06, -0.0019245147705078125, -1.33514404296875e-05, -0.01520538330078125, -2.47955322265625e-05, -4.899412306258455e-05, -2.9802317840221804e-06, -0.00013159960508346558, 0.0, -2.1268444061279297, 0.0, -0.03380298614501953, 0.0, -0.003014206886291504, -1.9073486328125e-06, -0.00048065185546875, 0.0, -3.24249267578125e-05, 0.0, -0.8580999374389648, 0.0, -0.000560760498046875, 0.0, -0.009670257568359375, -0.19643497467041016, -0.03209925815463066, -0.00012481212615966797, -0.0007476806640625, -0.000530242919921875, -0.036528587341308594, -0.007340550422668457, -0.00045449589379131794, -1.9073486328125e-06, -3.24249267578125e-05, -0.06796455383300781, -0.0013370513916015625, -0.01363062858581543, -1.919269561767578e-05, -0.0026540756225585938, -0.00090789794921875, -0.002597808837890625, -0.0002689361572265625, -2.09808349609375e-05, 0.0, -0.007474303245544434, -0.0003119704779237509, -2.872943878173828e-05, -9.72747802734375e-05, -0.0071258544921875, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -0.13272666931152344, -1.9073486328125e-06, -0.006868481636047363, -3.4332275390625e-05, 0.0, -0.4299583435058594, -0.04505348205566406, -0.10256202518939972, -6.318092346191406e-06, -0.010305504314601421, -1.9073486328125e-05, -0.021228907629847527, -1.9073486328125e-06, -0.03637886047363281, -0.0004425048828125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole3": "battlecry", "hole4": {"hole2": "MinionSelector", "hole1": [{"hole0": 3, "_type": "Template38"}], "hole3": [{"value": "Null", "_type": "NameConstant"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "_type": "Template11", "hole0": "Warbot"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "_type": "Template36"}], "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 86, 244, "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 74, 187, "Null", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, battlecry=Battlecry(Give(ChangeAttack(3)),\n            MinionSelector(Null, picker=UserPicker())))\n\n    def create_weapon(self, player):\n        return Minion(1, 3)\n", "score": -5.513237110127079, "score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -0.26209306716918945, 0.0, -0.0015401840209960938, -2.5727524757385254, -0.002542040776461363, -1.41858699862496e-05, -0.000118255615234375, -0.3194303512573242, -0.0011539459228515625, -0.05902576446533203, -6.67572021484375e-05, -0.3233274221420288, -1.71661376953125e-05, 0.0, -7.62939453125e-06, -0.01587963104248047, -0.0004711151123046875, -0.03935825824737549, -1.9073486328125e-06, -0.11599349975585938, -0.0006885528564453125, -0.000102996826171875, -0.0423128604888916, 0.0, -0.0007038116455078125, -1.9073486328125e-06, -0.00417041452601552, -0.00035858154296875, -5.7220458984375e-06, -0.6379270553588867, -1.9073486328125e-06, -0.0006562471389770508, 0.0, -0.0001659393310546875, -0.21031856536865234, -0.013848304748535156, -7.998646469786763e-05, -8.58306884765625e-05, -5.948366015218198e-05, 0.0, -0.0001746395428199321, -1.9073486328125e-06]}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True)\n", "score": -0.21646916138939787, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -0.2138381004333496, 0.0, -0.000316619873046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True)\n", "score": -4.327556006787347, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -4.325119495391846, 0.0, -0.0001220703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "deck", "_type": "Template46"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "deck", "<EOS>", 68, 162, 57, 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(deck(), MinionSelector(\n            players=EnemyPlayer(), picker=RandomPicker())))\n", "score": -4.488381303376684, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -1.6940202713012695, -4.1961669921875e-05, -0.10731343924999237, -0.0001888275146484375, -0.16193771362304688, -0.03297233581542969, -0.0059108734130859375, -0.04156208038330078, -1.9073486328125e-06, -3.814697265625e-06, -0.22220158576965332, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -0.06118309497833252, -2.861018856492592e-06, -1.9073486328125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.004892587661743164, -1.9073486328125e-06, -0.0011653900146484375, -1.9073486328125e-06, -0.21518802642822266, -7.212097989395261e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Summon", "hole1": "deck", "_type": "Template31"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "deck", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(deck()),\n            PlayerSelector()))\n", "score": -4.616988256544175, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -1.9587898254394531, -0.0003910064697265625, -0.6500357985496521, -0.00019739221897907555, -0.060904063284397125, -0.004984262865036726, -0.0018520355224609375, -5.7220458984375e-06, -0.00016677379608154297, -1.9073486328125e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "deck", "_type": "Template46"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "deck", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(deck(),\n            PlayerSelector(EnemyPlayer())), PlayerSelector()))\n", "score": -4.92278068545744, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -1.4420900344848633, -0.003459930419921875, -0.0034313201904296875, -2.288818359375e-05, -0.06115531921386719, -0.045908372849226, -0.09783935546875, -0.0035915374755859375, -5.7220458984375e-06, -0.05462382361292839, -0.0008138416451402009, -1.142512321472168, -0.0001926422119140625, -0.0024768111761659384, -1.7523747374070808e-05, -5.7220458984375e-06, -0.005616055801510811, -0.001595309586264193, 0.0, -0.1105642318725586, -5.7220458984375e-06, -0.007190823554992676, -1.9073486328125e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Heal", "hole1": 2, "_type": "Template41"}, {"hole0": "PlayerSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 89, 247, "Heal", "<EOS>", "2", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Heal(2), PlayerSelector\n            (EnemyPlayer())))\n", "score": -5.021253846470756, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -2.108403205871582, -0.0006866455078125, -0.48173338174819946, -2.753734588623047e-05, -0.0031488784588873386, -1.1086458471254446e-05, -0.10570144653320312, -0.000255584716796875, -0.36490321159362793, -8.558965782867745e-05, -2.0265579223632812e-06, -0.00843261182308197, -0.008203171193599701, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "deck", "_type": "Template46"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "deck", "<EOS>", 68, 162, 57, 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(deck(),\n            MinionSelector(players=EnemyPlayer(), picker=RandomPicker())),\n            PlayerSelector()))\n", "score": -5.164655104271617, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -1.4420900344848633, -0.003459930419921875, -0.0034313201904296875, -2.288818359375e-05, -0.06115531921386719, -0.045908372849226, -0.09783935546875, -0.0035915374755859375, -5.7220458984375e-06, -0.05462382361292839, -0.0008138416451402009, -1.1083660125732422, -0.000446319580078125, -0.0044040679931640625, -0.04778861999511719, -1.9073486328125e-06, -9.5367431640625e-06, -0.03994476795196533, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.004415035247802734, -7.152555099310121e-07, -1.9073486328125e-06, -5.14984130859375e-05, -5.7220458984375e-06, -0.005535244941711426, -1.9073486328125e-06, -0.0009555816650390625, -1.9073486328125e-06, -0.1592947244644165, -4.804133641300723e-05, 0.0, -0.01136016845703125, -2.86102294921875e-05, -0.12935304641723633, 0.0, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 8, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(MinionSelector(IsType(\n            MINION_TYPE.DRAGON)), PlayerSelector()))\n", "score": -5.591647110936769, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -1.8538899421691895, -5.53131103515625e-05, -0.00017547607421875, -0.0001049041748046875, -8.392333984375e-05, -1.52587890625e-05, -0.0004372596740722656, -2.3841830625315197e-06, -0.08258056640625, -2.1717615127563477, -0.13363933563232422, -0.29591307044029236, -0.01723480224609375, -9.536738616588991e-07, -0.0014629364013671875, 0.0, -0.2662034034729004, -0.001204967382363975, -1.1920928244535389e-07, -0.00333404541015625, -0.00028228759765625, -5.53131103515625e-05, -1.33514404296875e-05, 0.0, -0.06875991821289062, 0.0, -0.17704105377197266, -2.09808349609375e-05, -0.4618654251098633, -1.9073486328125e-06, -0.05317699909210205, -1.52587890625e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "4", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "4", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, 4=True)\n", "score": -5.909149520276117, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -5.832565784454346, 0.0, -0.07426929473876953]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "stealth", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, stealth=True)\n", "score": -6.06694828736596, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -6.064033031463623, 0.0, -0.0006008148193359375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_damage", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template67"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "spell_damage", "<EOS>", 52], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, spell_damage=5)\n", "score": -6.496046416638421, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -5.997950077056885, 0.0, -0.49578189849853516]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "divine_shield", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "divine_shield", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, divine_shield=True)\n", "score": -6.640626304028558, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -6.635923862457275, 0.0, -0.00238800048828125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_damage", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template60"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "spell_damage", "<EOS>", 46], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, spell_damage=1)\n", "score": -7.1617902444582455, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -5.997950077056885, 0.0, -1.1615257263183594]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, windfury=True)\n", "score": -7.2513006852846615, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -7.246298789978027, -1.9073486328125e-06, -0.002685546875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Deathlord", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "DRUID", "hole0": 2, "hole1": 8, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", 62], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, DRUID=True)\n", "score": -7.6734994577150815, "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -7.655372142791748, 0.0, -0.01581287384033203]}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 1, "hole1": 4, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -2.9075991767474534, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -1.7129497528076172, -0.0001983642578125, -3.969590397900902e-05, -5.5670512665528804e-05, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, 0.0, -0.0021228790283203125, -1.9073486328125e-06, -2.372264862060547e-05, -5.7220458984375e-06, -0.024817466735839844, -3.24249267578125e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0001316070556640625, -0.056247711181640625, -4.57763671875e-05, -0.00012040138244628906, -1.7881377516459906e-06, -2.074241274385713e-05, -2.0265579223632812e-06, -0.5052719116210938, -5.7220458984375e-06, -0.0007801055908203125, -0.0010623931884765625, -0.014927983283996582, -6.29425048828125e-05, -0.0011081695556640625, -0.2334575653076172, -0.00110626220703125, -9.5367431640625e-06, -7.62939453125e-06, -0.008673906326293945, -0.007386349141597748, -6.19888032815652e-06, -1.71661376953125e-05, -0.002582550048828125, -0.0002346038818359375, -0.00069427490234375, -0.004719734191894531, -3.0517578125e-05, -0.0020923614501953125, -3.0517578125e-05, -2.09808349609375e-05, -0.00046837329864501953, -3.1828880310058594e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -2.6702880859375e-05, -0.00043487548828125, -0.0001659393310546875, -0.000545501708984375, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.005311250686645508, -0.0005990266799926758, -2.0265579223632812e-06, -5.7220458984375e-06, -0.1987934112548828, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.0004177093505859375, 0.0, -0.0051116943359375, -4.00543212890625e-05, -1.52587890625e-05, -0.11166572570800781]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -3.1871057931147107, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -2.0496716499328613, -0.0006748582818545401, -0.0001639126567170024, -1.9073486328125e-06, 0.0, -3.933906555175781e-06, 0.0, -0.0007379055023193359, -6.4849853515625e-05, -0.8015903234481812, -5.9723428421420977e-05, -0.004609167575836182, -5.7220458984375e-06, 0.0, -0.0004444122314453125, -0.000118255615234375, -5.7220458984375e-06, -0.00307464599609375, -0.0001850128173828125, -9.34600830078125e-05, -3.24249267578125e-05, -0.003821134567260742, -3.62396240234375e-05, 0.0, -0.0011463165283203125, 0.0, -7.748603820800781e-06, 0.0, -2.47955322265625e-05, -5.340576171875e-05, -1.71661376953125e-05, -1.0728830375228426e-06, 0.0, -0.0002824068069458008, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(AuraUntil(\n            ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON)), BothPlayer())), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -3.3201634036590804, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -0.4438304901123047, -0.00079345703125, -0.001155853271484375, -2.47955322265625e-05, -0.480849027633667, -0.0009349584579467773, -7.93933795648627e-05, -0.04046440124511719, -0.1983795166015625, -7.43865966796875e-05, -4.76837158203125e-05, -1.1444091796875e-05, -0.005556310992687941, -0.0027306033298373222, -2.1457672119140625e-06, -5.7220458984375e-06, -0.000240325927734375, -0.00043487548828125, -0.0007476806640625, -0.2173452377319336, -0.00159454345703125, -0.00061798095703125, -5.14984130859375e-05, -3.4332275390625e-05, -0.00023794174194335938, -3.707408541231416e-05, 0.0, -3.0517578125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -0.000518798828125, -9.72747802734375e-05, -0.0005435943603515625, -5.340576171875e-05, -3.814697265625e-06, 0.0, -0.00195920467376709, -0.000523686408996582, -2.0265579223632812e-06, -5.7220458984375e-06, -0.11037445068359375, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.000274658203125, 0.0, -0.00623321533203125, -4.1961669921875e-05, -0.03106975555419922, -1.71661376953125e-05, -0.001636505126953125, -2.0265579223632812e-06, -0.00026702880859375, -0.02395928092300892, -7.62939453125e-06, 0.0, -0.06383514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -0.01085662841796875, -7.62939453125e-06, -8.7738037109375e-05, -2.6702880859375e-05, -0.0046471357345581055, -9.5367431640625e-05, 0.0, -0.0006009340286254883, 0.0, -7.748603820800781e-06, 0.0, -2.288818359375e-05, -3.4332275390625e-05, -2.288818359375e-05, -7.152555099310121e-07, 0.0, -0.0002518892288208008, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Nerub'ar Weblord", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 1, "hole1": 4, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -3.5377268083779825, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -2.479893684387207, -0.000263214111328125, -9.298280929215252e-06, -1.3470649719238281e-05, -2.3841855067985307e-07, 0.0, -1.0132789611816406e-05, 0.0, -0.0014348030090332031, -1.1444091796875e-05, -2.09808349609375e-05, 0.0, -3.4570680327306036e-06, 0.0, -2.09808349609375e-05, -0.017534255981445312, -9.5367431640625e-06, -0.00012814998626708984, -2.50339189733495e-06, -2.8610225854208693e-05, -2.1457672119140625e-06, -0.43131542205810547, -5.7220458984375e-06, -0.0013828277587890625, -0.002101898193359375, -0.012259483337402344, -0.000102996826171875, -0.001308441162109375, -0.24278831481933594, -0.0012149810791015625, -9.5367431640625e-06, -5.7220458984375e-06, -0.00927734375, -0.007266982924193144, -6.19888032815652e-06, -1.71661376953125e-05, -0.00278472900390625, -0.0002269744873046875, -0.0007381439208984375, -0.004797935485839844, -3.0517578125e-05, -0.0020732879638671875, -3.0517578125e-05, -2.288818359375e-05, -0.0004761219024658203, -3.3855438232421875e-05, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -2.6702880859375e-05, -0.0004291534423828125, -0.0001697540283203125, -0.000553131103515625, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.00536656379699707, -0.000599980354309082, -2.0265579223632812e-06, -5.7220458984375e-06, -0.19947433471679688, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.0004138946533203125, 0.0, -0.0051403045654296875, -4.00543212890625e-05, -1.71661376953125e-05, -0.10298919677734375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -3.592329602722998, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -2.0496716499328613, -0.0006748582818545401, -0.0001639126567170024, -1.9073486328125e-06, 0.0, -3.933906555175781e-06, 0.0, -0.0007379055023193359, -6.4849853515625e-05, -1.1783803701400757, -0.01874709129333496, -0.004324339330196381, -3.0517578125e-05, 0.0, -0.0023365020751953125, -6.67572021484375e-05, -3.814697265625e-06, -0.011211395263671875, -0.0001277923583984375, -5.7220458984375e-05, -3.62396240234375e-05, -0.004059910774230957, -3.24249267578125e-05, 0.0, -0.0010280609130859375, 0.0, -7.748603820800781e-06, 0.0, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-05, -1.0728830375228426e-06, 0.0, -0.00028443336486816406, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(2))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -3.713188838711744, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -1.2463884353637695, -4.00543212890625e-05, -0.013201713562011719, -0.0018863677978515625, -0.00020599365234375, -0.00023865699768066406, -6.67572021484375e-05, -0.0015184879302978516, -0.0008774995803833008, -1.1444091796875e-05, -0.08755314350128174, -1.9073486328125e-06, -0.000640869140625, -0.0001239776611328125, -0.00081634521484375, -7.62939453125e-06, -8.225440979003906e-05, -0.06810629367828369, -1.33514404296875e-05, -0.5066052675247192, -0.00012969970703125, -0.0011806488037109375, -0.10118579864501953, -2.86102294921875e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.0023040771484375, -5.53131103515625e-05, -7.43865966796875e-05, -2.288818359375e-05, -0.011549711227416992, -3.4332275390625e-05, 0.0, -0.0012454986572265625, 0.0, -5.841255187988281e-06, 0.0, -2.47955322265625e-05, -0.000926971435546875, -2.47955322265625e-05, -4.768370445162873e-07, 0.0, -0.0002881288528442383, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "score": -3.9003483685708034, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -1.7129497528076172, -0.0001983642578125, -3.969590397900902e-05, -5.5670512665528804e-05, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, 0.0, -0.0021228790283203125, -1.9073486328125e-06, -2.372264862060547e-05, -5.7220458984375e-06, -0.024817466735839844, -3.24249267578125e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0001316070556640625, -0.056247711181640625, -4.57763671875e-05, -0.00012040138244628906, -1.7881377516459906e-06, -2.074241274385713e-05, -2.0265579223632812e-06, -2.0851383209228516, -1.52587890625e-05, -0.015628814697265625]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole8": [{"_type": "Template62_expr_seq"}], "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(), MinionSelector(\n            IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.068728976363886, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -2.3309402465820312, -0.0002952389477286488, -1.8954269762616605e-05, -2.0265579223632812e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -0.02746879681944847, -1.9073486328125e-06, -0.5567586421966553, -0.0030335187911987305, -0.006406819447875023, -9.5367431640625e-05, 0.0, -0.6230688095092773, -0.001445770263671875, -0.002895355224609375, -7.62939453125e-06, -1.9073486328125e-06, -0.05996835231781006, -0.0020956993103027344, -3.325939178466797e-05, -5.7220458984375e-05, -0.019407272338867188, -0.00165557861328125, -0.10932254791259766, -1.060962586052483e-05, 0.0, -9.512849646853283e-05, 0.0, -3.814697265625e-05, -0.002994537353515625, -4.1961669921875e-05, -2.503394853192731e-06, -1.1920928244535389e-07, -0.0003719329833984375, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(IsType(MINION_TYPE\n            .MECH)), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.178312492115992, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -0.4438304901123047, -0.00079345703125, -0.001155853271484375, -2.47955322265625e-05, -1.8227345943450928, -0.005503654479980469, -6.580352055607364e-05, -3.62396240234375e-05, -0.02027130126953125, -0.1541215181350708, -6.103515625e-05, 0.0, -0.00019073486328125, -1.1444091796875e-05, -2.288818359375e-05, -0.03199577331542969, -7.62939453125e-06, -0.000392913818359375, -2.09808349609375e-05, -0.029612064361572266, -0.000278472900390625, 0.0, -0.0009957551956176758, 0.0, -1.1801719665527344e-05, 0.0, -1.71661376953125e-05, -0.00014495849609375, -2.09808349609375e-05, -2.741813204920618e-06, 0.0, -0.0003110170364379883, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), IsType(\n            MINION_TYPE.MECH)))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.236588677648676, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -2.283730983734131, -1.3232166566012893e-05, -4.136561983614229e-05, -8.344646857949556e-07, 0.0, -2.622604142743512e-06, 0.0, -0.005223751068115234, -1.9073486328125e-06, -0.017512576654553413, -0.10024964809417725, -0.0001983642578125, -0.5207986831665039, -0.006836891174316406, -0.1414318084716797, -0.0008907318115234375, -0.0002613067626953125, -0.00021946430206298828, -6.67572021484375e-05, -0.0007348060607910156, -0.0007038116455078125, -7.62939453125e-06, -0.48528504371643066, -3.814697265625e-06, -0.000728607177734375, -0.00018310546875, -0.00107574462890625, -3.814697265625e-06, -9.572505950927734e-05, -0.07412064075469971, -5.7220458984375e-06, -0.12884998321533203, -1.71661376953125e-05, -0.0013217926025390625, -0.0008754730224609375, -8.96453857421875e-05, 0.0, -0.0007648468017578125, -0.004093170166015625, -0.015146255493164062, -1.52587890625e-05, 0.0, -0.05577540397644043, -0.005553603172302246, -3.898143768310547e-05, -8.392333984375e-05, -0.06243705749511719, -6.198883056640625e-06, 0.0, -0.00012445426546037197, 0.0, -2.86102294921875e-05, -0.000537872314453125, -6.67572021484375e-05, -2.384185791015625e-06, 0.0, -0.00015461444854736328, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 1, "hole1": 4, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 320, 105], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsType(MINION_TYPE.MECH)))])\n", "score": -4.308402742726457, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -1.7129497528076172, -0.0001983642578125, -3.969590397900902e-05, -5.5670512665528804e-05, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, 0.0, -0.0021228790283203125, -1.9073486328125e-06, -2.372264862060547e-05, -5.7220458984375e-06, -0.024817466735839844, -3.24249267578125e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0001316070556640625, -0.056247711181640625, -4.57763671875e-05, -0.00012040138244628906, -1.7881377516459906e-06, -2.074241274385713e-05, -2.0265579223632812e-06, -0.5052719116210938, -5.7220458984375e-06, -0.0007801055908203125, -0.0010623931884765625, -0.014927983283996582, -6.29425048828125e-05, -0.0011081695556640625, -0.2334575653076172, -0.00110626220703125, -9.5367431640625e-06, -7.62939453125e-06, -0.008673906326293945, -0.007386349141597748, -6.19888032815652e-06, -1.71661376953125e-05, -0.002582550048828125, -0.0002346038818359375, -0.00069427490234375, -0.004719734191894531, -3.0517578125e-05, -0.0020923614501953125, -3.0517578125e-05, -2.09808349609375e-05, -0.00046837329864501953, -3.1828880310058594e-05, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, -2.6702880859375e-05, -0.00043487548828125, -0.0001659393310546875, -0.000545501708984375, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.005311250686645508, -0.0005990266799926758, -2.0265579223632812e-06, -5.7220458984375e-06, -1.7162847518920898, -5.14984130859375e-05, -0.0005359649658203125]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(3))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.5444108960542735, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -1.2463884353637695, -4.00543212890625e-05, -0.013201713562011719, -0.0018863677978515625, -0.00020599365234375, -0.00023865699768066406, -6.67572021484375e-05, -0.0015184879302978516, -0.0008774995803833008, -1.1444091796875e-05, -0.08755314350128174, -1.9073486328125e-06, -0.000640869140625, -0.0001239776611328125, -0.00081634521484375, -7.62939453125e-06, -8.225440979003906e-05, -0.06810629367828369, -1.33514404296875e-05, -1.385539174079895, -0.020862579345703125, -0.0003681182861328125, -0.03018951416015625, -3.24249267578125e-05, 0.0, -1.71661376953125e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.00260162353515625, -4.57763671875e-05, -9.72747802734375e-05, -2.47955322265625e-05, -0.0148850679397583, -3.814697265625e-05, 0.0, -0.00125885009765625, 0.0, -5.841255187988281e-06, 0.0, -2.47955322265625e-05, -0.000614166259765625, -2.288818359375e-05, -4.768370445162873e-07, 0.0, -0.00028252601623535156, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "ManaChange", "hole1": 1, "_type": "Template41"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "Mana", "Change", "<EOS>", "1", "<EOS>", 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(AuraUntil(\n            ManaChange(1), CardSelector(condition=IsType(MINION_TYPE.DRAGON\n            )), BothPlayer())), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.6965319761324835, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -0.4438304901123047, -0.00079345703125, -0.001155853271484375, -2.47955322265625e-05, -0.480849027633667, -0.0009349584579467773, -7.93933795648627e-05, -0.04046440124511719, -1.750554084777832, -0.0005321502685546875, -0.02262059412896633, -0.0023421142250299454, -2.5510787963867188e-05, -0.04937418922781944, -2.3841855067985307e-07, -0.0033168792724609375, -0.010384559631347656, -0.0008602142333984375, -1.9073486328125e-06, -0.0005594491958618164, -0.00017952919006347656, 0.0, -0.0001201629638671875, -1.33514404296875e-05, -5.7220458984375e-06, -0.0003376007080078125, -0.0001964569091796875, -0.0023632049560546875, -6.29425048828125e-05, -5.7220458984375e-06, 0.0, -0.001385331153869629, -0.0006524324417114258, -1.1920928244535389e-07, -5.7220458984375e-06, -0.07083320617675781, -1.33514404296875e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.000354766845703125, 0.0, -0.007363319396972656, -3.814697265625e-05, -0.030469894409179688, -1.9073486328125e-05, -0.0017185211181640625, -2.0265579223632812e-06, -0.0002841949462890625, -0.02412140555679798, -7.62939453125e-06, 0.0, -0.06483268737792969, -1.9073486328125e-06, -1.1444091796875e-05, -0.010942459106445312, -7.62939453125e-06, -9.1552734375e-05, -2.6702880859375e-05, -0.004629015922546387, -9.5367431640625e-05, 0.0, -0.0006028413772583008, 0.0, -7.748603820800781e-06, 0.0, -2.288818359375e-05, -3.4332275390625e-05, -2.288818359375e-05, -7.152555099310121e-07, 0.0, -0.00025391578674316406, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "GiveAura", "hole5": "MinionSelector", "hole4": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 4, "_type": "Template32"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "Aura", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON)), BothPlayer())), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score": -4.711065888289795, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -2.077789306640625, -0.0003606080717872828, -1.52587890625e-05, -0.006595611572265625, -0.000152587890625, -0.000213623046875, -1.33514404296875e-05, -0.3023473024368286, -0.0008741617202758789, -0.0001442432403564453, -0.030203819274902344, -0.17457962036132812, -7.82012939453125e-05, -4.76837158203125e-05, -9.5367431640625e-06, -0.0048954361118376255, -0.0017660268349573016, -2.0265579223632812e-06, -3.814697265625e-06, -0.0002422332763671875, -0.0004367828369140625, -0.0006046295166015625, -0.35069942474365234, -0.0019474029541015625, -0.000621795654296875, -5.53131103515625e-05, -2.86102294921875e-05, -0.0002548694610595703, -2.0980833141948096e-05, 0.0, -2.6702880859375e-05, -1.52587890625e-05, -2.6702880859375e-05, -0.000537872314453125, -9.1552734375e-05, -0.0004673004150390625, -5.53131103515625e-05, -3.814697265625e-06, 0.0, -0.0019495487213134766, -0.0004950761795043945, -2.0265579223632812e-06, -5.7220458984375e-06, -0.11192131042480469, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.000278472900390625, 0.0, -0.0061473846435546875, -4.1961669921875e-05, -0.03536701202392578, -1.71661376953125e-05, -0.0017490386962890625, -2.0265579223632812e-06, -0.000255584716796875, -0.023273706436157227, -7.62939453125e-06, 0.0, -0.06517219543457031, -1.9073486328125e-06, -1.1444091796875e-05, -0.011007308959960938, -7.62939453125e-06, -8.7738037109375e-05, -2.6702880859375e-05, -0.004675745964050293, -9.72747802734375e-05, 0.0, -0.0006009340286254883, 0.0, -7.748603820800781e-06, 0.0, -2.288818359375e-05, -3.4332275390625e-05, -2.288818359375e-05, -7.152555099310121e-07, 0.0, -0.0002518892288208008, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 2, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template10", "hole0": "Nerub'ar Weblord"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 1, "hole1": 4, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.DRAGON)))])\n", "score": -4.813755232379322, "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -1.7129497528076172, -0.0001983642578125, -3.969590397900902e-05, -5.5670512665528804e-05, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, 0.0, -0.0021228790283203125, -1.9073486328125e-06, -2.372264862060547e-05, -5.7220458984375e-06, -0.024817466735839844, -3.24249267578125e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0001316070556640625, -0.056247711181640625, -4.57763671875e-05, -0.00012040138244628906, -1.7881377516459906e-06, -2.074241274385713e-05, -2.0265579223632812e-06, -0.5052719116210938, -5.7220458984375e-06, -0.0007801055908203125, -0.0010623931884765625, -0.014927983283996582, -6.29425048828125e-05, -0.0011081695556640625, -2.079935073852539, -0.000431060791015625, -0.10511793196201324, -5.841255187988281e-06, -0.1977243423461914, -0.006549835205078125, -0.03801465034484863, -0.0002785921096801758, -4.768370445162873e-07, -0.0007343292236328125, -1.9073486328125e-06, -0.00016427040100097656, -0.0014829635620117188, -2.86102294921875e-05, -8.20159912109375e-05, -0.0067462921142578125, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -0.009608268737792969, -2.47955322265625e-05, -3.814697265625e-05, -0.0439300537109375]}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -1.4583393307092791, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -0.22689056396484375, -2.288818359375e-05, -1.1920928244535389e-07, 0.0, -0.00021420822304207832, -1.1920928244535389e-07, -0.2098522186279297, 0.0, -0.0386199951171875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -1.4849610287619015, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.8632583618164062, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -6.103515625e-05, -0.04966926574707031, -2.86102294921875e-05, -1.1920928244535389e-07, 0.0, -0.0002245781506644562, -1.1920928244535389e-07, -0.1945056915283203, 0.0, -0.038692474365234375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -1.6390397394533096, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -1.3862314224243164, -0.00254058837890625, -1.0728830375228426e-06, -1.9073486328125e-05, -5.960446742392378e-06, 0.0, -0.000439430441474542, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -4.398822784423828e-05, 0.0, -3.814697265625e-05, -0.0018978118896484375, -4.76837158203125e-05, -1.1920928244535389e-07, 0.0, -0.0002615294069983065, -1.1920928244535389e-07, -0.1945514678955078, 0.0, -0.042964935302734375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 6, "hole0": "Minion", "hole1": 4, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "spell_targetable", "value": {"_type": "Template75"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True, spell_targetable=False)\n", "score": -3.493569854954245, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -1.5995845794677734, -1.9073486328125e-05, -9.775107173481956e-06, -0.00011444091796875, -2.3841855067985307e-07, 0.0, -0.0001919229980558157, 0.0, -0.012658119201660156, -1.1444091796875e-05, -3.814697265625e-06, -0.05556964874267578, 0.0, -0.00101470947265625, -3.814697265625e-05, -8.20159912109375e-05, -0.813511848449707, -1.9073486328125e-06, -0.028018951416015625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -3.727233632885927, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -1.3862314224243164, -0.00254058837890625, -1.0728830375228426e-06, -1.9073486328125e-05, -5.960446742392378e-06, 0.0, -0.000439430441474542, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -4.398822784423828e-05, 0.0, -3.814697265625e-05, -0.0018978118896484375, -4.76837158203125e-05, -1.1920928244535389e-07, 0.0, -0.0002615294069983065, -1.1920928244535389e-07, -2.3067188262939453, 0.0, -0.018991470336914062]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -3.7561823101404315, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -0.22689056396484375, -2.288818359375e-05, -1.1920928244535389e-07, 0.0, -0.00021420822304207832, -1.1920928244535389e-07, -2.5224084854125977, 0.0, -0.023906707763671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 6, "hole0": "Minion", "hole1": 4, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True, taunt=True)\n", "score": -3.9273667375836396, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -1.5995845794677734, -1.9073486328125e-05, -9.775107173481956e-06, -0.00011444091796875, -2.3841855067985307e-07, 0.0, -0.0001919229980558157, 0.0, -0.012658119201660156, -1.1444091796875e-05, -3.814697265625e-06, -0.05556964874267578, 0.0, -0.00101470947265625, -3.814697265625e-05, -8.20159912109375e-05, -1.2357444763183594, 0.0, -0.039585113525390625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -4.064934249587097, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.8632583618164062, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -6.103515625e-05, -0.04966926574707031, -2.86102294921875e-05, -1.1920928244535389e-07, 0.0, -0.0002245781506644562, -1.1920928244535389e-07, -2.7861766815185547, 0.0, -0.026994705200195312]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "_type": "Template10", "hole0": "Spectral Knight"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -4.293111719592126, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -3.709829330444336, -0.0001220703125, -4.0531076592742465e-06, -1.33514404296875e-05, -2.8490614567999728e-05, 0.0, -0.0002456654910929501, 0.0, -0.1597118377685547, 0.0, -0.034267425537109375, 0.0, -0.0070343017578125, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.0026235580444335938, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.000217437744140625, -0.00112152099609375, -0.0003833770751953125, -2.3841855067985307e-07, 0.0, -0.001143304631114006, -1.1920928244535389e-07, -0.3223857879638672, 0.0, -0.04395103454589844]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -4.315085767111604, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -3.6478700637817383, 0.0, -5.7220458984375e-06, 0.0, -4.76837158203125e-05, 0.0, -4.9591064453125e-05, -0.06472206115722656, -3.814697265625e-05, 0.0, 0.0, -0.0002016924845520407, -1.1920928244535389e-07, -0.2241983413696289, 0.0, -0.03944110870361328]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 6, "hole0": "Minion", "hole1": 4, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "spell_targetable", "value": {"_type": "Template75"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True, spell_targetable=False)\n", "score": -5.157033091817482, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.8632583618164062, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -6.103515625e-05, -3.0388002395629883, -1.71661376953125e-05, -1.3232130186224822e-05, -0.0001163482666015625, -2.0265579223632812e-06, 0.0, -0.000176785426447168, 0.0, -0.009935379028320312, -1.1444091796875e-05, -3.814697265625e-06, -0.058989524841308594, 0.0, -0.0010471343994140625, -4.1961669921875e-05, -8.392333984375e-05, -0.8172979354858398, -1.9073486328125e-06, -0.028654098510742188]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 6, "hole0": "Minion", "hole1": 4, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "enrage", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True, enrage=[Aura(ChangeAttack(3),\n            SelfSelector())])\n", "score": -5.268426891723621, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -1.5995845794677734, -1.9073486328125e-05, -9.775107173481956e-06, -0.00011444091796875, -2.3841855067985307e-07, 0.0, -0.0001919229980558157, 0.0, -0.012658119201660156, -1.1444091796875e-05, -3.814697265625e-06, -0.05556964874267578, 0.0, -0.00101470947265625, -3.814697265625e-05, -8.20159912109375e-05, -1.9456005096435547, -1.9073486328125e-06, -0.013020515441894531, -0.0008335113525390625, -0.013032078742980957, -2.6702880859375e-05, -0.0003910064697265625, -0.4638395309448242, -0.001216888427734375, -0.10545515269041061, -7.867813110351562e-06, -0.003177642822265625, -9.5367431640625e-06, -0.02400791645050049, -1.1920928244535389e-07, -1.1920928244535389e-07, -3.62396240234375e-05, -0.04573249816894531]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "spell_targetable", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "score": -5.352104187591912, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -4.423975944519043, 0.0, -7.62939453125e-06, 0.0, -1.52587890625e-05, 0.0, -4.57763671875e-05, -0.32358455657958984, -2.86102294921875e-05, 0.0, 0.0, -0.00018512456153985113, -1.1920928244535389e-07, -0.22878551483154297, 0.0, -0.03696441650390625]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "_type": "Template10", "hole0": "Spectral Knight"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 4, "hole1": 6, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "score": -5.3994454521971065, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -3.709829330444336, -0.0001220703125, -4.0531076592742465e-06, -1.33514404296875e-05, -2.8490614567999728e-05, 0.0, -0.0002456654910929501, 0.0, -0.1597118377685547, 0.0, -0.034267425537109375, 0.0, -0.0070343017578125, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.0026235580444335938, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.000217437744140625, -0.00112152099609375, -0.0003833770751953125, -2.3841855067985307e-07, 0.0, -0.001143304631114006, -1.1920928244535389e-07, -1.4588489532470703, 0.0, -0.013821601867675781]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Spectral Knight", "hole1": 5, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 6, "hole0": "Minion", "hole1": 4, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "taunt", "<EOS>", 62], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True, taunt=True)\n", "score": -5.599743968282326, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.8632583618164062, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -6.103515625e-05, -3.0388002395629883, -1.71661376953125e-05, -1.3232130186224822e-05, -0.0001163482666015625, -2.0265579223632812e-06, 0.0, -0.000176785426447168, 0.0, -0.009935379028320312, -1.1444091796875e-05, -3.814697265625e-06, -0.058989524841308594, 0.0, -0.0010471343994140625, -4.1961669921875e-05, -8.392333984375e-05, -1.2479562759399414, 0.0, -0.04070854187011719]}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -3.736815685331692, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -1.3824758529663086, -0.0001125335693359375, -5.7220458984375e-06, -5.960462772236497e-07, -7.891654968261719e-05, -1.537799835205078e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "_type": "Template6", "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -3.991127516601523, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -3.308457374572754, -7.510169325541938e-06, -4.398822056828067e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004841208457946777, -2.0265579223632812e-06, -0.027900125831365585, -2.3364789740298875e-05, -0.5915985703468323, -7.748603820800781e-06, -4.768370445162873e-07, -0.0005475282669067383, 0.0, -3.14709686790593e-05, 0.0, -1.33514404296875e-05, -0.016490936279296875, -3.0517578125e-05, -5.7220458984375e-06, -4.768370445162873e-07, -0.00010466575622558594, -1.3470649719238281e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "MinionCount", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Minion", "Count", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(MinionCount(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.0389791246734035, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -1.804399847984314, -0.23905181884765625, -0.3968449831008911, -0.038176029920578, -5.7220458984375e-06, -0.007668737787753344, -7.62939453125e-06, -4.88758041683468e-06, -0.00449371337890625, -3.24249267578125e-05, -8.58306884765625e-05, -0.00060272216796875, -8.7738037109375e-05, -0.18707656860351562, -5.7220458984375e-06, -0.22517047822475433, -7.259845733642578e-05, -0.0003694295883178711, 0.0, -1.0967229172820225e-05, 0.0, -9.1552734375e-05, -0.2815694808959961, -7.82012939453125e-05, -5.7220458984375e-06, -5.960462772236497e-07, -8.106230961857364e-05, -1.537799835205078e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "WailingAttack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Wailing", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(WailingAttack())])\n", "score": -4.25590621827007, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -0.32560062408447266, -1.1444091796875e-05, -0.00019848346710205078, -1.0609570381348021e-05, -0.0002449524763505906, -6.4373016357421875e-06, -0.38543426990509033, -0.0011262893676757812, -0.07110214233398438, -0.0004405975341796875, -0.0002994537353515625, -0.015314102172851562, -0.002613067626953125, -0.9724612236022949, -0.12044885009527206, -0.0018264055252075195, -0.0046405792236328125]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Damage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.3024072710265955, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -1.6728031635284424, -0.013950105756521225, -0.11996123194694519, -5.841255187988281e-06, -0.0016840723110362887, -9.5367431640625e-06, -3.6954863844584906e-06, -0.022632598876953125, -6.29425048828125e-05, -6.67572021484375e-05, -0.0006561279296875, -5.91278076171875e-05, -0.13498306274414062, -7.62939453125e-06, -0.21605293452739716, -5.91278076171875e-05, -0.0003657341003417969, 0.0, -1.2755353964166716e-05, 0.0, -0.0001010894775390625, -1.2657623291015625, -9.918212890625e-05, -5.7220458984375e-06, -4.768370445162873e-07, -7.736682164249942e-05, -1.537799835205078e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "<UNK>Attack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "<UNK>", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(<UNK>Attack())])\n", "score": -4.412401908615834, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -0.32560062408447266, -1.1444091796875e-05, -0.00019848346710205078, -1.0609570381348021e-05, -0.0002449524763505906, -6.4373016357421875e-06, -0.38543426990509033, -0.0011262893676757812, -0.07110214233398438, -0.0004405975341796875, -0.0002994537353515625, -0.015314102172851562, -0.002613067626953125, -1.128956913948059, -0.12044885009527206, -0.0018264055252075195, -0.0046405792236328125]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector\n            (players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.51005714754109, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -3.119063377380371, -0.0012614040169864893, -4.7802859626244754e-05, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.0004107952117919922, -3.62396240234375e-05, -0.6879767179489136, -4.0531158447265625e-06, -0.07861600816249847, -3.814697265625e-06, -5.960462772236497e-07, -0.550114631652832, -2.288818359375e-05, 0.0, -0.0004596710205078125, 0.0, -7.05718994140625e-05, -7.62939453125e-06, -9.036036499310285e-05, -9.059906005859375e-05, -3.814697265625e-06, -1.71661376953125e-05, -2.6702880859375e-05, -0.001659393310546875, -7.62939453125e-06, -0.00086212158203125, -3.814697265625e-06, -0.017146309837698936, -1.3470649719238281e-05, -1.9073486328125e-06, -0.010780811309814453, 0.0, -5.9604644775390625e-06, 0.0, -8.20159912109375e-05, -5.91278076171875e-05, -2.288818359375e-05, -3.814697265625e-06, 0.0, -6.651877629337832e-05, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "Silence", "_type": "Template6", "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", "Silence", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), Silence()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.753041232819896, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -3.308457374572754, -7.510169325541938e-06, -4.398822056828067e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.004841208457946777, -2.0265579223632812e-06, -0.027900125831365585, -2.3364789740298875e-05, -1.0951257944107056, -4.7683708544354886e-05, -0.0002446174039505422, 0.0, -4.935185279464349e-05, 0.0, -1.9073486328125e-05, -0.2751169204711914, -3.4332275390625e-05, -7.62939453125e-06, -4.768370445162873e-07, -0.00010120868682861328, -1.1563301086425781e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "SilenceDamage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(SilenceDamage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -4.9597556430558996, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -2.7014517784118652, -0.0003721712564583868, -0.058102626353502274, -1.9073486328125e-06, -0.0017755059525370598, -5.7220458984375e-06, -5.602834789897315e-06, -0.0071392059326171875, -3.0517578125e-05, -7.82012939453125e-05, -0.0004978179931640625, -8.58306884765625e-05, -0.15604591369628906, -5.7220458984375e-06, -0.20902463793754578, -7.259845733642578e-05, -0.0003273487091064453, 0.0, -1.0609603123157285e-05, 0.0, -9.918212890625e-05, -0.07291984558105469, -6.29425048828125e-05, -5.7220458984375e-06, -2.3841855067985307e-07, -8.010863530216739e-05, -1.537799835205078e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "WailingAttack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Wailing", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Damage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(WailingAttack())])\n", "score": -4.969202284859307, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -1.6728031635284424, -0.013950105756521225, -0.11996123194694519, -5.841255187988281e-06, -0.0016840723110362887, -9.5367431640625e-06, -3.6954863844584906e-06, -0.022632598876953125, -6.29425048828125e-05, -6.67572021484375e-05, -0.0006561279296875, -5.91278076171875e-05, -0.13498306274414062, -7.62939453125e-06, -0.21605293452739716, -5.91278076171875e-05, -0.0003657341003417969, 0.0, -1.2755353964166716e-05, 0.0, -0.0001010894775390625, -0.3707752227783203, -1.1444091796875e-05, -0.00018894672393798828, -1.0490362910786644e-05, -0.0002505541197024286, -6.4373016357421875e-06, -0.384893536567688, -0.0011720657348632812, -0.07105636596679688, -0.000438690185546875, -0.00029754638671875, -0.015006065368652344, -0.0026493072509765625, -0.9599853754043579, -0.11958267539739609, -0.001877903938293457, -0.0045528411865234375]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "CantAttack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Cant", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(CantAttack())])\n", "score": -5.040146480852968, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -0.32560062408447266, -1.1444091796875e-05, -0.00019848346710205078, -1.0609570381348021e-05, -0.0002449524763505906, -6.4373016357421875e-06, -0.38543426990509033, -0.0011262893676757812, -0.07110214233398438, -0.0004405975341796875, -0.0002994537353515625, -0.015314102172851562, -0.002613067626953125, -1.871785283088684, -0.008217016234993935, -0.0002695322036743164, -0.003345489501953125]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "<UNK>Attack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "<UNK>", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Damage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(<UNK>Attack())])\n", "score": -5.136977558182366, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -1.6728031635284424, -0.013950105756521225, -0.11996123194694519, -5.841255187988281e-06, -0.0016840723110362887, -9.5367431640625e-06, -3.6954863844584906e-06, -0.022632598876953125, -6.29425048828125e-05, -6.67572021484375e-05, -0.0006561279296875, -5.91278076171875e-05, -0.13498306274414062, -7.62939453125e-06, -0.21605293452739716, -5.91278076171875e-05, -0.0003657341003417969, 0.0, -1.2755353964166716e-05, 0.0, -0.0001010894775390625, -0.3707752227783203, -1.1444091796875e-05, -0.00018894672393798828, -1.0490362910786644e-05, -0.0002505541197024286, -6.4373016357421875e-06, -0.384893536567688, -0.0011720657348632812, -0.07105636596679688, -0.000438690185546875, -0.00029754638671875, -0.015006065368652344, -0.0026493072509765625, -1.127760648727417, -0.11958267539739609, -0.001877903938293457, -0.0045528411865234375]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "IsMinion", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 5, "_type": "Template32"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Minion", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=IsMinion())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score": -5.227892571720076, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -2.019320487976074, -0.04986363649368286, -0.00023674964904785156, -0.00011801719665527344, -1.9073486328125e-06, -3.027885759365745e-05, 0.0, -9.72747802734375e-05, -1.0268678665161133, -7.05718994140625e-05, -3.814697265625e-06, -4.768370445162873e-07, -8.237361907958984e-05, -1.3470649719238281e-05]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "IsMinion", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 3, "hole1": 5, "hole3": {"elts": [{"hole0": "WailingAttack", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Minion", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Wailing", "Attack", "<EOS>", 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=IsMinion())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(WailingAttack())])\n", "score": -6.260405358146841, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -2.019320487976074, -0.04986363649368286, -0.00023674964904785156, -0.00011801719665527344, -1.9073486328125e-06, -3.027885759365745e-05, 0.0, -9.72747802734375e-05, -0.46617603302001953, -1.52587890625e-05, -0.00022900104522705078, -6.6756979322235566e-06, -0.000266286195255816, -8.344650268554688e-06, -0.3263254165649414, -0.0008869171142578125, -0.05010032653808594, -0.0004119873046875, -0.000316619873046875, -0.015845298767089844, -0.0023860931396484375, -1.0598011016845703, -0.1303711235523224, -0.0020389556884765625, -0.0043659210205078125]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Wailing Soul"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "effects", "hole0": 3, "hole1": 5, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Effect", "hole1": [{"func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"arg": "player", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 38, 252, "Effect", "<EOS>", 321, 68, 162, 25, 186, "Character", "<UNK>", "<EOS>", 327, 119, 310, "player", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, effects=[Effect(Character<UNK>(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -7.297772721436672, "score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -0.32560062408447266, -1.1444091796875e-05, -0.00019848346710205078, -1.0609570381348021e-05, -0.0002449524763505906, -6.4373016357421875e-06, -1.8396445512771606, 0.0, -0.0034189224243164062, -0.000598907470703125, -0.5675334930419922, -1.33514404296875e-05, -0.0001087188720703125, -0.014501571655273438, -0.011435508728027344, -1.9073486328125e-06, -1.52587890625e-05, -0.6610289812088013, -0.10511074960231781, -0.002898312173783779, -0.11952590942382812, -0.008130073547363281, 0.0, -0.4174015522003174, 0.0, -0.0020122528076171875, -3.814697265625e-06, -0.0029948283918201923, -2.2172904209583066e-05, -3.933906555175781e-06, -0.04481315612792969, -0.3445720672607422, -0.0023610591888427734, -4.470348358154297e-05, -9.5367431640625e-06, -0.032215118408203125, -0.000308990478515625, -0.4365619122982025, 0.0, -0.00010669231414794922, -3.814697265625e-06, -1.9073486328125e-06, -0.0001087188720703125, -6.103515625e-05]}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -0.6660581356308555, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -0.6219713687896729, -0.00020110605692025274, -0.0005092620849609375, -5.14984130859375e-05, -0.0003750284668058157, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0004749298095703125, -9.918212890625e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -0.9915772667921985, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -0.9444124698638916, -2.1457672119140625e-06, -0.0023059844970703125, -0.000335693359375, -0.0008627598872408271, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.000545501708984375, -0.000736236572265625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 5, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "5", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -3.7933282228941323, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -3.748295545578003, -0.00039756298065185547, -0.000278472900390625, -0.0001430511474609375, -0.0008939312538132071, -1.9073468138230965e-06, -2.3841855067985307e-07, -0.000789642333984375, -0.000152587890625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 2, "hole3": [{"arg": "taunt", "value": {"_type": "Template79"}, "_type": "keyword"}, {"arg": "enrage", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Template36"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>", 328, 119, 310, "taunt", "<EOS>", 62, 119, 310, "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3),\n            SelfSelector())])\n", "score": -4.380095320506818, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -4.206421852111816, -0.017498016357421875, -1.3113011618770543e-06, -0.0028476715087890625, -8.821463779895566e-06, -4.768370445162873e-07, -6.50873698759824e-05, -1.9073468138230965e-06, -0.012434005737304688, -6.866455078125e-05, -3.814697265625e-06, -0.08779716491699219, 0.0, -0.0067234039306640625, -0.0005779266357421875, -2.47955322265625e-05, -0.006732940673828125, -7.05718994140625e-05, -0.000911712646484375, -0.0002689361572265625, -0.003914833068847656, -3.0517578125e-05, -0.0012683868408203125, -8.392333984375e-05, -0.0002307891845703125, -0.012183785438537598, -0.0002454519271850586, -0.0005970001220703125, -2.6702880859375e-05, -0.0003008842177223414, -7.152555099310121e-07, -1.1920928244535389e-07, -0.0003337860107421875, -0.0001087188720703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 6, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "6", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(6), SelfSelector())])\n", "score": -5.16256828078221, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -5.1159467697143555, -0.0013238191604614258, -0.000545501708984375, -0.00020599365234375, -0.0012497833231464028, -1.5497195136049413e-06, -2.3841855067985307e-07, -0.0007915496826171875, -0.0001277923583984375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 0, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "Give", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(0), SelfSelector())])\n", "score": -5.612737865611251, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -5.562403202056885, -0.0035496950149536133, -0.000362396240234375, -0.0001354217529296875, -0.0024941114243119955, -2.264974000354414e-06, -2.3841855067985307e-07, -0.001331329345703125, -8.392333984375e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -5.79763775311681, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -5.170434951782227, 0.0, -0.0010802745819091797, -2.288818359375e-05, -9.655952453613281e-06, 0.0, -0.0006581544876098633, 0.0, -0.0001506805419921875, -0.017347335815429688, -7.62939453125e-06, -1.9073486328125e-06, -4.768370445162873e-07, -5.590757427853532e-05, -1.1920922133867862e-06, -0.0030204057693481445, -3.814697265625e-06, -0.0002803802490234375, -6.866455078125e-05, -0.0034513473510742188, -3.4332275390625e-05, -0.0002498626708984375, -0.00012969970703125, -0.000209808349609375, -0.5882112979888916, -0.00020122526620980352, -0.000522613525390625, -5.14984130859375e-05, -0.00036787602584809065, -3.576278118089249e-07, -1.1920928244535389e-07, -0.000492095947265625, -9.918212890625e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 10, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "10", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(10), SelfSelector())])\n", "score": -5.832879130219652, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -5.784471035003662, -0.001535177230834961, -0.0009517669677734375, -0.0001964569091796875, -0.0023945446591824293, -2.861018856492592e-06, -2.3841855067985307e-07, -0.00084686279296875, -0.0001049041748046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 3, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "<UNK>Berserker"}, "choice_history": [121, 198, "<UNK>", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class <UNK>Berserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "score": -5.929240595961282, "score_history": [-2.288818359375e-05, -0.000110626220703125, -5.268537521362305, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -0.6219713687896729, -0.00020110605692025274, -0.0005092620849609375, -5.14984130859375e-05, -0.0003750284668058157, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0004749298095703125, -9.918212890625e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -6.2088345072702325, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -5.170434951782227, 0.0, -0.0010802745819091797, -2.288818359375e-05, -9.655952453613281e-06, 0.0, -0.0006581544876098633, 0.0, -0.0001506805419921875, -0.017347335815429688, -7.62939453125e-06, -1.9073486328125e-06, -4.768370445162873e-07, -5.590757427853532e-05, -1.1920922133867862e-06, -0.0030204057693481445, -3.814697265625e-06, -0.0002803802490234375, -6.866455078125e-05, -0.0034513473510742188, -3.4332275390625e-05, -0.0002498626708984375, -0.00012969970703125, -0.000209808349609375, -0.996222734451294, -2.1457672119140625e-06, -0.002429962158203125, -0.0003414154052734375, -0.0008619247819297016, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.0005645751953125, -0.0007190704345703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "<UNK>Berserker"}, "choice_history": [121, 198, "<UNK>", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class <UNK>Berserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -6.254759727122625, "score_history": [-2.288818359375e-05, -0.000110626220703125, -5.268537521362305, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -0.9444124698638916, -2.1457672119140625e-06, -0.0023059844970703125, -0.000335693359375, -0.0008627598872408271, -1.0728830375228426e-06, -1.1920928244535389e-07, -0.000545501708984375, -0.000736236572265625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 0, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "Cant", "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(0), SelfSelector())])\n", "score": -6.260294396623287, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -5.79541015625, -0.41802459955215454, -2.622604142743512e-06, -0.001140594482421875, -0.0003604888916015625, -0.0010951184667646885, -9.536738616588991e-07, -1.1920928244535389e-07, -0.0015697479248046875, -0.0003147125244140625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 0, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "attack", "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(0), SelfSelector())])\n", "score": -6.423374371678818, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -5.7578840255737305, -0.6183236837387085, -3.218649908376392e-06, -0.0008697509765625, -0.0003070831298828125, -0.0010063651716336608, -1.1920922133867862e-06, -2.3841855067985307e-07, -0.0023059844970703125, -0.00029754638671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 3, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, taunt=True)\n", "score": -8.643827037613846, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -8.598146438598633, 0.0, -0.010609626770019531]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Amani Berserker", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 2, "_type": "Template36"}], "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -8.667860941721614, "score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -4.206421852111816, -4.4374589920043945, -0.00018882608856074512, -0.005438804626464844, -5.364416665543104e-06, -4.768370445162873e-07, -3.576233211788349e-05, -2.3841855067985307e-07]}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -0.27679912757119496, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -0.040671348571777344, -1.9073486328125e-06, -0.03204345703125, -0.0064029693603515625, -0.0007675886154174805, -0.0005218982696533203, -4.9591064453125e-05, -0.0021190643310546875, -0.0023670196533203125, -0.000156402587890625, -0.00609588623046875, -0.00016105173563119024, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -3.2173337062376177, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -3.0064473152160645, -1.9073486328125e-06, -0.00019824504852294922, 0.0, -0.0006906986236572266, 0.0, -9.894371032714844e-06, 0.0, -5.7220458984375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -2.0265554212528514e-06, -1.1920928244535389e-07, 0.0, -2.3841830625315197e-06, -4.208087921142578e-05, -1.4305104514278355e-06, -1.71661376953125e-05, -9.5367431640625e-05, -0.0017070770263671875, -0.0014768193941563368, -0.007892608642578125, -0.00041282176971435547, -0.000194549560546875, -0.016786575317382812, -0.00045013427734375, -0.004402875900268555, -0.02451503276824951, -0.00011265277862548828, -0.0023321742191910744, -3.62396240234375e-05, -3.814697265625e-06, -0.0007457733154296875, -0.00035572052001953125, -0.015961408615112305, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004596710205078125, -4.00543212890625e-05, -0.0001068115234375, 0.0, -0.0004876852035522461, -0.00021016597747802734, -0.0001220703125, -0.013650894165039062, -2.86102294921875e-05, -1.33514404296875e-05, -0.040778160095214844, -1.9073486328125e-06, -0.032001495361328125, -0.00640869140625, -0.0007666349411010742, -0.0005218982696533203, -5.14984130859375e-05, -0.002117156982421875, -0.0023670196533203125, -0.0001583099365234375, -0.0061187744140625, -0.00015926359628792852, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 5, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -4.04905320403649, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -3.720677375793457, -1.9073486328125e-06, -0.14083003997802734, -3.814697265625e-06, -0.0002670286921784282, 0.0, -0.0005570650100708008, 0.0, -6.079673767089844e-06, 0.0, -5.7220458984375e-05, -4.57763671875e-05, -3.4332275390625e-05, -3.099435616604751e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.6689286894688848e-06, -4.780292510986328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0020046234130859375, -0.0015420378185808659, -0.008391380310058594, -0.000476837158203125, -0.0001888275146484375, -0.017000198364257812, -0.000438690185546875, -0.004371285438537598, -0.02447962760925293, -0.00011265277862548828, -0.0023518428206443787, -3.814697265625e-05, -3.814697265625e-06, -0.000759124755859375, -0.000354766845703125, -0.01640009880065918, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004520416259765625, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013641357421875, -2.86102294921875e-05, -1.33514404296875e-05, -0.040657997131347656, -1.9073486328125e-06, -0.032047271728515625, -0.00640106201171875, -0.0007675886154174805, -0.0005218982696533203, -4.9591064453125e-05, -0.0021190643310546875, -0.0023670196533203125, -0.0001583099365234375, -0.0061016082763671875, -0.00016105173563119024, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "LIST", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "score": -4.110314531363457, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -3.3656978607177734, -3.814697265625e-06, -0.0002593994140625, -1.33514404296875e-05, -0.0001697540283203125, 0.0, -0.002758026123046875, -0.0001504421088611707, -0.5346860885620117, -0.0001087188720703125, -0.021024225279688835, 0.0, 0.0, 0.0, -7.82012939453125e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "score": -4.455830856803715, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -3.3656978607177734, -3.814697265625e-06, -0.0002593994140625, -1.33514404296875e-05, -0.0001697540283203125, 0.0, -0.002758026123046875, -0.0001504421088611707, -0.8991556167602539, -1.3828277587890625e-05, -0.0020896191708743572, -1.9073486328125e-06, 0.0, 0.0, -0.000152587890625]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "LIST", "_type": "Attribute"}, "_type": "keyword"}, {"arg": "source_list", "value": {"id": "<UNK>", "_type": "Name"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 328, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 119, 310, "source_list", "<EOS>", 25, 186, "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST,\n            source_list=<UNK>)), PlayerSelector()))])\n", "score": -4.666608973416061, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -4.329519271850586, -5.14984130859375e-05, -4.38690185546875e-05, -0.007378578186035156, -2.86102294921875e-05, -0.0001125335693359375, -3.0517578125e-05, -0.000186920166015625, 0.0, -0.0020542144775390625, -0.00014483928680419922, -0.08694684505462646, -6.103515625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.007321357727050781, -9.5367431640625e-06, -0.012917518615722656, 0.0, -0.04755401611328125, -5.149736534804106e-05, -0.000335693359375, 0.0, 0.0, 0.0, -0.0001811981201171875]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaChange", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Change", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaChange(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -4.866192117692464, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -4.517210483551025, -0.002244710922241211, -0.06853383034467697, -3.0517578125e-05, -1.9073486328125e-06, -0.0007457733154296875, -0.00051116943359375, -0.04520618915557861, -9.191036224365234e-05, -1.5497207641601562e-05, -7.62939453125e-06, -0.000274658203125, -3.4332275390625e-05, -7.62939453125e-05, 0.0, -0.00041937828063964844, -0.0002694129943847656, -0.0001220703125, -0.018110275268554688, -3.0517578125e-05, -1.33514404296875e-05, -0.03667736053466797, -1.9073486328125e-06, -0.031159400939941406, -0.00620269775390625, -0.0007873773574829102, -0.0005468130111694336, -5.53131103515625e-05, -0.0020465850830078125, -0.002349853515625, -0.0001621246337890625, -0.006561279296875, -0.000133514404296875, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -5.53131103515625e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n", "score": -5.375649022196086, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -5.16278600692749, -1.9073486328125e-06, -0.0003170967102050781, 0.0, -0.0011159181594848633, 0.0, -7.987022399902344e-06, 0.0, -7.43865966796875e-05, -3.62396240234375e-05, -3.0517578125e-05, -2.74180911219446e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -3.635883331298828e-05, -1.1920922133867862e-06, -1.71661376953125e-05, -9.34600830078125e-05, -0.002079010009765625, -0.0015588559908792377, -0.007847785949707031, -0.00047206878662109375, -0.000179290771484375, -0.017063140869140625, -0.0004329681396484375, -0.004320502281188965, -0.02400505542755127, -0.00011646747589111328, -0.002363043837249279, -3.814697265625e-05, -3.814697265625e-06, -0.0007801055908203125, -0.0003566741943359375, -0.017199158668518066, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.000423431396484375, -4.1961669921875e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.01367950439453125, -2.86102294921875e-05, -1.33514404296875e-05, -0.040665626525878906, -1.9073486328125e-06, -0.03210258483886719, -0.0064220428466796875, -0.0007685422897338867, -0.0005218982696533203, -4.9591064453125e-05, -0.0021190643310546875, -0.002368927001953125, -0.000156402587890625, -0.006099700927734375, -0.00016105173563119024, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"hole2": [{"_type": "Template53"}], "hole0": "IsType", "hole1": [{"_type": "Template53"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 99, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            ), MINION_TYPE.MECH])), PlayerSelector()))])\n", "score": -5.639322802550652, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -0.040671348571777344, -1.9073486328125e-06, -0.03204345703125, -0.0064029693603515625, -0.0007675886154174805, -0.0005218982696533203, -4.9591064453125e-05, -0.0021190643310546875, -0.0023670196533203125, -0.000156402587890625, -5.367581367492676, -0.001220107078552246, -9.655952453613281e-06, 0.0, 0.0, -4.57763671875e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": "'Fireball", "_type": "Template46"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 93, 255, "'Fireball", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(Give('Fireball()), PlayerSelector()))])\n", "score": -6.014871966132688, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -4.768517971038818, -1.71661376953125e-05, -1.9073486328125e-06, -0.9206914901733398, -0.00011444091796875, -0.05984918400645256, -0.1118343323469162, -0.00028336039395071566, -1.9073486328125e-06, 0.0, 0.0, -0.0001163482666015625]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "Summon", "hole1": [{"hole0": "'Fireball", "_type": "Template46"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Summon", "<EOS>", 320, 93, 255, "'Fireball", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(Summon('Fireball()), PlayerSelector()))])\n", "score": -6.102767455808845, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -5.364796161651611, -1.537799835205078e-05, -2.288818359375e-05, -8.96453857421875e-05, -5.340576171875e-05, -0.02113610878586769, -0.5622918605804443, -0.0007636540685780346, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.0001392364501953125]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(IsSpell()), ActionTag\n            (Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -6.187844820679658, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -4.20347785949707, -9.1552734375e-05, -0.4181959629058838, -0.27205923199653625, -0.008661270141601562, -1.9073486328125e-06, -0.00141143798828125, -0.0072307586669921875, -0.6598215103149414, -9.5367431640625e-06, -2.86102294921875e-05, -0.22328853607177734, -0.00102996826171875, -0.14217956364154816, -0.0001678466796875, -0.1262366771697998, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -0.019983291625976562]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\n", "score": -6.684722043700077, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -4.768517971038818, -1.71661376953125e-05, -1.9073486328125e-06, -1.6794538497924805, -0.000568389892578125, -0.045133285224437714, -1.919269561767578e-05, -0.01317143440246582, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.024389266967773438]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"elts": [{"hole2": [{"s": "<UNK>", "_type": "Str"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "hole0": "ManaCost", "hole1": {"id": "Attribute", "_type": "Name"}, "_type": "Template35"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsSpell", "_type": "Template45_expr_seq"}], "_type": "List"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 84, 239, "Mana", "Cost", "<EOS>", 25, 186, "Attribute", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 92, 253, "Is", "Spell", "<EOS>", 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[ManaCost(Attribute(\n            '<UNK>', HeroSelector(EnemyPlayer()))), IsSpell()])),\n            PlayerSelector()))])\n", "score": -8.406036297403972, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -0.040671348571777344, -1.9073486328125e-06, -3.5828819274902344, -5.53131103515625e-05, -0.016594886779785156, -0.24792766571044922, -0.0003337860107421875, -1.243615746498108, -0.2758917212486267, -4.208087921142578e-05, -0.0003337860107421875, -3.814697265625e-06, -0.014787793159484863, -0.0001468658447265625, -0.021406173706054688, -0.0007801055908203125, -5.7220458984375e-05, -0.574849545955658, -2.47955322265625e-05, -0.3846120834350586, -0.0013256072998046875, -1.4068201780319214, -0.0004148445441387594, -1.77621805050876e-05, -0.031739234924316406, -0.0006713863112963736, 0.0, -0.2456340789794922, -0.055245399475097656, -0.0685720294713974, -0.004304899834096432, -2.6702880859375e-05, -1.33514404296875e-05, -0.0006160736083984375, -0.00018095965788234025, -3.814697265625e-06, 0.0, 0.0, -6.67572021484375e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Archmage Antonidas", "hole1": 7, "hole3": "LEGENDARY", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 7, "hole0": "Minion", "hole1": 5, "hole3": [{"hole2": [{"hole0": "AddCard", "hole1": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"elts": [{"hole2": [{"s": "<UNK>", "_type": "Str"}, {"hole0": "SpellSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "hole0": "ManaCost", "hole1": {"id": "Attribute", "_type": "Name"}, "_type": "Template35"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsSpell", "_type": "Template45_expr_seq"}], "_type": "List"}, "_type": "keyword"}], "_type": "Call"}], "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "SpellCast", "hole1": [{"hole0": "ManaCost", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 84, 239, "Mana", "Cost", "<EOS>", 25, 186, "Attribute", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 82, 234, "Spell", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 92, 253, "Is", "Spell", "<EOS>", 320, 105, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[ManaCost(Attribute(\n            '<UNK>', SpellSelector(EnemyPlayer()))), IsSpell()])),\n            PlayerSelector()))])\n", "score": -8.791797962823495, "score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -0.040671348571777344, -1.9073486328125e-06, -3.5828819274902344, -5.53131103515625e-05, -0.016594886779785156, -0.24792766571044922, -0.0003337860107421875, -1.243615746498108, -0.2758917212486267, -4.208087921142578e-05, -0.0003337860107421875, -3.814697265625e-06, -0.014787793159484863, -0.0001468658447265625, -0.021406173706054688, -0.0007801055908203125, -5.7220458984375e-05, -0.574849545955658, -2.47955322265625e-05, -0.3846120834350586, -0.0013256072998046875, -0.9140719175338745, -0.9115610122680664, -1.4901134818501305e-05, -0.03510081768035889, -0.00048303583753295243, 0.0, -0.21046829223632812, -0.05751991271972656, -0.06577586382627487, -0.004168321378529072, -2.47955322265625e-05, -1.52587890625e-05, -0.000621795654296875, -0.00019073481962550431, -3.814697265625e-06, 0.0, 0.0, -6.866455078125e-05]}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "score": -1.860370159052522, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.130326747894287, -1.1920928244535389e-07, -0.000308990478515625, -0.232513427734375, -0.041235923767089844, -0.044785499572753906, -0.0881662368774414, -0.0004367828369140625, -3.814697265625e-06, -0.0004119873046875, -0.09932541847229004, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -1.9461388100369277, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.6951098442077637, 0.0, -0.0003986358642578125, -0.022009849548339844, -0.0009212493896484375, -0.004332020878791809, -0.0005121191497892141]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "die", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 110], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "score": -2.6865352391230317, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -2.132236957550049, -4.172325134277344e-06, -6.866455078125e-05, -0.33137035369873047]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_max_health()), self)\n", "score": -2.89276449093245, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.95573091506958, 0.0, -0.007114410400390625, -0.023721694946289062, -0.000728607177734375, -0.0015106201171875, -7.62939453125e-06, -0.00324249267578125, -0.4242718815803528, -0.004088741727173328, -3.814697265625e-06, -0.11913394927978516, -0.0014095306396484375, -0.026373863220214844, -0.10153555870056152, 0.0, -0.0010356903076171875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "players", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "players", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.players(Buff(<UNK>()))\n", "score": -3.608816580226403, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -3.1773953437805176, 0.0, -0.0005283355712890625, -0.2012805938720703, -0.0019550323486328125, -0.003924565389752388, -0.0008776182658039033]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 110], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self)\n", "score": -3.6342936753260275, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.130326747894287, -1.1920928244535389e-07, -0.000308990478515625, -2.2808027267456055]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "increase_health", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "increase_health", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1 - self.target.calculate_attack())\n", "score": -3.895467281244919, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -3.0413260459899902, 0.0, -8.58306884765625e-05, -0.35504913330078125, -0.010141372680664062, -0.019779205322265625, -0.12820911407470703, -0.0005893707275390625, -3.814697265625e-06, -0.000335693359375, -0.11709260940551758, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -4.029047368659803, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.95573091506958, 0.0, -0.007114410400390625, -0.023721694946289062, -0.000728607177734375, -0.0015106201171875, -7.62939453125e-06, -0.00324249267578125, -1.1566184759140015, -5.0901166105177253e-05, -5.7220458984375e-06, -0.115020751953125, -0.0019207000732421875, -0.0030307769775390625, -0.5358949899673462, -1.9073486328125e-06, -0.0015916824340820312]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(self.target.\n            calculate_max_health()), self)\n", "score": -4.1562888649257275, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -3.337606906890869, 0.0, -0.004730224609375, -0.022167205810546875, -0.0006504058837890625, -0.0007305145263671875, -7.62939453125e-06, -0.004757881164550781, -0.335813045501709, -0.0049767522141337395, -3.814697265625e-06, -0.11163616180419922, -0.00133514404296875, -0.025608062744140625, -0.08254599571228027, -1.9073486328125e-06, -0.00086212158203125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "<UNK>", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.<UNK>())\n", "score": -4.295184373757358, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.130326747894287, -1.1920928244535389e-07, -0.000308990478515625, -0.232513427734375, -0.041235923767089844, -0.044785499572753906, -0.0881662368774414, -0.0004367828369140625, -3.814697265625e-06, -0.0004119873046875, -2.5341379642486572, -1.7881377516459906e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "die", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "die", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Buff(<UNK>()))\n", "score": -4.598239931530543, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -2.132236957550049, -4.172325134277344e-06, -6.866455078125e-05, -2.2358179092407227, -0.003299713134765625, -0.003465209621936083, -0.0004922141088172793]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "score": -4.661007642649324, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -2.8167507648468018, 0.0, -0.000102996826171875, -0.0001888275146484375, -0.000110626220703125, -1.9073486328125e-06, -5.53131103515625e-05, -1.9073486328125e-06, -0.10811233520507812, -6.29425048828125e-05, 0.0, -0.00015139578317757696, 0.0, -2.288818359375e-05, -0.0004596710205078125, -9.5367431640625e-06, -1.1563301086425781e-05, 0.0, -0.002292633056640625, -3.0517578125e-05, -0.000640869140625, -1.1444091796875e-05, -9.918212890625e-05, -1.1345092058181763, -1.1920928244535389e-07, -0.0003204345703125, -0.21425342559814453, -0.043494224548339844, -0.0462493896484375, -0.0887603759765625, -0.000438690185546875, -3.814697265625e-06, -0.0004100799560546875, -0.1008603572845459, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "PRIEST", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "PRIEST", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.PRIEST(1 - self.target.calculate_attack())\n", "score": -4.686400055279357, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -3.8707995414733887, -5.483576387632638e-05, -0.0001506805419921875, -0.19018268585205078, -0.044498443603515625, -0.09242820739746094, -0.15200519561767578, -0.0003948211669921875, -3.814697265625e-06, -0.0004177093505859375, -0.1126089096069336, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.736976316625942, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -2.8167507648468018, 0.0, -0.000102996826171875, -0.0001888275146484375, -0.000110626220703125, -1.9073486328125e-06, -5.53131103515625e-05, -1.9073486328125e-06, -0.10811233520507812, -6.29425048828125e-05, 0.0, -0.00015139578317757696, 0.0, -2.288818359375e-05, -0.0004596710205078125, -9.5367431640625e-06, -1.1563301086425781e-05, 0.0, -0.002292633056640625, -3.0517578125e-05, -0.000640869140625, -1.1444091796875e-05, -9.918212890625e-05, -1.677359700202942, 0.0, -0.000415802001953125, -0.02183055877685547, -0.0009670257568359375, -0.004193003289401531, -0.0005028206505812705]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"_type": "Template51"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"op": {"_type": "Sub"}, "left": {"_type": "Template60"}, "right": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "BinOp"}], "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template44"}], "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "score": -5.0614773032043985, "score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -3.3241147994995117, -0.0008869171142578125, -0.0003204345703125, -0.00505673885345459, -5.960462772236497e-07, -8.535385131835938e-05, 0.0, -0.00014877297508064657, 0.0, -1.52587890625e-05, -0.0003948211669921875, -1.1444091796875e-05, -1.537799835205078e-05, 0.0, -0.002178192138671875, -2.86102294921875e-05, -0.0009136199951171875, -1.1444091796875e-05, -0.0001201629638671875, -1.059341549873352, -1.1920928244535389e-07, -0.000446319580078125, -0.20623779296875, -0.045006752014160156, -0.036355018615722656, -0.09746170043945312, -0.0005550384521484375, -3.814697265625e-06, -0.000415802001953125, -0.10000503063201904, -1.1920928244535389e-07]}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n", "score": -1.6433573209469543, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -0.20688629150390625, -0.15993976593017578, -2.09808349609375e-05, -0.0016307830810546875, -0.012763023376464844, -0.0006580352783203125, -0.007480621337890625, 0.0, -0.0001163482666015625, -0.12172549962997437, -0.0011132246581837535, -1.9073486328125e-05, -0.0139617919921875, -0.003803253173828125, -0.012816429138183594, -0.19878840446472168, -1.9073486328125e-06, -0.005158424377441406]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n", "score": -2.238332764336974, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -0.19266128540039062, -0.0001239776611328125, -0.20344829559326172, -0.2908501625061035, -2.86102294921875e-05, -0.001190185546875, -0.021409034729003906, -0.000598907470703125, -0.0069904327392578125, 0.0, -0.0001087188720703125, -0.12129990756511688, -0.0012330166064202785, -1.71661376953125e-05, -0.012887001037597656, -0.00382232666015625, -0.014743804931640625, -0.18518054485321045, -1.9073486328125e-06, -0.004412651062011719]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole0": {"_type": "Template52"}, "hole1": "bounce", "_type": "Template43"}, "_type": "Expr"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 130, 168, 37, 249, 41, "bounce", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "score": -3.6127621490491038, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -2.228513717651367, -2.47955322265625e-05, -0.10930824279785156, -0.0018939971923828125, -0.00377655029296875, -0.09192001819610596, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -3.9063521301395596, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -0.20688629150390625, -0.15993976593017578, -2.09808349609375e-05, -0.0016307830810546875, -0.012763023376464844, -0.0006580352783203125, -0.007480621337890625, 0.0, -0.0001163482666015625, -2.3994193077087402, -0.006031783297657967, -7.62939453125e-06, -0.017940521240234375, -0.021352767944335938, -0.042319297790527344, -0.12735676765441895, -1.9073486328125e-06, -0.0059528350830078125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "score": -3.970084711236261, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -0.20688629150390625, -0.15993976593017578, -2.09808349609375e-05, -0.0016307830810546875, -0.012763023376464844, -0.0006580352783203125, -0.007480621337890625, 0.0, -0.0001163482666015625, -0.12172549962997437, -0.0011132246581837535, -1.9073486328125e-05, -0.0139617919921875, -0.003803253173828125, -0.012816429138183594, -2.5293047428131104, -4.38690185546875e-05, -0.0013275146484375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.00020578093654, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -0.19266128540039062, -0.0001239776611328125, -0.20344829559326172, -1.892458438873291, 0.0, -0.0002193450927734375, -0.015475273132324219, -0.001678466796875, -0.3883257806301117, -0.12849009037017822]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.add_buff(Buff(<UNK>()))\n", "score": -4.060148026237577, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -1.6919536590576172, 0.0, -0.002056121826171875, -0.7437855005264282, -2.2649765014648438e-06, -0.4120284616947174, -1.9073486328125e-06, -0.000102996826171875, -0.06830501556396484, -0.05185508728027344, -0.18491774797439575, -0.008665800094604492]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"value": {"_type": "Template52"}, "attr": "deathrattle", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "deathrattle", "<EOS>", "append", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.deathrattle.append(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n", "score": -4.297462213055034, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -1.6919536590576172, 0.0, -0.002056121826171875, -0.7779299020767212, -5.7220440794480965e-06, -0.08966570347547531, -1.9073486328125e-06, -4.38690185546875e-05, -0.3598814010620117, -9.72747802734375e-05, -0.00031280517578125, 0.0, -0.008876919746398926, -5.14984130859375e-05, -0.004840850830078125, -0.028738975524902344, -2.47955322265625e-05, -0.008639335632324219, -1.9073486328125e-06, -0.17934608459472656, -3.3974622056121007e-05, -0.0059909820556640625, -0.0004329681396484375, 0.0, -0.07010841369628906, -0.06327855587005615, 0.0, -0.0008029937744140625, -1.9073486328125e-06, -0.10738277435302734, -0.00048744663945399225, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.add_buff(Buff(<UNK>()))\n", "score": -4.42604432590133, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -0.19266128540039062, -0.0001239776611328125, -1.7073917388916016, 0.0, -0.0020122528076171875, -0.7018475532531738, -2.2649765014648438e-06, -0.37532803416252136, -1.9073486328125e-06, -0.0001392364501953125, -0.0514373779296875, -0.046237945556640625, -0.16321773827075958, -0.008318185806274414]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_spell_damage(self.target.\n            calculate_attack()), self)\n", "score": -4.5181407337991, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -0.19266128540039062, -0.0001239776611328125, -0.20344829559326172, -0.2908501625061035, -2.86102294921875e-05, -0.001190185546875, -0.021409034729003906, -0.000598907470703125, -0.0069904327392578125, 0.0, -0.0001087188720703125, -2.3997080326080322, -0.006546382792294025, -7.62939453125e-06, -0.016241073608398438, -0.022144317626953125, -0.04508399963378906, -0.12843537330627441, -1.9073486328125e-06, -0.005237579345703125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "temp_attack", "_type": "Name"}], "value": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"value": {"_type": "Template52"}, "attr": "health", "_type": "Attribute"}, "_type": "Assign"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "temp_attack", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>", 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>", 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 17, 156, 41, "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.calculate_attack()\n        <UNK> = self.target.health\n", "score": -4.608436157370285, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -1.6481456756591797, -0.000598907470703125, -0.10209083557128906, -1.33514404296875e-05, -1.52587890625e-05, -0.0016536712646484375, -7.2479248046875e-05, -0.5209476947784424, -1.52587890625e-05, -0.0032167434692382812, -0.0011768341064453125, -0.02388763427734375, -0.0846933126449585, -3.814697265625e-06, -0.10578155517578125, -9.5367431640625e-06, -1.9073486328125e-06, -0.13123798370361328, -2.47955322265625e-05, -0.0006182193756103516, -1.1920928244535389e-07, -0.5027351379394531, -0.000865936279296875, -0.045833587646484375, -0.018370861187577248, -3.933906555175781e-06, -0.5349388122558594, -1.1444091796875e-05, -1.9073486328125e-06, -0.013528823852539062, -1.1444091796875e-05, -0.0002554655075073242, 0.0, -0.037009239196777344, -3.814697265625e-06, -0.0002727508544921875, -0.17610323429107666, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "<UNK>", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score": -4.693695689926237, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -0.20688629150390625, -2.853217124938965, 0.0, -6.29425048828125e-05, -0.012178421020507812, -0.0024623870849609375, -0.4677904546260834, -0.254624605178833]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"func": {"id": "Summon", "_type": "Name"}, "args": [{"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}], "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"value": {"_type": "Template52"}, "attr": "deathrattle", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 41, "deathrattle", "<EOS>", "append", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 41, "card", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.deathrattle.append(Deathrattle(Summon(self.target.card),\n            PlayerSelector()))\n", "score": -4.90980897419513, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -0.1527566909790039, -5.91278076171875e-05, -0.19266128540039062, -0.0001239776611328125, -1.7073917388916016, 0.0, -0.0020122528076171875, -0.8269944190979004, -5.602834789897315e-06, -0.10536961257457733, -1.9073486328125e-06, -5.91278076171875e-05, -0.4013032913208008, -9.5367431640625e-05, -0.000286102294921875, 0.0, -0.008847355842590332, -5.7220458984375e-05, -0.0051059722900390625, -0.029544830322265625, -2.6702880859375e-05, -0.007966041564941406, -1.9073486328125e-06, -0.18469512462615967, -3.3974622056121007e-05, -0.005680084228515625, -0.0004787445068359375, 0.0, -0.07504463195800781, -0.06517636775970459, 0.0, -0.00075531005859375, -1.9073486328125e-06, -0.1123189926147461, -0.0004442929057404399, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "temp_attack", "_type": "Name"}], "value": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"value": {"_type": "Template52"}, "attr": "health", "_type": "Attribute"}, "_type": "Assign"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "temp_attack", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>", 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>", 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 17, 156, 41, "health", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.calculate_attack()\n        <UNK> = self.target.health\n", "score": -4.991374427078412, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.8933229446411133, -5.91278076171875e-05, -0.000213623046875, -0.0157320499420166, -4.398822784423828e-05, -0.0014710426330566406, 0.0, -9.691685409052297e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -4.9591064453125e-05, -5.9604644775390625e-06, -2.0265579223632812e-06, -1.9795055389404297, -0.0004253387451171875, -0.08584785461425781, -2.09808349609375e-05, -1.9073486328125e-05, -0.0018157958984375, -7.82012939453125e-05, -0.5701733827590942, -1.52587890625e-05, -0.0032033920288085938, -0.001262664794921875, -0.0175018310546875, -0.08306252956390381, -3.814697265625e-06, -0.11309242248535156, -9.5367431640625e-06, -1.9073486328125e-06, -0.15550613403320312, -2.09808349609375e-05, -0.001126408576965332, -1.1920928244535389e-07, -0.1526937484741211, -0.000995635986328125, -0.016603469848632812, -0.025171993300318718, -5.841255187988281e-06, -0.49269866943359375, -1.33514404296875e-05, -1.9073486328125e-06, -0.011091232299804688, -1.1444091796875e-05, -0.00025475025177001953, 0.0, -0.04360389709472656, -3.814697265625e-06, -0.00028228759765625, -0.2107400894165039, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "target_func", "value": {"_type": "Template39"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"targets": [{"id": "temp_attack", "_type": "Name"}], "value": {"hole0": {"_type": "Template52"}, "hole1": "calculate_attack", "_type": "Template43"}, "_type": "Assign"}, {"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"value": {"_type": "Template52"}, "attr": "health", "_type": "Attribute"}, "_type": "Assign"}, {"test": {"left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"value": "Null", "_type": "NameConstant"}], "hole0": {"_type": "Template52"}, "hole1": "die", "_type": "Template44"}], "orelse": [{"hole2": [{"id": "<UNK>", "_type": "Name"}], "hole0": {"_type": "Template52"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"id": "temp_attack", "_type": "Name"}], "hole0": {"_type": "Template52"}, "hole1": "set_health_to", "_type": "Template44"}], "_type": "If"}], "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 126, 155, 320, 73, 186, "temp_attack", "<EOS>", 37, 249, 41, "calculate_attack", "<EOS>", 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 17, 156, 41, "health", "<EOS>", 133, 174, 21, 166, 25, 186, "temp_attack", "<EOS>", 317, 8, 320, 113, 332, 145, 250, 41, "die", "<EOS>", 320, 74, 187, "Null", "<EOS>", 333, 145, 250, 41, "<UNK>", "<EOS>", 320, 73, 186, "<UNK>", "<EOS>", 145, 250, 41, "set_health_to", "<EOS>", 320, 73, 186, "temp_attack", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(temp_attack)\n", "score": -6.598731571251825, "score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -1.6481456756591797, -0.000598907470703125, -0.10209083557128906, -1.33514404296875e-05, -1.52587890625e-05, -0.0016536712646484375, -7.2479248046875e-05, -0.5209476947784424, -1.52587890625e-05, -0.0032167434692382812, -0.0011768341064453125, -0.02388763427734375, -0.0846933126449585, -3.814697265625e-06, -0.10578155517578125, -9.5367431640625e-06, -1.9073486328125e-06, -0.13123798370361328, -2.47955322265625e-05, -0.0006182193756103516, -1.1920928244535389e-07, -0.9458408355712891, -2.09808349609375e-05, -0.0003871917724609375, -0.04443120211362839, -1.1920928244535389e-07, -0.004924774169921875, -0.050601959228515625, -0.0008716583251953125, -0.0009899139404296875, -0.08816337585449219, 0.0, -0.5434616804122925, -1.9073486328125e-06, -9.1552734375e-05, -0.10824775695800781, 0.0, -0.013904571533203125, -0.000823974609375, -0.1799030303955078, -9.5367431640625e-06, -0.003448486328125, -0.011502629145979881, -1.9073486328125e-06, -5.7220458984375e-06, -0.040953636169433594, -6.103515625e-05, -0.0047664642333984375, -0.0001239776611328125, -7.62939453125e-05, -0.000179290771484375, -2.86102294921875e-05, -0.0022983551025390625, -0.05116093158721924, -1.71661376953125e-05, -1.33514404296875e-05, -0.27046680450439453, -4.76837158203125e-05, -0.005210399627685547, -1.71661376953125e-05, -0.00691986083984375, -0.002857208251953125, -0.0076389312744140625, -0.08080768585205078, -0.000240325927734375, -0.002605438232421875, -0.007037162780761719, -1.9073486328125e-06, -0.8390469551086426, -3.0517578125e-05]}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Cabal Shadow Priest"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.193598440321466, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.6151695251464844, -0.0001220703125, -4.5299530029296875e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0022430419921875, -0.0131760835647583, 0.0, -5.686282383976504e-05, -2.1457672119140625e-06, -0.07874977588653564, -7.62939453125e-06, -0.033165931701660156, 0.0, -0.9468784332275391, -6.866455078125e-05, -0.00038909912109375, -0.18834877014160156, -0.07289505004882812, -0.008702278137207031, -0.059309959411621094, -0.0003910064697265625, -0.027599334716796875, -7.82012939453125e-05, -0.002437591552734375, -0.02373504638671875, -0.0003261566162109375, -4.184244608040899e-05, -0.000156402587890625, -5.3882598876953125e-05, -0.00013208389282226562, -4.1961669921875e-05, -0.30988454818725586, -0.000507354736328125, -0.0048923492431640625, -7.43865966796875e-05, -4.00543212890625e-05, -5.7220458984375e-06, -0.00012814998626708984, -0.15627014636993408, -3.814697265625e-06, -0.045859210193157196, -0.000499725341796875, -7.05718994140625e-05, -0.0220489501953125, -0.000385284423828125, -0.0012246370315551758, -3.063678741455078e-05, -2.0265579223632812e-06, -0.34700965881347656, -0.020273208618164062, -0.00018310546875, -1.52587890625e-05, -0.0003396271204110235, -0.006108760833740234, 0.0, -0.000308990478515625, -0.01819610595703125, -0.016800880432128906, -9.799003601074219e-05, -1.9073486328125e-06, -0.00093841552734375, -9.5367431640625e-06, -0.010930061340332031, -8.392333984375e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-05, -5.7220458984375e-06, -0.008047103881835938, -3.814697265625e-06, -0.00921630859375, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.020702600479125977, -0.0006579160690307617, -1.1920922133867862e-06, -1.9073486328125e-05, -2.86102294921875e-05, -7.62939453125e-06, -0.0010547637939453125, -3.814697265625e-06, -0.0012760162353515625, 0.0, -0.009235382080078125, -1.33514404296875e-05, -0.0005397796630859375, -1.33514404296875e-05, 0.0, -0.008872032165527344, 0.0, -0.06412601470947266, -9.918212890625e-05, 0.0, -4.649161837733118e-06, 0.0, -0.000324249267578125, -3.24249267578125e-05, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.008714990690350533, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionDied", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 117, 227, "Minion", "Died", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -4.651038108180728, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.967707633972168, -3.4332275390625e-05, -1.52587890625e-05, -0.000225067138671875, -4.76837158203125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.00012969970703125, -0.00033098942367359996, -4.38690185546875e-05, -0.005279640667140484, -0.1879711151123047, -0.9065523147583008, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001068115234375, -0.0001430511474609375, -0.08259034156799316, -3.0517578125e-05, -0.007575035095214844, -3.4332275390625e-05, -0.0019960403442382812, -0.561722993850708, -4.1961669921875e-05, -0.07978248596191406, -0.2062692642211914, -0.0037784576416015625, -0.016648530960083008, -0.22658348083496094, -9.894371032714844e-06, -5.7220458984375e-06, -0.015920639038085938, -0.0776510238647461, -2.5033950805664062e-05, -0.0004482269287109375, -7.62939453125e-06, -0.00597381591796875, -9.918212890625e-05, -0.269832968711853, -1.9073486328125e-06, -0.0004787445068359375, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.00022137165069580078, 0.0, -0.0001304087636526674, 0.0, -0.000125885009765625, -0.0001964569091796875, -2.288818359375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0009416710818186402, -3.0517578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionDied", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadow"}, "choice_history": [121, 198, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 75, 190, "6", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 117, 227, "Minion", "Died", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.135225036720158, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -1.2410296201705933, -2.622458850964904e-06, -2.622604142743512e-06, -9.894371032714844e-06, -0.0005474090576171875, -0.6684722900390625, -3.4332275390625e-05, -1.33514404296875e-05, -0.0003261566162109375, -4.1961669921875e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.0001277923583984375, -0.0003670972364488989, -5.14984130859375e-05, -0.3800087869167328, -0.0001010894775390625, -0.9558477401733398, -6.866455078125e-05, -0.0015713656321167946, -1.3947414117865264e-05, -7.2479248046875e-05, -3.4332275390625e-05, -0.0004444122314453125, 0.0, -8.20159912109375e-05, -0.00130462646484375, -0.258891224861145, -7.62939453125e-06, -0.000308990478515625, -2.09808349609375e-05, -0.000225067138671875, -0.6197272539138794, -4.00543212890625e-05, -0.031375885009765625, -0.15475082397460938, -0.0023746490478515625, -0.013948798179626465, -0.3719902038574219, -8.463859558105469e-06, -7.62939453125e-06, -0.009382247924804688, -0.05914497375488281, -3.4809112548828125e-05, -0.0033445358276367188, -5.7220458984375e-06, -0.03352642059326172, -0.0001049041748046875, -0.06589365005493164, -1.9073486328125e-06, -0.0008258819580078125, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.0004596710205078125, -0.0002461671829223633, 0.0, -0.00014602331793867052, 0.0, -0.00011444091796875, -0.00022125244140625, -2.288818359375e-05, -3.814697720372351e-06, -3.814697265625e-06, -0.0008100596605800092, -3.24249267578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionDied", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 75, 190, "6", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 117, 227, "Minion", "Died", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.139782141630803, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.967707633972168, -3.4332275390625e-05, -1.52587890625e-05, -0.000225067138671875, -4.76837158203125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.00012969970703125, -0.00033098942367359996, -4.38690185546875e-05, -0.005279640667140484, -0.1879711151123047, -1.291086196899414, -8.0108642578125e-05, -0.0014469742309302092, -1.4543453289661556e-05, -7.2479248046875e-05, -3.62396240234375e-05, -0.0004100799560546875, 0.0, -7.2479248046875e-05, -0.0011081695556640625, -0.25059616565704346, -7.62939453125e-06, -0.000274658203125, -2.09808349609375e-05, -0.000217437744140625, -0.6786020994186401, -5.91278076171875e-05, -0.0296173095703125, -0.14792633056640625, -0.0024595260620117188, -0.014094829559326172, -0.3640308380126953, -8.58306884765625e-06, -5.7220458984375e-06, -0.009012222290039062, -0.057860374450683594, -3.4809112548828125e-05, -0.003162384033203125, -3.814697265625e-06, -0.03319835662841797, -0.0001049041748046875, -0.06657648086547852, -1.9073486328125e-06, -0.000823974609375, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.000453948974609375, -0.0002480745315551758, 0.0, -0.0001453081495128572, 0.0, -0.0001125335693359375, -0.000225067138671875, -2.288818359375e-05, -3.814697720372351e-06, -3.814697265625e-06, -0.0008008878794498742, -3.24249267578125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Cabal Shadow Priest"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowMinionCard"}, "choice_history": [121, 198, "Cabal", "Shadow", "Minion", "Card", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowMinionCard(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.219764457763404, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -1.8461560010910034, -0.027020573616027832, -1.4185901818564162e-05, -0.0026054796762764454, -3.933906555175781e-06, -1.33514404296875e-05, -0.00133514404296875, -0.6813392639160156, -7.82012939453125e-05, -5.364418029785156e-06, -1.33514404296875e-05, -3.814697265625e-05, -0.00627899169921875, -0.006351112853735685, 0.0, -4.5776359911542386e-05, -2.1457672119140625e-06, -0.04079735279083252, -9.5367431640625e-06, -0.015530586242675781, 0.0, -0.9105615615844727, -8.20159912109375e-05, -0.00032806396484375, -0.1387042999267578, -0.07907772064208984, -0.009783744812011719, -0.0528717041015625, -0.0003604888916015625, -0.035584449768066406, -7.82012939453125e-05, -0.0026836395263671875, -0.024188995361328125, -0.0002956390380859375, -4.053115117130801e-05, -0.00012969970703125, -5.0067901611328125e-05, -0.00013780593872070312, -4.1961669921875e-05, -0.2958488464355469, -0.00054931640625, -0.00444793701171875, -7.62939453125e-05, -4.00543212890625e-05, -5.7220458984375e-06, -0.00012814998626708984, -0.15274441242218018, -3.814697265625e-06, -0.04926085099577904, -0.0005340576171875, -7.43865966796875e-05, -0.022487640380859375, -0.0003757476806640625, -0.0012227296829223633, -3.063678741455078e-05, -2.0265579223632812e-06, -0.3468942642211914, -0.01951313018798828, -0.000171661376953125, -1.52587890625e-05, -0.00033342826645821333, -0.005887508392333984, 0.0, -0.000316619873046875, -0.017271041870117188, -0.01660442352294922, -9.799003601074219e-05, -1.9073486328125e-06, -0.0009603500366210938, -9.5367431640625e-06, -0.011357307434082031, -8.392333984375e-05, 0.0, -1.1444091796875e-05, -4.00543212890625e-05, -5.7220458984375e-06, -0.008072853088378906, -3.814697265625e-06, -0.009244918823242188, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.020653963088989258, -0.0006464719772338867, -1.1920922133867862e-06, -1.9073486328125e-05, -2.86102294921875e-05, -7.62939453125e-06, -0.001064300537109375, -3.814697265625e-06, -0.0012798309326171875, 0.0, -0.009253501892089844, -1.33514404296875e-05, -0.0005397796630859375, -1.33514404296875e-05, 0.0, -0.008872032165527344, 0.0, -0.06410598754882812, -9.918212890625e-05, 0.0, -4.649161837733118e-06, 0.0, -0.000324249267578125, -3.24249267578125e-05, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.008714045397937298, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Cabal Shadow"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadow"}, "choice_history": [121, 198, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.239979129696167, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -1.2410296201705933, -2.622458850964904e-06, -2.622604142743512e-06, -9.894371032714844e-06, -0.0005474090576171875, -1.002659797668457, -0.0001087188720703125, -4.291534423828125e-06, -1.1444091796875e-05, -0.0002824068069458008, -0.4685640335083008, -0.0018889968050643802, -3.814697265625e-06, -0.09783649444580078, -9.5367431640625e-06, -0.10398197174072266, 0.0, -0.5711650848388672, -5.91278076171875e-05, -0.000316619873046875, -0.10959815979003906, -0.06051063537597656, -0.00974273681640625, -0.1154022216796875, -0.0004177093505859375, -0.033341407775878906, -0.0001068115234375, -0.001911163330078125, -0.021762847900390625, -0.0002880096435546875, -4.4703461753670126e-05, -0.00018310546875, -5.1856040954589844e-05, -0.00013780593872070312, -3.62396240234375e-05, -0.4123164415359497, -0.0003795623779296875, -0.004856109619140625, -7.62939453125e-05, -4.00543212890625e-05, -5.7220458984375e-06, -0.00012445449829101562, -0.07521939277648926, -1.9073486328125e-06, -0.04611324146389961, -0.000469207763671875, -6.866455078125e-05, -0.02234363555908203, -0.0003757476806640625, -0.0011998414993286133, -3.254413604736328e-05, -2.0265579223632812e-06, -0.3715848922729492, -0.019594192504882812, -0.000179290771484375, -1.52587890625e-05, -0.0003414152888581157, -0.006179332733154297, 0.0, -0.0003185272216796875, -0.017168045043945312, -0.01680278778076172, -9.799003601074219e-05, -1.9073486328125e-06, -0.0009241104125976562, -9.5367431640625e-06, -0.010621070861816406, -8.392333984375e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-05, -5.7220458984375e-06, -0.008099555969238281, -3.814697265625e-06, -0.009195327758789062, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0207827091217041, -0.0006455183029174805, -1.1920922133867862e-06, -1.9073486328125e-05, -2.86102294921875e-05, -7.62939453125e-06, -0.0010738372802734375, -3.814697265625e-06, -0.00128173828125, 0.0, -0.009248733520507812, -1.33514404296875e-05, -0.0005435943603515625, -1.33514404296875e-05, 0.0, -0.008962631225585938, 0.0, -0.0645456314086914, -9.918212890625e-05, 0.0, -4.649161837733118e-06, 0.0, -0.000324249267578125, -3.24249267578125e-05, -6.103515625e-05, -2.0265561033738777e-06, -1.9073486328125e-06, -0.008709791116416454, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"hole2": [{"hole0": "Count", "hole1": "CardSelector", "_type": "Template31"}], "hole0": "Not", "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole3": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template35"}], "_type": "Call"}, "_type": "Template11", "hole0": "Cabal Shadow Priest"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 84, 240, "Not", "<EOS>", 25, 186, "Greater", "Than", "<EOS>", 320, 82, 234, "Count", "<EOS>", "Card", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(\n            Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.352228753682077, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.6151695251464844, -0.0001220703125, -4.5299530029296875e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0022430419921875, -0.0131760835647583, 0.0, -5.686282383976504e-05, -2.1457672119140625e-06, -0.07874977588653564, -7.62939453125e-06, -0.033165931701660156, 0.0, -0.9468784332275391, -6.866455078125e-05, -0.00038909912109375, -0.18834877014160156, -0.07289505004882812, -0.008702278137207031, -0.059309959411621094, -0.0003910064697265625, -0.027599334716796875, -7.82012939453125e-05, -0.002437591552734375, -0.02373504638671875, -0.0003261566162109375, -4.184244608040899e-05, -0.000156402587890625, -5.3882598876953125e-05, -0.00013208389282226562, -4.1961669921875e-05, -0.30988454818725586, -0.000507354736328125, -0.0048923492431640625, -7.43865966796875e-05, -4.00543212890625e-05, -5.7220458984375e-06, -0.00012814998626708984, -0.15627014636993408, -3.814697265625e-06, -0.045859210193157196, -0.000499725341796875, -7.05718994140625e-05, -0.0220489501953125, -0.000385284423828125, -0.0012246370315551758, -3.063678741455078e-05, -2.0265579223632812e-06, -1.2566280364990234, -0.07531547546386719, -0.02718508243560791, -0.00017249584197998047, -0.000152587890625, -1.1444091796875e-05, -0.015683531761169434, -0.0008769035339355469, -1.9073486328125e-06, -0.0001697540283203125, -0.017156600952148438, -0.0033435821533203125, -0.03818976879119873, -2.1457672119140625e-06, -0.14741002023220062, -0.0003114938735961914, -1.1920928244535389e-07, -0.000453948974609375, -1.71661376953125e-05, -1.33514404296875e-05, -0.1135873794555664, 0.0, -0.010136604309082031, -0.0037555694580078125, 0.0, -8.404101390624419e-05, 0.0, -0.0004863739013671875, -1.71661376953125e-05, -2.86102294921875e-05, -3.814697720372351e-06, -1.9073486328125e-06, -0.0018738857470452785, -1.1444091796875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionDied", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadow"}, "choice_history": [121, 198, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 117, 227, "Minion", "Died", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.4195888360407025, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -1.2410296201705933, -2.622458850964904e-06, -2.622604142743512e-06, -9.894371032714844e-06, -0.0005474090576171875, -0.6684722900390625, -3.4332275390625e-05, -1.33514404296875e-05, -0.0003261566162109375, -4.1961669921875e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.0001277923583984375, -0.0003670972364488989, -5.14984130859375e-05, -0.3800087869167328, -0.0001010894775390625, -1.243027687072754, -1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.000110626220703125, -0.0001697540283203125, -0.07374107837677002, -3.24249267578125e-05, -0.00888824462890625, -2.86102294921875e-05, -0.0019731521606445312, -0.6025865077972412, -3.0517578125e-05, -0.08528327941894531, -0.23026561737060547, -0.0037164688110351562, -0.015623331069946289, -0.23884963989257812, -9.894371032714844e-06, -5.7220458984375e-06, -0.016788482666015625, -0.08170032501220703, -2.5033950805664062e-05, -0.0004787445068359375, -7.62939453125e-06, -0.005794525146484375, -0.000102996826171875, -0.26004791259765625, -1.9073486328125e-06, -0.0004863739013671875, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0003032684326171875, -0.00022518634796142578, 0.0, -0.00013160072558093816, 0.0, -0.0001277923583984375, -0.000194549560546875, -2.288818359375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.000946673157159239, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Cabal Shadow Priest"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.460185173455784, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.6151695251464844, -0.0001220703125, -4.5299530029296875e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0022430419921875, -0.0131760835647583, 0.0, -5.686282383976504e-05, -2.1457672119140625e-06, -0.07874977588653564, -7.62939453125e-06, -0.033165931701660156, 0.0, -0.9468784332275391, -6.866455078125e-05, -0.00038909912109375, -0.18834877014160156, -0.07289505004882812, -0.008702278137207031, -0.059309959411621094, -0.0003910064697265625, -0.027599334716796875, -7.82012939453125e-05, -0.002437591552734375, -0.02373504638671875, -0.0003261566162109375, -4.184244608040899e-05, -0.000156402587890625, -5.3882598876953125e-05, -0.00013208389282226562, -4.1961669921875e-05, -1.6447548866271973, -5.7220458984375e-06, -0.03524017333984375, -6.4849853515625e-05, -5.924701690673828e-05, -3.814697265625e-06, -5.567073458223604e-05, -0.006485581398010254, -1.9073486328125e-06, -0.11817187815904617, -0.0002613067626953125, -4.76837158203125e-05, -0.018384933471679688, -0.0003223419189453125, -0.0015469789505004883, -3.063678741455078e-05, -2.0265579223632812e-06, -0.33279991149902344, -0.019624710083007812, -0.000148773193359375, -2.09808349609375e-05, -0.00031507009407505393, -0.004958510398864746, 0.0, -0.0003070831298828125, -0.017177581787109375, -0.01725482940673828, -9.989738464355469e-05, -1.9073486328125e-06, -0.0009222030639648438, -9.5367431640625e-06, -0.010061264038085938, -8.392333984375e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-05, -5.7220458984375e-06, -0.008725166320800781, -3.814697265625e-06, -0.009412765502929688, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.02110886573791504, -0.0006493330001831055, -1.1920922133867862e-06, -1.9073486328125e-05, -2.86102294921875e-05, -7.62939453125e-06, -0.0010700225830078125, -3.814697265625e-06, -0.00125885009765625, 0.0, -0.009253501892089844, -1.33514404296875e-05, -0.0005397796630859375, -1.33514404296875e-05, 0.0, -0.00884246826171875, 0.0, -0.06345081329345703, -9.918212890625e-05, 0.0, -4.649161837733118e-06, 0.0, -0.0003261566162109375, -3.24249267578125e-05, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.008715345524251461, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "keywords": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionDied", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowMinionCard"}, "choice_history": [121, 198, "Cabal", "Shadow", "Minion", "Card", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 117, 227, "Minion", "Died", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowMinionCard(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(\n            Give(ChangeAttack(1)), SelfSelector()))])\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -5.595457827974315, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -1.8461560010910034, -0.027020573616027832, -1.4185901818564162e-05, -0.0026054796762764454, -3.933906555175781e-06, -1.33514404296875e-05, -0.00133514404296875, -0.7838468551635742, -9.5367431640625e-06, -1.52587890625e-05, -0.0002288818359375, -3.0517578125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.0001544952392578125, -0.0004917366313748062, -4.57763671875e-05, -0.020708659663796425, -0.04590606689453125, -1.0006036758422852, -1.9073486328125e-06, -4.57763671875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001354217529296875, -0.0001354217529296875, -0.09720063209533691, -2.6702880859375e-05, -0.007420539855957031, -3.814697265625e-05, -0.002079010009765625, -0.5740227699279785, -4.00543212890625e-05, -0.08775711059570312, -0.2223682403564453, -0.0037775039672851562, -0.01616501808166504, -0.23187255859375, -7.987022399902344e-06, -5.7220458984375e-06, -0.015813827514648438, -0.07819557189941406, -2.5033950805664062e-05, -0.000461578369140625, -7.62939453125e-06, -0.0057353973388671875, -0.000102996826171875, -0.2637033462524414, -1.9073486328125e-06, -0.0004787445068359375, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.000301361083984375, -0.000225067138671875, 0.0, -0.00013052795839030296, 0.0, -0.0001277923583984375, -0.0001983642578125, -2.288818359375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.000939884630497545, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 6, "hole3": "battlecry", "hole4": {"hole2": "SelfSelector", "hole0": "GiveAura", "hole1": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "AuraUntil", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"hole0": "IsSpell", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"_type": "Template62_expr_seq"}], "_type": "Template45"}], "_type": "Template22"}, "_type": "Template11", "hole0": "Cabal Shadow Priest"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "Aura", "<EOS>", 320, 91, 252, "Aura", "Until", "<EOS>", 323, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Spell", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, 320, 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura([AuraUntil(\n            ManaChange(-3), CardSelector(condition=IsSpell()), BothPlayer()\n            )]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -6.469569769027885, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.6151695251464844, -0.0001220703125, -4.5299530029296875e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0022430419921875, -0.0131760835647583, 0.0, -5.686282383976504e-05, -2.1457672119140625e-06, -0.07874977588653564, -7.62939453125e-06, -0.033165931701660156, 0.0, -0.4975128173828125, -0.2114734649658203, -0.07439181208610535, -0.5324752330780029, -1.2040087312925607e-05, -5.7220458984375e-06, -0.22040176391601562, -0.0051364898681640625, -0.1583944410085678, -0.022107243537902832, -0.00019657611846923828, -0.04529571533203125, -0.3928375244140625, -0.00066375732421875, -0.00038909912109375, -9.5367431640625e-06, -0.004619121085852385, -0.0009256042540073395, -3.075599670410156e-05, -1.9073486328125e-06, -0.1103200912475586, -0.0006122589111328125, -0.00031280517578125, -0.31739044189453125, -0.0005931854248046875, -0.002384185791015625, -0.000141143798828125, -3.0517578125e-05, -0.0006273984909057617, -6.115436553955078e-05, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.001918792724609375, -3.814697265625e-06, -0.20981311798095703, -3.814697265625e-06, -0.0012578925816342235, -0.30071085691452026, -1.1444091796875e-05, -0.25973033905029297, -3.814697265625e-06, -0.02044844627380371, -2.264974000354414e-06, -7.987022399902344e-06, -1.222294807434082, -5.14984130859375e-05, -0.0008068084716796875, -0.08651292324066162, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, 0.0, -9.775153557711747e-06, 0.0, -0.0001430511474609375, -2.288818359375e-05, -4.00543212890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0006491247331723571, -1.71661376953125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole4": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 4, "_type": "Template36"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 210, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(3))]), SelfSelector(picker=RandomPicker())))\n\n    def create_weapon(self, player):\n        return Minion(4, 5)\n", "score": -6.87432624548228, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.967707633972168, -3.4332275390625e-05, -1.52587890625e-05, -0.000225067138671875, -4.76837158203125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.00012969970703125, -0.00033098942367359996, -4.38690185546875e-05, -0.005279640667140484, -0.1879711151123047, -0.9065523147583008, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001068115234375, -0.0001430511474609375, -0.08259034156799316, -3.0517578125e-05, -0.007575035095214844, -3.4332275390625e-05, -0.0019960403442382812, -0.9335224628448486, -2.682209014892578e-05, -0.0002899169921875, -0.03207111358642578, -0.8489160537719727, -0.0001068115234375, -0.0006103515625, -9.5367431640625e-06, -0.06419658660888672, -9.5367431640625e-06, -0.00066375732421875, -0.16464710235595703, -1.52587890625e-05, -4.208087921142578e-05, -7.62939453125e-06, -0.0011523962020874023, -0.0019284486770629883, -3.814697265625e-06, -0.1559288501739502, -5.7220458984375e-06, -0.00038909912109375, -5.340576171875e-05, -1.9073486328125e-05, -1.1444091796875e-05, -9.989734826376662e-05, -0.025008440017700195, -1.9073486328125e-06, -0.4774332046508789, -0.0033159255981445312, -0.000152587890625, -0.018471837043762207, -0.000324249267578125, -7.62939453125e-06, -0.000274658203125, -1.1444091796875e-05, -2.47955322265625e-05, -0.591547966003418, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.007289528846740723, -1.251697449333733e-05, 0.0, -0.27111244201660156, 0.0, -1.3470649719238281e-05, 0.0, -0.000274658203125, -0.00045013427734375, -0.07069587707519531, -4.410704150359379e-06, -0.019124269485473633, -0.00010788437793962657, 0.0, -0.00014375607133843005, -4.172325134277344e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow Priest", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalPriestPriest"}, "choice_history": [121, 198, "Cabal", "Priest", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 211, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalPriestPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.\n            DRAGON))))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -7.044907966745086, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -1.5058834552764893, -0.8760961294174194, -0.00015281631203833967, -1.4304978321888484e-06, -4.5299530029296875e-06, -1.609325408935547e-05, -0.0002536773681640625, -0.7871980667114258, -4.57763671875e-05, -1.33514404296875e-05, -0.0002269744873046875, -5.14984130859375e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.0001316070556640625, -0.00029738296871073544, -4.00543212890625e-05, -0.0015420750714838505, -0.33086204528808594, -0.008778453804552555, 0.0, -0.04139900207519531, -5.7220458984375e-06, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -4.57763671875e-05, -0.0002002716064453125, -0.2879401445388794, -9.5367431640625e-06, -0.0002460479736328125, -3.24249267578125e-05, -0.0040645599365234375, -0.5030816793441772, -2.09808349609375e-05, -0.0004215240478515625, -0.05045890808105469, -0.685032844543457, -0.00021016597747802734, -0.0001354217529296875, -1.1444091796875e-05, -0.11036109924316406, -0.00012969970703125, -0.000774383544921875, -0.014862060546875, -4.00543212890625e-05, -2.3245811462402344e-05, -5.7220458984375e-06, -0.00026929378509521484, -0.0020046234130859375, -1.9073486328125e-06, -0.04201841354370117, -5.7220458984375e-06, -0.00022125244140625, -5.91278076171875e-05, -1.728534698486328e-05, -1.9073486328125e-05, -0.00014090511831454933, -0.05391716957092285, -1.9073486328125e-06, -0.7305365204811096, -0.0001163482666015625, -0.0006847381591796875, -0.20839452743530273, -0.00020599365234375, -1.9073486328125e-05, -0.000141143798828125, -0.017709732055664062, -0.005420684814453125, -0.000179290771484375, -5.7220458984375e-06, -0.3156397342681885, -0.0011745691299438477, -9.775161743164062e-06, -0.0001220703125, -0.42636966705322266, -3.62396240234375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000133514404296875, -3.063678741455078e-05, -0.022698402404785156, -1.52587890625e-05, -3.62396240234375e-05, 0.0, -1.454353241570061e-05, 0.0, -0.0003376007080078125, -4.57763671875e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0023548363242298365, -3.24249267578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole2": "MinionSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 211, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.\n            DRAGON))))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -7.228298214014103, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.967707633972168, -3.4332275390625e-05, -1.52587890625e-05, -0.000225067138671875, -4.76837158203125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.00012969970703125, -0.00033098942367359996, -4.38690185546875e-05, -0.005279640667140484, -0.1879711151123047, -0.9065523147583008, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001068115234375, -0.0001430511474609375, -0.08259034156799316, -3.0517578125e-05, -0.007575035095214844, -3.4332275390625e-05, -0.0019960403442382812, -0.9335224628448486, -2.682209014892578e-05, -0.0002899169921875, -0.03207111358642578, -1.0448789596557617, -0.00034356117248535156, -4.1961669921875e-05, -9.5367431640625e-06, -0.10491943359375, -0.00014495849609375, -0.0005893707275390625, -0.010332107543945312, -8.0108642578125e-05, -3.075599670410156e-05, -9.5367431640625e-06, -0.00031113624572753906, -0.0018825531005859375, -3.814697265625e-06, -0.05483889579772949, -5.7220458984375e-06, -0.00023651123046875, -5.7220458984375e-05, -1.9073486328125e-05, -2.47955322265625e-05, -0.00011801713117165491, -0.03122246265411377, -1.9073486328125e-06, -0.7604597210884094, -0.0001087188720703125, -0.000652313232421875, -0.21437740325927734, -0.0001773834228515625, -1.71661376953125e-05, -0.0001354217529296875, -0.03845977783203125, -0.004638671875, -0.000202178955078125, -5.7220458984375e-06, -0.29932618141174316, -0.0012240409851074219, -9.655952453613281e-06, -0.00011444091796875, -0.48318958282470703, -3.814697265625e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.0001316070556640625, -3.254413604736328e-05, -0.022284507751464844, -1.71661376953125e-05, -3.62396240234375e-05, 0.0, -1.454353241570061e-05, 0.0, -0.000362396240234375, -4.9591064453125e-05, -2.09808349609375e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0023699402809143066, -3.0517578125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Cabal Shadow", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole4": [{"arg": "condition", "value": {"hole0": "IsSpell", "_type": "Template46"}, "_type": "keyword"}], "hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 5, "_type": "Template32"}], "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Cabal", " ", "Shadow", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 210, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Spell", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(3))]), SelfSelector(condition=IsSpell())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score": -7.537036435953269, "score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.967707633972168, -3.4332275390625e-05, -1.52587890625e-05, -0.000225067138671875, -4.76837158203125e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.00012969970703125, -0.00033098942367359996, -4.38690185546875e-05, -0.005279640667140484, -0.1879711151123047, -0.9065523147583008, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001068115234375, -0.0001430511474609375, -0.08259034156799316, -3.0517578125e-05, -0.007575035095214844, -3.4332275390625e-05, -0.0019960403442382812, -0.9335224628448486, -2.682209014892578e-05, -0.0002899169921875, -0.03207111358642578, -0.8489160537719727, -0.0001068115234375, -0.0006103515625, -9.5367431640625e-06, -0.06419658660888672, -9.5367431640625e-06, -0.00066375732421875, -0.16464710235595703, -1.52587890625e-05, -4.208087921142578e-05, -7.62939453125e-06, -0.0011523962020874023, -0.0019284486770629883, -3.814697265625e-06, -0.1559288501739502, -5.7220458984375e-06, -0.00038909912109375, -5.340576171875e-05, -1.9073486328125e-05, -1.1444091796875e-05, -9.989734826376662e-05, -0.025008440017700195, -1.9073486328125e-06, -0.4774332046508789, -0.0033159255981445312, -0.000152587890625, -0.018471837043762207, -0.000324249267578125, -7.62939453125e-06, -0.000274658203125, -1.1444091796875e-05, -2.47955322265625e-05, -0.8396844863891602, -1.9073486328125e-06, -0.5852680206298828, -1.52587890625e-05, -0.08062266558408737, -0.09524605423212051, -0.0001201629638671875, -0.018749237060546875, 0.0, -4.0531158447265625e-06, 0.0, -0.000247955322265625, -0.0030231475830078125, -2.288818359375e-05, -3.814697265625e-06, -9.655952453613281e-06, -0.00044717409764416516, -4.00543212890625e-05]}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n", "score": -2.735958915090329, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -0.9212398529052734, -3.814697265625e-06, -5.53131103515625e-05, -0.00016522403166163713, -1.1920928244535389e-07, -0.010819673538208008, 0.0, -0.0010662078857421875, -0.0054836273193359375, -1.1444091796875e-05, -0.0220184326171875, 0.0, -0.7537460327148438, -1.52587890625e-05, -0.002956390380859375, -1.9073486328125e-06, -1.919269561767578e-05, -1.1920928244535389e-07, -0.04563617706298828, -1.1920928244535389e-07, -0.015109993517398834, -1.9311717551317997e-05, -0.008848010562360287, 0.0, -4.76837158203125e-05, -0.0007801055908203125, -1.33514404296875e-05, -1.33514404296875e-05, -0.0001633167266845703, 0.0, -0.005602716002613306, 0.0, -0.0021610260009765625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n", "score": -3.5649943839436915, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -1.3145103454589844, 0.0, -0.0004787445068359375, 0.0, -0.3317241668701172, -1.9073486328125e-05, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -4.38690185546875e-05, -8.702273589733522e-06, -0.00012600421905517578, -0.018441200256347656, -0.000576019287109375, -0.0011920928955078125, -7.62939453125e-06, -0.000335693359375, -0.02936737798154354, 0.0, -1.33514404296875e-05, -0.9343624114990234, -3.814697265625e-06, -5.7220458984375e-05, -0.00016510482237208635, -1.1920928244535389e-07, -0.011001229286193848, 0.0, -0.0011005401611328125, -0.0062103271484375, -9.5367431640625e-06, -0.023920059204101562, 0.0, -0.7930688858032227, -1.52587890625e-05, -0.0029697418212890625, -1.9073486328125e-06, -1.919269561767578e-05, -1.1920928244535389e-07, -0.043952107429504395, -1.1920928244535389e-07, -0.015708494931459427, -1.9788545614574105e-05, -0.008991089649498463, 0.0, -4.57763671875e-05, -0.0007781982421875, -1.33514404296875e-05, -1.33514404296875e-05, -0.0001614093780517578, 0.0, -0.005558370612561703, 0.0, -0.0021820068359375]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.card.add_buff(Buff(ManaChange(-4)))\n", "score": -3.6789392145158146, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -0.9212398529052734, -3.814697265625e-06, -5.53131103515625e-05, -0.00016522403166163713, -1.1920928244535389e-07, -0.010819673538208008, 0.0, -0.0010662078857421875, -0.0054836273193359375, -1.1444091796875e-05, -0.0220184326171875, 0.0, -1.1298551559448242, -0.033202171325683594, -3.814697265625e-06, -0.18120388686656952, 0.0, -0.000274658203125, -0.009738922119140625, -0.2670764923095703, -0.001674652099609375, -0.000583648681640625, -4.38690185546875e-05, -5.7220458984375e-05, -0.012720108032226562, -0.0011501312255859375, -0.028362274169921875, -0.1121673583984375]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "DRUID", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n", "score": -4.074337095853686, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -1.952834129333496, 0.0, -0.0015773773193359375, 0.0, -0.24390602111816406, -9.5367431640625e-06, 0.0, -1.3470649719238281e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -4.57763671875e-05, -7.987019671418238e-06, -0.000152587890625, -0.01993846893310547, -0.000492095947265625, -0.0013523101806640625, -7.62939453125e-06, -0.0003070831298828125, -0.025466689839959145, 0.0, -1.33514404296875e-05, -0.933833122253418, -3.814697265625e-06, -5.53131103515625e-05, -0.00017046925495378673, -1.1920928244535389e-07, -0.010946273803710938, 0.0, -0.001186370849609375, -0.005863189697265625, -9.5367431640625e-06, -0.022298812866210938, 0.0, -0.7552938461303711, -1.52587890625e-05, -0.002994537353515625, -1.9073486328125e-06, -1.919269561767578e-05, -1.1920928244535389e-07, -0.04485213756561279, -1.1920928244535389e-07, -0.015080366283655167, -1.9311717551317997e-05, -0.00898236595094204, 0.0, -4.76837158203125e-05, -0.000782012939453125, -1.33514404296875e-05, -1.33514404296875e-05, -0.0001633167266845703, 0.0, -0.005581615958362818, 0.0, -0.0021762847900390625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.card.add_buff(Buff(ManaChange(-4)))\n", "score": -4.441909257859372, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -1.3145103454589844, 0.0, -0.0004787445068359375, 0.0, -0.3317241668701172, -1.9073486328125e-05, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -4.38690185546875e-05, -8.702273589733522e-06, -0.00012600421905517578, -0.018441200256347656, -0.000576019287109375, -0.0011920928955078125, -7.62939453125e-06, -0.000335693359375, -0.02936737798154354, 0.0, -1.33514404296875e-05, -0.9343624114990234, -3.814697265625e-06, -5.7220458984375e-05, -0.00016510482237208635, -1.1920928244535389e-07, -0.011001229286193848, 0.0, -0.0011005401611328125, -0.0062103271484375, -9.5367431640625e-06, -0.023920059204101562, 0.0, -1.0952157974243164, -0.03336334228515625, -3.814697265625e-06, -0.18707957863807678, 0.0, -0.000274658203125, -0.009639739990234375, -0.2676239013671875, -0.0016803741455078125, -0.00058746337890625, -4.38690185546875e-05, -5.7220458984375e-05, -0.012920379638671875, -0.00115203857421875, -0.028801918029785156, -0.1119699478149414]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_heal_power", "_type": "Attribute"}, "args": [{"hole0": {"_type": "Template52"}, "hole1": "calculate_max_health", "_type": "Template43"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template52"}, "attr": "taunt", "_type": "Attribute"}], "value": {"_type": "Template79"}, "_type": "Assign"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110, 126, 155, 320, 65, 156, 41, "taunt", "<EOS>", 62], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n", "score": -4.639281219454688, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.6237144470214844, -0.00115203857421875, -0.0003414154052734375, -1.9073486328125e-06, -2.09808349609375e-05, -0.7616218328475952, 0.0, -2.47955322265625e-05, -0.4300851821899414, -0.000209808349609375, -0.02454090118408203, -0.041167616844177246, -1.9073486328125e-06, -0.006626129150390625, -0.0075550079345703125, -7.62939453125e-06, -2.09808349609375e-05, -0.001552581787109375, -5.7220458984375e-06, -0.001537322998046875, -0.7986054420471191, 0.0, -0.00052642822265625]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) > 0:\n            minion.damage(player.effective_spell_damage(1), self)\n", "score": -4.648747239546758, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.8068561553955078, -0.0047130584716796875, -0.23552703857421875, -0.0003223419189453125, -0.00058746337890625, -0.0001621246337890625, -0.0034236907958984375, -2.288818359375e-05, -2.47955322265625e-05, 0.0, -0.0004136428178753704, -4.0531158447265625e-06, -5.7220458984375e-06, -0.0007152557373046875, 0.0, -0.07519912719726562, 0.0, -0.1277322769165039, 0.0, -7.081031799316406e-05, -1.1920928244535389e-07, -0.00463557243347168, 0.0, -0.0012121195904910564, 0.0, -2.09808349609375e-05, -0.08146858215332031, -9.5367431640625e-06, -4.00543212890625e-05, -0.006114959716796875, -0.3500099182128906, -0.000110626220703125, -0.2859621047973633, -1.9073486328125e-05, -0.17887960374355316, -3.087493678322062e-05, -0.0004376460565254092, 0.0, -9.5367431640625e-06, -0.04611968994140625, -8.0108642578125e-05, -7.62939453125e-06, -9.250640869140625e-05, -2.0265579223632812e-06, -0.008077351376414299, 0.0, -0.48966503143310547]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template61"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 104, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n        if len(game.other_player.minions) > 0:\n            minion.damage(player.effective_spell_damage(1), self)\n", "score": -4.702132879305957, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.814706802368164, -0.008522987365722656, -0.2780036926269531, -0.0003032684326171875, -0.0011653900146484375, -4.00543212890625e-05, -0.006953239440917969, -2.288818359375e-05, -1.71661376953125e-05, 0.0, -0.00036155321868136525, -4.649161837733118e-06, -5.7220458984375e-06, -0.0006847381591796875, 0.0, -0.0723114013671875, 0.0, -0.10161018371582031, 0.0, -7.283687591552734e-05, -1.1920928244535389e-07, -0.0024230480194091797, 0.0, -0.0011516802478581667, 0.0, -2.288818359375e-05, -0.11712074279785156, -9.5367431640625e-06, -4.57763671875e-05, -0.00652313232421875, -0.30273914337158203, -0.0001087188720703125, -0.2894163131713867, -1.9073486328125e-05, -0.2059990018606186, -3.111334808636457e-05, -0.0003848570631816983, 0.0, -9.5367431640625e-06, -0.04886817932128906, -8.0108642578125e-05, -7.62939453125e-06, -9.250640869140625e-05, -2.0265579223632812e-06, -0.007913795299828053, 0.0, -0.4944162368774414]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "Frozen", "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.card.add_buff(Buff(Frozen()))\n", "score": -4.756764879989753, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -0.9212398529052734, -3.814697265625e-06, -5.53131103515625e-05, -0.00016522403166163713, -1.1920928244535389e-07, -0.010819673538208008, 0.0, -0.0010662078857421875, -0.0054836273193359375, -1.1444091796875e-05, -0.0220184326171875, 0.0, -1.1298551559448242, -0.033202171325683594, -3.814697265625e-06, -0.18120388686656952, 0.0, -0.000274658203125, -0.009738922119140625, -1.4643049240112305, -0.03734695911407471, -9.5367431640625e-06]}, {"model_output": {"hole2": [{"hole2": "DRUID", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "DRUID", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.card.add_buff(Buff(ManaChange(-4)))\n", "score": -5.00800243820435, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -1.952834129333496, 0.0, -0.0015773773193359375, 0.0, -0.24390602111816406, -9.5367431640625e-06, 0.0, -1.3470649719238281e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -4.57763671875e-05, -7.987019671418238e-06, -0.000152587890625, -0.01993846893310547, -0.000492095947265625, -0.0013523101806640625, -7.62939453125e-06, -0.0003070831298828125, -0.025466689839959145, 0.0, -1.33514404296875e-05, -0.933833122253418, -3.814697265625e-06, -5.53131103515625e-05, -0.00017046925495378673, -1.1920928244535389e-07, -0.010946273803710938, 0.0, -0.001186370849609375, -0.005863189697265625, -9.5367431640625e-06, -0.022298812866210938, 0.0, -1.1221837997436523, -0.03425884246826172, -3.814697265625e-06, -0.1869632452726364, 0.0, -0.00028228759765625, -0.009622573852539062, -0.25874996185302734, -0.0016689300537109375, -0.00058746337890625, -4.38690185546875e-05, -5.7220458984375e-05, -0.012835502624511719, -0.00115966796875, -0.02912139892578125, -0.11216354370117188]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"id": "wrath", "_type": "Name"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 73, 186, "wrath", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) > 0:\n            minion.damage(player.effective_spell_damage(1), wrath)\n", "score": -5.1598092655706225, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.8068561553955078, -0.0047130584716796875, -0.23552703857421875, -0.0003223419189453125, -0.00058746337890625, -0.0001621246337890625, -0.0034236907958984375, -2.288818359375e-05, -2.47955322265625e-05, 0.0, -0.0004136428178753704, -4.0531158447265625e-06, -5.7220458984375e-06, -0.0007152557373046875, 0.0, -0.07519912719726562, 0.0, -0.1277322769165039, 0.0, -7.081031799316406e-05, -1.1920928244535389e-07, -0.00463557243347168, 0.0, -0.0012121195904910564, 0.0, -2.09808349609375e-05, -0.08146858215332031, -9.5367431640625e-06, -4.00543212890625e-05, -0.006114959716796875, -0.3500099182128906, -0.000110626220703125, -0.2859621047973633, -1.9073486328125e-05, -0.17887960374355316, -3.087493678322062e-05, -0.0004376460565254092, 0.0, -9.5367431640625e-06, -0.04611968994140625, -8.0108642578125e-05, -7.62939453125e-06, -9.250640869140625e-05, -2.0265579223632812e-06, -0.008077351376414299, 0.0, -0.9507646560668945, -0.0001773834228515625, -0.049781203269958496, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template61"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"id": "wrath", "_type": "Name"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 104, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 73, 186, "wrath", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n        if len(game.other_player.minions) > 0:\n            minion.damage(player.effective_spell_damage(1), wrath)\n", "score": -5.200891552973864, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.814706802368164, -0.008522987365722656, -0.2780036926269531, -0.0003032684326171875, -0.0011653900146484375, -4.00543212890625e-05, -0.006953239440917969, -2.288818359375e-05, -1.71661376953125e-05, 0.0, -0.00036155321868136525, -4.649161837733118e-06, -5.7220458984375e-06, -0.0006847381591796875, 0.0, -0.0723114013671875, 0.0, -0.10161018371582031, 0.0, -7.283687591552734e-05, -1.1920928244535389e-07, -0.0024230480194091797, 0.0, -0.0011516802478581667, 0.0, -2.288818359375e-05, -0.11712074279785156, -9.5367431640625e-06, -4.57763671875e-05, -0.00652313232421875, -0.30273914337158203, -0.0001087188720703125, -0.2894163131713867, -1.9073486328125e-05, -0.2059990018606186, -3.111334808636457e-05, -0.0003848570631816983, 0.0, -9.5367431640625e-06, -0.04886817932128906, -8.0108642578125e-05, -7.62939453125e-06, -9.250640869140625e-05, -2.0265579223632812e-06, -0.007913795299828053, 0.0, -0.9432926177978516, -0.00017547607421875, -0.049703001976013184, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"value": {"hole2": 2, "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template37"}, "_type": "Expr"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) > 0:\n            self.target.change_attack(2)\n", "score": -5.32862070921805, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.8068561553955078, -0.0047130584716796875, -0.23552703857421875, -0.0003223419189453125, -0.00058746337890625, -0.0001621246337890625, -0.0034236907958984375, -2.288818359375e-05, -2.47955322265625e-05, 0.0, -0.0004136428178753704, -4.0531158447265625e-06, -5.7220458984375e-06, -0.0007152557373046875, 0.0, -0.07519912719726562, 0.0, -0.1277322769165039, 0.0, -7.081031799316406e-05, -1.1920928244535389e-07, -0.00463557243347168, 0.0, -0.0012121195904910564, 0.0, -2.09808349609375e-05, -0.08146858215332031, -9.5367431640625e-06, -4.00543212890625e-05, -0.006114959716796875, -1.3989038467407227, 0.0, -0.03238201141357422, -2.09808349609375e-05, -0.49722766876220703, -0.01628577709197998, -5.7220458984375e-06, -0.0945511907339096, 0.0]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) > 0:\n            minion.damage(player.effective_spell_damage(1), self)\n", "score": -5.3953971913708685, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -1.3145103454589844, 0.0, -0.0004787445068359375, 0.0, -0.3317241668701172, -1.9073486328125e-05, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -4.38690185546875e-05, -8.702273589733522e-06, -0.00012600421905517578, -0.018441200256347656, -0.000576019287109375, -0.0011920928955078125, -7.62939453125e-06, -0.000335693359375, -0.02936737798154354, 0.0, -1.33514404296875e-05, -1.7340373992919922, -0.005154609680175781, -0.27070045471191406, -0.00028228759765625, -0.0006732940673828125, -0.00016021728515625, -0.0034093856811523438, -2.288818359375e-05, -2.86102294921875e-05, 0.0, -0.0004323577741160989, -4.0531158447265625e-06, -5.7220458984375e-06, -0.000713348388671875, 0.0, -0.07378196716308594, 0.0, -0.12445545196533203, 0.0, -6.890296936035156e-05, -1.1920928244535389e-07, -0.004587888717651367, 0.0, -0.0011914963833987713, 0.0, -2.09808349609375e-05, -0.08138847351074219, -9.5367431640625e-06, -4.00543212890625e-05, -0.0065059661865234375, -0.3445310592651367, -0.0001068115234375, -0.2924175262451172, -1.9073486328125e-05, -0.18582819402217865, -3.1709379982203245e-05, -0.00042406193097122014, 0.0, -9.5367431640625e-06, -0.04715919494628906, -8.0108642578125e-05, -7.62939453125e-06, -9.250640869140625e-05, -2.0265579223632812e-06, -0.008009400218725204, 0.0, -0.4943380355834961]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 4, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Cone of Cold"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template61"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"value": {"hole2": 2, "hole0": {"_type": "Template52"}, "hole1": "change_attack", "_type": "Template37"}, "_type": "Expr"}], "_type": "If"}], "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 104, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 130, 168, 34, 243, 41, "change_attack", "<EOS>", "2", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n        if len(game.other_player.minions) > 0:\n            self.target.change_attack(2)\n", "score": -5.508419451013417, "score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -1.814706802368164, -0.008522987365722656, -0.2780036926269531, -0.0003032684326171875, -0.0011653900146484375, -4.00543212890625e-05, -0.006953239440917969, -2.288818359375e-05, -1.71661376953125e-05, 0.0, -0.00036155321868136525, -4.649161837733118e-06, -5.7220458984375e-06, -0.0006847381591796875, 0.0, -0.0723114013671875, 0.0, -0.10161018371582031, 0.0, -7.283687591552734e-05, -1.1920928244535389e-07, -0.0024230480194091797, 0.0, -0.0011516802478581667, 0.0, -2.288818359375e-05, -0.11712074279785156, -9.5367431640625e-06, -4.57763671875e-05, -0.00652313232421875, -1.514897346496582, 0.0, -0.025249481201171875, -2.09808349609375e-05, -0.5079030990600586, -0.016574859619140625, -5.7220458984375e-06, -0.09172332286834717, 0.0]}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer()))))]),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.9028029968258977, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7218809127807617, -0.8593282699584961, -0.016749855130910873, -0.0016051530838012695, -3.576278118089249e-07, -0.0001983642578125, 0.0, -2.503394853192731e-06, 0.0, -3.62396240234375e-05, -0.033023834228515625, -1.52587890625e-05, -8.2254373410251e-06, -3.576272320060525e-06, -5.722038622479886e-06, -5.960446742392378e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"hole0": "Give", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", "Minion", "Selector", "<EOS>", 321, 93, 255, "Give", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(), MinionSelector(\n            Give(), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.9055388824587283, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.7557635307312012, -0.00285947322845459, -0.00017571449279785156, -1.2278556823730469e-05, -4.1961669921875e-05, -0.00016021728515625, -1.33514404296875e-05, -0.0013184547424316406, 0.0, -0.004973053000867367, -7.62939453125e-05, -0.2356434017419815, -0.007897910661995411, -0.1272471696138382, -2.2649765014648438e-06, -1.0371154530730564e-05, -0.6324691772460938, -0.21892356872558594, -9.5367431640625e-06, -0.7986932992935181, -0.04745137691497803, -0.0064067840576171875, -4.38690185546875e-05, -0.008116602897644043, -8.940683983382769e-06, -2.6702880859375e-05, -3.254413604736328e-05, 0.0, -1.5974044799804688e-05, 0.0, -3.814697265625e-05, -0.0004863739013671875, -5.7220458984375e-06, -6.19888032815652e-06, -2.741813204920618e-06, -5.841247457283316e-06, -7.152555099310121e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.9952521093204254, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7078332901000977, -0.0021038055419921875, -0.00015425519086420536, -0.013201473280787468, 0.0, -0.049121856689453125, -0.09640979766845703, -0.0004711151123046875, -0.00026332895504310727, -2.9206275939941406e-05, -0.00072479248046875, -0.000370025634765625, -0.0071125030517578125, -1.71661376953125e-05, -0.02319962903857231, -0.0977540984749794, -0.03703439235687256, -0.0006554126157425344, -0.000652313232421875, -1.33514404296875e-05, -0.17315995693206787, -8.58303828863427e-05, -7.62939453125e-06, -0.4021005630493164, -0.006868958007544279, -0.00028121471405029297, -1.1920928244535389e-07, -0.0002346038818359375, 0.0, -2.384185791015625e-06, 0.0, -4.1961669921875e-05, -0.10537910461425781, -9.5367431640625e-06, -5.7220440794480965e-06, -2.3841830625315197e-06, -5.006785613659304e-06, -6.556489552167477e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.194638327425224, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.8830742835998535, -5.722038622479886e-06, -0.00018024444580078125, -1.3351438610698096e-05, -4.38690185546875e-05, -0.0001704692840576172, -0.00025177001953125, -0.0012006759643554688, 0.0, -0.0007332454551942647, -3.063678741455078e-05, -0.003948848694562912, -0.004632710944861174, -6.103515625e-05, -0.03957843780517578, -3.24249267578125e-05, -0.0004520416259765625, -1.2628517150878906, -0.0070037841796875, -0.0002535524545237422, -9.5367431640625e-06, -0.005183739587664604, -0.0007317066192626953, -1.9073486328125e-06, -0.006530142389237881, 0.0, -0.10181808471679688, -0.000244140625, -0.0022319555282592773, -3.814697265625e-06, -3.778909012908116e-05, -0.011454582214355469, 0.0, -0.008886673487722874, -3.24249267578125e-05, -0.0039615631103515625, -0.026057004928588867, -9.5367431640625e-06, -9.655922440288123e-06, -0.14426517486572266, -0.0001506805419921875, -0.00022125244140625, -0.01124119758605957, -2.8848648071289062e-05, -2.09808349609375e-05, -7.62939453125e-06, -0.01273166574537754, -2.491474151611328e-05, -6.29425048828125e-05, -0.015035748481750488, -1.9073486328125e-06, -1.1682510375976562e-05, 0.0, -4.38690185546875e-05, -0.5823917388916016, -2.288818359375e-05, -2.7894968297914602e-05, -1.4185829968482722e-05, -7.390969585685525e-06, -3.3378546504536644e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), EnemyPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.4994280091545065, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -1.205939531326294, -0.00021553004626184702, -1.1444091796875e-05, -0.4337158203125, -0.001979827880859375, -0.00014471904432866722, -0.01586115173995495, 0.0, -0.020298004150390625, -0.06751537322998047, -0.000530242919921875, -0.00023495811910834163, -2.7179718017578125e-05, -0.0007305145263671875, -0.0003376007080078125, -0.007701873779296875, -1.52587890625e-05, -0.022019430994987488, -0.09804677963256836, -0.03476309776306152, -0.000653982104267925, -0.0006351470947265625, -1.1444091796875e-05, -0.18032264709472656, -7.915472815511748e-05, -7.62939453125e-06, -0.4062795639038086, -0.006997107993811369, -0.00027930736541748047, -1.1920928244535389e-07, -0.00023651123046875, 0.0, -2.384185791015625e-06, 0.0, -4.1961669921875e-05, -0.10567092895507812, -9.5367431640625e-06, -5.7220440794480965e-06, -2.3841830625315197e-06, -5.006785613659304e-06, -6.556489552167477e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.507811867476136, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -3.975691318511963, -0.00042716512689366937, -0.0002351999282836914, -6.794929504394531e-05, -4.76837158203125e-05, -0.0003161430358886719, -8.988380432128906e-05, -0.0007078647613525391, 0.0, -0.0023772716522216797, -3.0517578125e-05, -0.26309630274772644, -0.0010810497915372252, -0.03464360535144806, -5.7220458984375e-06, -1.6689286894688848e-06, -0.16324901580810547, -7.62939453125e-06, 0.0, -0.000823974609375, 0.0, -0.0001201629638671875, -3.4332275390625e-05, -6.246565317269415e-05, -2.5987619665102102e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.33514404296875e-05, -0.002750396728515625, -1.1444091796875e-05, -0.00023651123046875, -1.1444091796875e-05, -0.0012325048446655273, -0.00031113624572753906, -1.9073486328125e-05, -0.0033208131790161133, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, -2.86102294921875e-05, -4.76837158203125e-05, -2.09808349609375e-05, -1.1920919860131107e-05, -2.9802317840221804e-06, -7.867804924899247e-06, -7.152555099310121e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(), MinionSelector(\n            IsType(MINION_TYPE.DRAGON), players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.530354453631361, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -2.9866957664489746, -0.006373302545398474, -0.0008813142776489258, -1.9550323486328125e-05, -0.000118255615234375, -0.00013720989227294922, -7.2479248046875e-05, -0.00029075145721435547, 0.0, -0.000520228932145983, -2.09808349609375e-05, -0.46478545665740967, -4.08887499361299e-05, -0.5196027755737305, -0.00019872188568115234, -5.960462772236497e-07, -0.020624160766601562, -0.011331558227539062, -0.0001583099365234375, -8.7738037109375e-05, -3.814697265625e-06, -0.17449235916137695, -0.003233073279261589, -2.777575355139561e-05, -0.009004592895507812, -0.001781463623046875, -3.4332275390625e-05, -1.9073486328125e-05, -1.71661376953125e-05, -4.9591064453125e-05, -3.814697265625e-06, -0.1225130558013916, -0.000484466552734375, -0.07637596130371094, -0.0003528594970703125, -1.52587890625e-05, -0.06293869018554688, -1.9073486328125e-06, -5.7220458984375e-05, -3.814697265625e-06, -0.00012993811105843633, -7.033342626527883e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0009479522705078125, -7.62939453125e-06, -0.00018310546875, -7.62939453125e-06, -0.0024590492248535156, -0.00010323524475097656, -5.7220458984375e-06, -0.006387829780578613, -3.814697265625e-06, -1.1801719665527344e-05, 0.0, -2.6702880859375e-05, -6.103515625e-05, -7.62939453125e-06, -7.987013304955326e-06, -2.9802317840221804e-06, -5.841247457283316e-06, -7.152555099310121e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.804840883134119, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.8830742835998535, -5.722038622479886e-06, -0.00018024444580078125, -1.3351438610698096e-05, -4.38690185546875e-05, -0.0001704692840576172, -0.00025177001953125, -0.0012006759643554688, 0.0, -0.0007332454551942647, -3.063678741455078e-05, -0.003948848694562912, -0.004632710944861174, -6.103515625e-05, -0.03957843780517578, -3.24249267578125e-05, -0.0004520416259765625, -0.3437633514404297, -0.04579639434814453, -0.0006800466799177229, -0.021998871117830276, -7.62939453125e-06, -0.0017414093017578125, -0.22512054443359375, -0.0005435943603515625, -9.953974949894473e-05, -7.867813110351562e-06, -0.0011415481567382812, -0.0005130767822265625, -0.00482940673828125, -9.5367431640625e-06, -0.3919997811317444, -0.05335798114538193, -0.09475290030241013, -0.0022428035736083984, -0.0006103515625, -7.62939453125e-06, -0.10875356197357178, -0.00011539130355231464, -2.300739288330078e-05, -0.518519401550293, -0.004651069641113281, -0.00012063844769727439, -0.015255449339747429, 0.0, -0.0195465087890625, -0.10978412628173828, -0.000438690185546875, -0.00024580556782893836, -2.9206275939941406e-05, -0.000782012939453125, -0.00031280517578125, -0.008085250854492188, -1.71661376953125e-05, -0.025024769827723503, -0.09494879096746445, -0.03879189118742943, -0.00069761264603585, -0.0006847381591796875, -1.1444091796875e-05, -0.1866626739501953, -8.404223626712337e-05, -7.62939453125e-06, -0.3581094741821289, -0.015394652262330055, -3.814697265625e-06, -2.0265558760002023e-06, -0.10562515258789062, -9.5367431640625e-06, -1.9073486328125e-06, -0.0032958984375, -3.814697265625e-06, -0.0001220703125, -3.4332275390625e-05, -0.0012243986129760742, -2.300724372616969e-05, -1.71661376953125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -0.0012073516845703125, -1.1444091796875e-05, -0.0003147125244140625, -1.33514404296875e-05, -0.0010802745819091797, -0.00026547908782958984, -7.62939453125e-06, -0.004093170166015625, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -2.86102294921875e-05, -6.67572021484375e-05, -7.62939453125e-06, -7.867804924899247e-06, -2.861022494471399e-06, -6.318082796497038e-06, -5.960462772236497e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "Give", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Give", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Give(), EnemyPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.970562362735016, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -1.549164891242981, -0.8431788086891174, -0.000732421875, -1.71661376953125e-05, -0.119596466422081, -0.0005287771346047521, -2.5033950805664062e-05, -0.16944408416748047, -0.002613067626953125, -0.00023889081785455346, -0.014835831709206104, -1.9073486328125e-06, -0.015420913696289062, -0.06111621856689453, -0.000576019287109375, -0.0002596328849904239, -2.7298927307128906e-05, -0.0007915496826171875, -0.0003204345703125, -0.008482933044433594, -1.71661376953125e-05, -0.02647477015852928, -0.0877777636051178, -0.03820967301726341, -0.0009977816371247172, -0.00069427490234375, -1.1444091796875e-05, -0.2069946527481079, -7.8320357715711e-05, -9.5367431640625e-06, -0.409149169921875, -0.0070153470151126385, -0.00027930736541748047, -1.1920928244535389e-07, -0.000232696533203125, 0.0, -2.384185791015625e-06, 0.0, -4.00543212890625e-05, -0.10244369506835938, -9.5367431640625e-06, -5.7220440794480965e-06, -2.50339189733495e-06, -5.006785613659304e-06, -6.6756979322235566e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(\n            MinionHasminions(), EnemyPlayer()))))]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.429120658428381, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7078332901000977, -0.0021038055419921875, -0.00015425519086420536, -0.013201473280787468, 0.0, -0.049121856689453125, -0.09640979766845703, -0.0004711151123046875, -0.00026332895504310727, -2.9206275939941406e-05, -0.00072479248046875, -0.000370025634765625, -0.0071125030517578125, -1.71661376953125e-05, -0.02319962903857231, -0.0977540984749794, -0.03703439235687256, -0.0006554126157425344, -0.000652313232421875, -1.33514404296875e-05, -0.17315995693206787, -8.58303828863427e-05, -7.62939453125e-06, -1.1996803283691406, -0.0006046295166015625, -0.0001399509492330253, -0.014782427810132504, 0.0, -0.07042312622070312, -0.1733112335205078, -0.0004901885986328125, -0.00023042882094159722, -3.0994415283203125e-05, -0.0007228851318359375, -0.0003185272216796875, -0.009654045104980469, -1.71661376953125e-05, -0.01687922701239586, -0.10487914085388184, -0.03316032886505127, -0.0006383656873367727, -0.00070953369140625, -1.33514404296875e-05, -0.16022396087646484, -8.797609189059585e-05, -9.5367431640625e-06, -0.16100573539733887, -5.6028297876764555e-06, -1.1920928244535389e-07, -0.00035893917083740234, 0.0, -5.125998541188892e-06, 0.0, -2.09808349609375e-05, -0.0003795623779296875, -5.7220458984375e-06, -6.198873961693607e-06, -2.861022494471399e-06, -7.152543730626348e-06, -1.311301275563892e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            BothPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.64505634112529, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7078332901000977, -0.0021038055419921875, -0.00015425519086420536, -0.013201473280787468, 0.0, -0.049121856689453125, -0.09640979766845703, -0.0004711151123046875, -0.00026332895504310727, -2.9206275939941406e-05, -0.00072479248046875, -0.000370025634765625, -0.0071125030517578125, -1.71661376953125e-05, -0.02319962903857231, -0.0977540984749794, -0.03703439235687256, -0.0006554126157425344, -0.000652313232421875, -1.33514404296875e-05, -1.922848105430603, -6.496792047983035e-05, -2.86102294921875e-05, -0.3077096939086914, -0.006612894590944052, -0.0002988576889038086, -1.1920928244535389e-07, -0.0002346038818359375, 0.0, -2.384185791015625e-06, 0.0, -4.1961669921875e-05, -0.10012435913085938, -9.5367431640625e-06, -5.7220440794480965e-06, -2.3841830625315197e-06, -5.125993993715383e-06, -6.437280717364047e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "Giveminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Give", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(Giveminions(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.671020479165598, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -1.549164891242981, -0.9361369609832764, -0.001873731380328536, -0.0006580352783203125, -3.62396240234375e-05, -0.3416445255279541, -0.00011658404400805011, -3.4332275390625e-05, -0.5483980178833008, -0.00286102294921875, -0.00017988309264183044, -0.012393825687468052, 0.0, -0.02898406982421875, -0.0832967758178711, -0.00048065185546875, -0.00027667981339618564, -2.7418136596679688e-05, -0.0007343292236328125, -0.0003337860107421875, -0.006694793701171875, -1.52587890625e-05, -0.02638993412256241, -0.09365136176347733, -0.03866457939147949, -0.0008250473765656352, -0.000675201416015625, -1.1444091796875e-05, -0.18349051475524902, -8.714169962331653e-05, -9.5367431640625e-06, -0.39751720428466797, -0.0069837565533816814, -0.00028121471405029297, -1.1920928244535389e-07, -0.000232696533203125, 0.0, -2.384185791015625e-06, 0.0, -4.1961669921875e-05, -0.10505294799804688, -9.5367431640625e-06, -5.7220440794480965e-06, -2.3841830625315197e-06, -5.006785613659304e-06, -6.556489552167477e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), EnemyPlayer())))),\n            Buff(ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(\n            MinionHasminions(), EnemyPlayer()))))]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.9190739195663795, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -1.205939531326294, -0.00021553004626184702, -1.1444091796875e-05, -0.4337158203125, -0.001979827880859375, -0.00014471904432866722, -0.01586115173995495, 0.0, -0.020298004150390625, -0.06751537322998047, -0.000530242919921875, -0.00023495811910834163, -2.7179718017578125e-05, -0.0007305145263671875, -0.0003376007080078125, -0.007701873779296875, -1.52587890625e-05, -0.022019430994987488, -0.09804677963256836, -0.03476309776306152, -0.000653982104267925, -0.0006351470947265625, -1.1444091796875e-05, -0.18032264709472656, -7.915472815511748e-05, -7.62939453125e-06, -1.1915531158447266, -0.0006160736083984375, -0.0001399509492330253, -0.014734744094312191, 0.0, -0.06652450561523438, -0.1741495132446289, -0.0004863739013671875, -0.0002288790710736066, -3.0994415283203125e-05, -0.000720977783203125, -0.0003147125244140625, -0.009792327880859375, -1.71661376953125e-05, -0.016935357823967934, -0.10532492399215698, -0.032978057861328125, -0.0006431340589188039, -0.00070953369140625, -1.1444091796875e-05, -0.1619967222213745, -8.761847857385874e-05, -9.5367431640625e-06, -0.16037994623184204, -5.6028297876764555e-06, -1.1920928244535389e-07, -0.00036084651947021484, 0.0, -5.125998541188892e-06, 0.0, -2.09808349609375e-05, -0.0003814697265625, -5.7220458984375e-06, -6.198873961693607e-06, -2.861022494471399e-06, -7.152543730626348e-06, -1.311301275563892e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 5, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "5", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score": -6.078495118551842, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.8830742835998535, -5.722038622479886e-06, -0.00018024444580078125, -1.3351438610698096e-05, -4.38690185546875e-05, -0.0001704692840576172, -0.00025177001953125, -0.0012006759643554688, 0.0, -0.0007332454551942647, -3.063678741455078e-05, -0.003948848694562912, -0.004632710944861174, -6.103515625e-05, -0.03957843780517578, -3.24249267578125e-05, -0.0004520416259765625, -1.2628517150878906, -0.0070037841796875, -0.0002535524545237422, -9.5367431640625e-06, -0.005183739587664604, -0.0007317066192626953, -1.9073486328125e-06, -0.006530142389237881, 0.0, -0.10181808471679688, -0.000244140625, -0.0022319555282592773, -3.814697265625e-06, -3.778909012908116e-05, -0.011454582214355469, 0.0, -0.008886673487722874, -3.24249267578125e-05, -0.0039615631103515625, -0.026057004928588867, -9.5367431640625e-06, -9.655922440288123e-06, -0.14426517486572266, -0.0001506805419921875, -0.00022125244140625, -0.01124119758605957, -2.8848648071289062e-05, -2.09808349609375e-05, -7.62939453125e-06, -0.01273166574537754, -2.491474151611328e-05, -6.29425048828125e-05, -0.015035748481750488, -1.9073486328125e-06, -1.1682510375976562e-05, 0.0, -4.38690185546875e-05, -0.8759918212890625, -0.0002899169921875, -0.00012290476297494024, -9.536738616588991e-07, -1.03711727206246e-05, -2.8132995794294402e-05, -0.3851689100265503, -5.7220458984375e-06, -0.0001010894775390625, -0.0008392333984375, -0.37486302852630615, -9.655952453613281e-06, -0.001049041748046875, -0.013875007629394531, -9.34600830078125e-05, -0.6102599501609802, -0.001070857048034668, -0.0012798309326171875, -0.0003223419189453125, -0.17143870890140533, -0.0019887122325599194, -1.0609570381348021e-05, -0.000728607177734375, -0.026775360107421875]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"hole0": "ChangeHealth", "hole1": [{"hole2": [{"hole0": "MinionHasminions", "_type": "Template46"}, {"hole0": "BothPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}, {"_type": "Template61"}], "_type": "Template30"}], "_type": "List"}], "_type": "Template6", "hole0": "Defender of Argus"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, 81, 233, "Change", "Health", "<EOS>", 321, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 104, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            BothPlayer())), 3))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.121354746548747, "score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7218809127807617, -0.7093086242675781, -0.015460968017578125, -3.671645390568301e-05, -0.05378556251525879, 0.0, -0.34350013732910156, -0.010115623474121094, -0.007813453674316406, -0.004151582717895508, -8.47575647640042e-05, -0.003078460693359375, -4.00543212890625e-05, -0.010408401489257812, -9.5367431640625e-06, -0.7528773546218872, -0.08588194102048874, -0.1475907564163208, -0.0004088870482519269, -0.0003662109375, -7.62939453125e-06, -0.19694578647613525, -8.463816629955545e-05, -0.0001049041748046875, -0.02649974822998047, -0.7395123243331909, -0.0002839564986061305, -7.152555099310121e-07, -0.00020802021026611328, 0.0, -5.006789251638111e-06, 0.0, -2.6702880859375e-05, -0.020908355712890625, -1.1444091796875e-05, -6.675716122117592e-06, -2.145764938177308e-06, -6.079665126890177e-06, -1.9073468138230965e-06]}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            picker=UserPicker(), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -3.464709329217726, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -1.1029033660888672, -0.05551635101437569, -0.002432613167911768, -0.025641415268182755, -5.435943603515625e-05, -4.768370445162873e-07, -0.019289016723632812, -1.9073486328125e-06, -1.9073486328125e-06, -0.1266803741455078, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.01177072525024414, -0.0002307891845703125, 0.0, -3.24249267578125e-05, -5.14984130859375e-05, -0.0014858245849609375, 0.0, -0.000171661376953125, 0.0, -5.924701690673828e-05, -2.9087066650390625e-05, -4.1961669921875e-05, -5.14984130859375e-05, 0.0, -0.00010895729064941406, 0.0, -2.6702880859375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.072883515007561e-05, 0.0, -0.6094523072242737, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            picker=UserPicker(), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -3.7638859625757277, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -1.1029033660888672, -0.05551635101437569, -0.002432613167911768, -0.025641415268182755, -5.435943603515625e-05, -4.768370445162873e-07, -0.019289016723632812, -1.9073486328125e-06, -1.9073486328125e-06, -0.1266803741455078, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.01177072525024414, -0.0002307891845703125, 0.0, -3.24249267578125e-05, -5.14984130859375e-05, -0.0014858245849609375, 0.0, -0.000171661376953125, 0.0, -5.924701690673828e-05, -2.9087066650390625e-05, -4.1961669921875e-05, -5.14984130859375e-05, 0.0, -0.00010895729064941406, 0.0, -2.6702880859375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.072883515007561e-05, 0.0, -0.9086117744445801, -1.71661376953125e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give(ChangeHealth(1)),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -4.756673367493931, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -0.8027544021606445, -0.08044719696044922, -0.004413008689880371, -7.05718994140625e-05, -1.4913616180419922, -0.0005092620849609375, -0.09839474409818649, -1.9073486328125e-06, -0.006361526902765036, -9.894371032714844e-06, 0.0, -0.00066375732421875, -5.7220458984375e-06, -2.47955322265625e-05, -0.012605667114257812, -9.1552734375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.003420591354370117, -5.91278076171875e-05, 0.0, -0.0077877044677734375, 0.0, -1.3828277587890625e-05, 0.0, -2.09808349609375e-05, -2.288818359375e-05, -1.33514404296875e-05, -8.344650268554688e-06, 0.0, -0.7390097379684448, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give(ChangeHealth(1)),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -4.768605740540806, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -0.8027544021606445, -0.08044719696044922, -0.004413008689880371, -7.05718994140625e-05, -1.4913616180419922, -0.0005092620849609375, -0.09839474409818649, -1.9073486328125e-06, -0.006361526902765036, -9.894371032714844e-06, 0.0, -0.00066375732421875, -5.7220458984375e-06, -2.47955322265625e-05, -0.012605667114257812, -9.1552734375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.003420591354370117, -5.91278076171875e-05, 0.0, -0.0077877044677734375, 0.0, -1.3828277587890625e-05, 0.0, -2.09808349609375e-05, -2.288818359375e-05, -1.33514404296875e-05, -8.344650268554688e-06, 0.0, -0.750930666923523, -1.1444091796875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "battlecry", "value": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -4.835687019180561, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -2.150507926940918, 0.0, -0.14996910095214844, -3.814697265625e-05, -0.0009613037109375, -0.1269378662109375, -0.047707557678222656, -0.004573822021484375, -0.016201019287109375, -3.814697265625e-06, -0.01997089385986328, -1.1444091796875e-05, -0.01427459716796875, -0.011678695678710938, -0.00147247314453125, -0.000670313835144043, -1.9073486328125e-06, -0.00066375732421875, -0.0007458925247192383, -3.814697265625e-06, -0.23275457322597504, -2.288818359375e-05, -0.00272369384765625, -0.000152587890625, -0.00170135498046875, -7.62939453125e-06, -0.0013085603713989258, -0.013602375984191895, -1.1444091796875e-05, -0.03835129365324974, -0.005199432373046875, -0.000362396240234375, -0.05764961242675781, -0.000457763671875, -0.010931134223937988, -0.00015854835510253906, -9.536738616588991e-07, -0.5883216857910156, -0.014865875244140625, -0.0001888275146484375, -9.5367431640625e-06, -7.486343383789062e-05, -0.0004228353500366211, 0.0, -6.67572021484375e-05, -0.18354225158691406, -0.04118156433105469, -4.2438507080078125e-05, -9.5367431640625e-06, -0.0006313323974609375, -3.814697265625e-06, -0.0025014877319335938, -0.0003300905227661133, 0.0, -5.340576171875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -0.0018091201782226562, -2.47955322265625e-05, -8.58306884765625e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0010824203491210938, -0.0002140998694812879, -1.1920928244535389e-07, -1.9073486328125e-05, -0.00019073486328125, -1.9073486328125e-06, -1.71661376953125e-05, -1.1444091796875e-05, -0.0003509521484375, 0.0, -0.005761146545410156, -3.0517578125e-05, -4.9591064453125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00409698486328125, 0.0, -0.0044651031494140625, -0.0007572174072265625, 0.0, -5.841255187988281e-06, 0.0, -2.86102294921875e-05, -3.24249267578125e-05, -2.09808349609375e-05, -1.263618378288811e-05, 0.0, -0.5372097492218018, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template67"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Bounce", "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 109, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            picker=UserPicker(), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -4.885820096623149, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -1.9775218963623047, -1.1444091796875e-05, 0.0, 0.0, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -0.0190277099609375, -1.71661376953125e-05, -0.02530384063720703, -7.62939453125e-06, -0.000732421875, -0.018051505088806152, -9.34600830078125e-05, -0.000640869140625, -0.06007575988769531, -2.86102294921875e-05, -0.5129767656326294, 0.0, -0.3692293167114258, -0.919184684753418, -0.06240975111722946, -0.002803456038236618, -0.020260101184248924, -5.245208740234375e-05, -5.960462772236497e-07, -0.024017333984375, -1.9073486328125e-06, -1.9073486328125e-06, -0.13154983520507812, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.011298656463623047, -0.0002288818359375, 0.0, -3.24249267578125e-05, -4.76837158203125e-05, -0.001560211181640625, 0.0, -0.0001659393310546875, 0.0, -5.543231964111328e-05, -2.7179718017578125e-05, -4.00543212890625e-05, -5.14984130859375e-05, 0.0, -0.00010704994201660156, 0.0, -2.6702880859375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.072883515007561e-05, 0.0, -0.6084145903587341, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "battlecry", "value": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.287212766956593, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -2.150507926940918, 0.0, -0.14996910095214844, -3.814697265625e-05, -0.0009613037109375, -0.1269378662109375, -0.047707557678222656, -0.004573822021484375, -0.016201019287109375, -3.814697265625e-06, -0.01997089385986328, -1.1444091796875e-05, -0.01427459716796875, -0.011678695678710938, -0.00147247314453125, -0.000670313835144043, -1.9073486328125e-06, -0.00066375732421875, -0.0007458925247192383, -3.814697265625e-06, -0.23275457322597504, -2.288818359375e-05, -0.00272369384765625, -0.000152587890625, -0.00170135498046875, -7.62939453125e-06, -0.0013085603713989258, -0.013602375984191895, -1.1444091796875e-05, -0.03835129365324974, -0.005199432373046875, -0.000362396240234375, -0.05764961242675781, -0.000457763671875, -0.010931134223937988, -0.00015854835510253906, -9.536738616588991e-07, -0.5883216857910156, -0.014865875244140625, -0.0001888275146484375, -9.5367431640625e-06, -7.486343383789062e-05, -0.0004228353500366211, 0.0, -6.67572021484375e-05, -0.18354225158691406, -0.04118156433105469, -4.2438507080078125e-05, -9.5367431640625e-06, -0.0006313323974609375, -3.814697265625e-06, -0.0025014877319335938, -0.0003300905227661133, 0.0, -5.340576171875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -0.0018091201782226562, -2.47955322265625e-05, -8.58306884765625e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.0010824203491210938, -0.0002140998694812879, -1.1920928244535389e-07, -1.9073486328125e-05, -0.00019073486328125, -1.9073486328125e-06, -1.71661376953125e-05, -1.1444091796875e-05, -0.0003509521484375, 0.0, -0.005761146545410156, -3.0517578125e-05, -4.9591064453125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00409698486328125, 0.0, -0.0044651031494140625, -0.0007572174072265625, 0.0, -5.841255187988281e-06, 0.0, -2.86102294921875e-05, -3.24249267578125e-05, -2.09808349609375e-05, -1.263618378288811e-05, 0.0, -0.9887412190437317, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole4": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 210, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(3))]), SelfSelector(condition=IsType(\n            MINION_TYPE.DRAGON))))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -5.305928498771181, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -3.3031415939331055, -0.15900230407714844, -0.002077460289001465, -0.0003414154052734375, -5.7220458984375e-06, -0.024084091186523438, -5.340576171875e-05, -0.0028743743896484375, -0.0059795379638671875, -0.000606536865234375, -0.00012099742889404297, 0.0, -0.0003936290740966797, -0.0015164613723754883, 0.0, -0.02941581979393959, -1.9073486328125e-06, -0.000225067138671875, -0.0008678436279296875, -0.00025177001953125, -7.62939453125e-06, -0.0020772218704223633, -0.013454556465148926, -3.814697265625e-06, -0.41620129346847534, -0.014494895935058594, -0.000347137451171875, -0.012968659400939941, -0.0003452301025390625, -1.9073486328125e-06, -0.00022125244140625, -1.33514404296875e-05, -5.14984130859375e-05, -0.17751789093017578, -0.0003833770751953125, -0.08439254760742188, -0.0001926422119140625, -5.7220458984375e-06, -2.09808349609375e-05, -0.0013030767440795898, -0.0004068613052368164, -2.3841855067985307e-07, -0.0001850128173828125, -0.0074825286865234375, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, -0.019298553466796875, -3.24249267578125e-05, -6.103515625e-05, 0.0, -1.5974044799804688e-05, 0.0, -4.38690185546875e-05, -7.2479248046875e-05, -3.814697265625e-06, -1.263618378288811e-05, 0.0, -0.5494153499603271, -7.62939453125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "PlayerSelector", "hole0": "Give", "hole1": [{"hole0": "WeaponSelector", "_type": "Template46"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Give", "<EOS>", 320, 93, 255, "Weapon", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give(WeaponSelector()),\n            PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.546287771579927, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -0.8027544021606445, -0.08044719696044922, -0.004413008689880371, -7.05718994140625e-05, -0.7031259536743164, -0.0006351470947265625, -1.0143694877624512, -0.11706042289733887, -2.3841855067985307e-07, -0.5093845129013062, 0.0, 0.0, -0.00799560546875, -7.62939453125e-06, -1.71661376953125e-05, -0.05180931091308594, -2.47955322265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.003153204917907715, -9.918212890625e-05, 0.0, -0.0055408477783203125, 0.0, -1.3947486877441406e-05, 0.0, -2.288818359375e-05, -2.09808349609375e-05, -1.52587890625e-05, -8.463859558105469e-06, 0.0, -0.7366963624954224, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "PlayerSelector", "hole0": "Give", "hole1": [{"hole0": "WeaponSelector", "_type": "Template46"}], "_type": "Template22"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Give", "<EOS>", 320, 93, 255, "Weapon", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give(WeaponSelector()),\n            PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -5.564182039615815, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -0.8027544021606445, -0.08044719696044922, -0.004413008689880371, -7.05718994140625e-05, -0.7031259536743164, -0.0006351470947265625, -1.0143694877624512, -0.11706042289733887, -2.3841855067985307e-07, -0.5093845129013062, 0.0, 0.0, -0.00799560546875, -7.62939453125e-06, -1.71661376953125e-05, -0.05180931091308594, -2.47955322265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.003153204917907715, -9.918212890625e-05, 0.0, -0.0055408477783203125, 0.0, -1.3947486877441406e-05, 0.0, -2.288818359375e-05, -2.09808349609375e-05, -1.52587890625e-05, -8.463859558105469e-06, 0.0, -0.754581093788147, -9.5367431640625e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole4": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template20"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 116, 210, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(3))]), SelfSelector(condition=IsType(\n            MINION_TYPE.DRAGON))))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.724576682116975, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -3.3031415939331055, -0.15900230407714844, -0.002077460289001465, -0.0003414154052734375, -5.7220458984375e-06, -0.024084091186523438, -5.340576171875e-05, -0.0028743743896484375, -0.0059795379638671875, -0.000606536865234375, -0.00012099742889404297, 0.0, -0.0003936290740966797, -0.0015164613723754883, 0.0, -0.02941581979393959, -1.9073486328125e-06, -0.000225067138671875, -0.0008678436279296875, -0.00025177001953125, -7.62939453125e-06, -0.0020772218704223633, -0.013454556465148926, -3.814697265625e-06, -0.41620129346847534, -0.014494895935058594, -0.000347137451171875, -0.012968659400939941, -0.0003452301025390625, -1.9073486328125e-06, -0.00022125244140625, -1.33514404296875e-05, -5.14984130859375e-05, -0.17751789093017578, -0.0003833770751953125, -0.08439254760742188, -0.0001926422119140625, -5.7220458984375e-06, -2.09808349609375e-05, -0.0013030767440795898, -0.0004068613052368164, -2.3841855067985307e-07, -0.0001850128173828125, -0.0074825286865234375, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.000308990478515625, 0.0, -0.019298553466796875, -3.24249267578125e-05, -6.103515625e-05, 0.0, -1.5974044799804688e-05, 0.0, -4.38690185546875e-05, -7.2479248046875e-05, -3.814697265625e-06, -1.263618378288811e-05, 0.0, -0.9680711627006531, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole2": "SelfSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(3))]), SelfSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -5.869276490328048, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -2.056389808654785, -0.010625958442687988, -0.0025140047073364258, -5.7220458984375e-06, -0.5390939712524414, -0.000820159912109375, -0.10671138763427734, -0.0020732879638671875, -0.002197265625, -0.0006104707717895508, 0.0, -0.0013092756271362305, -0.001100778579711914, -1.9073486328125e-06, -0.08608123660087585, -1.9073486328125e-06, -0.00022125244140625, -0.0009059906005859375, -0.0003833770751953125, -1.9073486328125e-06, -0.005803346633911133, -0.01233983039855957, -5.7220458984375e-06, -0.0685739517211914, -0.01944732666015625, -0.0006084442138671875, -0.11151611804962158, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -3.62396240234375e-05, -0.000637054443359375, -1.33514404296875e-05, 0.0, -0.17166423797607422, -0.0016471147537231445, -1.52587890625e-05, -2.6702880859375e-05, -0.0428314208984375, -0.000240325927734375, -0.0006809234619140625, -0.0001373291015625, -0.35777056217193604, 0.0, -0.0004100799560546875, -1.9073486328125e-06, -0.024761438369750977, -0.004245758056640625, 0.0, -0.027681350708007812, 0.0, -8.344650268554688e-06, 0.0, -2.47955322265625e-05, -3.4332275390625e-05, -1.33514404296875e-05, -6.4373016357421875e-06, 0.0, -0.6984387636184692, -1.33514404296875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "combo", "value": {"hole2": "SelfSelector", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template22", "hole0": "Give"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 2, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 219, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(3))]), SelfSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "score": -5.9620014096472005, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -2.056389808654785, -0.010625958442687988, -0.0025140047073364258, -5.7220458984375e-06, -0.5390939712524414, -0.000820159912109375, -0.10671138763427734, -0.0020732879638671875, -0.002197265625, -0.0006104707717895508, 0.0, -0.0013092756271362305, -0.001100778579711914, -1.9073486328125e-06, -0.08608123660087585, -1.9073486328125e-06, -0.00022125244140625, -0.0009059906005859375, -0.0003833770751953125, -1.9073486328125e-06, -0.005803346633911133, -0.01233983039855957, -5.7220458984375e-06, -0.0685739517211914, -0.01944732666015625, -0.0006084442138671875, -0.11151611804962158, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -3.62396240234375e-05, -0.000637054443359375, -1.33514404296875e-05, 0.0, -0.17166423797607422, -0.0016471147537231445, -1.52587890625e-05, -2.6702880859375e-05, -0.0428314208984375, -0.000240325927734375, -0.0006809234619140625, -0.0001373291015625, -0.35777056217193604, 0.0, -0.0004100799560546875, -1.9073486328125e-06, -0.024761438369750977, -0.004245758056640625, 0.0, -0.027681350708007812, 0.0, -8.344650268554688e-06, 0.0, -2.47955322265625e-05, -3.4332275390625e-05, -1.33514404296875e-05, -6.4373016357421875e-06, 0.0, -0.7911770343780518, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "battlecry", "value": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"hole2": [{"hole0": "Count", "hole1": "CardSelector", "_type": "Template31"}], "hole0": "Not", "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole3": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template35"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 84, 240, "Not", "<EOS>", 25, 186, "Greater", "Than", "<EOS>", 320, 82, 234, "Count", "<EOS>", "Card", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(\n            Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -6.009920329117904, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -2.150507926940918, 0.0, -0.14996910095214844, -3.814697265625e-05, -0.0009613037109375, -0.1269378662109375, -0.047707557678222656, -0.004573822021484375, -0.016201019287109375, -3.814697265625e-06, -0.01997089385986328, -1.1444091796875e-05, -0.01427459716796875, -0.011678695678710938, -0.00147247314453125, -0.000670313835144043, -1.9073486328125e-06, -0.00066375732421875, -0.0007458925247192383, -3.814697265625e-06, -0.23275457322597504, -2.288818359375e-05, -0.00272369384765625, -0.000152587890625, -0.00170135498046875, -7.62939453125e-06, -0.0013085603713989258, -0.013602375984191895, -1.1444091796875e-05, -0.03835129365324974, -0.005199432373046875, -0.000362396240234375, -0.05764961242675781, -0.000457763671875, -0.010931134223937988, -0.00015854835510253906, -9.536738616588991e-07, -0.8325824737548828, -0.1595630645751953, -0.7882915735244751, -0.0006313323974609375, -0.0001087188720703125, 0.0, -0.02167510986328125, -0.006112217903137207, -9.5367431640625e-06, -0.0005893707275390625, -0.015822410583496094, -0.0037975311279296875, -0.018437735736370087, -3.123283386230469e-05, -0.06254136562347412, -3.7670135498046875e-05, 0.0, -0.002471923828125, -1.33514404296875e-05, -6.866455078125e-05, -0.0931692123413086, -1.9073486328125e-06, -0.0024805068969726562, -0.001613616943359375, 0.0, -1.4662741705251392e-05, 0.0, -3.0517578125e-05, -2.09808349609375e-05, -1.71661376953125e-05, -1.1682508556987159e-05, 0.0, -0.5526754856109619, -7.62939453125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "battlecry", "value": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"hole2": [{"hole0": "Count", "hole1": "CardSelector", "_type": "Template31"}], "hole0": "MinionSelector", "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole3": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Template35"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 8, "_type": "Template32"}], "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 84, 240, "Minion", "Selector", "<EOS>", 25, 186, "Greater", "Than", "<EOS>", 320, 82, 234, "Count", "<EOS>", "Card", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "8", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(3))]), SelfSelector(), MinionSelector(\n            GreaterThan(Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 8)\n", "score": -6.07172498782483, "score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -2.150507926940918, 0.0, -0.14996910095214844, -3.814697265625e-05, -0.0009613037109375, -0.1269378662109375, -0.047707557678222656, -0.004573822021484375, -0.016201019287109375, -3.814697265625e-06, -0.01997089385986328, -1.1444091796875e-05, -0.01427459716796875, -0.011678695678710938, -0.00147247314453125, -0.000670313835144043, -1.9073486328125e-06, -0.00066375732421875, -0.0007458925247192383, -3.814697265625e-06, -0.23275457322597504, -2.288818359375e-05, -0.00272369384765625, -0.000152587890625, -0.00170135498046875, -7.62939453125e-06, -0.0013085603713989258, -0.013602375984191895, -1.1444091796875e-05, -0.03835129365324974, -0.005199432373046875, -0.000362396240234375, -0.05764961242675781, -0.000457763671875, -0.010931134223937988, -0.00015854835510253906, -9.536738616588991e-07, -0.8325824737548828, -0.1595630645751953, -0.8100677728652954, -0.0037212371826171875, -1.1920928244535389e-07, -0.0070285797119140625, -1.52587890625e-05, -0.09771728515625, -0.0029363632202148438, -8.96453857421875e-05, -0.000553131103515625, -0.020032882690429688, -0.003047943115234375, -0.012771367095410824, -2.5033950805664062e-05, -0.026223182678222656, -5.4955457017058507e-05, 0.0, -0.001239776611328125, -1.33514404296875e-05, -7.2479248046875e-05, -0.08284187316894531, -1.9073486328125e-06, -0.0023441314697265625, -0.0018768310546875, 0.0, -1.454353241570061e-05, 0.0, -2.86102294921875e-05, -2.09808349609375e-05, -1.52587890625e-05, -1.1801716937043238e-05, 0.0, -0.5597138404846191, -7.62939453125e-06]}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "score": -1.4695646083327745, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -0.25267791748046875, -3.814697265625e-05, -0.02285003662109375, -5.53131103515625e-05, -3.814697265625e-05, -0.0001952543534571305, -2.3841855067985307e-07, -2.09808349609375e-05, -0.49609375, -0.0030498504638671875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"op": {"_type": "Add"}, "left": {"_type": "Template59"}, "right": {"value": {"_type": "Template64"}, "attr": "spell_damage", "_type": "Attribute"}, "_type": "BinOp"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 66, 158, 45, 122, 17, 156, 50, "spell_damage", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "score": -2.8227631328956875, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -0.25267791748046875, -3.814697265625e-05, -0.02285003662109375, -5.53131103515625e-05, -3.814697265625e-05, -0.0001952543534571305, -2.3841855067985307e-07, -2.09808349609375e-05, -1.1901493072509766, -0.015781402587890625, -0.0007266998291015625, 0.0, -0.0006494522094726562, -0.025554899126291275, -1.7881377516459906e-06, -1.1444091796875e-05, -0.2254476547241211, -0.00038909912109375, -0.03218269348144531, -0.20375633239746094, -0.046405792236328125, 0.0, -0.009654045104980469, -0.06942688673734665, 0.0, -0.032204627990722656]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "score": -2.862229122307319, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -0.6067514419555664, -7.05718994140625e-05, -0.4896240234375, -0.0001049041748046875, -0.0004596710205078125, -0.0004848951648455113, -1.1920928244535389e-07, -1.71661376953125e-05, -0.4733266830444336, -0.000713348388671875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "score": -3.4284788860158812, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -2.1646718978881836, 0.0, -1.33514404296875e-05, 0.0, -5.0187110900878906e-05, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -6.103515625e-05, -8.70227722771233e-06, 0.0, -0.28690433502197266, -4.38690185546875e-05, -0.028993606567382812, -6.103515625e-05, -4.1961669921875e-05, -0.00021980921155773103, -2.3841855067985307e-07, -2.09808349609375e-05, -0.4519634246826172, -0.0028972625732421875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"value": {"_type": "Template52"}, "attr": "<UNK>", "_type": "Attribute"}, "body": [{"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "orelse": [{"hole2": [{"hole0": "Frozen", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 17, 156, 41, "<UNK>", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 332, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.<UNK>:\n            self.target.damage(4, self)\n        else:\n            self.target.add_buff(Buff(Frozen()))\n", "score": -3.5262462114405935, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -0.6067514419555664, -7.05718994140625e-05, -0.95416259765625, -0.002864837646484375, -0.35329627990722656, -0.0002498626708984375, -0.001583099365234375, -0.050635337829589844, 0.0, -0.0002460479736328125, -0.0681161880493164, -9.5367431640625e-06, -0.0049457550048828125, -0.0001586644648341462, 0.0, -2.6702880859375e-05, -0.054042816162109375, -0.0005207061767578125, -0.000614166259765625, -0.020093917846679688, -1.9073486328125e-06, -0.003945350646972656, -0.09264382719993591, 0.0, -0.0003833770751953125, -0.012581825256347656, -0.0011577606201171875, -0.006465427577495575, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template61"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 104, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n", "score": -3.7079192912551378, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -0.25267791748046875, -3.814697265625e-05, -0.02285003662109375, -5.53131103515625e-05, -3.814697265625e-05, -0.0001952543534571305, -2.3841855067985307e-07, -2.09808349609375e-05, -2.732468605041504, -0.0050296783447265625]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"op": {"_type": "Add"}, "left": {"_type": "Template59"}, "right": {"value": {"_type": "Template64"}, "attr": "spell_damage", "_type": "Attribute"}, "_type": "BinOp"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 66, 158, 45, 122, 17, 156, 50, "spell_damage", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "score": -4.267210484008039, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -0.6067514419555664, -7.05718994140625e-05, -0.4896240234375, -0.0001049041748046875, -0.0004596710205078125, -0.0004848951648455113, -1.1920928244535389e-07, -1.71661376953125e-05, -1.271951675415039, -0.013471603393554688, -0.0007724761962890625, 0.0, -0.000461578369140625, -0.023965472355484962, -1.6689286894688848e-06, -1.33514404296875e-05, -0.17912578582763672, -0.0004119873046875, -0.031479835510253906, -0.21120262145996094, -0.04141044616699219, 0.0, -0.011014938354492188, -0.06733547896146774, 0.0, -0.02640247344970703]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "score": -4.340062670269589, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -3.3646230697631836, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.0742950439453125, -7.62939453125e-06, -5.91278076171875e-05, -0.22357654571533203, 0.0, -1.1444091796875e-05, 0.0, -7.271766662597656e-05, 0.0, -1.52587890625e-05, -1.71661376953125e-05, -0.0002193450927734375, -1.1682508556987159e-05, 0.0, -0.24351215362548828, -3.814697265625e-05, -0.023885726928710938, -5.53131103515625e-05, -4.1961669921875e-05, -0.00019227487791795284, -2.3841855067985307e-07, -2.09808349609375e-05, -0.40515708923339844, -0.0029363632202148438]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "score": -4.592246948077388, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -3.6444616317749023, 0.0, -2.1219253540039062e-05, 0.0, -5.257129669189453e-05, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -0.000186920166015625, -9.298322765971534e-06, 0.0, -0.2220134735107422, -4.1961669921875e-05, -0.019968032836914062, -4.76837158203125e-05, -3.4332275390625e-05, -0.00014996157551649958, -3.576278118089249e-07, -1.33514404296875e-05, -0.2105703353881836, -0.0021505355834960938]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"value": {"_type": "Template64"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"op": {"_type": "Add"}, "left": {"_type": "Template59"}, "right": {"value": {"_type": "Template64"}, "attr": "spell_damage", "_type": "Attribute"}, "_type": "BinOp"}], "_type": "Call"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 66, 158, 45, 122, 17, 156, 50, "spell_damage", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "score": -4.929112360453672, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -2.1646718978881836, 0.0, -1.33514404296875e-05, 0.0, -5.0187110900878906e-05, 0.0, -9.5367431640625e-06, -1.33514404296875e-05, -6.103515625e-05, -8.70227722771233e-06, 0.0, -0.28690433502197266, -4.38690185546875e-05, -0.028993606567382812, -6.103515625e-05, -4.1961669921875e-05, -0.00021980921155773103, -2.3841855067985307e-07, -2.09808349609375e-05, -1.2910900115966797, -0.015954971313476562, -0.0006809234619140625, 0.0, -0.000652313232421875, -0.025235656648874283, -1.7881377516459906e-06, -1.1444091796875e-05, -0.22680950164794922, -0.0003814697265625, -0.03313446044921875, -0.2019634246826172, -0.04719257354736328, 0.0, -0.010065078735351562, -0.06976401060819626, 0.0, -0.03255653381347656]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"id": "wrath", "_type": "Name"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 41, "player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 73, 186, "wrath", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(self.target.player.minions) > 0:\n            self.target.damage(player.effective_spell_damage(1), wrath)\n", "score": -5.321650510944892, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -1.233255386352539, -0.0001811981201171875, -0.027772903442382812, -3.0517578125e-05, -7.62939453125e-05, -0.0018852625507861376, 0.0, -6.67572021484375e-05, -0.21204376220703125, -0.000858306884765625, -0.05463600158691406, -0.0016326904296875, -0.03011608123779297, -0.000202178955078125, -0.0006580352783203125, -8.0108642578125e-05, -0.000125885009765625, -1.1444091796875e-05, -0.0042383442632853985, -0.00014447355351876467, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.00171661376953125, 0.0, -0.3820972442626953, -0.006966114044189453, 0.0, -0.0007477998733520508, 0.0, -4.9591064453125e-05, -0.9426488876342773, 0.0, -2.09808349609375e-05, -0.0039157867431640625, -0.3402099609375, -0.0001964569091796875, -0.0086669921875, -0.03244563937187195, 0.0, -1.71661376953125e-05, -0.16120433807373047, -2.47955322265625e-05, -4.1961669921875e-05, -7.188319432316348e-05, 0.0, -0.0009001865983009338, 0.0, -0.15717506408691406, -0.0004425048828125, -0.42336225509643555, -2.110004425048828e-05]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"id": "wrath", "_type": "Name"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 73, 186, "wrath", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) >= 1:\n            minion.damage(player.effective_spell_damage(1), wrath)\n", "score": -5.651842885945356, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -1.233255386352539, -0.0001811981201171875, -0.027772903442382812, -3.0517578125e-05, -7.62939453125e-05, -0.0018852625507861376, 0.0, -6.67572021484375e-05, -0.21204376220703125, -0.000858306884765625, -0.05463600158691406, -0.0016326904296875, -0.03011608123779297, -0.000202178955078125, -0.0006580352783203125, -8.0108642578125e-05, -0.000125885009765625, -1.1444091796875e-05, -0.0042383442632853985, -0.00014447355351876467, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.00171661376953125, 0.0, -1.1598424911499023, 0.0, -0.00014328955148812383, -1.1920928244535389e-07, -0.002262115478515625, 0.0, -0.003870604559779167, 0.0, -3.62396240234375e-05, -0.24332904815673828, -2.47955322265625e-05, -0.021559715270996094, -8.96453857421875e-05, -0.2956352233886719, -4.00543212890625e-05, -0.10000038146972656, -0.0006103515625, -0.12992669641971588, -0.00011169286881340668, -2.5033679776242934e-05, 0.0, -2.47955322265625e-05, -0.10728931427001953, -2.6702880859375e-05, -2.47955322265625e-05, -2.3007391064311378e-05, -1.1920928244535389e-07, -0.0007333047688007355, 0.0, -0.4728689193725586, -0.00130462646484375, -0.25160062313079834, -1.537799835205078e-05]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"_type": "Template39"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) >= 1:\n            minion.damage(player.effective_spell_damage(1), self)\n", "score": -5.913001352284468, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -1.170095443725586, -5.7220458984375e-06, 0.0, -8.797645568847656e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -4.5299530029296875e-06, 0.0, -1.233255386352539, -0.0001811981201171875, -0.027772903442382812, -3.0517578125e-05, -7.62939453125e-05, -0.0018852625507861376, 0.0, -6.67572021484375e-05, -0.21204376220703125, -0.000858306884765625, -0.05463600158691406, -0.0016326904296875, -0.03011608123779297, -0.000202178955078125, -0.0006580352783203125, -8.0108642578125e-05, -0.000125885009765625, -1.1444091796875e-05, -0.0042383442632853985, -0.00014447355351876467, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.00171661376953125, 0.0, -1.1598424911499023, 0.0, -0.00014328955148812383, -1.1920928244535389e-07, -0.002262115478515625, 0.0, -0.003870604559779167, 0.0, -3.62396240234375e-05, -0.24332904815673828, -2.47955322265625e-05, -0.021559715270996094, -8.96453857421875e-05, -0.2956352233886719, -4.00543212890625e-05, -0.10000038146972656, -0.0006103515625, -0.12992669641971588, -0.00011169286881340668, -2.5033679776242934e-05, 0.0, -2.47955322265625e-05, -0.10728931427001953, -2.6702880859375e-05, -2.47955322265625e-05, -2.3007391064311378e-05, -1.1920928244535389e-07, -0.0007333047688007355, 0.0, -0.9869480133056641]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}, {"test": {"left": {"_type": "Template52"}, "ops": [{"_type": "IsNot"}], "comparators": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 133, 173, 21, 166, 41, 317, 13, 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) >= 1:\n            minion.damage(player.effective_spell_damage(1), self)\n        if self.target is not game.other_player.hero:\n            game.other_player.hero.damage(player.effective_spell_damage(1),\n                self)\n", "score": -7.395986768706429, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -1.7929191589355469, -8.7738037109375e-05, -0.0009822845458984375, -4.57763671875e-05, -4.1961669921875e-05, -0.08777512609958649, 0.0, -0.0006237030029296875, -0.09057426452636719, -0.0058383941650390625, -0.6725215911865234, -0.021162033081054688, -0.0001506805419921875, -0.0004673004150390625, -0.10613632202148438, -0.000186920166015625, -0.00054168701171875, -5.7220458984375e-06, -0.010442433878779411, -0.0005612074746750295, -9.5367431640625e-06, -1.33514404296875e-05, 0.0, -0.0004749298095703125, 0.0, -0.8481407165527344, 0.0, -0.00016629695892333984, -1.1920928244535389e-07, -0.0017666816711425781, 0.0, -0.003079173620790243, 0.0, -3.814697265625e-05, -0.1859893798828125, -2.47955322265625e-05, -0.0248870849609375, -3.4332275390625e-05, -0.1322765350341797, -4.76837158203125e-05, -0.08719158172607422, -0.000354766845703125, -0.06493040919303894, -3.4689302992774174e-05, -8.260874164989218e-05, 0.0, -2.47955322265625e-05, -0.09869956970214844, -2.47955322265625e-05, -1.9073486328125e-05, -2.0980833141948096e-05, -2.3841855067985307e-07, -0.0006674453616142273, 0.0, -0.6172695159912109, -0.052188873291015625, -0.0005664825439453125, -0.00360107421875, -0.0024890899658203125, -0.15745162963867188, -9.5367431640625e-05, -0.7057790756225586, -9.34600830078125e-05, -0.023006439208984375, 0.0, -0.5158214569091797, -1.9073486328125e-06, -0.024988174438476562, 0.0, -0.00018155574798583984, -1.1920928244535389e-07, -0.019628167152404785, 0.0, -0.048818234354257584, -3.814689989667386e-06, -0.0007572174072265625, -0.00012969970703125, -7.62939453125e-06, -0.014505386352539062, 0.0, -0.03357124328613281, -3.814697265625e-06, -0.18051910400390625, -5.7220458984375e-06, -0.0006314511992968619, -1.1920922133867862e-06, -0.004627346992492676, -2.3841855067985307e-07, -0.0018274508183822036, -7.748573807475623e-06, -0.023993734270334244, 0.0, -0.0008106231689453125, -0.005803108215332031, -1.52587890625e-05, -0.000148773193359375, -3.337849921081215e-05, -1.1920928244535389e-07, -0.0004696175456047058, 0.0, -0.021523475646972656]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Earth Shock"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}, {"test": {"left": {"_type": "Template52"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"_type": "Template52"}, "attr": "divine_shield", "_type": "Attribute"}], "_type": "Compare"}, "body": [{"hole2": [{"hole2": 1, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 335, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 133, 173, 21, 166, 41, 317, 12, 320, 65, 156, 41, "divine_shield", "<EOS>", 332, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        if len(game.other_player.minions) >= 1:\n            minion.damage(player.effective_spell_damage(1), self)\n        if self.target is self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(1), self)\n", "score": -8.10362637557406, "score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -1.7929191589355469, -8.7738037109375e-05, -0.0009822845458984375, -4.57763671875e-05, -4.1961669921875e-05, -0.08777512609958649, 0.0, -0.0006237030029296875, -0.09057426452636719, -0.0058383941650390625, -0.6725215911865234, -0.021162033081054688, -0.0001506805419921875, -0.0004673004150390625, -0.10613632202148438, -0.000186920166015625, -0.00054168701171875, -5.7220458984375e-06, -0.010442433878779411, -0.0005612074746750295, -9.5367431640625e-06, -1.33514404296875e-05, 0.0, -0.0004749298095703125, 0.0, -0.8481407165527344, 0.0, -0.00016629695892333984, -1.1920928244535389e-07, -0.0017666816711425781, 0.0, -0.003079173620790243, 0.0, -3.814697265625e-05, -0.1859893798828125, -2.47955322265625e-05, -0.0248870849609375, -3.4332275390625e-05, -0.1322765350341797, -4.76837158203125e-05, -0.08719158172607422, -0.000354766845703125, -0.06493040919303894, -3.4689302992774174e-05, -8.260874164989218e-05, 0.0, -2.47955322265625e-05, -0.09869956970214844, -2.47955322265625e-05, -1.9073486328125e-05, -2.0980833141948096e-05, -2.3841855067985307e-07, -0.0006674453616142273, 0.0, -0.6172695159912109, -0.052188873291015625, -0.0005664825439453125, -0.00360107421875, -0.0024890899658203125, -0.15745162963867188, -9.5367431640625e-05, -0.7170238494873047, -0.003826141357421875, -0.0065631866455078125, -1.9073486328125e-06, -0.36457157135009766, -0.7650651931762695, -7.62939453125e-06, -2.47955322265625e-05, -0.03977394104003906, -3.814697265625e-06, -0.04515266418457031, -0.017257604748010635, 0.0, -2.86102294921875e-05, -0.32904529571533203, -3.814697265625e-06, -0.0001049041748046875, -6.771087646484375e-05, 0.0, -0.0015732347965240479, 0.0, -0.04525947570800781]}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -12.107978072787375, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -1.2139215469360352, -1.9073486328125e-05, -0.013304829597473145, -0.00019657611846923828, -0.00113677978515625, -0.7202739715576172, -0.0001277923583984375, -0.07480049133300781, -3.814697265625e-06, -0.0009975433349609375, 0.0, -0.1712331771850586, -0.004290580749511719, 0.0, -0.019803166389465332, -0.00026988983154296875, -0.6079893112182617, -0.003078460693359375, -0.001312255859375, -0.000362396240234375, 0.0, -0.052620887756347656, 0.0, -0.08539772033691406, 0.0, -0.10063934326171875, -3.576278118089249e-07, -0.012943267822265625, -0.06480598449707031, -0.00029754638671875, -0.000408172607421875, 0.0, -2.09808349609375e-05, 0.0, -0.0633993148803711, -1.9073486328125e-05, -0.2064208984375, -0.000118255615234375, -0.5634365081787109, 0.0, -0.09856212139129639, -3.814697265625e-06, -0.1554715633392334, -2.3841855067985307e-07, -0.005986331962049007, -2.3841855067985307e-07, -0.49890434741973877, 0.0, -0.011609257198870182, -3.576278118089249e-07, -0.07342910766601562, -0.36557865142822266, -0.0012798309326171875, -0.0012302777031436563, -1.1920922133867862e-06, -0.9034175872802734, -1.1444091796875e-05, -0.0003871917724609375, -1.33514404296875e-05, -0.000965118408203125, -3.814697265625e-06, -0.00019895873265340924, -0.00017940998077392578, -0.0015482902526855469, -0.00023651123046875, -0.0009212493896484375, -0.002841949462890625, -3.0517578125e-05, -0.009594440460205078, -0.0005083084106445312, -0.0059947967529296875, -0.27135658264160156, -0.0006256103515625, -2.09808349609375e-05, -0.017129898071289062, 0.0, -0.0044231414794921875, -0.25823938846588135, -0.0003854036331176758, -0.08373677730560303, -1.9073486328125e-06, -0.12671470642089844, -0.001007080078125, -3.24249267578125e-05, -0.5130820274353027, 0.0, -0.008671760559082031, -0.0001430511474609375, -0.0005102157592773438, -0.000873565673828125, -8.0108642578125e-05, -0.0124053955078125, -3.814697265625e-06, -0.15319585800170898, -3.814697265625e-06, -0.00067901611328125, -0.0026493072509765625, -2.86102294921875e-05, -1.9073486328125e-06, -0.001255035400390625, 0.0, -0.00521087646484375, -0.12556731700897217, -0.0001583099365234375, -0.12630581855773926, -1.9073486328125e-06, -0.0094451904296875, -0.0010986328125, -5.7220458984375e-05, -0.5971719026565552, -1.9073486328125e-06, -0.0033321380615234375, -5.53131103515625e-05, -0.0003376007080078125, -0.0010728836059570312, -5.7220458984375e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.current_player += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -12.305428165839707, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -1.2139215469360352, -1.9073486328125e-05, -0.013304829597473145, -0.00019657611846923828, -0.00113677978515625, -0.7202739715576172, -0.0001277923583984375, -0.07480049133300781, -3.814697265625e-06, -0.0009975433349609375, 0.0, -0.1712331771850586, -0.004290580749511719, 0.0, -0.019803166389465332, -0.00026988983154296875, -0.6079893112182617, -0.003078460693359375, -0.001312255859375, -0.000362396240234375, 0.0, -0.052620887756347656, 0.0, -0.08539772033691406, 0.0, -0.10063934326171875, -3.576278118089249e-07, -0.012943267822265625, -0.06480598449707031, -0.00029754638671875, -0.000408172607421875, 0.0, -2.09808349609375e-05, 0.0, -0.0633993148803711, -1.9073486328125e-05, -1.7603683471679688, 0.0, -0.137701153755188, -1.9073486328125e-06, -0.36078715324401855, -1.1920928244535389e-07, -0.03260672092437744, 0.0, -0.19750630855560303, 0.0, -0.006648063659667969, -0.16630840301513672, -0.0031576156616210938, -0.003599673043936491, -8.344646857949556e-07, -0.4167499542236328, -5.7220458984375e-06, -0.0003452301025390625, -1.1444091796875e-05, -0.0006160736083984375, -3.814697265625e-06, -0.0001728520728647709, -0.0002671480178833008, -0.0013554096221923828, -0.0002460479736328125, -0.0011348724365234375, -0.00223541259765625, -2.6702880859375e-05, -0.008903264999389648, -0.00045490264892578125, -0.0067005157470703125, -0.2788124084472656, -0.000545501708984375, -1.9073486328125e-05, -0.021465301513671875, 0.0, -0.0043010711669921875, -0.2509121894836426, -0.00041687488555908203, -0.08157062530517578, -1.9073486328125e-06, -0.10040855407714844, -0.0009174346923828125, -3.24249267578125e-05, -0.5415033102035522, 0.0, -0.008599281311035156, -0.00014495849609375, -0.000499725341796875, -0.0008068084716796875, -7.82012939453125e-05, -0.011824607849121094, -3.814697265625e-06, -0.1517014503479004, -5.7220458984375e-06, -0.000682830810546875, -0.0026302337646484375, -2.86102294921875e-05, -1.9073486328125e-06, -0.001251220703125, 0.0, -0.0051898956298828125, -0.12543761730194092, -0.000156402587890625, -0.12707459926605225, -1.9073486328125e-06, -0.009332656860351562, -0.0010986328125, -5.7220458984375e-05, -0.5931789875030518, -1.9073486328125e-06, -0.0033397674560546875, -5.53131103515625e-05, -0.000335693359375, -0.001068115234375, -5.7220458984375e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -12.61939181170186, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -0.22674942016601562, -0.00011444091796875, -0.41672229766845703, 0.0, -0.06016254425048828, -3.814697265625e-06, -0.1693476438522339, -2.3841855067985307e-07, -0.00665306905284524, -2.3841855067985307e-07, -0.46151864528656006, 0.0, -0.016834819689393044, -3.576278118089249e-07, -0.0655813217163086, -0.367889404296875, -0.0013294219970703125, -0.0011106388410553336, -1.1920922133867862e-06, -0.7188901901245117, -1.1444091796875e-05, -0.0004253387451171875, -1.33514404296875e-05, -0.00092315673828125, -3.814697265625e-06, -0.00019669378525577486, -0.00018322467803955078, -0.0015501976013183594, -0.0002193450927734375, -0.0009441375732421875, -0.0028820037841796875, -3.0517578125e-05, -0.009391069412231445, -0.00051116943359375, -0.005977630615234375, -0.27373313903808594, -0.0006237030029296875, -2.09808349609375e-05, -0.01745319366455078, 0.0, -0.0044498443603515625, -0.258365273475647, -0.0003911256790161133, -0.08325028419494629, -1.9073486328125e-06, -0.12683677673339844, -0.000995635986328125, -3.24249267578125e-05, -0.510399341583252, 0.0, -0.0086822509765625, -0.0001430511474609375, -0.0005102157592773438, -0.0008792877197265625, -8.0108642578125e-05, -0.012569427490234375, -3.814697265625e-06, -0.15238142013549805, -3.814697265625e-06, -0.00067901611328125, -0.0026493072509765625, -2.86102294921875e-05, -1.9073486328125e-06, -0.00125885009765625, 0.0, -0.0052032470703125, -0.12552917003631592, -0.0001583099365234375, -0.1262209415435791, -1.9073486328125e-06, -0.009441375732421875, -0.0010986328125, -5.7220458984375e-05, -0.5975209474563599, -1.9073486328125e-06, -0.003330230712890625, -5.53131103515625e-05, -0.0003376007080078125, -0.0010738372802734375, -5.7220458984375e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('minion_played', self._reveal)\n", "score": -12.711411681796164, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -1.2139215469360352, -1.9073486328125e-05, -0.013304829597473145, -0.00019657611846923828, -0.00113677978515625, -0.7202739715576172, -0.0001277923583984375, -0.07480049133300781, -3.814697265625e-06, -0.0009975433349609375, 0.0, -0.1712331771850586, -0.004290580749511719, 0.0, -0.019803166389465332, -0.00026988983154296875, -0.6079893112182617, -0.003078460693359375, -0.001312255859375, -0.000362396240234375, 0.0, -0.052620887756347656, 0.0, -0.08539772033691406, 0.0, -0.10063934326171875, -3.576278118089249e-07, -0.012943267822265625, -0.06480598449707031, -0.00029754638671875, -0.000408172607421875, 0.0, -2.09808349609375e-05, 0.0, -0.0633993148803711, -1.9073486328125e-05, -0.2064208984375, -0.000118255615234375, -0.5634365081787109, 0.0, -0.09856212139129639, -3.814697265625e-06, -0.1554715633392334, -2.3841855067985307e-07, -0.005986331962049007, -2.3841855067985307e-07, -0.49890434741973877, 0.0, -0.011609257198870182, -3.576278118089249e-07, -0.07342910766601562, -0.36557865142822266, -0.0012798309326171875, -0.0012302777031436563, -1.1920922133867862e-06, -0.9034175872802734, -1.1444091796875e-05, -0.0003871917724609375, -1.33514404296875e-05, -0.000965118408203125, -3.814697265625e-06, -0.00019895873265340924, -0.00017940998077392578, -0.0015482902526855469, -0.00023651123046875, -0.0009212493896484375, -0.002841949462890625, -3.0517578125e-05, -0.009594440460205078, -0.0005083084106445312, -0.0059947967529296875, -0.27135658264160156, -0.0006256103515625, -2.09808349609375e-05, -0.017129898071289062, 0.0, -0.0044231414794921875, -0.25823938846588135, -0.0003854036331176758, -0.08373677730560303, -1.9073486328125e-06, -0.12671470642089844, -0.001007080078125, -3.24249267578125e-05, -0.5130820274353027, 0.0, -0.008671760559082031, -0.0001430511474609375, -0.0005102157592773438, -0.000873565673828125, -8.0108642578125e-05, -0.0124053955078125, -3.814697265625e-06, -0.15319585800170898, -3.814697265625e-06, -0.00067901611328125, -0.0026493072509765625, -2.86102294921875e-05, -1.9073486328125e-06, -0.001255035400390625, 0.0, -0.00521087646484375, -0.12556731700897217, -0.0001583099365234375, -0.12630581855773926, -1.9073486328125e-06, -0.0094451904296875, -0.0010986328125, -5.7220458984375e-05, -1.200368046760559, 0.0, -0.00366973876953125, -0.0001735687255859375, -0.0003795623779296875, -0.0007495880126953125, -0.0001220703125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.current_player += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('minion_played', self._reveal)\n", "score": -12.921918529914414, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -1.2139215469360352, -1.9073486328125e-05, -0.013304829597473145, -0.00019657611846923828, -0.00113677978515625, -0.7202739715576172, -0.0001277923583984375, -0.07480049133300781, -3.814697265625e-06, -0.0009975433349609375, 0.0, -0.1712331771850586, -0.004290580749511719, 0.0, -0.019803166389465332, -0.00026988983154296875, -0.6079893112182617, -0.003078460693359375, -0.001312255859375, -0.000362396240234375, 0.0, -0.052620887756347656, 0.0, -0.08539772033691406, 0.0, -0.10063934326171875, -3.576278118089249e-07, -0.012943267822265625, -0.06480598449707031, -0.00029754638671875, -0.000408172607421875, 0.0, -2.09808349609375e-05, 0.0, -0.0633993148803711, -1.9073486328125e-05, -1.7603683471679688, 0.0, -0.137701153755188, -1.9073486328125e-06, -0.36078715324401855, -1.1920928244535389e-07, -0.03260672092437744, 0.0, -0.19750630855560303, 0.0, -0.006648063659667969, -0.16630840301513672, -0.0031576156616210938, -0.003599673043936491, -8.344646857949556e-07, -0.4167499542236328, -5.7220458984375e-06, -0.0003452301025390625, -1.1444091796875e-05, -0.0006160736083984375, -3.814697265625e-06, -0.0001728520728647709, -0.0002671480178833008, -0.0013554096221923828, -0.0002460479736328125, -0.0011348724365234375, -0.00223541259765625, -2.6702880859375e-05, -0.008903264999389648, -0.00045490264892578125, -0.0067005157470703125, -0.2788124084472656, -0.000545501708984375, -1.9073486328125e-05, -0.021465301513671875, 0.0, -0.0043010711669921875, -0.2509121894836426, -0.00041687488555908203, -0.08157062530517578, -1.9073486328125e-06, -0.10040855407714844, -0.0009174346923828125, -3.24249267578125e-05, -0.5415033102035522, 0.0, -0.008599281311035156, -0.00014495849609375, -0.000499725341796875, -0.0008068084716796875, -7.82012939453125e-05, -0.011824607849121094, -3.814697265625e-06, -0.1517014503479004, -5.7220458984375e-06, -0.000682830810546875, -0.0026302337646484375, -2.86102294921875e-05, -1.9073486328125e-06, -0.001251220703125, 0.0, -0.0051898956298828125, -0.12543761730194092, -0.000156402587890625, -0.12707459926605225, -1.9073486328125e-06, -0.009332656860351562, -0.0010986328125, -5.7220458984375e-05, -1.2094242572784424, 0.0, -0.0036869049072265625, -0.0001735687255859375, -0.00037860870361328125, -0.0007419586181640625, -0.0001220703125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "IsNot"}], "comparators": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Template60"}], "_type": "Compare"}], "_type": "BoolOp"}, "body": [{"hole2": [{"_type": "Template63"}, {"value": "Null", "_type": "NameConstant"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "damage", "_type": "Template44"}], "_type": "If"}], "hole7": [{"body": [{"value": {"op": {"_type": "And"}, "values": [{"hole2": "player", "hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "can_use", "hole3": "game", "_type": "Template33"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}], "_type": "BoolOp"}, "_type": "Return"}], "args": {"_type": "Template17"}, "name": "activate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 13, 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 103, 332, 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 106, 74, 187, "Null", "<EOS>", 332, 132, 170, "activate", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if attacker.card.minion_type is not game.other_player.hero and len(game\n            .other_player.minions) >= 1:\n            minion.damage(4, Null)\n\n    def activate(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 0\n", "score": -12.972219700622404, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -0.3849325180053711, 0.0, -0.08684253692626953, 0.0, -0.7204790115356445, 0.0, -0.5689640045166016, -1.9073486328125e-06, -0.038321733474731445, -1.9073486328125e-06, -0.09768235683441162, 0.0, -4.9591064453125e-05, -0.13625431060791016, -5.7220458984375e-06, -0.0007152557373046875, -5.340576171875e-05, -0.057987213134765625, 0.0, -0.21363449096679688, 0.0, -1.4728031158447266, 0.0, -0.030048608779907227, 0.0, -0.030687427148222923, -5.722038622479886e-06, -0.08122825622558594, -0.000743865966796875, -0.0036725997924804688, -6.29425048828125e-05, 0.0, -1.9073486328125e-06, -0.30917608737945557, -2.503394853192731e-06, -1.33514404296875e-05, -0.001678466796875, 0.0, -0.007465362548828125, -1.9073486328125e-06, -0.08965682983398438, 0.0, -0.014780998229980469, 0.0, -0.0006225109100341797, -1.1920928244535389e-07, -0.060998618602752686, 0.0, -1.33514404296875e-05, -0.812495231628418, -2.09808349609375e-05, -0.28879737854003906, -0.22122478485107422, -0.5056991577148438, -1.33514404296875e-05, -0.06586456298828125, -3.62396240234375e-05, -0.786156415939331, -3.898136128555052e-05, -0.027182191610336304, 0.0, -1.52587890625e-05, -0.11769962310791016, -0.025513648986816406, -0.00116729736328125, -0.0012906786287203431, -7.62939453125e-06, -0.059917449951171875, -0.015691757202148438, -7.2479248046875e-05, -0.6568078994750977, -9.34600830078125e-05, -0.40227508544921875, -0.00960540771484375, -0.002994537353515625, -3.62396240234375e-05, -0.0006542205810546875, -0.0001373291015625, -4.57763671875e-05, -0.0005779266357421875, -0.000518798828125, -0.0001773834228515625, -0.0002880096435546875, -4.00543212890625e-05, -0.0001658196561038494, -4.398822784423828e-05, -0.0008311269339174032, -1.9073486328125e-06, -0.0012836456298828125, 0.0, -8.594989776611328e-05, 0.0, -0.000881195068359375, -4.9591064453125e-05, -0.0003490447998046875, -0.0001583099365234375, 0.0, 0.0, -0.04557466506958008, -2.1457672119140625e-06, -5.7220458984375e-06, -0.0002079010009765625, 0.0, -0.0063686370849609375, -1.9073486328125e-06, -0.2903270721435547, 0.0, -0.007747650146484375, 0.0, -0.0006719827651977539, -1.1920928244535389e-07, -0.1274324655532837, 0.0, -4.38690185546875e-05, -0.4188652038574219, -1.33514404296875e-05, -7.2479248046875e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.current_player += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -13.082256235164031, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -1.6324472427368164, 0.0, -0.07583534717559814, -1.9073486328125e-06, -0.3842719793319702, -1.1920928244535389e-07, -0.038275957107543945, 0.0, -0.3431100845336914, 0.0, -0.0066699981689453125, -0.15929698944091797, -0.0030994415283203125, -0.0030755531042814255, -8.344646857949556e-07, -0.33064746856689453, -5.7220458984375e-06, -0.000415802001953125, -1.1444091796875e-05, -0.0006008148193359375, -3.814697265625e-06, -0.00017237526481039822, -0.0002652406692504883, -0.0013706684112548828, -0.0002231597900390625, -0.001155853271484375, -0.0022869110107421875, -2.6702880859375e-05, -0.008679986000061035, -0.000461578369140625, -0.0066967010498046875, -0.2815132141113281, -0.0005435943603515625, -2.09808349609375e-05, -0.021538734436035156, 0.0, -0.0043544769287109375, -0.25091981887817383, -0.00044167041778564453, -0.08041560649871826, -1.9073486328125e-06, -0.10208892822265625, -0.000911712646484375, -3.24249267578125e-05, -0.5392030477523804, 0.0, -0.008646965026855469, -0.0001430511474609375, -0.0005006790161132812, -0.0008106231689453125, -7.82012939453125e-05, -0.012005805969238281, -3.814697265625e-06, -0.1510767936706543, -5.7220458984375e-06, -0.0006847381591796875, -0.0026340484619140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0012531280517578125, 0.0, -0.0051860809326171875, -0.1253889799118042, -0.000156402587890625, -0.12689340114593506, -1.9073486328125e-06, -0.00933074951171875, -0.0010986328125, -5.7220458984375e-05, -0.5936037302017212, -1.9073486328125e-06, -0.0033435821533203125, -5.53131103515625e-05, -0.00033664703369140625, -0.001068115234375, -5.7220458984375e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('minion_played', self._reveal)\n", "score": -13.221684826228227, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -0.22674942016601562, -0.00011444091796875, -0.41672229766845703, 0.0, -0.06016254425048828, -3.814697265625e-06, -0.1693476438522339, -2.3841855067985307e-07, -0.00665306905284524, -2.3841855067985307e-07, -0.46151864528656006, 0.0, -0.016834819689393044, -3.576278118089249e-07, -0.0655813217163086, -0.367889404296875, -0.0013294219970703125, -0.0011106388410553336, -1.1920922133867862e-06, -0.7188901901245117, -1.1444091796875e-05, -0.0004253387451171875, -1.33514404296875e-05, -0.00092315673828125, -3.814697265625e-06, -0.00019669378525577486, -0.00018322467803955078, -0.0015501976013183594, -0.0002193450927734375, -0.0009441375732421875, -0.0028820037841796875, -3.0517578125e-05, -0.009391069412231445, -0.00051116943359375, -0.005977630615234375, -0.27373313903808594, -0.0006237030029296875, -2.09808349609375e-05, -0.01745319366455078, 0.0, -0.0044498443603515625, -0.258365273475647, -0.0003911256790161133, -0.08325028419494629, -1.9073486328125e-06, -0.12683677673339844, -0.000995635986328125, -3.24249267578125e-05, -0.510399341583252, 0.0, -0.0086822509765625, -0.0001430511474609375, -0.0005102157592773438, -0.0008792877197265625, -8.0108642578125e-05, -0.012569427490234375, -3.814697265625e-06, -0.15238142013549805, -3.814697265625e-06, -0.00067901611328125, -0.0026493072509765625, -2.86102294921875e-05, -1.9073486328125e-06, -0.00125885009765625, 0.0, -0.0052032470703125, -0.12552917003631592, -0.0001583099365234375, -0.1262209415435791, -1.9073486328125e-06, -0.009441375732421875, -0.0010986328125, -5.7220458984375e-05, -1.1995736360549927, 0.0, -0.00366973876953125, -0.0001735687255859375, -0.00038051605224609375, -0.0007505416870117188, -0.0001220703125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -13.251283374453635, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -1.2139215469360352, -1.9073486328125e-05, -0.013304829597473145, -0.00019657611846923828, -0.00113677978515625, -0.7202739715576172, -0.0001277923583984375, -0.07480049133300781, -3.814697265625e-06, -0.0009975433349609375, 0.0, -0.1712331771850586, -0.004290580749511719, 0.0, -0.019803166389465332, -0.00026988983154296875, -0.6079893112182617, -0.003078460693359375, -0.001312255859375, -0.000362396240234375, 0.0, -0.052620887756347656, 0.0, -0.08539772033691406, 0.0, -0.10063934326171875, -3.576278118089249e-07, -0.012943267822265625, -0.06480598449707031, -0.00029754638671875, -0.000408172607421875, 0.0, -2.09808349609375e-05, 0.0, -0.0633993148803711, -1.9073486328125e-05, -0.2064208984375, -0.000118255615234375, -0.5634365081787109, 0.0, -0.09856212139129639, -3.814697265625e-06, -0.1554715633392334, -2.3841855067985307e-07, -0.005986331962049007, -2.3841855067985307e-07, -0.49890434741973877, 0.0, -0.011609257198870182, -3.576278118089249e-07, -0.07342910766601562, -0.36557865142822266, -0.0012798309326171875, -0.0012302777031436563, -1.1920922133867862e-06, -0.9034175872802734, -1.1444091796875e-05, -0.0003871917724609375, -1.33514404296875e-05, -0.000965118408203125, -3.814697265625e-06, -0.00019895873265340924, -0.00017940998077392578, -0.0015482902526855469, -0.00023651123046875, -0.0009212493896484375, -0.002841949462890625, -3.0517578125e-05, -0.009594440460205078, -0.0005083084106445312, -0.0059947967529296875, -0.27135658264160156, -0.0006256103515625, -2.09808349609375e-05, -0.017129898071289062, 0.0, -0.0044231414794921875, -0.25823938846588135, -0.0003854036331176758, -0.08373677730560303, -1.9073486328125e-06, -0.12671470642089844, -0.001007080078125, -3.24249267578125e-05, -1.4542126655578613, -3.814697265625e-06, -0.0222625732421875, -6.4849853515625e-05, -0.0004425048828125, -0.0009660720825195312, -3.814697265625e-05, -0.013684272766113281, -1.9073486328125e-06, -0.3519405126571655, -3.814697265625e-06, -0.000598907470703125, -0.0024356842041015625, -3.4332275390625e-05, -1.9073486328125e-06, -0.00136566162109375, 0.0, -0.00499725341796875, -0.1244058609008789, -0.0001277923583984375, -0.12798666954040527, -1.9073486328125e-06, -0.00926971435546875, -0.001094818115234375, -6.103515625e-05, -0.5862733125686646, -1.9073486328125e-06, -0.0029497146606445312, -5.91278076171875e-05, -0.0003299713134765625, -0.00109100341796875, -5.53131103515625e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.current_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -13.362387844328225, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -0.22674942016601562, -0.00011444091796875, -0.41672229766845703, 0.0, -0.06016254425048828, -3.814697265625e-06, -0.1693476438522339, -2.3841855067985307e-07, -0.00665306905284524, -2.3841855067985307e-07, -1.0055526494979858, 0.0, -0.1230374276638031, -3.576278118089249e-07, -0.04327678680419922, -0.3758516311645508, -0.001316070556640625, -0.0008728660177439451, -1.0728830375228426e-06, -0.8201417922973633, -1.1444091796875e-05, -0.0003986358642578125, -1.33514404296875e-05, -0.001102447509765625, -3.814697265625e-06, -0.00017499762179795653, -0.00016987323760986328, -0.0016016960144042969, -0.0001926422119140625, -0.000942230224609375, -0.0029048919677734375, -3.0517578125e-05, -0.009488701820373535, -0.0005197525024414062, -0.006191253662109375, -0.2822837829589844, -0.000583648681640625, -2.09808349609375e-05, -0.018767356872558594, 0.0, -0.0044879913330078125, -0.2567325830459595, -0.00040543079376220703, -0.0828399658203125, -1.9073486328125e-06, -0.12610626220703125, -0.00095367431640625, -3.24249267578125e-05, -0.5086978673934937, 0.0, -0.008670806884765625, -0.0001430511474609375, -0.0005102157592773438, -0.000885009765625, -7.82012939453125e-05, -0.012551307678222656, -3.814697265625e-06, -0.15275812149047852, -3.814697265625e-06, -0.0006809234619140625, -0.0026454925537109375, -2.86102294921875e-05, -1.9073486328125e-06, -0.001262664794921875, 0.0, -0.0051898956298828125, -0.1254500150680542, -0.0001583099365234375, -0.12599682807922363, -1.9073486328125e-06, -0.009405136108398438, -0.0010986328125, -5.7220458984375e-05, -0.5977903604507446, -1.9073486328125e-06, -0.00331878662109375, -5.53131103515625e-05, -0.0003376007080078125, -0.0010738372802734375, -5.7220458984375e-05]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"targets": [{"id": "right_minion", "_type": "Name"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"hole2": [{"_type": "Template68"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 126, 155, 320, 73, 186, "right_minion", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 110], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if len(game.other_player.minions) > 0:\n            right_minion = self.player.minions[-1]\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n        self.player = Null\n    player.opponent.append(self)\n", "score": -13.44436811139115, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.8498020172119141, -3.4332275390625e-05, -0.02330493927001953, -0.0001850128173828125, 0.0, -1.9073486328125e-06, -0.3766106367111206, -2.3841855067985307e-07, -1.52587890625e-05, -0.0010623931884765625, 0.0, -0.0040283203125, 0.0, -0.6548624038696289, 0.0, -0.14669525623321533, 0.0, -0.0014679431915283203, -2.3841855067985307e-07, -0.2770376205444336, 0.0, -5.7220458984375e-06, -0.27846431732177734, -1.71661376953125e-05, -5.91278076171875e-05, -0.6897468566894531, -0.2106485366821289, -3.814697265625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -1.5364675521850586, -1.9073486328125e-06, -0.13498210906982422, -0.000209808349609375, -0.0001049041748046875, 0.0, -0.0001659393310546875, 0.0, -0.05366039276123047, -0.00036811508471146226, -1.1920928244535389e-07, -0.129721999168396, -3.814697265625e-06, -0.0030412673950195312, -0.0002841949462890625, -0.2321643829345703, -0.009509086608886719, -0.0282440185546875, -0.0043792724609375, -0.07933235168457031, -0.2979593276977539, -0.0010547637939453125, -0.03535723686218262, -0.028944015502929688, -0.0031881332397460938, -0.021837234497070312, -0.00035858154296875, -2.6702880859375e-05, -0.08003520965576172, 0.0, -0.5572175979614258, -0.2750530242919922, -0.00012409687042236328, -0.17068159580230713, -1.9073486328125e-06, -0.058376312255859375, -0.0005359649658203125, -4.57763671875e-05, -0.8325091600418091, -3.814697265625e-06, -0.01119232177734375, -0.00019073486328125, -0.00032806396484375, -0.001171112060546875, -2.47955322265625e-05, -0.046133995056152344, -0.0001850128173828125, -0.0001678466796875, -6.4849853515625e-05, -3.814697265625e-06, -0.01683807373046875, -0.0047149658203125, 0.0, -0.2813873291015625, -0.0005779266357421875, -7.2479248046875e-05, -7.62939453125e-06, -0.31588077545166016, -3.814697265625e-06, -0.0049724578857421875, 0.0, -0.47914791107177734, -0.25366735458374023, -7.82012939453125e-05, -0.02656865119934082, -1.9073486328125e-06, -0.0004749298095703125, -1.0375385284423828]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"targets": [{"id": "right_minion", "_type": "Name"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"hole2": [{"_type": "Template68"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 126, 155, 320, 73, 186, "right_minion", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 110], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if len(game.other_player.minions) > 0:\n            right_minion = self.player.minions[-1]\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n        self.player = Null\n    player.opponent.append(self)\n", "score": -13.475798459679417, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.8498020172119141, -3.4332275390625e-05, -0.02330493927001953, -0.0001850128173828125, 0.0, -1.9073486328125e-06, -0.3766106367111206, -2.3841855067985307e-07, -1.52587890625e-05, -0.0010623931884765625, 0.0, -0.0040283203125, 0.0, -0.6548624038696289, 0.0, -0.14669525623321533, 0.0, -0.0014679431915283203, -2.3841855067985307e-07, -0.2770376205444336, 0.0, -5.7220458984375e-06, -0.27846431732177734, -1.71661376953125e-05, -5.91278076171875e-05, -0.6897468566894531, -0.2106485366821289, -3.814697265625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -1.5364675521850586, -1.9073486328125e-06, -0.13498210906982422, -0.000209808349609375, -0.0001049041748046875, 0.0, -0.0001659393310546875, 0.0, -0.05366039276123047, -0.00036811508471146226, -1.1920928244535389e-07, -0.129721999168396, -3.814697265625e-06, -0.0030412673950195312, -0.0002841949462890625, -0.2321643829345703, -0.009509086608886719, -0.0282440185546875, -0.0043792724609375, -0.07933235168457031, -0.2979593276977539, -0.0010547637939453125, -0.03535723686218262, -0.028944015502929688, -0.0031881332397460938, -0.021837234497070312, -0.00035858154296875, -2.6702880859375e-05, -0.08003520965576172, 0.0, -0.8629398345947266, -3.814697265625e-06, -0.024122238159179688, -0.07729743421077728, -5.841255187988281e-06, -0.0061210389249026775, -0.00010132789611816406, -0.04144144058227539, 0.0, -0.0034503936767578125, -0.000751495361328125, -6.29425048828125e-05, -0.5639489889144897, 0.0, -0.0060138702392578125, -0.0008029937744140625, -0.00045013427734375, -0.0007915496826171875, -4.00543212890625e-05, -0.13798046112060547, -0.0002384185791015625, -0.000217437744140625, -8.392333984375e-05, -1.9073486328125e-06, -0.029949188232421875, -0.0058345794677734375, 0.0, -0.32860851287841797, -0.0005664825439453125, -7.450580596923828e-05, -7.62939453125e-06, -0.4254446029663086, -3.814697265625e-06, -0.00354766845703125, 0.0, -0.5917901992797852, -0.2255692481994629, -8.392333984375e-05, -0.02540135383605957, -1.9073486328125e-06, -0.0003795623779296875, -1.0432443618774414]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "attacker", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, "body": [{"targets": [{"id": "right_minion", "_type": "Name"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"hole2": [{"_type": "Template68"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "EyeEyeEye"}, "choice_history": [121, 201, "Eye", "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 332, 126, 155, 320, 73, 186, "right_minion", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 145, 250, 17, 156, 50, "opponent", "<EOS>", "append", "<EOS>", 320, 110], "inferred_code": "class EyeEyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if len(game.other_player.minions) > 0:\n            right_minion = self.player.minions[-1]\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n        self.player = Null\n    player.opponent.append(self)\n", "score": -13.597845839758001, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.7746948599815369, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.8498020172119141, -3.4332275390625e-05, -0.02330493927001953, -0.0001850128173828125, 0.0, -1.9073486328125e-06, -0.3766106367111206, -2.3841855067985307e-07, -1.52587890625e-05, -0.0010623931884765625, 0.0, -0.0040283203125, 0.0, -0.6548624038696289, 0.0, -0.14669525623321533, 0.0, -0.0014679431915283203, -2.3841855067985307e-07, -0.2770376205444336, 0.0, -5.7220458984375e-06, -0.27846431732177734, -1.71661376953125e-05, -5.91278076171875e-05, -0.6897468566894531, -0.2106485366821289, -3.814697265625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -1.5364675521850586, -1.9073486328125e-06, -0.13498210906982422, -0.000209808349609375, -0.0001049041748046875, 0.0, -0.0001659393310546875, 0.0, -0.05366039276123047, -0.00036811508471146226, -1.1920928244535389e-07, -0.129721999168396, -3.814697265625e-06, -0.0030412673950195312, -0.0002841949462890625, -0.2321643829345703, -0.009509086608886719, -0.0282440185546875, -0.0043792724609375, -0.07933235168457031, -0.2979593276977539, -0.0010547637939453125, -0.03535723686218262, -0.028944015502929688, -0.0031881332397460938, -0.021837234497070312, -0.00035858154296875, -2.6702880859375e-05, -0.08003520965576172, 0.0, -0.5572175979614258, -0.2750530242919922, -0.00012409687042236328, -0.17068159580230713, -1.9073486328125e-06, -0.058376312255859375, -0.0005359649658203125, -4.57763671875e-05, -0.8325091600418091, -3.814697265625e-06, -0.01119232177734375, -0.00019073486328125, -0.00032806396484375, -0.001171112060546875, -2.47955322265625e-05, -0.046133995056152344, -0.0001850128173828125, -0.0001678466796875, -6.4849853515625e-05, -3.814697265625e-06, -0.01683807373046875, -0.0047149658203125, 0.0, -0.2813873291015625, -0.0005779266357421875, -7.2479248046875e-05, -7.62939453125e-06, -0.31588077545166016, -3.814697265625e-06, -0.0049724578857421875, 0.0, -0.47914791107177734, -0.25366735458374023, -7.82012939453125e-05, -0.02656865119934082, -1.9073486328125e-06, -0.0004749298095703125, -1.0375385284423828]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.current_player += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('minion_played', self._reveal)\n", "score": -13.697492040675506, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -1.6324472427368164, 0.0, -0.07583534717559814, -1.9073486328125e-06, -0.3842719793319702, -1.1920928244535389e-07, -0.038275957107543945, 0.0, -0.3431100845336914, 0.0, -0.0066699981689453125, -0.15929698944091797, -0.0030994415283203125, -0.0030755531042814255, -8.344646857949556e-07, -0.33064746856689453, -5.7220458984375e-06, -0.000415802001953125, -1.1444091796875e-05, -0.0006008148193359375, -3.814697265625e-06, -0.00017237526481039822, -0.0002652406692504883, -0.0013706684112548828, -0.0002231597900390625, -0.001155853271484375, -0.0022869110107421875, -2.6702880859375e-05, -0.008679986000061035, -0.000461578369140625, -0.0066967010498046875, -0.2815132141113281, -0.0005435943603515625, -2.09808349609375e-05, -0.021538734436035156, 0.0, -0.0043544769287109375, -0.25091981887817383, -0.00044167041778564453, -0.08041560649871826, -1.9073486328125e-06, -0.10208892822265625, -0.000911712646484375, -3.24249267578125e-05, -0.5392030477523804, 0.0, -0.008646965026855469, -0.0001430511474609375, -0.0005006790161132812, -0.0008106231689453125, -7.82012939453125e-05, -0.012005805969238281, -3.814697265625e-06, -0.1510767936706543, -5.7220458984375e-06, -0.0006847381591796875, -0.0026340484619140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0012531280517578125, 0.0, -0.0051860809326171875, -0.1253889799118042, -0.000156402587890625, -0.12689340114593506, -1.9073486328125e-06, -0.00933074951171875, -0.0010986328125, -5.7220458984375e-05, -1.2085953950881958, 0.0, -0.003688812255859375, -0.0001735687255859375, -0.0003795623779296875, -0.0007429122924804688, -0.0001220703125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Eye for Eye", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}], "_type": "Compare"}, {"operand": {"value": {"id": "attacker", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "op": {"_type": "Not"}, "_type": "UnaryOp"}], "_type": "BoolOp"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"value": {"value": {"value": {"id": "attacker", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "value": {"n": 1, "_type": "Num"}, "_type": "AugAssign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"_type": "Template64"}, "attr": "opponent", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "target", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 25, 186, "target", "<EOS>", 317, 12, 320, 65, 156, 17, 156, 53, "player", "<EOS>", "hero", "<EOS>", 115, 305, 151, 17, 156, 25, 186, "attacker", "<EOS>", "<UNK>", "<EOS>", 333, 127, 157, 17, 156, 17, 156, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 122, 27, 190, "1", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 50, "opponent", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, card, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "score": -13.769893062922563, "score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -1.6422691345214844, -0.4104423522949219, -0.000904083251953125, -0.00032707335776649415, -0.00016880035400390625, -2.0742409105878323e-05, -7.641315460205078e-05, -0.0012655258178710938, -2.09808349609375e-05, -4.529942543740617e-06, 0.0, -0.08947610855102539, -1.1444091796875e-05, -0.0076465606689453125, -1.9073486328125e-05, -2.86102294921875e-05, -6.866455078125e-05, -5.7220458984375e-06, -0.6168632507324219, -0.363078236579895, 0.0, -0.024316787719726562, -0.000133514404296875, -0.00012791156768798828, -3.814697265625e-06, -0.017905473709106445, -1.52587890625e-05, -1.0023479461669922, -3.814697265625e-06, -0.042441368103027344, -4.76837158203125e-05, -0.0006866455078125, -0.19279968738555908, -1.52587890625e-05, -0.0036773681640625, -0.00042724609375, -0.000125885009765625, -0.27852630615234375, -0.002170562744140625, -6.4849853515625e-05, -0.0040874481201171875, -0.055843353271484375, -5.53131103515625e-05, -0.30761051177978516, -7.62939453125e-06, -0.019438862800598145, -0.0003262758255004883, -0.000835418701171875, -0.5982341766357422, -0.000354766845703125, -0.032054901123046875, -7.62939453125e-06, -0.000885009765625, 0.0, -0.15228939056396484, -0.0015145540237426758, 0.0, -0.02232944965362549, -0.00025343894958496094, -0.6486787796020508, -0.00336456298828125, -0.001220703125, -0.000331878662109375, 0.0, -0.08312129974365234, 0.0, -0.08830070495605469, 0.0, -0.025106191635131836, -5.960462772236497e-07, -0.016210556030273438, -0.05081748962402344, -0.0002613067626953125, -0.0004596710205078125, 0.0, -1.71661376953125e-05, 0.0, -0.03625202178955078, -1.52587890625e-05, -0.22674942016601562, -0.00011444091796875, -0.41672229766845703, 0.0, -0.06016254425048828, -3.814697265625e-06, -0.1693476438522339, -2.3841855067985307e-07, -0.00665306905284524, -2.3841855067985307e-07, -0.46151864528656006, 0.0, -0.016834819689393044, -3.576278118089249e-07, -0.0655813217163086, -0.367889404296875, -0.0013294219970703125, -0.0011106388410553336, -1.1920922133867862e-06, -0.7188901901245117, -1.1444091796875e-05, -0.0004253387451171875, -1.33514404296875e-05, -0.00092315673828125, -3.814697265625e-06, -0.00019669378525577486, -0.00018322467803955078, -0.0015501976013183594, -0.0002193450927734375, -0.0009441375732421875, -0.0028820037841796875, -3.0517578125e-05, -0.009391069412231445, -0.00051116943359375, -0.005977630615234375, -0.27373313903808594, -0.0006237030029296875, -2.09808349609375e-05, -0.01745319366455078, 0.0, -0.0044498443603515625, -0.258365273475647, -0.0003911256790161133, -0.08325028419494629, -1.9073486328125e-06, -0.12683677673339844, -0.000995635986328125, -3.24249267578125e-05, -1.4591317176818848, -3.814697265625e-06, -0.022369384765625, -6.4849853515625e-05, -0.00044155120849609375, -0.0009698867797851562, -3.62396240234375e-05, -0.013867378234863281, -1.9073486328125e-06, -0.35066163539886475, -3.814697265625e-06, -0.000598907470703125, -0.002437591552734375, -3.4332275390625e-05, -1.9073486328125e-06, -0.001369476318359375, 0.0, -0.0049896240234375, -0.1243581771850586, -0.0001277923583984375, -0.12785983085632324, -1.9073486328125e-06, -0.0092620849609375, -0.001094818115234375, -6.103515625e-05, -0.5866228342056274, -1.9073486328125e-06, -0.002948760986328125, -5.91278076171875e-05, -0.0003299713134765625, -0.0010919570922851562, -5.53131103515625e-05]}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "<UNK>Health", "hole1": 0, "_type": "Template41"}, {"hole0": "MinionSelector", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n", "score": -2.2345647000551025, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -0.42454993724823, -0.007458090782165527, -3.445148468017578e-05, -0.1884632110595703, -0.021299362182617188, -0.011612892150878906, -0.0017472425242885947, -0.04804472252726555, -6.103515625e-05, -0.036022450774908066, -4.053113570989808e-06, -0.0002002716064453125, -7.62939453125e-06, -0.044121526181697845, -0.0002844332193490118, -4.768370445162873e-07, -0.002498626708984375, -7.62939453125e-06, -0.008466154336929321, -0.023813605308532715, -0.0007919512572698295, -0.002685546875, -0.0001659393310546875, -6.4849853515625e-05, -0.0009250640869140625, -0.0001983642578125, -0.0030940771102905273, -5.650520324707031e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(Deathrattle(Stealth(), PlayerSelector()))\n        player.draw()\n", "score": -3.59888679508947, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -1.9812878370285034, -7.593631744384766e-05, -0.0032825469970703125, -0.019468307495117188, -3.814697265625e-06, -0.09220920503139496, -0.0010548748541623354, -0.000335693359375, -1.9073486328125e-06, -0.06638535112142563, -0.0020834263414144516, -1.0728830375228426e-06, -0.02350902557373047, -8.7738037109375e-05, -2.47955322265625e-05, -0.0003337860107421875, -0.00019073486328125, -0.0005831718444824219, -8.296966552734375e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "<UNK>Health", "hole1": 0, "_type": "Template41"}, {"hole0": "MinionSelector", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "<UNK>"}, "choice_history": [121, 200, "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class <UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n", "score": -3.8173316799878876, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -1.7695870399475098, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -0.42454993724823, -0.007458090782165527, -3.445148468017578e-05, -0.1884632110595703, -0.021299362182617188, -0.011612892150878906, -0.0017472425242885947, -0.04804472252726555, -6.103515625e-05, -0.036022450774908066, -4.053113570989808e-06, -0.0002002716064453125, -7.62939453125e-06, -0.044121526181697845, -0.0002844332193490118, -4.768370445162873e-07, -0.002498626708984375, -7.62939453125e-06, -0.008466154336929321, -0.023813605308532715, -0.0007919512572698295, -0.002685546875, -0.0001659393310546875, -6.4849853515625e-05, -0.0009250640869140625, -0.0001983642578125, -0.0030940771102905273, -5.650520324707031e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "<UNK>Health", "hole1": 0, "_type": "Template41"}, {"hole0": "MinionSelector", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n", "score": -3.8877577456454446, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -2.167201042175293, 0.0, -6.330012547550723e-05, 0.0, -7.081031799316406e-05, 0.0, -0.000328659953083843, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -5.340576171875e-05, -5.5669672292424366e-05, -6.5565000113565475e-06, -0.031030654907226562, -0.010509490966796875, -0.19416046142578125, -5.53131103515625e-05, -0.35430240631103516, -0.003273417241871357, -9.465057519264519e-05, -5.340576171875e-05, -0.1105813980102539, -0.0002307891845703125, -0.000568389892578125, 0.0, -0.4129675626754761, -0.007693648338317871, -3.445148468017578e-05, -0.1732349395751953, -0.021295547485351562, -0.011635780334472656, -0.0017316516023129225, -0.04852062463760376, -6.103515625e-05, -0.035596881061792374, -4.053113570989808e-06, -0.000202178955078125, -7.62939453125e-06, -0.04346219822764397, -0.000284314010059461, -4.768370445162873e-07, -0.0024662017822265625, -7.62939453125e-06, -0.008437560871243477, -0.023788809776306152, -0.0007945717661641538, -0.00273895263671875, -0.0001697540283203125, -6.29425048828125e-05, -0.0009288787841796875, -0.0001964569091796875, -0.003069281578063965, -5.650520324707031e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "<UNK>Health", "hole1": 0, "_type": "Template41"}, {"hole0": "MinionSelector", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n", "score": -4.131367735319941, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -2.345059394836426, 0.0, -4.553794133244082e-05, 0.0, -0.00010883808135986328, 0.0, -0.0002785920805763453, 0.0, -1.1444091796875e-05, -7.62939453125e-06, -5.14984130859375e-05, -4.720623837783933e-05, -7.271760750882095e-06, -0.03732872009277344, -0.009607315063476562, -0.19776535034179688, -5.340576171875e-05, -0.39239978790283203, -0.0034879553131759167, -9.322004189016297e-05, -6.29425048828125e-05, -0.11094474792480469, -0.0002288818359375, -0.000537872314453125, 0.0, -0.42277324199676514, -0.007291197776794434, -3.254413604736328e-05, -0.1829833984375, -0.02099323272705078, -0.011474609375, -0.0016891496488824487, -0.048129815608263016, -5.7220458984375e-05, -0.03548912703990936, -4.053113570989808e-06, -0.0002002716064453125, -7.62939453125e-06, -0.04336942732334137, -0.000284314010059461, -4.768370445162873e-07, -0.002483367919921875, -7.62939453125e-06, -0.00842039380222559, -0.023849844932556152, -0.0007889734115451574, -0.002777099609375, -0.0001697540283203125, -6.29425048828125e-05, -0.000934600830078125, -0.0001964569091796875, -0.0030645132064819336, -5.650520324707031e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template68"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(self)\n        player.draw()\n", "score": -4.161032798215274, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -2.6326513290405273, -0.1937856674194336, -4.1961669921875e-05, -0.001800537109375, -0.0005550384521484375, -0.006646156311035156, -0.02961742877960205, -0.0036020278930664062]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(Stealth(), PlayerSelector()))\n        player.draw()\n", "score": -4.273548589533334, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -0.42454993724823, -0.007458090782165527, -3.445148468017578e-05, -1.770829200744629, -0.0010128021240234375, -3.814697265625e-06, -0.027297519147396088, -0.010532242245972157, -0.00011444091796875, -1.9073486328125e-06, -0.6101093292236328, -0.001862386241555214, -1.5497195136049413e-06, -0.010345458984375, -9.72747802734375e-05, -2.47955322265625e-05, -0.0004100799560546875, -0.00020599365234375, -0.0006803274154663086, -9.238719940185547e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Template68"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal('<UNK>', self)\n        player.draw()\n", "score": -4.302238081117139, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -1.1860008239746094, 0.0, -0.9247236251831055, -0.040232088416814804, -2.3961043552844785e-05, -0.212778240442276, 0.0, -8.58306884765625e-05, -0.22322368621826172, -0.0014057159423828125, -0.23227059841156006, -1.9073486328125e-06, -0.4292898178100586, -0.08289432525634766, -0.00016021728515625, -0.0005950927734375, -0.000431060791015625, -0.000720977783203125, -0.08559048175811768, -8.809566497802734e-05]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "<UNK>Health", "hole1": 0, "_type": "Template41"}, {"hole0": "MinionSelector", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n", "score": -4.343232989060539, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -2.5154380798339844, 0.0, -0.0001028776096063666, 0.0, -8.416175842285156e-05, 0.0, -0.0002802609815262258, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, -5.340576171875e-05, -5.2212759328540415e-05, -8.702266313775908e-06, -0.03028392791748047, -0.010042190551757812, -0.21600818634033203, -4.76837158203125e-05, -0.41056060791015625, -0.0035305425990372896, -9.405445598531514e-05, -6.67572021484375e-05, -0.11209487915039062, -0.00023651123046875, -0.0005512237548828125, 0.0, -0.42655837535858154, -0.00733029842376709, -3.254413604736328e-05, -0.18891334533691406, -0.0211029052734375, -0.011487007141113281, -0.0017071274342015386, -0.04807327687740326, -5.91278076171875e-05, -0.03570154309272766, -4.053113570989808e-06, -0.0001983642578125, -7.62939453125e-06, -0.04372764378786087, -0.0002844332193490118, -4.768370445162873e-07, -0.0024929046630859375, -7.62939453125e-06, -0.008427069522440434, -0.02384316921234131, -0.0007923085941001773, -0.002777099609375, -0.0001659393310546875, -6.29425048828125e-05, -0.0009212493896484375, -0.0001983642578125, -0.003092169761657715, -5.650520324707031e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(BuffUntil(Stealth(), PlayerSelector()))\n        player.draw()\n", "score": -4.7839458330659, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -2.393488645553589, -0.003931403160095215, -1.3113007298670709e-05, -0.010967254638671875, -0.000316619873046875, -5.7220458984375e-06, -0.029742751270532608, -0.024463580921292305, -8.0108642578125e-05, -3.814697265625e-06, -0.8995935916900635, -0.002009462798014283, -9.536738616588991e-07, -0.009674072265625, -9.72747802734375e-05, -2.6702880859375e-05, -0.000530242919921875, -0.000202178955078125, -0.0007984638214111328, -0.00011527538299560547]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"id": "AuraUntil", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "TurnEnded", "_type": "Template46"}], "_type": "Call"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(Stealth(), TurnEnded()))\n        player.draw()\n", "score": -4.842850781259585, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -0.42454993724823, -0.007458090782165527, -3.445148468017578e-05, -1.770829200744629, -0.0010128021240234375, -3.814697265625e-06, -0.027297519147396088, -0.010532242245972157, -0.00011444091796875, -1.9073486328125e-06, -0.8635673522949219, -0.32331228256225586, -0.0011225638445466757, -0.003452301025390625, -6.866455078125e-05, -1.71661376953125e-05, -0.000408172607421875, -4.38690185546875e-05, -0.0010750293731689453, -6.437301635742188e-05]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "iter": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}, {"_type": "Template19"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49, 141], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(ManaChange(-4)))\n        super().use(player, game)\n", "score": -5.1745892246492815, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -1.7797155380249023, -0.0001087188720703125, -5.7220458984375e-06, -9.5367431640625e-06, -0.012790441513061523, -5.960462772236497e-07, -0.00252532958984375, 0.0, -0.010412216186523438, -5.340576171875e-05, -0.006522178649902344, 0.0, -0.0003814697265625, -2.3841855067985307e-07, -0.14626193046569824, -9.536738616588991e-07, -0.04068230092525482, -1.9073486328125e-06, -1.71661376953125e-05, -0.0383148193359375, 0.0, -0.0052928924560546875, -7.62939453125e-06, -0.19611620903015137, -1.9073486328125e-06, -0.11053209006786346, 0.0, -0.000335693359375, -0.07528877258300781, -0.3027324676513672, -0.013877034187316895, -0.0003528594970703125, -0.0001392364501953125, -9.34600830078125e-05, -0.11071491241455078, -0.0001392364501953125, -0.15341758728027344, -1.09661865234375, -0.40514183044433594]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole0": "<UNK>Attack", "_type": "Template30"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "iter": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 232, "<UNK>", "Attack", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(<UNK>Attack()))\n        player.draw()\n", "score": -5.473222069931836, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -1.7797155380249023, -0.0001087188720703125, -5.7220458984375e-06, -9.5367431640625e-06, -0.012790441513061523, -5.960462772236497e-07, -0.00252532958984375, 0.0, -0.010412216186523438, -5.340576171875e-05, -0.006522178649902344, 0.0, -0.0003814697265625, -2.3841855067985307e-07, -0.14626193046569824, -9.536738616588991e-07, -0.04068230092525482, -1.9073486328125e-06, -1.71661376953125e-05, -0.0383148193359375, 0.0, -0.0052928924560546875, -7.62939453125e-06, -0.19611620903015137, -1.9073486328125e-06, -0.11053209006786346, 0.0, -0.000335693359375, -0.07528877258300781, -1.4362001419067383, -0.23096738755702972, -0.6855416297912598, -1.9073486328125e-06, -0.02728748321533203, -5.7220458984375e-05, -0.0001659393310546875, -0.0006256103515625, -3.62396240234375e-05, -0.0008713006973266602, -0.00010526180267333984]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"func": {"id": "BuffUntil", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}], "hole0": {"id": "deathrattle", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}], "iter": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Buff", "Until", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            deathrattle.<UNK>(BuffUntil(Stealth(), PlayerSelector()))\n        player.draw()\n", "score": -6.158124587980666, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -1.7797155380249023, -0.0001087188720703125, -5.7220458984375e-06, -9.5367431640625e-06, -0.012790441513061523, -5.960462772236497e-07, -0.00252532958984375, 0.0, -0.010412216186523438, -5.340576171875e-05, -0.006522178649902344, 0.0, -0.0003814697265625, -2.3841855067985307e-07, -0.14626193046569824, -9.536738616588991e-07, -0.04068230092525482, -1.9073486328125e-06, -1.71661376953125e-05, -0.0383148193359375, 0.0, -0.0052928924560546875, -7.62939453125e-06, -2.0589301586151123, -0.0007307529449462891, -0.1366247981786728, 0.0, -0.0004367828369140625, -0.010861396789550781, -0.0030527114868164062, -0.000804901123046875, 0.0, -0.6299594640731812, -0.001137375831604004, -5.6028297876764555e-06, -0.0004177093505859375, -0.0037784576416015625, -7.62939453125e-06, -0.053893689066171646, -0.010693658143281937, -0.0002117156982421875, -1.9073486328125e-06, -0.4983842372894287, -0.011140487156808376, -1.1920922133867862e-06, -0.02659320831298828, -6.866455078125e-05, -1.1444091796875e-05, -0.0005035400390625, -0.0001621246337890625, -0.0005195140838623047, -0.00010418891906738281]}, {"model_output": {"hole2": [{"hole2": "ROGUE", "hole0": "Flare", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"body": [{"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "iter": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}, {"body": [{"value": {"hole0": {"id": "minion", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, "_type": "Expr"}], "iter": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "target": {"id": "minion", "_type": "Name"}, "_type": "For"}], "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 332, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 17, 156, 50, "hand", "<EOS>", 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "hand", "<EOS>", 332, 130, 168, 37, 249, 25, 186, "minion", "<EOS>", "<UNK>", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(ManaChange(-player.hand)))\n        for minion in player.hand:\n            minion.<UNK>()\n", "score": -7.482172079851573, "score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -1.7797155380249023, -0.0001087188720703125, -5.7220458984375e-06, -9.5367431640625e-06, -0.012790441513061523, -5.960462772236497e-07, -0.00252532958984375, 0.0, -0.010412216186523438, -5.340576171875e-05, -0.006522178649902344, 0.0, -0.0003814697265625, -2.3841855067985307e-07, -0.14626193046569824, -9.536738616588991e-07, -0.04068230092525482, -1.9073486328125e-06, -1.71661376953125e-05, -0.0383148193359375, 0.0, -0.0052928924560546875, -7.62939453125e-06, -0.19611620903015137, -1.9073486328125e-06, -0.11053209006786346, 0.0, -0.000335693359375, -0.07528877258300781, -0.3027324676513672, -0.013877034187316895, -0.0003528594970703125, -0.0001392364501953125, -9.34600830078125e-05, -0.11071491241455078, -0.0001392364501953125, -0.15341758728027344, -1.3150835037231445, -1.9073486328125e-06, -0.051143646240234375, -0.22502732276916504, -1.1682492186082527e-05, -0.3685588836669922, -3.62396240234375e-05, -8.96453857421875e-05, 0.0, -0.6285487413406372, 0.0, -0.006465911865234375, 0.0, -0.05331230163574219, -0.20365118980407715, -2.3841855067985307e-07, -0.0001220703125, -0.2207489013671875, -0.0024156570434570312, -0.001033782958984375, -0.001857757568359375, -0.44305419921875, -7.2479248046875e-05, -0.055393338203430176, -1.1920928244535389e-07, -0.23271095752716064, -2.861018856492592e-06]}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"hole0": "IsSpell", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Spell", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])\n", "score": -2.851086781154436, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -0.07904911041259766, -9.5367431640625e-05, -3.814697265625e-06, -0.005514382850378752, -0.00024366378784179688, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.0001621246337890625, -0.000762939453125, -2.47955322265625e-05, -0.132354736328125, -0.000152587890625, -0.0024734041653573513, -0.6780401468276978, -0.002096414566040039, -5.7220458984375e-06, -0.00179290771484375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"hole0": "IsMinion", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Minion", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsMinion()))])\n", "score": -3.100343153606218, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -0.07904911041259766, -9.5367431640625e-05, -3.814697265625e-06, -0.005514382850378752, -0.00024366378784179688, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.0001621246337890625, -0.000762939453125, -2.47955322265625e-05, -0.132354736328125, -0.000152587890625, -0.0024734041653573513, -0.929848313331604, -0.00010538101196289062, -2.288818359375e-05, -0.0012149810791015625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.DRAGON)))])\n", "score": -4.40774242267662, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -1.4920215606689453, -3.814697265625e-06, -8.392333984375e-05, -0.16721534729003906]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "OneIn", "hole1": 2, "_type": "Template41"}, {"hole0": "OpponentMinionCountIsGreaterThan", "hole1": 0, "_type": "Template41"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 68, 163, 25, 186, "And", "<EOS>", 321, 89, 247, "One", "In", "<EOS>", "2", "<EOS>", 89, 247, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(<UNK>SpellTarget(), And(OneIn(2),\n            OpponentMinionCountIsGreaterThan(0)))])\n", "score": -4.877171926918663, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -2.7705917358398438, -3.4332275390625e-05, -0.11897187680006027, -0.02265375293791294, -0.08030664920806885, -0.0036809444427490234, -0.09970474243164062, -0.0069122314453125, -0.19502830505371094, -1.9073486328125e-06, -0.7408711910247803, -7.36713336664252e-05, -0.016477584838867188, -0.008259773254394531, -0.0007572174072265625, -0.3075173795223236, -0.0065822601318359375, -1.1682510375976562e-05, -0.057884056121110916, -1.9073486328125e-05, -0.002658843994140625, -0.000484466552734375, -0.022062063217163086, -0.0001665353775024414, -0.006717681884765625, -0.002716064453125, -0.0014424324035644531, -0.0008192062377929688, -0.0031893253326416016, -0.004907363094389439, -1.9073486328125e-06, -9.918212890625e-05, -0.005359649658203125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 2, "_type": "Template38"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"_type": "Template53"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "2", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(2), GreaterThan(Count(\n            MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])\n", "score": -4.915805176260619, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -1.4852851629257202, -0.00016021728515625, -1.4547386169433594, -0.28855323791503906, -0.0001659393310546875, -0.00019073486328125, -0.0019113803282380104, -0.0015698203351348639, -3.6954863844584906e-06, -1.71661376953125e-05, -0.22655868530273438, -0.0030670166015625, -0.0009206533432006836, -3.814697265625e-06, -0.0010528564453125, -8.96453857421875e-05, -1.1444091796875e-05, -4.1961669921875e-05, 0.0, 0.0, -0.00022947786783333868, -0.00020945060532540083, -4.410743713378906e-06, -1.1444091796875e-05, -0.03906059265136719, -6.866455078125e-05, -2.09808349609375e-05, -0.00023651123046875, -0.0211029052734375, 0.0, -0.009372711181640625, -2.6702880859375e-05, -6.4849853515625e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"hole0": "IsWeapon", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Weapon", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsWeapon()))])\n", "score": -4.978650138507646, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -0.07904911041259766, -9.5367431640625e-05, -3.814697265625e-06, -0.005514382850378752, -0.00024366378784179688, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.0001621246337890625, -0.000762939453125, -2.47955322265625e-05, -0.132354736328125, -0.000152587890625, -0.0024734041653573513, -2.8083481788635254, -0.00020623207092285156, -1.9073486328125e-06, -0.000942230224609375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "score": -5.0455474077230065, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.170769691467285, -1.9073486328125e-06, -6.67572021484375e-05, -0.12629127502441406]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Count", "_type": "Name"}, "args": [{"hole0": "MinionSelector", "hole1": "IsDamaged", "_type": "Template31"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Count", "<EOS>", 320, 82, 234, "Minion", "Selector", "<EOS>", "Is", "Damaged", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), GreaterThan(Count(\n            MinionSelector(IsDamaged())), value=0))])\n", "score": -5.185453328586156, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -2.6280641555786133, -0.0007648468017578125, -1.9073486328125e-06, -0.003350610379129648, -0.0031745966989547014, -9.536738616588991e-07, -3.814697265625e-06, -0.09632492065429688, -0.0001583099365234375, -5.7220458984375e-06, 0.0, -0.22386300563812256, -0.00010585784184513614, -5.7220458984375e-06, -0.06847000122070312, -0.0007610321044921875, -0.01579439640045166, -1.5020364116935525e-05, -1.1920928244535389e-07, -0.14558492600917816, -0.046283964067697525, -2.1695894247386605e-05, -0.00035858154296875, -3.814697265625e-06, -2.09808349609375e-05, -0.002323150634765625, 0.0, -0.0017242431640625, -3.4332275390625e-05, -6.103515625e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"hole0": "IsSpell", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Spell", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])\n", "score": -5.373767976444697, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -2.7183642387390137, 0.0, -0.0018047094345092773, 0.0, -0.1118927001953125, 0.0, -3.933906555175781e-06, 0.0, -3.0517578125e-05, -0.026563644409179688, -0.000202178955078125, 0.0, -1.9073468138230965e-06, -0.00595939252525568, -2.7418097943154862e-06, -0.007339358329772949, 0.0, -7.2479248046875e-05, -8.0108642578125e-05, -0.0024307966232299805, 0.0, -0.0019855499267578125, -1.1594791412353516, -0.25925254821777344, -8.392333984375e-05, -4.9591064453125e-05, -0.126045823097229, -0.020634233951568604, -6.198883056640625e-06, -7.62939453125e-06, -0.0016384124755859375, -0.0001220703125, -0.0003566741943359375, -0.006983757019042969, -0.0004482269287109375, -0.07793045043945312, -9.5367431640625e-05, -3.814697265625e-06, -0.005571364890784025, -0.0002435445785522461, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.00016021728515625, -0.000762939453125, -2.47955322265625e-05, -0.13206195831298828, -0.0001506805419921875, -0.00246935011819005, -0.6782425045967102, -0.0020897388458251953, -5.7220458984375e-06, -0.0018215179443359375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.513301010034411, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -0.07904911041259766, -9.5367431640625e-05, -3.814697265625e-06, -0.005514382850378752, -0.00024366378784179688, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.0001621246337890625, -0.000762939453125, -2.47955322265625e-05, -2.1040220260620117, -0.0002460479736328125, -1.9073486328125e-06, -3.814697265625e-06, -0.02347874641418457, -0.0003274674527347088, -2.622600959512056e-06, -7.62939453125e-06, -0.02362823486328125, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.023543357849121094, 0.0, -0.5959720611572266, -5.7220458984375e-06, -0.00072479248046875, -0.7071523666381836]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.DRAGON)))])\n", "score": -5.806705108047822, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -0.7611627578735352, 0.0, -3.4332275390625e-05, -0.08461570739746094, -0.0005512237548828125, -0.20068776607513428, -9.930133819580078e-05, -0.018863677978515625, -0.3339519500732422, -0.0007953643798828125, -0.023985980078577995, -9.5367431640625e-06, -0.41705894470214844, -0.0038805007934570312, -0.006080816965550184, -1.4662741705251392e-05, -1.0728830375228426e-06, -0.04606437683105469, -5.7220458984375e-06, -0.0533069372177124, -0.0006227493286132812, -3.814697265625e-06, -2.288818359375e-05, -0.00299835205078125, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -0.000614166259765625, 0.0, -1.1024751663208008, -1.9073486328125e-06, -8.58306884765625e-05, -0.0002651214599609375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellDamage", "hole1": 1, "_type": "Template41"}, {"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "TargetSelector", "_type": "Template23"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 89, 247, "<UNK>", "Spell", "Damage", "<EOS>", "1", "<EOS>", 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Target", "Selector", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(<UNK>SpellDamage(1), ActionTag(Give\n            ([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\n            TargetSelector()))])\n", "score": -5.860539293158354, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.4224214553833008, -8.96453857421875e-05, -0.024743912741541862, -0.011942744255065918, -0.007912635803222656, -7.867813110351562e-06, -1.1214537620544434, -1.9073486328125e-06, -1.190995216369629, -0.2644376754760742, -0.009628522209823132, -0.001107931137084961, 0.0, -0.1300373077392578, -0.0001220703125, -0.0037059783935546875, -0.0008907318115234375, -0.0004482269287109375, -5.0663944421103224e-05, 0.0, -0.00012552517000585794, -0.6251537799835205, 0.0, -0.011904114857316017, -5.7220458984375e-06, -0.000453948974609375, -0.0006694793701171875, -0.0003606081008911133, -3.814697265625e-06, -0.00020909296290483326, -0.45717906951904297, -1.33514404296875e-05, -0.03185210004448891, -0.000110626220703125, -0.0005512237548828125, -0.1382354497909546, -2.6941299438476562e-05, -7.748603820800781e-06, -2.86102294921875e-05, -0.0134429931640625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.PIRATE)))])\n", "score": -6.028749099136689, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -0.7611627578735352, 0.0, -3.4332275390625e-05, -0.08461570739746094, -0.0005512237548828125, -0.20068776607513428, -9.930133819580078e-05, -0.018863677978515625, -0.3339519500732422, -0.0007953643798828125, -0.023985980078577995, -9.5367431640625e-06, -0.41705894470214844, -0.0038805007934570312, -0.006080816965550184, -1.4662741705251392e-05, -1.0728830375228426e-06, -0.04606437683105469, -5.7220458984375e-06, -0.0533069372177124, -0.0006227493286132812, -3.814697265625e-06, -2.288818359375e-05, -0.00299835205078125, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -0.000614166259765625, 0.0, -1.3234186172485352, 0.0, -9.5367431640625e-06, -0.0014438629150390625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template40"}, {"hole0": "MinionCountIsGreaterThan", "hole1": 0, "_type": "Template41"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "PIRATE", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 89, 247, "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionCountIsGreaterThan(0))])\n", "score": -6.0438040743088095, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -0.7611627578735352, 0.0, -3.4332275390625e-05, -0.08461570739746094, -0.0005512237548828125, -0.20068776607513428, -9.930133819580078e-05, -0.018863677978515625, -0.3339519500732422, -0.0007953643798828125, -0.023985980078577995, -9.5367431640625e-06, -1.4322690963745117, -0.0001125335693359375, -0.25780367851257324, -0.07201004028320312, -0.0067806243896484375, -0.011890292167663574, -0.0059452056884765625, -0.000574946403503418, -0.08069787919521332, 0.0, -4.00543212890625e-05, -0.0025043487548828125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Gorehowl", "hole1": 7, "hole3": "EPIC", "_type": "Template15"}], "hole1": "WeaponCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 7, "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Durability", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "Durability", "_type": "Template46"}, {"hole0": "Kill", "hole3": "MinionSelector", "_type": "Template23"}], "_type": "Call"}, {"hole0": "RandomPicker", "_type": "Template46"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Durability", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Durability", "<EOS>", 79, 220, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON))), Choice(Durability(),\n            Summon(Durability(), ActionTag(Kill(), MinionSelector())),\n            RandomPicker())])\n", "score": -9.70032838257066, "score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -1.1448450088500977, -0.2573089599609375, -8.20159912109375e-05, -5.14984130859375e-05, -0.1253422498703003, -0.02078542299568653, -6.198883056640625e-06, -7.62939453125e-06, -0.0016117095947265625, -0.0001220703125, -0.0003604888916015625, -0.006985664367675781, -0.0004558563232421875, -0.07904911041259766, -9.5367431640625e-05, -3.814697265625e-06, -0.005514382850378752, -0.00024366378784179688, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.0001621246337890625, -0.000762939453125, -2.47955322265625e-05, -2.1040220260620117, -0.0002460479736328125, -1.9073486328125e-06, -3.814697265625e-06, -0.02347874641418457, -0.0003274674527347088, -2.622600959512056e-06, -7.62939453125e-06, -0.02362823486328125, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.023543357849121094, 0.0, -0.5959720611572266, -5.7220458984375e-06, -0.00072479248046875, -0.6820363998413086, -0.0049648284912109375, -0.7702304124832153, -0.0025588274002075195, -0.0036449432373046875, -0.00014495849609375, -1.71661376953125e-05, -0.41825810074806213, -0.0007953630411066115, -0.0045528411865234375, -0.0016498565673828125, -0.13083362579345703, -1.9073486328125e-06, -0.28809547424316406, -0.0003165697562508285, -0.5907115936279297, -0.059828758239746094, -7.62939453125e-06, -0.32193171977996826, -0.0005037513328716159, -0.639369010925293, -0.1440744400024414, -0.07295943051576614, -0.01693936064839363, -0.5818697810173035, -1.728534698486328e-05, 0.0, -0.03635215759277344, -9.5367431640625e-06, -0.11644601821899414, -0.005048454273492098, 0.0, -1.9073486328125e-06, -7.62939453125e-06]}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -1.2293824728312757, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -0.03148651123046875, -0.00022125244140625, -0.005657196044921875, -5.340576171875e-05, -0.000278472900390625, -0.000370025634765625, -5.7220458984375e-05, -0.006681680679321289, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.004653215408325195, 0.0, -4.1961669921875e-05, -0.6845159530639648, -0.000354766845703125, 0.0, -2.109982233378105e-05, -1.1923821148229763e-06, -5.722038622479886e-06, -0.005994883831590414, 0.0, -0.000396728515625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -1.2513090272445808, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -0.03148651123046875, -0.00022125244140625, -0.005657196044921875, -5.340576171875e-05, -0.000278472900390625, -0.000370025634765625, -5.7220458984375e-05, -0.006681680679321289, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.004653215408325195, 0.0, -4.1961669921875e-05, -0.7131357192993164, -7.05718994140625e-05, -6.079665126890177e-06, 0.0, -4.410840119817294e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n", "score": -1.5986071383740281, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.4804048538208008, -0.0003204345703125, -0.000339508056640625, -1.3470649719238281e-05, -0.00028130575083196163, -0.043747901916503906, -0.0001392364501953125, -0.0011043548583984375, -1.33514404296875e-05, -7.379054295597598e-05, -1.9073486328125e-06, -0.09209752082824707, -1.1444091796875e-05, -5.7220458984375e-06, -0.0046710968017578125, -3.4332275390625e-05, -0.00011908386659342796, -2.3841855067985307e-07, -2.6583435101201758e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -2.7293579036499906, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.5715150833129883, -0.001129150390625, -0.001468658447265625, -3.814697265625e-05, -0.0017299652099609375, -3.814697265625e-06, -0.0002040863037109375, 0.0, -0.0010166168212890625, -2.86102294921875e-05, -0.013338804244995117, -1.9073486328125e-06, -0.0001068115234375, -1.9073486328125e-06, -0.1233295202255249, 0.0, -0.000102996826171875, -0.06595039367675781, -0.000179290771484375, -1.1920928244535389e-07, -1.1444026313256472e-05, -1.072996383300051e-06, -7.271760750882095e-06, -0.0033994819968938828, 0.0, -0.0002956390380859375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -3.0220658258253863, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.841339111328125, -0.0016422271728515625, -0.0028839111328125, -1.71661376953125e-05, -0.001068115234375, -1.9073486328125e-06, -0.0001583099365234375, 0.0, -0.0013103485107421875, -4.38690185546875e-05, -0.006277918815612793, -3.814697265625e-06, -0.0001163482666015625, -1.9073486328125e-06, -0.11774289608001709, 0.0, -0.000118255615234375, -0.09990310668945312, -0.000202178955078125, -1.1920928244535389e-07, -1.156323378381785e-05, -5.961665010545403e-07, -7.271760750882095e-06, -0.003418319160118699, 0.0, -0.0002994537353515625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -3.9520234682030875, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.4804048538208008, -0.0003204345703125, -0.000339508056640625, -1.3470649719238281e-05, -0.00028130575083196163, -0.043747901916503906, -0.0001392364501953125, -0.0011043548583984375, -1.33514404296875e-05, -7.379054295597598e-05, -1.9073486328125e-06, -2.4468910694122314, 0.0, -2.288818359375e-05, -0.0033626556396484375, -6.67572021484375e-05, -2.6225747205899097e-05, -3.576278118089249e-07, -1.2397779755701777e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n", "score": -4.766537250736256, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.4804048538208008, -0.0003204345703125, -0.000339508056640625, -1.3470649719238281e-05, -0.00028130575083196163, -3.200961112976074, -0.0060710906982421875, -0.00196075439453125, -7.62939453125e-06, -8.559226262150332e-05, -3.814697265625e-06, -0.06541252136230469, -0.000118255615234375, -5.7220458984375e-06, -0.03507423400878906, -3.814697265625e-05, -0.0002075233933283016, -2.3841855067985307e-07, -3.0040442652534693e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -4.830479135082442, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -3.514303207397461, -0.3810539245605469, -0.012737274169921875, -2.86102294921875e-05, -0.0003204345703125, -0.0005168914794921875, -0.000102996826171875, -0.0030671358108520508, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.0068700313568115234, 0.0, -4.38690185546875e-05, -0.42275238037109375, -7.2479248046875e-05, -6.437291176553117e-06, 0.0, -4.649256879929453e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "score": -4.965732213557196, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.5715150833129883, -0.001129150390625, -0.001468658447265625, -3.814697265625e-05, -0.0017299652099609375, -3.814697265625e-06, -0.0002040863037109375, 0.0, -0.0010166168212890625, -2.86102294921875e-05, -0.013338804244995117, -1.9073486328125e-06, -0.0001068115234375, -1.9073486328125e-06, -2.175720453262329, -7.62939453125e-06, -1.1444091796875e-05, -0.24958229064941406, -0.0002899169921875, -1.1920928244535389e-07, -5.722029527532868e-06, -1.5499354049097747e-06, -7.510183422709815e-06, -0.0037101921625435352, 0.0, -0.0003147125244140625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 113, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -5.193461984249552, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -3.514303207397461, -1.1684017181396484, -2.6702880859375e-05, -8.96453857421875e-05, 0.0, -7.462501525878906e-05, -5.7220458984375e-06, -0.001341104507446289, 0.0, -0.0005283355712890625, -0.0001926422119140625, -5.7220458984375e-05, -0.0066814422607421875, -0.000335693359375, -0.0001659393310546875, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -4.017353057861328e-05, 0.0, -4.57763671875e-05, -0.00698089599609375, -0.0001316070556640625, 0.0, -9.775113539944869e-06, -5.962265277048573e-07, -5.245203283266164e-06, -0.005046466831117868, 0.0, -0.0003833770751953125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.359220698395681, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.841339111328125, -0.0016422271728515625, -0.0028839111328125, -1.71661376953125e-05, -0.001068115234375, -1.9073486328125e-06, -0.0001583099365234375, 0.0, -0.0013103485107421875, -4.38690185546875e-05, -0.006277918815612793, -3.814697265625e-06, -0.0001163482666015625, -1.9073486328125e-06, -0.11774289608001709, 0.0, -0.000118255615234375, -2.440969467163086, -2.288818359375e-05, -4.768370445162873e-07, -1.1920928244535389e-07, -2.5035296857822686e-06, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "score": -5.407599319234116, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.841339111328125, -0.0016422271728515625, -0.0028839111328125, -1.71661376953125e-05, -0.001068115234375, -1.9073486328125e-06, -0.0001583099365234375, 0.0, -0.0013103485107421875, -4.38690185546875e-05, -0.006277918815612793, -3.814697265625e-06, -0.0001163482666015625, -1.9073486328125e-06, -2.217603921890259, -7.62939453125e-06, -1.1444091796875e-05, -0.3853130340576172, -0.00032806396484375, -1.1920928244535389e-07, -6.079655122448457e-06, -7.154867489589378e-07, -7.510183422709815e-06, -0.003645930904895067, 0.0, -0.00031280517578125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template76"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 1, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 113, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score": -5.4941130697652625, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -3.514303207397461, -0.3810539245605469, -0.012737274169921875, -2.86102294921875e-05, -0.0003204345703125, -0.0005168914794921875, -0.000102996826171875, -0.0030671358108520508, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.0068700313568115234, 0.0, -4.38690185546875e-05, -1.0795440673828125, -0.0003948211669921875, 0.0, -2.13382354559144e-05, -1.1952215572819114e-07, -5.483620952873025e-06, -0.006116859149187803, 0.0, -0.0003871917724609375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 325, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.526039913223819, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.9682903289794922, -0.0003376007080078125, -0.9693717956542969, -0.0002765655517578125, -0.0002651214599609375, -6.127357482910156e-05, -0.0003214720345567912, -0.5715150833129883, -0.001129150390625, -0.001468658447265625, -3.814697265625e-05, -0.0017299652099609375, -3.814697265625e-06, -0.0002040863037109375, 0.0, -0.0010166168212890625, -2.86102294921875e-05, -0.013338804244995117, -1.9073486328125e-06, -0.0001068115234375, -1.9073486328125e-06, -0.1233295202255249, 0.0, -0.000102996826171875, -2.8665027618408203, -1.9073486328125e-05, -4.768370445162873e-07, -1.1920928244535389e-07, -2.2651183826383203e-06, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "DRAGON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.019451369807015, "score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -0.03148651123046875, -0.00022125244140625, -0.005657196044921875, -5.340576171875e-05, -0.000278472900390625, -0.000370025634765625, -5.7220458984375e-05, -5.333243370056152, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0006090402603149414, 0.0, -0.0001392364501953125, -0.15869140625, -4.76837158203125e-05, -6.5565000113565475e-06, -1.1920928244535389e-07, -2.3842794689699076e-06, -1.1920928244535389e-07]}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "HeroSelector", "hole4": [{"_type": "Template61"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(3), HeroSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -1.048692708711286, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.8472700119018555, -0.08491089195013046, -5.7220458984375e-05, 0.0, -8.0108642578125e-05, -0.0044078826904296875, -7.62939453125e-06, -0.0025951836723834276, -6.318092346191406e-06, -1.9073486328125e-06, -0.00013375282287597656, -7.82012939453125e-05, -1.1920928955078125e-05, 0.0, -9.72747802734375e-05, -4.76837158203125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00015175332373473793, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -1.2153374257395342, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -0.04449312388896942, -4.1961669921875e-05, 0.0, -0.1461496353149414, -0.004277229309082031, -4.38690185546875e-05, -2.3484230041503906e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.2957277297973633, -3.933906555175781e-06, -2.09808349609375e-05, -0.003871917724609375, -5.7220458984375e-06, -0.0019484758377075195, -7.104873657226562e-05, -3.814697265625e-06, -0.0019445419311523438, -1.9073486328125e-06, -3.361677227076143e-05, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00019156916823703796, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, BothPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -2.3079450430013537, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -0.04449312388896942, -4.1961669921875e-05, 0.0, -0.1461496353149414, -0.004277229309082031, -4.38690185546875e-05, -2.3484230041503906e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.389291763305664, -7.867813110351562e-06, -0.00018310546875, -0.002590179443359375, -1.9073486328125e-05, -0.0021713972091674805, -7.128715515136719e-05, -3.814697265625e-06, -0.0018587112426757812, -1.9073486328125e-06, -3.838502743747085e-05, 0.0, -3.0517578125e-05, -4.00543212890625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00019347651686985046, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -2.853161007621992, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -0.04449312388896942, -4.1961669921875e-05, 0.0, -2.079242706298828, -0.010562896728515625, -7.62939453125e-06, -0.001841544988565147, -5.960462203802308e-06, 0.0, -0.00019311904907226562, -6.103515625e-05, -1.1920928955078125e-05, 0.0, -8.96453857421875e-05, -5.53131103515625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.0001494883472332731, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template60"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.079304922929168, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -3.793126106262207, -3.6954811548639555e-06, -3.7312503991415724e-05, -2.384185791015625e-06, -1.9073486328125e-06, -0.0010734796524047852, 0.0, -0.00021171547996345907, 0.0, -0.026476088911294937, -0.008113382384181023, -1.33514404296875e-05, -0.021213531494140625, -0.002596616744995117, -3.457057391642593e-05, 0.0, -0.0002841949462890625, -1.9073486328125e-06, 0.0, -0.0005922317504882812, 0.0, -0.000537872314453125, -1.1444091796875e-05, -0.0002627372450660914, -3.62396240234375e-05, -1.9073486328125e-06, -2.09808349609375e-05, -3.24249267578125e-05, -0.0032024383544921875, -5.7220458984375e-06, -0.18206024169921875, -5.7220458984375e-06, -0.008167386054992676, -0.00022709369659423828, -1.9073486328125e-06, -0.005368351936340332, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.00022125244140625, -0.000789642333984375, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -0.0002995709655806422, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "PlayerSelector", "hole4": [{"_type": "Template61"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 104, "Player", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(3), PlayerSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.314190359429148, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.8472700119018555, -3.3442416191101074, -3.933906555175781e-06, 0.0, -0.0001277923583984375, -0.0071563720703125, -7.62939453125e-06, -0.006076321937143803, -6.556510470545618e-06, -1.9073486328125e-06, -9.942054748535156e-05, -7.2479248046875e-05, -1.1920928955078125e-05, 0.0, -8.20159912109375e-05, -4.76837158203125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00014781941717956215, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "HeroSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), HeroSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.543384535346803, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -3.814950942993164, -0.00018310546875, 0.0, -0.000133514404296875, -0.008733749389648438, -5.7220458984375e-06, -0.0024588084779679775, -4.768371127283899e-06, 0.0, -0.00013756752014160156, -7.62939453125e-05, -1.1920928955078125e-05, 0.0, -9.1552734375e-05, -4.9591064453125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00014233578986022621, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template61"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 104, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(3), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -4.895989045841787, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.8472700119018555, -3.6576879024505615, -1.71661376953125e-05, 0.0, -0.2696237564086914, -0.00988006591796875, -2.09808349609375e-05, -0.002069830661639571, -7.033347174001392e-06, -1.9073486328125e-06, -0.00018537044525146484, -7.2479248046875e-05, -1.1801719665527344e-05, 0.0, -9.34600830078125e-05, -5.53131103515625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.0001550911838421598, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "HeroSelector", "hole4": [{"_type": "Template61"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "<UNK>Blademaster"}, "choice_history": [121, 198, "<UNK>", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class <UNK>Blademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(3), HeroSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.171640701468249, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -4.139407157897949, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.8472700119018555, -0.08491089195013046, -5.7220458984375e-05, 0.0, -8.0108642578125e-05, -0.0044078826904296875, -7.62939453125e-06, -0.0025951836723834276, -6.318092346191406e-06, -1.9073486328125e-06, -0.00013375282287597656, -7.82012939453125e-05, -1.1920928955078125e-05, 0.0, -9.72747802734375e-05, -4.76837158203125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00015175332373473793, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template75"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 112, "Minion", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(False),\n            MinionSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.218272365969796, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -4.678702354431152, -0.10015671700239182, -1.33514404296875e-05, 0.0, -0.31872081756591797, -0.0094451904296875, -1.33514404296875e-05, -0.0017889735754579306, -5.7220440794480965e-06, 0.0, -0.00021207332611083984, -6.29425048828125e-05, -1.1920928955078125e-05, 0.0, -9.1552734375e-05, -5.7220458984375e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.0001533030444988981, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "<UNK>Blademaster"}, "choice_history": [121, 198, "<UNK>", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class <UNK>Blademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.338285418496497, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -4.139407157897949, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -0.04449312388896942, -4.1961669921875e-05, 0.0, -0.1461496353149414, -0.004277229309082031, -4.38690185546875e-05, -2.3484230041503906e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.2957277297973633, -3.933906555175781e-06, -2.09808349609375e-05, -0.003871917724609375, -5.7220458984375e-06, -0.0019484758377075195, -7.104873657226562e-05, -3.814697265625e-06, -0.0019445419311523438, -1.9073486328125e-06, -3.361677227076143e-05, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00019156916823703796, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "PlayerSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Player", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), PlayerSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.412042243049626, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -4.683143615722656, -1.9073486328125e-06, 0.0, -0.0001583099365234375, -0.007080078125, -7.62939453125e-06, -0.004780408926308155, -4.410743713378906e-06, -1.9073486328125e-06, -9.930133819580078e-05, -7.62939453125e-05, -1.1801719665527344e-05, 0.0, -8.0108642578125e-05, -4.76837158203125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00014603127783630043, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole6": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Character", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4),\n            CharacterSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.507930621381064, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -4.7796125411987305, -3.314018249511719e-05, 0.0, -0.003841400146484375, -0.0042266845703125, -2.288818359375e-05, -0.0032150738406926394, -6.318092346191406e-06, -1.9073486328125e-06, -0.00018525123596191406, -8.0108642578125e-05, -1.1801719665527344e-05, 0.0, -9.34600830078125e-05, -4.9591064453125e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00014770020789001137, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template60"}], "_type": "Template6", "hole6": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Minion", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.9389228972249555, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -4.794441223144531, -0.3077566921710968, -5.7220458984375e-06, 0.0, -0.44396018981933594, -0.0024776458740234375, -4.9591064453125e-05, -2.002716064453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.27194881439208984, -3.933906555175781e-06, -2.288818359375e-05, -0.005168914794921875, -5.7220458984375e-06, -0.0018929243087768555, -7.104873657226562e-05, -3.814697265625e-06, -0.0019521713256835938, -1.9073486328125e-06, -3.480883970041759e-05, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00018787368026096374, -5.7220458984375e-06]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template60"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "hole1": 4, "_type": "Template41"}, "_type": "keyword"}], "hole0": "Injured Blademaster"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 7, "_type": "Template32"}], "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 36, 247, "Random", "Picker", "<EOS>", "4", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=RandomPicker(4))))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score": -5.957299536563831, "score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -3.793126106262207, -3.6954811548639555e-06, -3.7312503991415724e-05, -2.384185791015625e-06, -1.9073486328125e-06, -0.0010734796524047852, 0.0, -0.00021171547996345907, 0.0, -0.026476088911294937, -0.008113382384181023, -1.33514404296875e-05, -0.021213531494140625, -0.002596616744995117, -3.457057391642593e-05, 0.0, -0.0002841949462890625, -1.9073486328125e-06, 0.0, -0.0005922317504882812, 0.0, -0.000537872314453125, -1.1444091796875e-05, -0.0002627372450660914, -3.62396240234375e-05, -1.9073486328125e-06, -2.09808349609375e-05, -3.24249267578125e-05, -0.0032024383544921875, -5.7220458984375e-06, -1.881734848022461, -0.0027027130126953125, -0.013956069946289062, -0.0004405975341796875, -1.9073486328125e-06, -0.14951367676258087, -1.9073486328125e-06, -0.026437044143676758, -1.9073486328125e-06, -8.463859558105469e-06, 0.0, -0.0001373291015625, -7.43865966796875e-05, -4.57763671875e-05, 1.1920928244535389e-07, -2.0265579223632812e-06, -0.00017261484754271805, -7.62939453125e-06]}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -2.1624338317763545, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.6549949645996094, -0.006888151168823242, -3.051753265026491e-05, -0.02624797821044922, -0.019288063049316406, -0.03619539737701416, -0.0004844644572585821, 0.0, -0.26120853424072266, -2.09808349609375e-05, 0.0, -0.0026988983154296875, -6.4849853515625e-05, -0.0009822845458984375, 0.0, -0.156793475151062, -1.1324880688334815e-05, 0.0, -0.0001125335693359375, -3.814697265625e-06, -0.0031948089599609375, -1.1444091796875e-05, -0.0002574920654296875, -5.7220458984375e-06, -0.007959127426147461, -9.775159924174659e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.002521514892578125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "hole1": 3, "_type": "Template41"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 89, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, BothPlayer(), RandomPicker(3\n            ))))])\n", "score": -2.820581290212715, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.7869949340820312, -0.00011873245239257812, -0.00011730193364201114, -0.0009021759033203125, -0.036182403564453125, -0.008462394587695599, -6.75909104757011e-05, 0.0, -0.0003223419189453125, -0.23531055450439453, -0.000286102294921875, -2.682209014892578e-05, 0.0, -0.0126800537109375, -5.7220458984375e-06, -0.10277748107910156, -1.3470649719238281e-05, -1.9073486328125e-06, -0.5235872268676758, -0.00763702392578125, -0.02151501178741455, -0.0008146762847900391, -2.09808349609375e-05, -0.07257679849863052, -2.47955322265625e-05, -2.86102294921875e-05, -0.0276641845703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "hole1": 3, "_type": "Template41"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 89, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(Null, BothPlayer(),\n            RandomPicker(3))))])\n", "score": -3.525623598818413, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.74378502368927, -0.3655548095703125, -1.3470649719238281e-05, -0.00040435791015625, -1.0577096939086914, -0.00052642822265625, -0.002188442973420024, -0.015865009278059006, -0.0004024505615234375, -0.000125885009765625, -0.000530242919921875, -0.21690082550048828, -0.00012767314910888672, -6.520748138427734e-05, -0.0014476776123046875, -0.06297492980957031, -0.008079848252236843, -8.010805322555825e-05, 0.0, -0.0003719329833984375, -0.1754617691040039, -0.000255584716796875, -2.300739288330078e-05, 0.0, -0.0131378173828125, -5.7220458984375e-06, -0.08199405670166016, -1.3470649719238281e-05, -1.9073486328125e-06, -0.5022735595703125, -0.007266998291015625, -0.022687077522277832, -0.0007631778717041016, -1.9073486328125e-05, -0.07372163236141205, -2.47955322265625e-05, -2.86102294921875e-05, -0.027669906616210938]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "condition", "value": {"value": "Null", "_type": "NameConstant"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 329, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "score": -3.6847932029634762, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.6549949645996094, -0.006888151168823242, -3.051753265026491e-05, -0.02624797821044922, -0.019288063049316406, -0.03619539737701416, -0.0004844644572585821, 0.0, -1.561117172241211, -0.0013484954833984375, -5.7220458984375e-06, -0.0026025772094726562, -9.5367431640625e-05, -0.00099945068359375, 0.0, -0.03941535949707031, -1.251697449333733e-05, 0.0, -0.00035858154296875, -1.33514404296875e-05, -0.014795303344726562, -9.5367431640625e-06, -0.0011310577392578125, -7.62939453125e-06, -0.011500000953674316, -1.0967253729177173e-05, -1.9073486328125e-06, -0.0001010894775390625, -0.000118255615234375, -0.23964881896972656, 0.0, -0.06957054138183594, -0.014101028442382812, -0.0003662109375, -1.9073486328125e-06, -0.0006313323974609375, -0.0002574920654296875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "score": -3.9913501430403926, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.6549949645996094, -0.006888151168823242, -3.051753265026491e-05, -0.02624797821044922, -0.019288063049316406, -0.03619539737701416, -0.0004844644572585821, 0.0, -0.26120853424072266, -2.09808349609375e-05, 0.0, -0.0026988983154296875, -6.4849853515625e-05, -0.0009822845458984375, 0.0, -1.9861658811569214, -9.298322765971534e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -0.002166748046875, -9.5367431640625e-06, -0.000247955322265625, -7.62939453125e-06, -0.008762478828430176, -9.298322765971534e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.00228118896484375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "OneIn", "hole1": 2, "_type": "Template41"}, {"hole0": "OpponentMinionCountIsGreaterThan", "hole1": 0, "_type": "Template41"}], "_type": "Call"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 68, 163, 25, 186, "And", "<EOS>", 321, 89, 247, "One", "In", "<EOS>", "2", "<EOS>", 89, 247, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, BothPlayer(), And(OneIn(2),\n            OpponentMinionCountIsGreaterThan(0)))))])\n", "score": -4.212066697229886, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.7869949340820312, -0.00011873245239257812, -0.00011730193364201114, -0.0009021759033203125, -0.036182403564453125, -0.008462394587695599, -6.75909104757011e-05, 0.0, -0.0003223419189453125, -0.23531055450439453, -0.000286102294921875, -2.682209014892578e-05, 0.0, -0.0126800537109375, -5.7220458984375e-06, -0.10277748107910156, -1.3470649719238281e-05, -1.9073486328125e-06, -1.1032228469848633, -0.0523529052734375, -0.0025081634521484375, -1.9073486328125e-06, -0.05607187747955322, -9.5367431640625e-06, -0.009546279907226562, -0.001178741455078125, -0.0008182525634765625, -0.6223889589309692, -0.021620750427246094, -2.47955322265625e-05, -0.010780326090753078, -3.24249267578125e-05, -0.011035919189453125, -2.6702880859375e-05, -0.016618013381958008, -0.005053520202636719, -0.011724472045898438, -0.0006313323974609375, -0.0002460479736328125, -0.0042057037353515625, -0.053765296936035156, -0.05867660045623779, -1.9073486328125e-06, -0.0001430511474609375, -0.0026683807373046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker())))])\n", "score": -4.531480402760565, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.74378502368927, -0.3655548095703125, -1.3470649719238281e-05, -0.00040435791015625, -1.0577096939086914, -0.00052642822265625, -0.002188442973420024, -0.015865009278059006, -0.0004024505615234375, -0.000125885009765625, -0.000530242919921875, -1.7754087448120117, -0.005207180976867676, -2.6822061045095325e-05, -0.023853302001953125, -0.030988693237304688, -0.020681023597717285, -0.001086709788069129, 0.0, -0.19712162017822266, -1.52587890625e-05, 0.0, -0.002590179443359375, -5.14984130859375e-05, -0.001071929931640625, 0.0, -0.12914705276489258, -9.775159924174659e-06, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.003688812255859375, -1.1444091796875e-05, -0.000247955322265625, -5.7220458984375e-06, -0.007521510124206543, -9.775159924174659e-06, 0.0, -3.814697265625e-06, -0.0023937225341796875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"hole2": [{"_type": "Template53"}, {"_type": "Template79"}], "hole0": "Not", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 84, 239, "Not", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 321, 99, 114, 93, 255, "Both", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Not(IsType(MINION_TYPE.MECH, True)\n            ), BothPlayer(), RandomPicker())))])\n", "score": -4.623021059393352, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.7869949340820312, -0.00011873245239257812, -0.00011730193364201114, -0.0009021759033203125, -0.036182403564453125, -0.008462394587695599, -6.75909104757011e-05, 0.0, -0.0003223419189453125, -1.713150978088379, -8.96453857421875e-05, -0.8169512748718262, -0.0001277923583984375, -0.00382232666015625, 0.0, -0.0024709701538085938, -0.00048065185546875, -1.9073486328125e-06, -0.11312294006347656, -0.034252166748046875, -0.009720802307128906, -0.0028705596923828125, -1.9073486328125e-06, -0.0008141994476318359, -8.34464663057588e-06, -2.384185791015625e-06, -0.10624408721923828, -7.62939453125e-05, -0.0011333224829286337, -0.00010406753426650539, -9.5367431640625e-06, -1.9073486328125e-06, -0.001953125]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "score": -4.756620193719357, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -2.611147165298462, 0.0, -0.00012814997171517462, 0.0, -0.0003886222839355469, 0.0, -5.006789251638111e-06, 0.0, -3.62396240234375e-05, -0.014430999755859375, -3.24249267578125e-05, -4.768369876728684e-07, -1.4305104514278355e-06, -3.0517578125e-05, -8.67805938469246e-05, -1.1682510375976562e-05, -2.9802276912960224e-06, -0.000102996826171875, -0.000274658203125, -0.011829376220703125, -0.7941156625747681, -0.05585277080535889, -1.740455445542466e-05, -0.0003604888916015625, -0.0634317398071289, -0.00074005126953125, -0.006199118681252003, -0.009676315821707249, -0.0001049041748046875, -5.53131103515625e-05, -0.000278472900390625, -0.6489238739013672, -0.007010340690612793, -3.0994364351499826e-05, -0.02666187286376953, -0.01984882354736328, -0.0362088680267334, -0.0004867294046562165, 0.0, -0.25894737243652344, -2.09808349609375e-05, 0.0, -0.0026988983154296875, -6.29425048828125e-05, -0.000980377197265625, 0.0, -0.15842127799987793, -1.1324880688334815e-05, 0.0, -0.0001125335693359375, -3.814697265625e-06, -0.00319671630859375, -1.1444091796875e-05, -0.0002574920654296875, -5.7220458984375e-06, -0.007953524589538574, -9.775159924174659e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0024547576904296875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionPlaced", "hole1": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Minion", "Placed", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionPlaced(Damage(1)),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.792947700587604, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.74378502368927, -1.2077035903930664, -8.285045623779297e-05, -0.0009822845458984375, -0.0922088623046875, -0.018808364868164062, -0.748796820640564, -0.6035174131393433, -0.0027114131953567266, -0.0005054473876953125, -7.62939453125e-06, -0.004080772399902344, -0.15459060668945312, -0.0289839506149292, -0.0005208253860473633, -1.52587890625e-05, -1.0363960266113281, -0.000457763671875, -0.002386808395385742, -0.0002288818359375, -0.0007840394973754883, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002994537353515625, -0.0019683837890625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, BothPlayer(), RandomPicker())))]\n            )\n", "score": -4.822968299744673, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.7869949340820312, -0.00011873245239257812, -0.00011730193364201114, -0.0009021759033203125, -0.036182403564453125, -0.008462394587695599, -6.75909104757011e-05, 0.0, -0.0003223419189453125, -0.23531055450439453, -0.000286102294921875, -2.682209014892578e-05, 0.0, -0.0126800537109375, -5.7220458984375e-06, -0.10277748107910156, -1.3470649719238281e-05, -1.9073486328125e-06, -2.651857376098633, -4.38690185546875e-05, -0.0016391277313232422, -2.0861596567556262e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0026798248291015625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionPlaced", "hole1": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Minion", "Placed", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionPlaced(Damage(1)),\n            ActionTag(Give(ChangeHealth(1)), SelfSelector()))])\n", "score": -4.82813148793349, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.74378502368927, -1.2077035903930664, -8.285045623779297e-05, -0.0009822845458984375, -0.0922088623046875, -0.018808364868164062, -0.748796820640564, -0.6035174131393433, -0.0027114131953567266, -0.0005054473876953125, -7.62939453125e-06, -0.004080772399902344, -0.15459060668945312, -0.0289839506149292, -0.0005208253860473633, -1.52587890625e-05, -1.058476448059082, -0.00075531005859375, -0.0006061792373657227, -4.38690185546875e-05, -0.016783833503723145, -1.9073486328125e-06, 0.0, -0.0004329681396484375, -0.0006084442138671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "hole1": 3, "_type": "Template41"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 89, 247, "Random", "Picker", "<EOS>", "3", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, EnemyPlayer(), RandomPicker(\n            3))))])\n", "score": -4.919662702170456, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.7869949340820312, -0.00011873245239257812, -0.00011730193364201114, -0.0009021759033203125, -0.036182403564453125, -0.008462394587695599, -6.75909104757011e-05, 0.0, -0.0003223419189453125, -0.23531055450439453, -0.000286102294921875, -2.682209014892578e-05, 0.0, -0.0126800537109375, -5.7220458984375e-06, -2.42596435546875, -1.1563301086425781e-05, 0.0, -0.33023929595947266, -0.010486602783203125, -0.013906598091125488, -0.0009348392486572266, -1.71661376953125e-05, -0.041804008185863495, -1.71661376953125e-05, -2.288818359375e-05, -0.03233909606933594]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "OneIn", "hole1": 2, "_type": "Template41"}, {"hole0": "OpponentMinionCountIsGreaterThan", "hole1": 0, "_type": "Template41"}], "_type": "Call"}], "hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 225, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 68, 163, 25, 186, "And", "<EOS>", 321, 89, 247, "One", "In", "<EOS>", "2", "<EOS>", 89, 247, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "0", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(Null, BothPlayer(), And(\n            OneIn(2), OpponentMinionCountIsGreaterThan(0)))))])\n", "score": -4.999706432905725, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.74378502368927, -0.3655548095703125, -1.3470649719238281e-05, -0.00040435791015625, -1.0577096939086914, -0.00052642822265625, -0.002188442973420024, -0.015865009278059006, -0.0004024505615234375, -0.000125885009765625, -0.000530242919921875, -0.21690082550048828, -0.00012767314910888672, -6.520748138427734e-05, -0.0014476776123046875, -0.06297492980957031, -0.008079848252236843, -8.010805322555825e-05, 0.0, -0.0003719329833984375, -0.1754617691040039, -0.000255584716796875, -2.300739288330078e-05, 0.0, -0.0131378173828125, -5.7220458984375e-06, -0.08199405670166016, -1.3470649719238281e-05, -1.9073486328125e-06, -1.1661577224731445, -0.05090904235839844, -0.0024003982543945312, -1.9073486328125e-06, -0.0552440881729126, -9.5367431640625e-06, -0.009691238403320312, -0.0011692047119140625, -0.0008029937744140625, -0.62452232837677, -0.021982192993164062, -2.47955322265625e-05, -0.010689846239984035, -3.24249267578125e-05, -0.0111541748046875, -2.6702880859375e-05, -0.016649484634399414, -0.005053520202636719, -0.011742591857910156, -0.0006351470947265625, -0.0002460479736328125, -0.004212379455566406, -0.053874969482421875, -0.05848205089569092, -1.9073486328125e-06, -0.0001430511474609375, -0.00267791748046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Knife Juggler", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 2, "hole0": "Minion", "hole1": 3, "hole3": [{"hole2": [{"hole0": "Damage", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole5": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "CardUsed", "hole1": [{"hole0": "IsSpell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 329, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), picker=RandomPicker())))])\n", "score": -5.026257126415942, "score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.6549949645996094, -0.006888151168823242, -3.051753265026491e-05, -0.02624797821044922, -0.019288063049316406, -0.03619539737701416, -0.0004844644572585821, 0.0, -1.561117172241211, -0.0013484954833984375, -5.7220458984375e-06, -0.0026025772094726562, -9.5367431640625e-05, -0.00099945068359375, 0.0, -0.03941535949707031, -1.251697449333733e-05, 0.0, -0.00035858154296875, -1.33514404296875e-05, -0.014795303344726562, -9.5367431640625e-06, -0.0011310577392578125, -7.62939453125e-06, -0.011500000953674316, -1.0967253729177173e-05, -1.9073486328125e-06, -0.0001010894775390625, -0.000118255615234375, -1.6195411682128906, -1.9073486328125e-06, -0.0005207061767578125, -7.62939453125e-06, -0.04124891757965088, -1.3589857189799659e-05, 0.0, -1.9073486328125e-06, -0.0047054290771484375]}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\n", "score": -1.8059022627702461, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -0.4114466905593872, -1.9073486328125e-06, -0.0162353515625, -0.000125885009765625, -0.00063323974609375, -1.1444091796875e-05, -0.00015461444854736328, -0.0017528533935546875, -1.9073486328125e-06, -0.4807065725326538, -3.4332275390625e-05, -7.43865966796875e-05, -0.008924603462219238, -1.71661376953125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.0029354095458984375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(1))]), SelfSelector()))])\n", "score": -2.348086854063581, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -1.1697112321853638, -1.9073486328125e-06, -0.0031566619873046875, -0.0007915496826171875, -0.000270843505859375, -1.33514404296875e-05, -0.00010347366333007812, -0.0031223297119140625, -1.9073486328125e-06, -0.27834975719451904, -2.6702880859375e-05, -5.340576171875e-05, -0.0061550140380859375, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0034618377685546875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole3": "CardSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, "Card", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            Buff(ManaChange(-1))), CardSelector()))])\n", "score": -2.581813593947004, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -1.7670040130615234, -0.0009899139404296875, -0.009380221366882324, -5.8770179748535156e-05, -0.000225067138671875, -1.9073486328125e-06, -0.004364967346191406, -5.91278076171875e-05, -0.0001659393310546875, -0.4512825012207031, -0.01608419418334961, -3.814697265625e-06, 0.0, -7.62939453125e-06, -0.0063686370849609375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            ChangeAttack(2)), SelfSelector()))])\n", "score": -2.6567702494493233, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -2.087590217590332, -0.0005321502685546875, -0.18907523155212402, -1.9073486328125e-06, -0.00043773651123046875, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -0.053302764892578125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Kill", "hole3": "MinionSelector", "hole5": [{"arg": "condition", "value": {"value": "Null", "_type": "NameConstant"}, "_type": "keyword"}, {"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 221, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Kill(),\n            MinionSelector(condition=Null, players=BothPlayer())))])\n", "score": -2.845950057350592, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -2.206456184387207, -0.0017150640487670898, -4.768370445162873e-07, -0.030941873788833618, -9.5367431640625e-06, -1.9073486328125e-06, -0.1308460235595703, -3.814697265625e-06, -5.7220458984375e-06, -0.23042774200439453, -1.33514404296875e-05, -0.0029697418212890625, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -0.007740020751953125, -3.814697265625e-06, -0.0001354217529296875, 0.0, -0.14634621143341064, -1.800060272216797e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0049839019775390625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 5, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "5", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(1)), Buff(ChangeHealth(5))]), SelfSelector()))])\n", "score": -3.0810518465867744, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -0.4114466905593872, -1.9073486328125e-06, -0.0162353515625, -0.000125885009765625, -0.00063323974609375, -1.1444091796875e-05, -0.00015461444854736328, -0.0017528533935546875, -1.9073486328125e-06, -1.7139842510223389, -0.04724884033203125, -0.0009517669677734375, -0.004199981689453125, -1.9073486328125e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.0014324188232421875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(1)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -3.3391890726915108, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -0.4114466905593872, -1.9073486328125e-06, -0.0162353515625, -0.000125885009765625, -0.00063323974609375, -1.1444091796875e-05, -0.00015461444854736328, -0.0017528533935546875, -1.9073486328125e-06, -2.0110199451446533, -0.0006866455078125, -0.0001125335693359375, -0.0113067626953125, -5.340576171875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0027980804443359375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template40"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 88, 246, "2", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            ChangeHealth(2)), SelfSelector()))])\n", "score": -4.2005218467955885, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -3.5429296493530273, -0.0003757476806640625, -0.32784950733184814, -1.1920928244535389e-07, -0.0006603001966141164, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -0.00287628173828125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "score": -4.2238706551423775, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -1.1697112321853638, -1.9073486328125e-06, -0.0031566619873046875, -0.0007915496826171875, -0.000270843505859375, -1.33514404296875e-05, -0.00010347366333007812, -0.0031223297119140625, -1.9073486328125e-06, -2.152043104171753, -0.00096893310546875, -9.72747802734375e-05, -0.007984161376953125, -4.57763671875e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.002712249755859375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(4\n            ), HeroSelector()))])\n", "score": -4.474447747313093, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -3.747358798980713, -4.0411949157714844e-05, -1.33514404296875e-05, -0.35173988342285156, -0.10922467708587646, -3.933906555175781e-06, 0.0, -9.5367431640625e-06, -0.0018444061279296875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole3": "use", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47, "use", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            Buff(ManaChange(-3))), use()))])\n", "score": -4.52863170727403, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -1.7670040130615234, -0.0009899139404296875, -0.009380221366882324, -5.8770179748535156e-05, -0.000225067138671875, -1.9073486328125e-06, -0.004364967346191406, -5.91278076171875e-05, -0.0001659393310546875, -1.5949335098266602, -0.697150468826294, -0.10308074951171875, -1.9073486328125e-06, -0.02539825439453125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole3": "Give", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49, "Give", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            Buff(ManaChange(-4))), Give()))])\n", "score": -4.546635528647016, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -1.7670040130615234, -0.0009899139404296875, -0.009380221366882324, -5.8770179748535156e-05, -0.000225067138671875, -1.9073486328125e-06, -0.004364967346191406, -5.91278076171875e-05, -0.0001659393310546875, -2.097787857055664, -0.24986600875854492, -0.023594975471496582, -1.9073486328125e-06, -0.06731796264648438]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Kill", "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Kill(),\n            SelfSelector()))])\n", "score": -4.662464510078621, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -3.8667044639587402, -0.7082940340042114, -4.7683060984127223e-05, -0.004046788904815912, -4.053113570989808e-06, 0.0, -5.7220458984375e-05, -3.62396240234375e-05]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Kill", "hole3": "MinionSelector", "hole5": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 221, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Kill(),\n            MinionSelector(picker=RandomPicker())))])\n", "score": -4.6833793423927546, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -2.206456184387207, -0.0017150640487670898, -4.768370445162873e-07, -0.030941873788833618, -9.5367431640625e-06, -1.9073486328125e-06, -2.1091670989990234, -5.7220458984375e-06, -2.6702880859375e-05, -0.1664104461669922, -0.0001735687255859375, -0.0001430511474609375, 0.0, -0.0839989185333252, -1.3351433153729886e-05, 0.0, -5.7220458984375e-06, -0.0010356903076171875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Lightwell", "hole1": 2, "hole3": "RARE", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 5, "hole0": "Minion", "hole1": 0, "hole3": [{"hole2": [{"hole0": "Draw", "hole3": "PlayerSelector", "_type": "Template23"}], "hole0": "TurnStarted", "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 220, "Draw", "<EOS>", "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Draw(),\n            PlayerSelector()))])\n", "score": -4.760581512032211, "score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -3.8667044639587402, -0.8104668855667114, -1.1920928244535389e-07, -7.104728138074279e-05, -2.0265579223632812e-06, 0.0, -3.24249267578125e-05, -3.0517578125e-05]}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.4598411780881975, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.440278172492981, 0.0, -9.369850158691406e-05, 0.0, -6.198883056640625e-06, 0.0, -7.62939453125e-06, -0.07697105407714844, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -3.576278118089249e-07, 0.0, -1.3828277587890625e-05, -2.7418097943154862e-06, -2.86102294921875e-05, -7.82012939453125e-05, -0.000560760498046875, -0.03831601142883301, -0.038074374198913574, -2.121925172104966e-05, -0.003536224365234375, -0.278717041015625, -0.004741668701171875, -0.07961301505565643, -0.03456898778676987, -0.3547883927822113, -0.0012786310398951173, -1.33514404296875e-05, -0.0077152252197265625, -0.0038995742797851562, -0.00029965845169499516, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006427764892578125, -0.00012969970703125, -0.0005016326904296875, -3.0517578125e-05, -0.0047806501388549805, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002288818359375]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -2.8529084316688227, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.5495167970657349, 0.0, -0.3463493585586548, 0.0, -6.4373016357421875e-06, 0.0, -7.62939453125e-06, -0.017284393310546875, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, -5.960462772236497e-07, 0.0, -1.7762184143066406e-05, -2.0265558760002023e-06, -2.47955322265625e-05, -4.9591064453125e-05, -0.0007839202880859375, -0.06334741413593292, -0.029619693756103516, -1.668929871811997e-05, -0.001956939697265625, -0.27550220489501953, -0.0027446746826171875, -0.08210407197475433, -0.03391282632946968, -0.33911213278770447, -0.0010497728362679482, -1.33514404296875e-05, -0.008897781372070312, -0.004052162170410156, -0.00026736059226095676, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006256103515625, -0.0001316070556640625, -0.0005092620849609375, -3.24249267578125e-05, -0.0048607587814331055, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002002716064453125]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.0315377056301145, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.7824021577835083, 0.0, -0.34639525413513184, 0.0, -9.846443572314456e-05, 0.0, -1.71661376953125e-05, -0.0002613067626953125, -0.00049591064453125, 0.0, -1.1444091796875e-05, -3.576278118089249e-07, 0.0, -2.1338462829589844e-05, -2.264974000354414e-06, -3.0517578125e-05, -5.14984130859375e-05, -0.000701904296875, -0.03548619523644447, -0.035060882568359375, -1.96695291379001e-05, -0.003513336181640625, -0.267791748046875, -0.0036411285400390625, -0.06741299480199814, -0.034387052059173584, -0.3436444103717804, -0.0013464841758832335, -1.33514404296875e-05, -0.0080718994140625, -0.004244804382324219, -0.0003063324256800115, -1.5497207641601562e-05, -1.1444091796875e-05, -0.00061798095703125, -0.00012969970703125, -0.000469207763671875, -3.24249267578125e-05, -0.0047844648361206055, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000209808349609375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.043250894664169, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -2.012824058532715, 0.0, -0.0001493692398071289, 0.0, -6.79492904964718e-06, 0.0, -5.7220458984375e-06, -0.0633544921875, -4.00543212890625e-05, 0.0, -9.5367431640625e-06, -2.3841855067985307e-07, 0.0, -1.5735626220703125e-05, -3.576272320060525e-06, -2.6702880859375e-05, -8.392333984375e-05, -0.000576019287109375, -0.036845527589321136, -0.03766822814941406, -2.133846101060044e-05, -0.0036163330078125, -0.2932252883911133, -0.004856109619140625, -0.0900425910949707, -0.03495725616812706, -0.35509583353996277, -0.001366024138405919, -1.33514404296875e-05, -0.008115768432617188, -0.0039539337158203125, -0.00031503234640695155, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006198883056640625, -0.000125885009765625, -0.000484466552734375, -3.24249267578125e-05, -0.0047043561935424805, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002307891845703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.315276358160361, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -2.3300018310546875, 0.0, -0.0009900331497192383, 0.0, -4.291534423828125e-06, 0.0, -9.5367431640625e-06, -0.07410907745361328, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, -3.576278118089249e-07, 0.0, -1.7762184143066406e-05, -2.0265558760002023e-06, -2.47955322265625e-05, -5.53131103515625e-05, -0.00067901611328125, -0.04988156259059906, -0.030659198760986328, -1.6808508007670753e-05, -0.001865386962890625, -0.2644338607788086, -0.002910614013671875, -0.07647377252578735, -0.03409118577837944, -0.33882638812065125, -0.0010214278008788824, -1.1444091796875e-05, -0.0086822509765625, -0.0039157867431640625, -0.00026736059226095676, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006237030029296875, -0.0001316070556640625, -0.0004978179931640625, -3.24249267578125e-05, -0.0049256086349487305, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002040863037109375]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.3322147087254166, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.9285279512405396, 0.0, -0.4400467872619629, 0.0, -2.3126571250031702e-05, 0.0, -3.24249267578125e-05, -0.0006847381591796875, -0.000263214111328125, 0.0, -1.33514404296875e-05, -5.960462772236497e-07, 0.0, -1.7642974853515625e-05, -2.861018856492592e-06, -2.86102294921875e-05, -7.62939453125e-05, -0.0006237030029296875, -0.036647748202085495, -0.03947174549102783, -2.15768777707126e-05, -0.0035800933837890625, -0.29912662506103516, -0.00470733642578125, -0.07911738008260727, -0.033129747956991196, -0.35567712783813477, -0.0014719514874741435, -1.33514404296875e-05, -0.008068084716796875, -0.00439453125, -0.0003211103321518749, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006256103515625, -0.00012969970703125, -0.00048065185546875, -3.0517578125e-05, -0.004782557487487793, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002117156982421875]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MURLOC)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "score": -3.7089487219038233, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.440278172492981, 0.0, -9.369850158691406e-05, 0.0, -6.198883056640625e-06, 0.0, -7.62939453125e-06, -0.07697105407714844, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -3.576278118089249e-07, 0.0, -1.3828277587890625e-05, -2.7418097943154862e-06, -2.86102294921875e-05, -7.82012939453125e-05, -0.000560760498046875, -0.03831601142883301, -0.038074374198913574, -2.121925172104966e-05, -0.003536224365234375, -1.5075464248657227, -6.866455078125e-05, -2.6702880859375e-05, 0.0, -0.0005134344100952148, -6.306171417236328e-05, -1.1563301086425781e-05, -1.1444091796875e-05, -0.023340225219726562, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001163482666015625, -1.9073486328125e-06, -0.45085346698760986, -1.52587890625e-05, -8.7738037109375e-05, -0.01026153564453125, -0.01540374755859375, -5.19749301020056e-05, -1.1563301086425781e-05, -7.62939453125e-06, -0.008378028869628906, -1.71661376953125e-05, -0.0027629139367491007, -1.52587890625e-05, -0.0005013942718505859, -1.3470649719238281e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009899139404296875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.722237724461934, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.5495167970657349, 0.0, -1.2466379404067993, 0.0, -2.002716064453125e-05, 0.0, -2.6702880859375e-05, -0.00054168701171875, -0.0001811981201171875, 0.0, -1.33514404296875e-05, -8.344646857949556e-07, 0.0, -2.1576881408691406e-05, -1.7881377516459906e-06, -2.47955322265625e-05, -4.76837158203125e-05, -0.0007877349853515625, -0.043552886694669724, -0.0327451229095459, -1.7166135876323096e-05, -0.0020465850830078125, -0.2937440872192383, -0.0027561187744140625, -0.07358905673027039, -0.032633207738399506, -0.3324415683746338, -0.0012164657237008214, -1.1444091796875e-05, -0.008693695068359375, -0.004412651062011719, -0.0002855953061953187, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006160736083984375, -0.000133514404296875, -0.0004863739013671875, -3.24249267578125e-05, -0.0049332380294799805, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002040863037109375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -3.9340093231441813, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.7824021577835083, 0.0, -1.2448489665985107, 0.0, -5.00674796057865e-05, 0.0, -5.7220458984375e-06, -0.011013031005859375, -5.340576171875e-05, 0.0, -7.62939453125e-06, -2.3841855067985307e-07, 0.0, -1.9431114196777344e-05, -2.0265558760002023e-06, -3.4332275390625e-05, -5.53131103515625e-05, -0.00069427490234375, -0.04443991929292679, -0.03275752067565918, -1.9192693798686378e-05, -0.003753662109375, -0.24799346923828125, -0.0036144256591796875, -0.07344429939985275, -0.035327620804309845, -0.34350958466529846, -0.0011588454945012927, -1.33514404296875e-05, -0.008453369140625, -0.003983497619628906, -0.00028428432415239513, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006256103515625, -0.0001277923583984375, -0.000492095947265625, -3.24249267578125e-05, -0.0047158002853393555, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002117156982421875]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasMana", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "Mana", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasMana()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.0310465067943255, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.440278172492981, 0.0, -9.369850158691406e-05, 0.0, -6.198883056640625e-06, 0.0, -7.62939453125e-06, -0.07697105407714844, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -3.576278118089249e-07, 0.0, -1.3828277587890625e-05, -2.7418097943154862e-06, -2.86102294921875e-05, -7.82012939453125e-05, -0.000560760498046875, -0.03831601142883301, -0.038074374198913574, -2.121925172104966e-05, -0.003536224365234375, -0.278717041015625, -0.004741668701171875, -0.07961301505565643, -0.03456898778676987, -1.7138983011245728, -0.2021104097366333, -9.5367431640625e-06, -0.013292312622070312, -0.0034847259521484375, -7.64121868996881e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0031337738037109375, -0.000102996826171875, -0.001129150390625, -2.288818359375e-05, -0.008048057556152344, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -0.0002117156982421875]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}, "_type": "Template11", "hole0": "Mana Wyrm"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.144522076074573, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -2.464204788208008, -0.00049591064453125, -4.768370445162873e-07, -5.62665009056218e-05, -3.445148468017578e-05, 0.0, -9.655953181209043e-05, -1.1920928244535389e-07, -0.026363492012023926, 0.0, -0.0007129907608032227, -1.1920928244535389e-07, -0.0075435638427734375, -1.9073486328125e-06, -0.0002727508544921875, 0.0, -0.000179290771484375, 0.0, -1.0384857654571533, 0.0, -0.00394439697265625, 0.0, -0.0002843141555786133, 0.0, -1.1444091796875e-05, -0.0019130706787109375, -9.1552734375e-05, 0.0, -1.537799835205078e-05, -2.3841855067985307e-07, -1.1920928244535389e-07, -4.0411949157714844e-05, -5.006777428206988e-06, -7.62939453125e-05, -0.000225067138671875, -0.0022678375244140625, -0.012849017977714539, -0.07259786128997803, -1.6570091247558594e-05, -0.0026340484619140625, -0.13759136199951172, -0.008495330810546875, -0.07335341721773148, -0.03036004863679409, -0.2437559813261032, -0.0007779570878483355, -9.5367431640625e-06, -0.005916595458984375, -0.0020723342895507812, -0.00026700348826125264, -1.3589859008789062e-05, -9.5367431640625e-06, -0.000705718994140625, -0.0001430511474609375, -0.000583648681640625, -3.24249267578125e-05, -0.004591822624206543, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0001850128173828125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MURLOC)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "score": -4.213436914370476, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -2.012824058532715, 0.0, -0.0001493692398071289, 0.0, -6.79492904964718e-06, 0.0, -5.7220458984375e-06, -0.0633544921875, -4.00543212890625e-05, 0.0, -9.5367431640625e-06, -2.3841855067985307e-07, 0.0, -1.5735626220703125e-05, -3.576272320060525e-06, -2.6702880859375e-05, -8.392333984375e-05, -0.000576019287109375, -0.036845527589321136, -0.03766822814941406, -2.133846101060044e-05, -0.0036163330078125, -1.4527530670166016, -7.05718994140625e-05, -2.6702880859375e-05, 0.0, -0.0005552768707275391, -6.306171417236328e-05, -1.1563301086425781e-05, -1.1444091796875e-05, -0.023929595947265625, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00011444091796875, -1.9073486328125e-06, -0.4524422883987427, -1.52587890625e-05, -8.58306884765625e-05, -0.010143280029296875, -0.015398979187011719, -5.3047784604132175e-05, -1.1563301086425781e-05, -7.62939453125e-06, -0.008408546447753906, -1.71661376953125e-05, -0.002691388363018632, -1.52587890625e-05, -0.0005054473876953125, -1.3470649719238281e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009918212890625]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MURLOC)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "score": -4.2420677598639145, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.5495167970657349, 0.0, -0.3463493585586548, 0.0, -6.4373016357421875e-06, 0.0, -7.62939453125e-06, -0.017284393310546875, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, -5.960462772236497e-07, 0.0, -1.7762184143066406e-05, -2.0265558760002023e-06, -2.47955322265625e-05, -4.9591064453125e-05, -0.0007839202880859375, -0.06334741413593292, -0.029619693756103516, -1.668929871811997e-05, -0.001956939697265625, -1.5023794174194336, -7.43865966796875e-05, -3.814697265625e-05, 0.0, -0.0005533695220947266, -6.4849853515625e-05, -1.1563301086425781e-05, -1.33514404296875e-05, -0.023229598999023438, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001201629638671875, -1.9073486328125e-06, -0.5779283046722412, -1.52587890625e-05, -7.82012939453125e-05, -0.009377479553222656, -0.016984939575195312, -5.161730950931087e-05, -1.1563301086425781e-05, -7.62939453125e-06, -0.008025169372558594, -1.71661376953125e-05, -0.002807736862450838, -1.52587890625e-05, -0.00047802922199480236, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00089263916015625]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Mana Wyrm", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}], "_type": "Call"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MURLOC)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "score": -4.395605287545266, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.7824021577835083, 0.0, -0.34639525413513184, 0.0, -9.846443572314456e-05, 0.0, -1.71661376953125e-05, -0.0002613067626953125, -0.00049591064453125, 0.0, -1.1444091796875e-05, -3.576278118089249e-07, 0.0, -2.1338462829589844e-05, -2.264974000354414e-06, -3.0517578125e-05, -5.14984130859375e-05, -0.000701904296875, -0.03548619523644447, -0.035060882568359375, -1.96695291379001e-05, -0.003513336181640625, -1.5648269653320312, -7.43865966796875e-05, -2.09808349609375e-05, 0.0, -0.0006716251373291016, -6.866455078125e-05, -1.1563301086425781e-05, -1.1444091796875e-05, -0.021177291870117188, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001239776611328125, -1.9073486328125e-06, -0.47599613666534424, -1.52587890625e-05, -8.20159912109375e-05, -0.01053619384765625, -0.015444755554199219, -5.4359054047381505e-05, -1.1563301086425781e-05, -9.5367431640625e-06, -0.007966041564941406, -1.71661376953125e-05, -0.002576947445049882, -1.52587890625e-05, -0.0004885196103714406, -1.3470649719238281e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009670257568359375]}, {"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 1, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "_type": "Template11", "hole0": "Mana Wyrm"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 3, "hole0": "Minion", "hole1": 1, "hole3": [{"hole2": [{"hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "hole0": "MinionSummoned", "hole1": [{"hole0": "MinionHasspell", "_type": "Template46"}], "hole3": [{"_type": "Template62_expr_seq"}], "_type": "Template24"}], "_type": "Template36"}], "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score": -4.5069471385116415, "score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -2.464204788208008, -0.00049591064453125, -4.768370445162873e-07, -5.62665009056218e-05, -3.445148468017578e-05, 0.0, -9.655953181209043e-05, -1.1920928244535389e-07, -0.026363492012023926, 0.0, -0.0007129907608032227, -1.1920928244535389e-07, -0.0075435638427734375, -1.9073486328125e-06, -0.0002727508544921875, 0.0, -0.000179290771484375, 0.0, -1.0670177936553955, 0.0, -0.0007038116455078125, 0.0, -0.0006734132766723633, 0.0, -9.5367431640625e-06, -0.000850677490234375, -0.0001125335693359375, 0.0, -1.728534698486328e-05, -2.3841855067985307e-07, -1.1920928244535389e-07, -5.173683166503906e-05, -7.986990567587782e-06, -9.918212890625e-05, -0.000247955322265625, -0.0022716522216796875, -0.01278482936322689, -0.0730283260345459, -2.002716064453125e-05, -0.0023975372314453125, -0.4588785171508789, -0.008449554443359375, -0.08205283433198929, -0.032166190445423126, -0.24977685511112213, -0.0009025888866744936, -9.5367431640625e-06, -0.00566864013671875, -0.0020856857299804688, -0.0002780873910523951, -1.3589859008789062e-05, -9.5367431640625e-06, -0.0006885528564453125, -0.0001373291015625, -0.0005702972412109375, -3.24249267578125e-05, -0.004549860954284668, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.00018310546875]}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -0.01820258943185138, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00015209948469419032, -4.00543212890625e-05, -0.0002390146255493164, 0.0, -0.0004138946533203125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "<UNK>Warden"}, "choice_history": [121, 198, "<UNK>", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class <UNK>Warden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -5.264078586435019, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -5.252167224884033, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00015209948469419032, -4.00543212890625e-05, -0.0002390146255493164, 0.0, -0.0004138946533203125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(1, 7, taunt=True)\n", "score": -5.593685072715701, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -5.579375267028809, -5.7220458984375e-06, -0.00017547607421875, -0.00058746337890625, -1.9073486328125e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00017867876158561558, -4.1961669921875e-05, -0.00024116039276123047, 0.0, -0.0002155303955078125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -6.304456159501498, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -6.26540470123291, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.027067184448242188, 0.0, -0.0001316070556640625, -0.0002994537353515625, -3.0517578125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00016127715934999287, -3.62396240234375e-05, -0.0002371072769165039, 0.0, -0.0004405975341796875]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "_type": "Template10", "hole0": "Mogu'shan Warden"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -6.860731315914819, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -6.093135833740234, -0.0005931854248046875, -1.537788011773955e-05, -0.0001808326196623966, -5.6028297876764555e-06, 0.0, -0.00037360156420618296, 0.0, -0.00013744831085205078, -3.814697265625e-06, -0.019880294799804688, -1.9073486328125e-05, -0.006287574768066406, -0.00043487548828125, -5.340576171875e-05, -1.9073486328125e-06, -0.0001277923583984375, -5.14984130859375e-05, -0.7251807451248169, -3.814697265625e-06, -1.52587890625e-05, 0.0, -0.0018138885498046875, 0.0, -0.0005512237548828125, -0.0032958984375, -0.0001316070556640625, -5.960462772236497e-07, -2.3841855067985307e-07, -0.0006678270874544978, -5.340576171875e-05, -0.0002484321594238281, 0.0, -0.000896453857421875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -7.01534227885184, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -6.895808219909668, -5.7220458984375e-05, -1.7881377516459906e-06, -1.4185905456542969e-05, -4.887569048150908e-06, 0.0, -8.51114746183157e-05, 0.0, -0.10133552551269531, -7.2479248046875e-05, -0.0082244873046875, 0.0, -9.5367431640625e-06, 0.0, -0.0013637542724609375, 0.0, -0.000133514404296875, -0.000659942626953125, -2.6702880859375e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00018034738604910672, -2.6702880859375e-05, -0.00022971630096435547, 0.0, -0.000537872314453125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "ForceWarden"}, "choice_history": [121, 198, "Force", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class ForceWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -7.103683188649875, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -7.0651021003723145, -0.02376413345336914, -0.0009983580093830824, -3.576133167371154e-07, -7.748603820800781e-06, -1.5735626220703125e-05, -4.76837158203125e-05, -0.00667572021484375, -0.0003604888916015625, -4.410734163684538e-06, -1.7762184143066406e-05, -2.3841855067985307e-07, 0.0, -0.0001411321572959423, 0.0, -0.0019837617874145508, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0032482147216796875, 0.0, -0.0001220703125, -0.0002422332763671875, -3.0517578125e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00016223068814724684, -3.814697265625e-05, -0.0002391338348388672, 0.0, -0.00042724609375]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MURLOC", "_type": "Attribute"}, "_type": "Template10", "hole0": "Mogu'shan Warden"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -7.292589173564352, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -6.093135833740234, -0.0005931854248046875, -1.537788011773955e-05, -0.0001808326196623966, -5.6028297876764555e-06, 0.0, -0.00037360156420618296, 0.0, -0.00013744831085205078, -3.814697265625e-06, -0.019880294799804688, -1.9073486328125e-05, -0.006287574768066406, -0.00043487548828125, -5.340576171875e-05, -1.9073486328125e-06, -0.0001277923583984375, -5.14984130859375e-05, -1.1620513200759888, -9.918212890625e-05, -1.52587890625e-05, 0.0, -0.000606536865234375, 0.0, -0.0002841949462890625, -0.0002689361572265625, -7.2479248046875e-05, -3.576278118089249e-07, -3.576278118089249e-07, -0.0003721021639648825, -3.4332275390625e-05, -0.0002579689025878906, 0.0, -0.0006542205810546875]}, {"model_output": {"hole2": [{"hole2": "WARRIOR", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -8.196519064338574, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -8.148896217346191, -7.62939453125e-06, -0.0002593994140625, 0.0, -0.03542518615722656, 0.0, -0.000110626220703125, -0.000362396240234375, -2.288818359375e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.00014578233822248876, -3.814697265625e-05, -0.0002390146255493164, 0.0, -0.000461578369140625]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "minion_type", "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "taunt", "_type": "Attribute"}, "_type": "Template10", "hole0": "Mogu'shan Warden"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 17, 156, 25, 186, "MINION_TYPE", "<EOS>", "taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.taunt)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -8.306262461991793, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -6.093135833740234, -0.0005931854248046875, -1.537788011773955e-05, -0.0001808326196623966, -5.6028297876764555e-06, 0.0, -0.00037360156420618296, 0.0, -0.00013744831085205078, -3.814697265625e-06, -0.019880294799804688, -1.9073486328125e-05, -0.006287574768066406, -0.00043487548828125, -5.340576171875e-05, -1.9073486328125e-06, -0.0001277923583984375, -5.14984130859375e-05, -2.175389289855957, 0.0, -1.9073486328125e-05, 0.0, -0.0007953643798828125, 0.0, -0.000354766845703125, -0.0003604888916015625, -6.29425048828125e-05, -5.960462772236497e-07, -2.3841855067985307e-07, -0.00041547726141288877, -4.1961669921875e-05, -0.0002503395080566406, 0.0, -0.0006999969482421875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shan<UNK>"}, "choice_history": [121, 198, "Mogu'shan", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shan<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -8.908719837534548, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -8.890682220458984, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00015209948469419032, -4.00543212890625e-05, -0.0002390146255493164, 0.0, -0.0004138946533203125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 4, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, taunt=True)\n", "score": -8.925256548449354, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -8.907242774963379, 0.0, -0.00021946430206298828, 0.0, -0.0004367828369140625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template60"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 46], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=1)\n", "score": -9.069673345962613, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00015209948469419032, -4.00543212890625e-05, -0.0002390146255493164, 0.0, -9.051884651184082]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Mogu'shan Warden", "hole1": 4, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "_", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(1, 7, taunt=True)\n", "score": -9.106237104984693, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -9.092135429382324, -6.67572021484375e-05, -0.0001163482666015625, -0.000446319580078125, -1.52587890625e-05, 0.0, -3.576278118089249e-07, -0.00011514954530866817, -4.00543212890625e-05, -0.0002491474151611328, 0.0, -0.0002079010009765625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Mogu'shan Warden", "hole1": 4, "hole3": "COMMON", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 1, "hole1": 7, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score": -9.291968630345018, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -6.895808219909668, -5.7220458984375e-05, -1.7881377516459906e-06, -1.4185905456542969e-05, -4.887569048150908e-06, 0.0, -8.51114746183157e-05, 0.0, -2.376394271850586, -2.6702880859375e-05, -0.009868621826171875, 0.0, -1.33514404296875e-05, 0.0, -0.001422882080078125, 0.0, -0.000133514404296875, -0.0006046295166015625, -3.0517578125e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -0.0001629458274692297, -2.86102294921875e-05, -0.00023925304412841797, 0.0, -0.0005016326904296875]}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Attribute('attack', SelfSelector\n            ()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -11.703220708665377, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -0.4086780548095703, -0.0041446685791015625, -0.0003414154052734375, -9.5367431640625e-06, -0.019283533096313477, -0.000164031982421875, -0.000701904296875, -0.0031986236572265625, -0.0002346038818359375, -0.7340447902679443, 0.0, -0.005580902099609375, -1.52587890625e-05, -0.18092477321624756, -7.033347174001392e-06, -1.1920928244535389e-07, -0.0004749298095703125, -1.33514404296875e-05, -7.05718994140625e-05, -0.18337547779083252, 0.0, -0.0062713623046875, -2.09808349609375e-05, -0.00018310546875, -0.11586380004882812, 0.0, -0.0007591982721351087, 0.0, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00015270576113834977, -1.9073486328125e-06, -1.9313955307006836, -0.0011310577392578125, -0.48461437225341797, -0.1601886749267578, -0.01840686798095703, -7.62939453125e-06, -0.009418487548828125, -2.288818359375e-05, -0.0005626678466796875, -0.4705919027328491, -7.867813110351562e-06, -2.09808349609375e-05, -0.0054779052734375, -1.9073486328125e-05, -0.009844779968261719, -0.0005435943603515625, -0.006144507322460413, -0.00027942657470703125, -0.024137496948242188, -0.05993366241455078, -0.0062274932861328125, -0.03301048278808594, -3.4332275390625e-05, -0.00109100341796875, -0.32883405685424805, -9.1552734375e-05, -0.014577865600585938, -0.02585887908935547, -0.013452529907226562, -0.01705646514892578, -0.00067901611328125, -0.019746780395507812, 0.0, -0.0007877349853515625, -0.004474518354982138, -3.8146954466355965e-06, -0.001744507229886949, -9.5367431640625e-06, -2.09808349609375e-05, -0.004912376403808594, -4.57763671875e-05, -0.41719016432762146, -0.2116236835718155, -0.0025723238941282034, -0.0966196060180664, -4.57763671875e-05, -2.6702880859375e-05, -0.002834320068359375, -9.5367431640625e-06, -0.014050483703613281, -0.0003223419189453125, -0.0006046295166015625, 0.0, -0.0003490447998046875, -0.005626678466796875, -1.251697449333733e-05, -0.00261688232421875, -0.0009222030639648438, -0.0035886764526367188, -0.005009651184082031, -0.00019073486328125, -0.0027217864990234375, -7.62939453125e-05, 0.0, -0.0029125213623046875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -11.980497508316574, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -2.1226844787597656, -0.0006542205810546875, -0.26629638671875, -0.039157867431640625, -0.019712448120117188, -9.5367431640625e-06, -0.01042938232421875, -4.00543212890625e-05, -0.0013103485107421875, -0.35125732421875, -5.9604644775390625e-06, -2.288818359375e-05, -0.008648872375488281, -1.52587890625e-05, -0.013049125671386719, -0.00057220458984375, -0.005753813777118921, -0.00028228759765625, -0.0041637420654296875, -0.0556793212890625, -0.00667572021484375, -0.03296375274658203, -3.62396240234375e-05, -0.0011386871337890625, -0.31279051303863525, -0.0001010894775390625, -0.013886451721191406, -0.027278900146484375, -0.007694244384765625, -0.008933067321777344, -0.000682830810546875, -0.030340194702148438, 0.0, -0.0007534027099609375, -0.004454849753528833, -3.933904736186378e-06, -0.0017310368129983544, -9.5367431640625e-06, -2.09808349609375e-05, -0.0048828125, -4.38690185546875e-05, -0.4261317551136017, -0.21735212206840515, -0.002486682264134288, -0.0890960693359375, -4.38690185546875e-05, -2.6702880859375e-05, -0.00283050537109375, -9.5367431640625e-06, -0.014399528503417969, -0.0003108978271484375, -0.0005950927734375, 0.0, -0.000354766845703125, -0.005612373352050781, -1.251697449333733e-05, -0.002628326416015625, -0.0009241104125976562, -0.0036039352416992188, -0.005016326904296875, -0.0001926422119140625, -0.0027189254760742188, -7.43865966796875e-05, 0.0, -0.002902984619140625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "ManaMana", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"hole0": "Draw", "hole1": 3, "_type": "Template41"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 89, 247, "Draw", "<EOS>", "3", "<EOS>", 68, 162, 25, 186, "Card", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "Mana", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(Mana<UNK>(), Draw(3), CardSelector(\n            players=BothPlayer(), picker=UserPicker())), Choice(ManaMana(),\n            Summon(ManaMana(), PlayerSelector()), GreaterThan(Attribute(\n            'attack', SelfSelector()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -12.851478995295501, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -0.4885629117488861, -0.10808386653661728, -0.0008078645914793015, -1.043562889099121, -0.00110626220703125, -0.28869059681892395, -2.09808349609375e-05, -0.09815119951963425, -5.638599395751953e-05, -1.0998516082763672, -0.00025177001953125, -0.0005855560302734375, -0.0001811981201171875, -0.03248608112335205, -0.019136428833007812, 0.0, -0.24439239501953125, -1.9073486328125e-06, -9.5367431640625e-06, -0.12560272216796875, -1.1444091796875e-05, -0.0011444091796875, 0.0, -0.0022710561752319336, -2.3722410332993604e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001316070556640625, -0.1113424301147461, -1.1444091796875e-05, -0.0002040863037109375, -1.52587890625e-05, -0.0019956824835389853, -0.005150198936462402, -5.7220458984375e-06, -0.0001621246337890625, -0.00220489501953125, -0.001499176025390625, -0.0008676052093505859, -3.814697265625e-06, -6.4849853515625e-05, -0.000152587890625, -9.5367431640625e-06, -0.3538149297237396, -0.8854784965515137, -0.01552770845592022, -0.9849166870117188, -0.023054122924804688, -0.060577392578125, -1.9073486328125e-06, -0.12294173240661621, -6.234643660718575e-05, -0.015253067016601562, -0.000110626220703125, -1.1444091796875e-05, -0.2671070992946625, -0.3386118710041046, -0.050727274268865585, -0.1654644012451172, -9.5367431640625e-06, -0.004379870370030403, -6.401368591468781e-05, -3.576278118089249e-07, -0.016016006469726562, -0.0037841796875, -1.71661376953125e-05, -1.9073486328125e-06, -0.00041878223419189453, -0.00023853778839111328, -5.006789251638111e-06, -1.9073486328125e-06, -0.4234323501586914, -0.0041656494140625, -0.0003147125244140625, -9.5367431640625e-06, -0.017865419387817383, -0.00017547607421875, -0.00067901611328125, -0.003215789794921875, -0.000232696533203125, -0.7321425676345825, 0.0, -0.0053920745849609375, -1.52587890625e-05, -0.17620396614074707, -7.033347174001392e-06, -1.1920928244535389e-07, -0.000461578369140625, -1.33514404296875e-05, -7.2479248046875e-05, -0.2106248140335083, 0.0, -0.006756782531738281, -9.5367431640625e-06, -0.0003376007080078125, -0.08899497985839844, 0.0, -0.0007254756637848914, 0.0, -7.82012939453125e-05, -2.09808349609375e-05, -1.33514404296875e-05, -0.0001329177903244272, -1.9073486328125e-06, -1.6882047653198242, -0.0008697509765625, -0.4668092727661133, -0.09917163848876953, -0.02048492431640625, -7.62939453125e-06, -0.008562088012695312, -2.6702880859375e-05, -0.0006866455078125, -0.43547892570495605, -7.867813110351562e-06, -2.09808349609375e-05, -0.005587577819824219, -1.9073486328125e-05, -0.010335922241210938, -0.00055694580078125, -0.0061492412351071835, -0.00026798248291015625, -0.016935348510742188, -0.06209754943847656, -0.0063934326171875, -0.032413482666015625, -3.24249267578125e-05, -0.00106048583984375, -0.33133888244628906, -9.72747802734375e-05, -0.014447212219238281, -0.02645397186279297, -0.011166572570800781, -0.012905120849609375, -0.00066375732421875, -0.022218704223632812, 0.0, -0.00077056884765625, -0.004514692351222038, -3.933904736186378e-06, -0.00173520902171731, -9.5367431640625e-06, -2.09808349609375e-05, -0.00489044189453125, -4.57763671875e-05, -0.42031803727149963, -0.21449719369411469, -0.00256495364010334, -0.09509849548339844, -4.57763671875e-05, -2.6702880859375e-05, -0.002857208251953125, -9.5367431640625e-06, -0.014113426208496094, -0.0003185272216796875, -0.0006008148193359375, 0.0, -0.0003509521484375, -0.005627632141113281, -1.251697449333733e-05, -0.002620697021484375, -0.00092315673828125, -0.0035943984985351562, -0.005011558532714844, -0.00019073486328125, -0.0027217864990234375, -7.43865966796875e-05, 0.0, -0.002910614013671875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Attribute('attack', SelfSelector\n            ()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(PlayerSelector())\n            player.hand[-1].player = player\n", "score": -12.898208908404477, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -0.4086780548095703, -0.0041446685791015625, -0.0003414154052734375, -9.5367431640625e-06, -0.019283533096313477, -0.000164031982421875, -0.000701904296875, -0.0031986236572265625, -0.0002346038818359375, -0.7340447902679443, 0.0, -0.005580902099609375, -1.52587890625e-05, -0.18092477321624756, -7.033347174001392e-06, -1.1920928244535389e-07, -0.0004749298095703125, -1.33514404296875e-05, -7.05718994140625e-05, -0.18337547779083252, 0.0, -0.0062713623046875, -2.09808349609375e-05, -0.00018310546875, -0.11586380004882812, 0.0, -0.0007591982721351087, 0.0, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00015270576113834977, -1.9073486328125e-06, -1.9313955307006836, -0.0011310577392578125, -0.48461437225341797, -0.1601886749267578, -0.01840686798095703, -7.62939453125e-06, -0.009418487548828125, -2.288818359375e-05, -0.0005626678466796875, -0.4705919027328491, -7.867813110351562e-06, -2.09808349609375e-05, -0.0054779052734375, -1.9073486328125e-05, -0.009844779968261719, -0.0005435943603515625, -0.006144507322460413, -0.00027942657470703125, -0.024137496948242188, -0.05993366241455078, -0.0062274932861328125, -0.03301048278808594, -3.4332275390625e-05, -0.00109100341796875, -0.32883405685424805, -9.1552734375e-05, -0.014577865600585938, -0.02585887908935547, -0.013452529907226562, -0.01705646514892578, -0.00067901611328125, -0.019746780395507812, 0.0, -0.0007877349853515625, -0.004474518354982138, -3.8146954466355965e-06, -0.001744507229886949, -9.5367431640625e-06, -2.09808349609375e-05, -0.004912376403808594, -4.57763671875e-05, -1.6566931009292603, -0.009726603515446186, -2.7418097943154862e-06, -0.23418712615966797, -0.000179290771484375, -5.7220458984375e-06, -0.0057544708251953125, -2.6702880859375e-05, -0.023993492126464844, -0.0007581710815429688, -0.0004482269287109375, 0.0, -0.0001811981201171875, -0.013824462890625, -6.556510470545618e-06, -0.0026912689208984375, -0.0010499954223632812, -0.0038251876831054688, -0.005583763122558594, -0.000186920166015625, -0.0027322769165039062, -0.000102996826171875, 0.0, -0.0029544830322265625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(PlayerSelector())\n            player.hand[-1].player = player\n", "score": -13.123301633869886, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -2.1226844787597656, -0.0006542205810546875, -0.26629638671875, -0.039157867431640625, -0.019712448120117188, -9.5367431640625e-06, -0.01042938232421875, -4.00543212890625e-05, -0.0013103485107421875, -0.35125732421875, -5.9604644775390625e-06, -2.288818359375e-05, -0.008648872375488281, -1.52587890625e-05, -0.013049125671386719, -0.00057220458984375, -0.005753813777118921, -0.00028228759765625, -0.0041637420654296875, -0.0556793212890625, -0.00667572021484375, -0.03296375274658203, -3.62396240234375e-05, -0.0011386871337890625, -0.31279051303863525, -0.0001010894775390625, -0.013886451721191406, -0.027278900146484375, -0.007694244384765625, -0.008933067321777344, -0.000682830810546875, -0.030340194702148438, 0.0, -0.0007534027099609375, -0.004454849753528833, -3.933904736186378e-06, -0.0017310368129983544, -9.5367431640625e-06, -2.09808349609375e-05, -0.0048828125, -4.38690185546875e-05, -1.6190810203552246, -0.009524420835077763, -2.7418097943154862e-06, -0.22776412963867188, -0.00018310546875, -5.7220458984375e-06, -0.006133079528808594, -2.47955322265625e-05, -0.02368927001953125, -0.0007171630859375, -0.0004558563232421875, 0.0, -0.000186920166015625, -0.013306617736816406, -6.556510470545618e-06, -0.0026636123657226562, -0.0010509490966796875, -0.0038089752197265625, -0.005581855773925781, -0.000186920166015625, -0.002727508544921875, -0.000102996826171875, 0.0, -0.0029239654541015625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "Excesscards", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "cards", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Attribute('attack', SelfSelector\n            ()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(Excesscards())\n            player.hand[-1].player = player\n", "score": -13.5861758525784, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -0.4086780548095703, -0.0041446685791015625, -0.0003414154052734375, -9.5367431640625e-06, -0.019283533096313477, -0.000164031982421875, -0.000701904296875, -0.0031986236572265625, -0.0002346038818359375, -0.7340447902679443, 0.0, -0.005580902099609375, -1.52587890625e-05, -0.18092477321624756, -7.033347174001392e-06, -1.1920928244535389e-07, -0.0004749298095703125, -1.33514404296875e-05, -7.05718994140625e-05, -0.18337547779083252, 0.0, -0.0062713623046875, -2.09808349609375e-05, -0.00018310546875, -0.11586380004882812, 0.0, -0.0007591982721351087, 0.0, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00015270576113834977, -1.9073486328125e-06, -1.9313955307006836, -0.0011310577392578125, -0.48461437225341797, -0.1601886749267578, -0.01840686798095703, -7.62939453125e-06, -0.009418487548828125, -2.288818359375e-05, -0.0005626678466796875, -0.4705919027328491, -7.867813110351562e-06, -2.09808349609375e-05, -0.0054779052734375, -1.9073486328125e-05, -0.009844779968261719, -0.0005435943603515625, -0.006144507322460413, -0.00027942657470703125, -0.024137496948242188, -0.05993366241455078, -0.0062274932861328125, -0.03301048278808594, -3.4332275390625e-05, -0.00109100341796875, -0.32883405685424805, -9.1552734375e-05, -0.014577865600585938, -0.02585887908935547, -0.013452529907226562, -0.01705646514892578, -0.00067901611328125, -0.019746780395507812, 0.0, -0.0007877349853515625, -0.004474518354982138, -3.8146954466355965e-06, -0.001744507229886949, -9.5367431640625e-06, -2.09808349609375e-05, -0.004912376403808594, -4.57763671875e-05, -0.41719016432762146, -2.167222738265991, -0.00013314791431184858, -0.03171253204345703, -4.1961669921875e-05, -1.9073486328125e-05, -0.001201629638671875, -5.7220458984375e-06, -0.009363174438476562, -0.0003795623779296875, -0.000843048095703125, 0.0, -0.00032806396484375, -0.005922436714172363, -1.239776611328125e-05, -0.00249481201171875, -0.0008497238159179688, -0.0034885406494140625, -0.005305290222167969, -0.00020599365234375, -0.0024805068969726562, -6.67572021484375e-05, 0.0, -0.0036144256591796875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "Excesscards", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "cards", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(Excesscards())\n            player.hand[-1].player = player\n", "score": -13.841049267728948, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -2.1226844787597656, -0.0006542205810546875, -0.26629638671875, -0.039157867431640625, -0.019712448120117188, -9.5367431640625e-06, -0.01042938232421875, -4.00543212890625e-05, -0.0013103485107421875, -0.35125732421875, -5.9604644775390625e-06, -2.288818359375e-05, -0.008648872375488281, -1.52587890625e-05, -0.013049125671386719, -0.00057220458984375, -0.005753813777118921, -0.00028228759765625, -0.0041637420654296875, -0.0556793212890625, -0.00667572021484375, -0.03296375274658203, -3.62396240234375e-05, -0.0011386871337890625, -0.31279051303863525, -0.0001010894775390625, -0.013886451721191406, -0.027278900146484375, -0.007694244384765625, -0.008933067321777344, -0.000682830810546875, -0.030340194702148438, 0.0, -0.0007534027099609375, -0.004454849753528833, -3.933904736186378e-06, -0.0017310368129983544, -9.5367431640625e-06, -2.09808349609375e-05, -0.0048828125, -4.38690185546875e-05, -0.4261317551136017, -2.1460156440734863, -0.00013267113536130637, -0.028711318969726562, -4.00543212890625e-05, -1.9073486328125e-05, -0.00128936767578125, -5.7220458984375e-06, -0.009510993957519531, -0.0003681182861328125, -0.000812530517578125, 0.0, -0.0003204345703125, -0.005962491035461426, -1.239776611328125e-05, -0.002506256103515625, -0.0008544921875, -0.0035142898559570312, -0.005313873291015625, -0.0002079010009765625, -0.0024747848510742188, -6.67572021484375e-05, 0.0, -0.003604888916015625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "ManaMana", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"hole0": "Draw", "hole1": 3, "_type": "Template41"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 89, 247, "Draw", "<EOS>", "3", "<EOS>", 68, 162, 25, 186, "Card", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "Mana", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(Mana<UNK>(), Draw(3), CardSelector(\n            players=BothPlayer(), picker=UserPicker())), Choice(ManaMana(),\n            Summon(ManaMana(), PlayerSelector()), GreaterThan(Attribute(\n            'attack', SelfSelector()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.mana += 1\n        else:\n            player.hand.append(PlayerSelector())\n            player.hand[-1].player = player\n", "score": -14.021028524732792, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -0.4885629117488861, -0.10808386653661728, -0.0008078645914793015, -1.043562889099121, -0.00110626220703125, -0.28869059681892395, -2.09808349609375e-05, -0.09815119951963425, -5.638599395751953e-05, -1.0998516082763672, -0.00025177001953125, -0.0005855560302734375, -0.0001811981201171875, -0.03248608112335205, -0.019136428833007812, 0.0, -0.24439239501953125, -1.9073486328125e-06, -9.5367431640625e-06, -0.12560272216796875, -1.1444091796875e-05, -0.0011444091796875, 0.0, -0.0022710561752319336, -2.3722410332993604e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001316070556640625, -0.1113424301147461, -1.1444091796875e-05, -0.0002040863037109375, -1.52587890625e-05, -0.0019956824835389853, -0.005150198936462402, -5.7220458984375e-06, -0.0001621246337890625, -0.00220489501953125, -0.001499176025390625, -0.0008676052093505859, -3.814697265625e-06, -6.4849853515625e-05, -0.000152587890625, -9.5367431640625e-06, -0.3538149297237396, -0.8854784965515137, -0.01552770845592022, -0.9849166870117188, -0.023054122924804688, -0.060577392578125, -1.9073486328125e-06, -0.12294173240661621, -6.234643660718575e-05, -0.015253067016601562, -0.000110626220703125, -1.1444091796875e-05, -0.2671070992946625, -0.3386118710041046, -0.050727274268865585, -0.1654644012451172, -9.5367431640625e-06, -0.004379870370030403, -6.401368591468781e-05, -3.576278118089249e-07, -0.016016006469726562, -0.0037841796875, -1.71661376953125e-05, -1.9073486328125e-06, -0.00041878223419189453, -0.00023853778839111328, -5.006789251638111e-06, -1.9073486328125e-06, -0.4234323501586914, -0.0041656494140625, -0.0003147125244140625, -9.5367431640625e-06, -0.017865419387817383, -0.00017547607421875, -0.00067901611328125, -0.003215789794921875, -0.000232696533203125, -0.7321425676345825, 0.0, -0.0053920745849609375, -1.52587890625e-05, -0.17620396614074707, -7.033347174001392e-06, -1.1920928244535389e-07, -0.000461578369140625, -1.33514404296875e-05, -7.2479248046875e-05, -0.2106248140335083, 0.0, -0.006756782531738281, -9.5367431640625e-06, -0.0003376007080078125, -0.08899497985839844, 0.0, -0.0007254756637848914, 0.0, -7.82012939453125e-05, -2.09808349609375e-05, -1.33514404296875e-05, -0.0001329177903244272, -1.9073486328125e-06, -1.6882047653198242, -0.0008697509765625, -0.4668092727661133, -0.09917163848876953, -0.02048492431640625, -7.62939453125e-06, -0.008562088012695312, -2.6702880859375e-05, -0.0006866455078125, -0.43547892570495605, -7.867813110351562e-06, -2.09808349609375e-05, -0.005587577819824219, -1.9073486328125e-05, -0.010335922241210938, -0.00055694580078125, -0.0061492412351071835, -0.00026798248291015625, -0.016935348510742188, -0.06209754943847656, -0.0063934326171875, -0.032413482666015625, -3.24249267578125e-05, -0.00106048583984375, -0.33133888244628906, -9.72747802734375e-05, -0.014447212219238281, -0.02645397186279297, -0.011166572570800781, -0.012905120849609375, -0.00066375732421875, -0.022218704223632812, 0.0, -0.00077056884765625, -0.004514692351222038, -3.933904736186378e-06, -0.00173520902171731, -9.5367431640625e-06, -2.09808349609375e-05, -0.00489044189453125, -4.57763671875e-05, -1.6411737203598022, -0.009805805049836636, -2.7418097943154862e-06, -0.2289142608642578, -0.0001811981201171875, -5.7220458984375e-06, -0.005832672119140625, -2.6702880859375e-05, -0.02390003204345703, -0.0007486343383789062, -0.00045013427734375, 0.0, -0.00018310546875, -0.013701438903808594, -6.556510470545618e-06, -0.0026826858520507812, -0.0010509490966796875, -0.0038204193115234375, -0.005583763122558594, -0.000186920166015625, -0.0027332305908203125, -0.000102996826171875, 0.0, -0.0029449462890625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "<UNK>", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "<UNK>", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Attribute('attack', SelfSelector\n            ()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.<UNK> += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -14.039716331148803, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -0.4086780548095703, -0.0041446685791015625, -0.0003414154052734375, -9.5367431640625e-06, -0.019283533096313477, -0.000164031982421875, -0.000701904296875, -0.0031986236572265625, -0.0002346038818359375, -0.7340447902679443, 0.0, -0.005580902099609375, -1.52587890625e-05, -0.18092477321624756, -7.033347174001392e-06, -1.1920928244535389e-07, -0.0004749298095703125, -1.33514404296875e-05, -7.05718994140625e-05, -0.18337547779083252, 0.0, -0.0062713623046875, -2.09808349609375e-05, -0.00018310546875, -0.11586380004882812, 0.0, -0.0007591982721351087, 0.0, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00015270576113834977, -1.9073486328125e-06, -1.9313955307006836, -0.0011310577392578125, -0.48461437225341797, -0.1601886749267578, -0.01840686798095703, -7.62939453125e-06, -0.009418487548828125, -2.288818359375e-05, -0.0005626678466796875, -0.4705919027328491, -7.867813110351562e-06, -2.09808349609375e-05, -0.0054779052734375, -1.9073486328125e-05, -0.009844779968261719, -0.0005435943603515625, -0.006144507322460413, -0.00027942657470703125, -0.024137496948242188, -0.05993366241455078, -0.0062274932861328125, -0.03301048278808594, -3.4332275390625e-05, -0.00109100341796875, -2.6439085006713867, -0.00013089175627101213, -0.013346672058105469, -0.008381843566894531, -0.017083168029785156, -0.014507293701171875, -0.0004787445068359375, -0.03852272033691406, 0.0, -0.00098419189453125, -0.004787920042872429, -3.6954863844584906e-06, -0.0016154040349647403, -9.5367431640625e-06, -1.9073486328125e-05, -0.0047512054443359375, -4.57763671875e-05, -0.41198301315307617, -0.2214803695678711, -0.0023968166206032038, -0.11262130737304688, -4.76837158203125e-05, -2.6702880859375e-05, -0.003093719482421875, -9.5367431640625e-06, -0.013452529907226562, -0.0003337860107421875, -0.00060272216796875, 0.0, -0.00035858154296875, -0.005576133728027344, -1.251697449333733e-05, -0.00260162353515625, -0.0009279251098632812, -0.0036373138427734375, -0.005093574523925781, -0.00019073486328125, -0.0027256011962890625, -7.62939453125e-05, 0.0, -0.0028934478759765625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"func": {"id": "Attribute", "_type": "Name"}, "args": [{"s": "attack", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 68, 163, 25, 186, "Attribute", "<EOS>", 321, 76, 194, "attack", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "hand", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Attribute('attack', SelfSelector\n            ()), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.hand += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -14.119890025256119, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -0.4086780548095703, -0.0041446685791015625, -0.0003414154052734375, -9.5367431640625e-06, -0.019283533096313477, -0.000164031982421875, -0.000701904296875, -0.0031986236572265625, -0.0002346038818359375, -0.7340447902679443, 0.0, -0.005580902099609375, -1.52587890625e-05, -0.18092477321624756, -7.033347174001392e-06, -1.1920928244535389e-07, -0.0004749298095703125, -1.33514404296875e-05, -7.05718994140625e-05, -0.18337547779083252, 0.0, -0.0062713623046875, -2.09808349609375e-05, -0.00018310546875, -0.11586380004882812, 0.0, -0.0007591982721351087, 0.0, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -0.00015270576113834977, -1.9073486328125e-06, -1.9313955307006836, -0.0011310577392578125, -0.48461437225341797, -0.1601886749267578, -0.01840686798095703, -7.62939453125e-06, -0.009418487548828125, -2.288818359375e-05, -0.0005626678466796875, -0.4705919027328491, -7.867813110351562e-06, -2.09808349609375e-05, -0.0054779052734375, -1.9073486328125e-05, -0.009844779968261719, -0.0005435943603515625, -0.006144507322460413, -0.00027942657470703125, -0.024137496948242188, -0.05993366241455078, -0.0062274932861328125, -0.03301048278808594, -3.4332275390625e-05, -0.00109100341796875, -2.3742713928222656, -2.193450927734375e-05, -0.20212841033935547, -0.07091236114501953, -0.00862884521484375, -0.008550643920898438, -0.0007266998291015625, -0.10862541198730469, 0.0, -0.0005340576171875, -0.004243969451636076, -3.3378591979271732e-06, -0.0017495147185400128, -1.33514404296875e-05, -2.288818359375e-05, -0.004387855529785156, -4.57763671875e-05, -0.40895938873291016, -0.2207941710948944, -0.0026709893718361855, -0.15852737426757812, -5.14984130859375e-05, -2.6702880859375e-05, -0.004031181335449219, -9.5367431640625e-06, -0.013957977294921875, -0.0003681182861328125, -0.000644683837890625, 0.0, -0.0003833770751953125, -0.0054683685302734375, -1.263618378288811e-05, -0.0025873184204101562, -0.0009326934814453125, -0.0036153793334960938, -0.00507354736328125, -0.000186920166015625, -0.0027294158935546875, -8.20159912109375e-05, 0.0, -0.0029125213623046875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "<UNK>", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "<UNK>", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.<UNK> += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -14.296349064526765, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -2.1226844787597656, -0.0006542205810546875, -0.26629638671875, -0.039157867431640625, -0.019712448120117188, -9.5367431640625e-06, -0.01042938232421875, -4.00543212890625e-05, -0.0013103485107421875, -0.35125732421875, -5.9604644775390625e-06, -2.288818359375e-05, -0.008648872375488281, -1.52587890625e-05, -0.013049125671386719, -0.00057220458984375, -0.005753813777118921, -0.00028228759765625, -0.0041637420654296875, -0.0556793212890625, -0.00667572021484375, -0.03296375274658203, -3.62396240234375e-05, -0.0011386871337890625, -2.6076674461364746, -0.00015032287046778947, -0.013071060180664062, -0.008882522583007812, -0.011255264282226562, -0.008111953735351562, -0.000484466552734375, -0.04629802703857422, 0.0, -0.0009632110595703125, -0.0047767143696546555, -3.6954863844584906e-06, -0.0015875091776251793, -9.5367431640625e-06, -1.9073486328125e-05, -0.0047359466552734375, -4.57763671875e-05, -0.4251595437526703, -0.22557935118675232, -0.0023252004757523537, -0.10370349884033203, -4.57763671875e-05, -2.6702880859375e-05, -0.0030155181884765625, -9.5367431640625e-06, -0.013834953308105469, -0.0003223419189453125, -0.000591278076171875, 0.0, -0.0003643035888671875, -0.0055637359619140625, -1.251697449333733e-05, -0.0026140213012695312, -0.0009298324584960938, -0.0036478042602539062, -0.0050945281982421875, -0.0001926422119140625, -0.00272369384765625, -7.62939453125e-05, 0.0, -0.002887725830078125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 133, 174, 21, 166, 17, 156, 50, "mana", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "hand", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.mana < 10:\n            player.hand += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n", "score": -14.579459458596801, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -2.1226844787597656, -0.0006542205810546875, -0.26629638671875, -0.039157867431640625, -0.019712448120117188, -9.5367431640625e-06, -0.01042938232421875, -4.00543212890625e-05, -0.0013103485107421875, -0.35125732421875, -5.9604644775390625e-06, -2.288818359375e-05, -0.008648872375488281, -1.52587890625e-05, -0.013049125671386719, -0.00057220458984375, -0.005753813777118921, -0.00028228759765625, -0.0041637420654296875, -0.0556793212890625, -0.00667572021484375, -0.03296375274658203, -3.62396240234375e-05, -0.0011386871337890625, -2.520334243774414, -2.205371856689453e-05, -0.1835174560546875, -0.07579708099365234, -0.004498481750488281, -0.004401206970214844, -0.00066375732421875, -0.16376399993896484, 0.0, -0.0005283355712890625, -0.00430405093356967, -3.4570680327306036e-06, -0.0017342559294775128, -1.1444091796875e-05, -2.288818359375e-05, -0.004393577575683594, -4.38690185546875e-05, -0.41339826583862305, -0.22317981719970703, -0.0025716780219227076, -0.14333724975585938, -4.9591064453125e-05, -2.6702880859375e-05, -0.0039310455322265625, -9.5367431640625e-06, -0.014380455017089844, -0.0003528594970703125, -0.00063323974609375, 0.0, -0.000392913818359375, -0.0054473876953125, -1.251697449333733e-05, -0.0025987625122070312, -0.000934600830078125, -0.0036287307739257812, -0.005070686340332031, -0.0001888275146484375, -0.0027294158935546875, -8.0108642578125e-05, 0.0, -0.002899169921875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "orelse": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "_type": "If"}, {"hole2": [{"s": "card_drawn", "_type": "Str"}, {"id": "demon_card", "_type": "Name"}], "hole0": {"_type": "Template68"}, "hole1": "trigger", "_type": "Template44"}, {"targets": [{"value": {"id": "demon_card", "_type": "Name"}, "attr": "drawn", "_type": "Attribute"}], "value": {"_type": "Template79"}, "_type": "Assign"}, {"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 133, 174, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 333, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "demon_card", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "demon_card", "<EOS>", "drawn", "<EOS>", 62, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            player.mana += 1\n        else:\n            player.hand.append(ExcessMana())\n            player.hand[-1].player = player\n        self.trigger('card_drawn', demon_card)\n        demon_card.drawn = True\n        player.mana += 1\n", "score": -18.277655301265867, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -0.23399066925048828, -0.0021514892578125, -2.692349433898926, -0.049231529235839844, -0.0060577392578125, -1.9073486328125e-06, -0.6146640777587891, -0.0009307861328125, -0.0010223388671875, -5.7220458984375e-06, -0.0010738344863057137, -5.722038622479886e-06, -9.5367431640625e-06, -8.0108642578125e-05, 0.0, -0.3552742004394531, -0.031654953956604004, -1.8358230590820312e-05, -0.00025177001953125, -0.003742218017578125, 0.0, -0.009481430053710938, -0.0008602142333984375, -0.010999256744980812, -0.0009523630142211914, -0.3212852478027344, -0.34109020233154297, -0.007447242736816406, -0.029512405395507812, -6.103515625e-05, -0.000782012939453125, -0.343841552734375, -8.20159912109375e-05, -0.013089179992675781, -0.026803970336914062, -0.1038503646850586, -0.044890403747558594, -0.00066375732421875, -0.022432327270507812, 0.0, -0.000881195068359375, -0.004885908216238022, -3.933904736186378e-06, -0.0017427185084670782, -5.7220458984375e-06, -1.71661376953125e-05, -0.004695892333984375, -4.38690185546875e-05, -0.38731512427330017, -0.18788138031959534, -0.002626788103953004, -0.09688377380371094, -4.76837158203125e-05, -2.47955322265625e-05, -0.0029926300048828125, -9.5367431640625e-06, -0.01592254638671875, -0.00031280517578125, -0.0006084442138671875, 0.0, -0.0003376007080078125, -0.0057220458984375, -1.251697449333733e-05, -0.00263214111328125, -0.0009126663208007812, -0.0035314559936523438, -0.004935264587402344, -0.0001888275146484375, -0.00273895263671875, -7.2479248046875e-05, 0.0, -0.0029926300048828125, -0.0019969940185546875, -0.0001125335693359375, -0.46625614166259766, -0.025335581973195076, -0.018593309447169304, -0.00214385986328125, -0.006363868713378906, -0.000125885009765625, -0.03427724912762642, -1.9073486328125e-06, -0.2009735107421875, -0.0001068115234375, -0.8360273838043213, -0.0005121231079101562, -0.034720420837402344, -0.0008945465087890625, -3.24249267578125e-05, -9.34600830078125e-05, -1.33514404296875e-05, -0.0050907135009765625, 0.0, -0.692969799041748, -1.52587890625e-05, -0.5959806442260742, -1.9073486328125e-06, -0.061018943786621094, -0.8042974472045898, -0.0003910064697265625, -0.10751914978027344, -1.33514404296875e-05, -0.29927539825439453, -0.14825062453746796, -5.352497100830078e-05, -0.04983711242675781, -0.033733367919921875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}, {"hole2": [{"s": "card_drawn", "_type": "Str"}, {"id": "chosen_card", "_type": "Name"}], "hole0": {"_type": "Template68"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "orelse": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"hole2": [{"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}, {"hole2": [{"s": "card_drawn", "_type": "Str"}, {"id": "demon_card", "_type": "Name"}], "hole0": {"_type": "Template68"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "_type": "If"}, {"targets": [{"value": {"id": "demon_card", "_type": "Name"}, "attr": "drawn", "_type": "Attribute"}], "value": {"_type": "Template79"}, "_type": "Assign"}, {"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}, {"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 133, 174, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "chosen_card", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "demon_card", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "demon_card", "<EOS>", "drawn", "<EOS>", 62, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            if len(player.hand) < 10:\n                player.hand.append(ExcessMana())\n                player.hand[-1].player = player\n                self.trigger('card_drawn', chosen_card)\n        elif len(player.hand) < 10:\n            player.hand.append(PlayerSelector())\n            player.hand[-1].player = player\n            self.trigger('card_drawn', demon_card)\n        demon_card.drawn = True\n        player.mana += 1\n        player.hand.append(ExcessMana())\n", "score": -25.738695804678343, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -0.23399066925048828, -0.0021514892578125, -2.692349433898926, -0.049231529235839844, -0.0060577392578125, -1.9073486328125e-06, -0.6146640777587891, -0.0009307861328125, -0.0010223388671875, -5.7220458984375e-06, -0.0010738344863057137, -5.722038622479886e-06, -9.5367431640625e-06, -8.0108642578125e-05, 0.0, -0.3552742004394531, -0.031654953956604004, -1.8358230590820312e-05, -0.00025177001953125, -0.003742218017578125, 0.0, -0.009481430053710938, -0.0008602142333984375, -0.010999256744980812, -0.0009523630142211914, -0.3212852478027344, -1.9354972839355469, -0.000850677490234375, -0.03776741027832031, -1.9073486328125e-05, -0.006984710693359375, -0.001132965087890625, -0.01820659637451172, -3.814697265625e-06, -0.022202610969543457, -6.794917680963408e-06, -2.09808349609375e-05, -0.0001583099365234375, 0.0, -0.16281890869140625, -0.03637588024139404, -1.96695291379001e-05, -0.0005550384521484375, -0.0044689178466796875, 0.0, -0.015104293823242188, -0.00052642822265625, -0.006880246568471193, -0.001570582389831543, -0.032291412353515625, -0.17061138153076172, -0.0001468658447265625, -0.0017719268798828125, -9.5367431640625e-06, -0.0001049041748046875, -0.009616494178771973, -5.364416665543104e-06, -0.001864184974692762, -0.0001239776611328125, -1.33514404296875e-05, -0.061985015869140625, -0.00019073486328125, -0.7148234844207764, -0.5678765773773193, -0.00853845663368702, -0.052211761474609375, -0.002605438232421875, -2.09808349609375e-05, -0.04260444641113281, -3.814697265625e-05, -0.022530555725097656, -0.0010852813720703125, -0.000545501708984375, 0.0, -0.0003070831298828125, -0.005681157112121582, -9.059905096364673e-06, -0.0026273727416992188, -0.0010089874267578125, -0.0045948028564453125, -0.006293296813964844, -0.0001983642578125, -0.0026874542236328125, -8.392333984375e-05, 0.0, -0.0030918121337890625, -0.45241737365722656, -0.0001201629638671875, -0.21261024475097656, -0.007272242568433285, -0.023857951164245605, -0.00029754638671875, -0.0034847259521484375, -0.0001125335693359375, -0.010885737836360931, -1.9073486328125e-06, -0.08515262603759766, -3.4332275390625e-05, -1.1771900653839111, -5.7220458984375e-06, -0.000202178955078125, -0.44952869415283203, -0.0019674301147460938, -0.029108047485351562, -7.62939453125e-06, -8.0108642578125e-05, -7.62939453125e-05, -0.0011548995971679688, -1.9073486328125e-06, -0.005762815475463867, -2.3841855067985307e-07, -1.9073486328125e-06, -6.103515625e-05, 0.0, -0.0034770965576171875, -0.15208756923675537, -3.290176027803682e-05, -0.0001850128173828125, -0.004119873046875, 0.0, -0.024245262145996094, -0.001255035400390625, -0.0051750075072050095, -0.0006543397903442383, -0.013840675354003906, -0.09609222412109375, -4.1961669921875e-05, -0.0023641586303710938, -1.1444091796875e-05, -0.000110626220703125, -0.01040792465209961, -2.9802317840221804e-06, -0.0016924749361351132, -8.96453857421875e-05, -1.33514404296875e-05, -0.05146503448486328, -0.0001983642578125, -0.7472999095916748, -0.008332005701959133, -7.748573807475623e-06, -0.13763999938964844, -0.0003108978271484375, -1.1444091796875e-05, -0.029885292053222656, -4.38690185546875e-05, -0.036881446838378906, -0.000988006591796875, -0.00058746337890625, 0.0, -0.00046539306640625, -0.006935477256774902, -6.318092346191406e-06, -0.0026798248291015625, -0.0010633468627929688, -0.004050254821777344, -0.0061664581298828125, -0.0002079010009765625, -0.0023365020751953125, -7.62939453125e-05, 0.0, -0.0029010772705078125, -0.28325462341308594, -9.72747802734375e-05, -0.20961475372314453, -0.007033347152173519, -0.02034151554107666, -0.0003108978271484375, -0.003173828125, -0.0001239776611328125, -0.01051417551934719, -1.9073486328125e-06, -0.09104347229003906, -3.24249267578125e-05, -0.9968740940093994, -0.0005064010620117188, -0.049920082092285156, -0.00102996826171875, -2.86102294921875e-05, -0.0001163482666015625, -1.71661376953125e-05, -0.006947517395019531, 0.0, -0.8460980653762817, -1.33514404296875e-05, -0.5668725967407227, -1.9073486328125e-06, -0.06114768981933594, -0.7133359909057617, -0.000392913818359375, -0.10051822662353516, -1.33514404296875e-05, -0.30774688720703125, -0.14992757141590118, -5.161762237548828e-05, -0.042087554931640625, -0.03388404846191406, -0.270416259765625, -0.000400543212890625, -0.009846687316894531, 0.0, -0.0026683807373046875, -0.0029330248944461346, -2.622604142743512e-06, -0.0017071844777092338, -3.4332275390625e-05, -3.24249267578125e-05, -0.0337982177734375, -5.53131103515625e-05, -0.699962317943573, -0.23814955353736877, -0.0033075178507715464]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"_type": "Template49"}], "keywords": [{"arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Mana<UNK>", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"hole0": "ManaMana", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Call"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "<UNK>OfMana", "_type": "Template46"}, {"hole0": "Gain", "_type": "Template46"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template45"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"hole2": [{"hole0": "ExcessMana", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}, {"hole2": [{"s": "card_drawn", "_type": "Str"}, {"id": "chosen_card", "_type": "Name"}], "hole0": {"_type": "Template68"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "orelse": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"n": 10, "_type": "Num"}], "_type": "Compare"}, "body": [{"hole2": [{"hole0": "PlayerSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"targets": [{"value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "_type": "Subscript"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}, {"hole2": [{"s": "card_drawn", "_type": "Str"}, {"id": "demon_card", "_type": "Name"}], "hole0": {"_type": "Template68"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "_type": "If"}, {"targets": [{"value": {"id": "demon_card", "_type": "Name"}, "attr": "drawn", "_type": "Attribute"}], "value": {"_type": "Template79"}, "_type": "Assign"}, {"op": {"_type": "Add"}, "target": {"value": {"_type": "Template64"}, "attr": "mana", "_type": "Attribute"}, "value": {"_type": "Template60"}, "_type": "AugAssign"}, {"hole2": [{"hole0": "HeroSelector", "_type": "Template46"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "<UNK>", "Of", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 133, 174, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Excess", "Mana", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "chosen_card", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 14, 320, 75, 190, "10", "<EOS>", 334, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Player", "Selector", "<EOS>", 126, 155, 320, 65, 156, 28, 196, 17, 156, 50, "hand", "<EOS>", 124, 177, 64, 305, 152, 46, "player", "<EOS>", 50, 145, 250, 53, "trigger", "<EOS>", 321, 76, 194, "card_drawn", "<EOS>", 73, 186, "demon_card", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "demon_card", "<EOS>", "drawn", "<EOS>", 62, 127, 157, 17, 156, 50, "mana", "<EOS>", 122, 46, 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 93, 255, "Hero", "Selector", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(<UNK>OfMana(), Gain(), PlayerSelector(\n            players=BothPlayer())), Choice(Mana<UNK>(), Summon(ManaMana(),\n            PlayerSelector()), GreaterThan(Count(MinionSelector(IsType(\n            MINION_TYPE.BEAST))), value=0))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.hand) < 10:\n            if len(player.hand) < 10:\n                player.hand.append(ExcessMana())\n                player.hand[-1].player = player\n                self.trigger('card_drawn', chosen_card)\n        elif len(player.hand) < 10:\n            player.hand.append(PlayerSelector())\n            player.hand[-1].player = player\n            self.trigger('card_drawn', demon_card)\n        demon_card.drawn = True\n        player.mana += 1\n        player.hand.append(HeroSelector())\n", "score": -26.213927326775945, "score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -1.1365289688110352, -0.06590364873409271, -0.488940566778183, -0.011245537549257278, -0.0058612823486328125, -3.24249267578125e-05, -0.3503941297531128, -0.1308157742023468, -0.0042133331298828125, -0.010667800903320312, -0.25330352783203125, -0.0028362274169921875, -0.13384461402893066, -5.7220458984375e-06, 0.0, -0.02362060546875, -1.71661376953125e-05, -2.86102294921875e-05, -0.010500907897949219, -3.4332275390625e-05, -0.0001850128173828125, 0.0, -0.001953721046447754, -2.002699693548493e-05, -2.86102294921875e-05, -4.9591064453125e-05, -0.004364013671875, -5.53131103515625e-05, -0.00037419795989990234, -5.7220458984375e-05, -6.29425048828125e-05, -0.0004215240478515625, -5.7220458984375e-06, -0.3218536376953125, -0.619373619556427, -3.9338861824944615e-05, -0.15665817260742188, -0.33080291748046875, -0.3624114990234375, -3.814697265625e-06, -0.06674349308013916, -2.9087057555443607e-05, -0.0052337646484375, -0.0001316070556640625, -1.1444091796875e-05, -0.3457432687282562, -0.31812140345573425, -0.05448660999536514, -0.24089622497558594, -9.5367431640625e-06, -0.005014818161725998, -6.246405246201903e-05, -2.3841855067985307e-07, -0.01986980438232422, -0.0047473907470703125, -1.71661376953125e-05, -3.814697265625e-06, -0.0004725456237792969, -0.00022041797637939453, -5.125998541188892e-06, -1.9073486328125e-06, -1.2615442276000977, -0.025173187255859375, -0.08969414234161377, -1.609325408935547e-05, -0.0004520416259765625, -0.0032444000244140625, -0.0001220703125, -0.009881973266601562, -3.62396240234375e-05, -1.71661376953125e-05, -0.009000897407531738, -0.0020666122436523438, -4.661083221435547e-05, -0.00494384765625, -0.05383110046386719, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.001636505126953125, 0.0, -0.6089564561843872, -0.000293731689453125, -0.01029205322265625, -3.814697265625e-06, -1.52587890625e-05, -0.13240814208984375, 0.0, -0.0063457489013671875, -5.7220458984375e-06, -0.0001468658447265625, -0.014757156372070312, 0.0, -0.00040717609226703644, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.00020849691645707935, -3.814697265625e-06, -0.23399066925048828, -0.0021514892578125, -2.692349433898926, -0.049231529235839844, -0.0060577392578125, -1.9073486328125e-06, -0.6146640777587891, -0.0009307861328125, -0.0010223388671875, -5.7220458984375e-06, -0.0010738344863057137, -5.722038622479886e-06, -9.5367431640625e-06, -8.0108642578125e-05, 0.0, -0.3552742004394531, -0.031654953956604004, -1.8358230590820312e-05, -0.00025177001953125, -0.003742218017578125, 0.0, -0.009481430053710938, -0.0008602142333984375, -0.010999256744980812, -0.0009523630142211914, -0.3212852478027344, -1.9354972839355469, -0.000850677490234375, -0.03776741027832031, -1.9073486328125e-05, -0.006984710693359375, -0.001132965087890625, -0.01820659637451172, -3.814697265625e-06, -0.022202610969543457, -6.794917680963408e-06, -2.09808349609375e-05, -0.0001583099365234375, 0.0, -0.16281890869140625, -0.03637588024139404, -1.96695291379001e-05, -0.0005550384521484375, -0.0044689178466796875, 0.0, -0.015104293823242188, -0.00052642822265625, -0.006880246568471193, -0.001570582389831543, -0.032291412353515625, -0.17061138153076172, -0.0001468658447265625, -0.0017719268798828125, -9.5367431640625e-06, -0.0001049041748046875, -0.009616494178771973, -5.364416665543104e-06, -0.001864184974692762, -0.0001239776611328125, -1.33514404296875e-05, -0.061985015869140625, -0.00019073486328125, -0.7148234844207764, -0.5678765773773193, -0.00853845663368702, -0.052211761474609375, -0.002605438232421875, -2.09808349609375e-05, -0.04260444641113281, -3.814697265625e-05, -0.022530555725097656, -0.0010852813720703125, -0.000545501708984375, 0.0, -0.0003070831298828125, -0.005681157112121582, -9.059905096364673e-06, -0.0026273727416992188, -0.0010089874267578125, -0.0045948028564453125, -0.006293296813964844, -0.0001983642578125, -0.0026874542236328125, -8.392333984375e-05, 0.0, -0.0030918121337890625, -0.45241737365722656, -0.0001201629638671875, -0.21261024475097656, -0.007272242568433285, -0.023857951164245605, -0.00029754638671875, -0.0034847259521484375, -0.0001125335693359375, -0.010885737836360931, -1.9073486328125e-06, -0.08515262603759766, -3.4332275390625e-05, -1.1771900653839111, -5.7220458984375e-06, -0.000202178955078125, -0.44952869415283203, -0.0019674301147460938, -0.029108047485351562, -7.62939453125e-06, -8.0108642578125e-05, -7.62939453125e-05, -0.0011548995971679688, -1.9073486328125e-06, -0.005762815475463867, -2.3841855067985307e-07, -1.9073486328125e-06, -6.103515625e-05, 0.0, -0.0034770965576171875, -0.15208756923675537, -3.290176027803682e-05, -0.0001850128173828125, -0.004119873046875, 0.0, -0.024245262145996094, -0.001255035400390625, -0.0051750075072050095, -0.0006543397903442383, -0.013840675354003906, -0.09609222412109375, -4.1961669921875e-05, -0.0023641586303710938, -1.1444091796875e-05, -0.000110626220703125, -0.01040792465209961, -2.9802317840221804e-06, -0.0016924749361351132, -8.96453857421875e-05, -1.33514404296875e-05, -0.05146503448486328, -0.0001983642578125, -0.7472999095916748, -0.008332005701959133, -7.748573807475623e-06, -0.13763999938964844, -0.0003108978271484375, -1.1444091796875e-05, -0.029885292053222656, -4.38690185546875e-05, -0.036881446838378906, -0.000988006591796875, -0.00058746337890625, 0.0, -0.00046539306640625, -0.006935477256774902, -6.318092346191406e-06, -0.0026798248291015625, -0.0010633468627929688, -0.004050254821777344, -0.0061664581298828125, -0.0002079010009765625, -0.0023365020751953125, -7.62939453125e-05, 0.0, -0.0029010772705078125, -0.28325462341308594, -9.72747802734375e-05, -0.20961475372314453, -0.007033347152173519, -0.02034151554107666, -0.0003108978271484375, -0.003173828125, -0.0001239776611328125, -0.01051417551934719, -1.9073486328125e-06, -0.09104347229003906, -3.24249267578125e-05, -0.9968740940093994, -0.0005064010620117188, -0.049920082092285156, -0.00102996826171875, -2.86102294921875e-05, -0.0001163482666015625, -1.71661376953125e-05, -0.006947517395019531, 0.0, -0.8460980653762817, -1.33514404296875e-05, -0.5668725967407227, -1.9073486328125e-06, -0.06114768981933594, -0.7133359909057617, -0.000392913818359375, -0.10051822662353516, -1.33514404296875e-05, -0.30774688720703125, -0.14992757141590118, -5.161762237548828e-05, -0.042087554931640625, -0.03388404846191406, -0.270416259765625, -0.000400543212890625, -0.009846687316894531, 0.0, -0.0026683807373046875, -0.0029330248944461346, -2.622604142743512e-06, -0.0017071844777092338, -3.4332275390625e-05, -3.24249267578125e-05, -0.0337982177734375, -5.53131103515625e-05, -1.0182263851165771, -0.3982854187488556, -0.00013910756388213485]}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(3)\n        player.hero.change_temp_attack(3)\n", "score": -3.455165802445663, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.9477815628051758, -0.5320100784301758, -7.62939453125e-06, -0.014093399047851562, -6.103515625e-05, -0.1290149688720703, -2.86102294921875e-05, -0.002777099609375, -0.0034515855368226767, 0.0, -0.03088247776031494, 0.0, -0.10134690999984741, -5.7220458984375e-06, -0.0037784576416015625, -1.9073486328125e-06, -0.09102725982666016, -2.09808349609375e-05, -0.024188995361328125, -8.20159912109375e-05, -0.016088485717773438, -0.0014622211456298828, -1.9073486328125e-06, -0.3132134675979614, -1.9073486328125e-06, -0.16184592247009277, -7.62939453125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(3), self)\n        player.draw()\n", "score": -3.857481988191921, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -1.5303900241851807, 0.0, -6.29425048828125e-05, -0.04490852355957031, -1.71661376953125e-05, -0.0022983551025390625, -0.2160179615020752, -5.340576171875e-05, -0.1839219331741333, -5.125999450683594e-05, -0.0009174346923828125, -0.01324462890625, -5.7220458984375e-05, -0.0065460205078125, -9.5367431640625e-06, -0.011587142944335938, -0.0013608932495117188, -5.340576171875e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "change_temp_attack", "_type": "Template37"}, "_type": "Expr"}, {"value": {"hole2": 3, "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "increase_armor", "_type": "Template37"}, "_type": "Expr"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "increase_armor", "<EOS>", "3", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(3)\n        player.hero.increase_armor(3)\n", "score": -4.709281272199405, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.9477815628051758, -0.5320100784301758, -7.62939453125e-06, -0.014093399047851562, -6.103515625e-05, -0.1290149688720703, -2.86102294921875e-05, -0.002777099609375, -0.0034515855368226767, 0.0, -0.03088247776031494, 0.0, -0.10134690999984741, -5.7220458984375e-06, -0.0037784576416015625, -1.9073486328125e-06, -0.09102725982666016, -2.09808349609375e-05, -0.024188995361328125, -8.20159912109375e-05, -0.016088485717773438, -0.0014622211456298828, -1.9073486328125e-06, -1.6831055879592896, 0.0, -0.04607117921113968, -7.62939453125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}, {"_type": "Template19"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47, 141], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n", "score": -4.88988140416177, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -2.2081387042999268, 0.0, -0.000148773193359375, -0.6039609909057617, -0.014899253845214844, -0.0006333589553833008, -0.008782625198364258, -3.0517578125e-05, -7.62939453125e-05, -0.0019989013671875, -0.000186920166015625, -0.009585380554199219, -0.09171867370605469, -0.10373687744140625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hero", "_type": "Attribute"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "3", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(3), self)\n        player.draw()\n", "score": -5.139280232778191, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.9477815628051758, -1.3072032928466797, -1.71661376953125e-05, -0.07512283325195312, 0.0, -0.783381462097168, -0.5694866180419922, -2.3841855067985307e-07, -0.02438739314675331, 0.0, -0.0001888275146484375, -0.017479896545410156, -5.7220458984375e-06, -0.0006275177001953125, -0.0462493896484375, -1.33514404296875e-05, -0.1433953046798706, -7.510185241699219e-05, -0.0015087127685546875, -0.09255027770996094, -2.47955322265625e-05, -0.015956878662109375, -1.1444091796875e-05, -0.03005218505859375, -0.0017538070678710938, -2.288818359375e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_heal_power", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "heal", "_type": "Template44"}, {"value": {"hole0": {"_type": "Template64"}, "hole1": "draw", "_type": "Template43"}, "_type": "Expr"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "costs", "<EOS>", 110, 130, 168, 37, 249, 50, "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n        player.draw()\n", "score": -5.455321451664986, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -1.5303900241851807, 0.0, -6.29425048828125e-05, -0.04490852355957031, -1.71661376953125e-05, -0.0022983551025390625, -0.2160179615020752, -5.340576171875e-05, -1.786574363708496, -0.0004262812144588679, -0.0015583038330078125, -0.012060165405273438, -2.6702880859375e-05, -0.0062961578369140625, -7.62939453125e-06, -0.0072460174560546875, -0.0013341903686523438, -5.91278076171875e-05]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "Kill", "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"_type": "Template68"}], "hole0": {"_type": "Template64"}, "hole1": "<UNK>", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 220, "Kill", "<EOS>", "Self", "Selector", "<EOS>", 145, 250, 50, "<UNK>", "<EOS>", 320, 110], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(Kill(),\n            SelfSelector())))\n        player.<UNK>(self)\n", "score": -6.143058233997181, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -1.574681282043457, -0.06576776504516602, -0.0001032346481224522, -0.0008859917288646102, -4.8160552978515625e-05, 0.0, -0.3613615036010742, -1.1444091796875e-05, -0.4810171127319336, -0.4954768419265747, -0.0008587837219238281, -0.0006618499755859375, -0.4513587951660156]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "AddCard", "hole1": [{"_type": "Template68"}], "hole3": "PlayerSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Add", "Card", "<EOS>", 320, 110, "Player", "Selector", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self),\n            PlayerSelector())))\n        player.hand.append(new_minon)\n", "score": -7.159604336485245, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -1.2503247261047363, -0.0019254684448242188, -0.0002747774124145508, 0.0, -0.3419218063354492, -0.03315997123718262, -0.00019466876983642578, 0.0, -0.2699289321899414, 0.0, -0.016465187072753906, -3.814697265625e-06, -0.46478939056396484, -0.8027087450027466, -5.841255187988281e-06, -0.13404107093811035, -3.24249267578125e-05, -8.0108642578125e-05, -0.0734872817993164, -0.000118255615234375, -0.7831084728240967, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "Heal", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(Heal(4),\n            HeroSelector())))\n        player.hand.append(new_minon)\n", "score": -7.1632861004918595, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -2.127814769744873, -1.919269561767578e-05, -5.7220458984375e-06, -0.1744251251220703, -0.03132319450378418, -0.00013172626495361328, 0.0, -0.04045295715332031, 0.0, -0.02144336700439453, -1.9073486328125e-06, -0.4910879135131836, -0.3909226655960083, -1.4066696166992188e-05, -0.15747927129268646, -6.67572021484375e-05, -0.000141143798828125, -0.02737903594970703, -0.0001277923583984375, -0.7134180068969727, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "Give", "hole1": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Self", "Selector", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(Give(Buff(\n            ChangeAttack(2))), SelfSelector())))\n        player.hand.append(new_minon)\n", "score": -8.155929352506973, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -1.5991148948669434, -0.051357388496398926, -3.814697265625e-06, -0.22327613830566406, -0.0064411163330078125, -0.0010172128677368164, -5.7220458984375e-06, -0.015115618705749512, -0.005710005760192871, 0.0, -0.6658897399902344, -1.9073486328125e-06, -0.04851937294006348, -4.1961669921875e-05, 0.0, -0.043529510498046875, -1.33514404296875e-05, -0.04294395446777344, -3.814697265625e-06, -0.7828359603881836, -0.5026519298553467, -1.1444091796875e-05, -0.516482949256897, -4.1961669921875e-05, -0.000186920166015625, -0.023283004760742188, -0.00023651123046875, -0.6401797533035278, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "Give", "hole1": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"s": "character_attack", "_type": "Str"}, {"id": "reduce_cost", "_type": "Name"}], "hole0": {"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Self", "Selector", "<EOS>", 145, 250, 17, 156, 41, "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 73, 186, "reduce_cost", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(Give(Buff(\n            ChangeAttack(2))), SelfSelector())))\n        self.target.player.trigger('character_attack', reduce_cost)\n", "score": -8.47897877858577, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -1.5991148948669434, -0.051357388496398926, -3.814697265625e-06, -0.22327613830566406, -0.0064411163330078125, -0.0010172128677368164, -5.7220458984375e-06, -0.015115618705749512, -0.005710005760192871, 0.0, -0.6658897399902344, -1.9073486328125e-06, -0.04851937294006348, -4.1961669921875e-05, 0.0, -0.043529510498046875, -1.33514404296875e-05, -0.04294395446777344, -3.814697265625e-06, -1.0453214645385742, -0.5640192031860352, 0.0, -0.4245719909667969, -0.0057506561279296875, -0.008697509765625, -0.0001544952392578125, -7.05718994140625e-05, -0.5797818899154663, -5.7220458984375e-06, -0.01837444305419922, -0.0016536712646484375, -0.14055633544921875, -3.814697265625e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"func": {"_type": "Template77"}, "args": [{"hole0": "TurnEnded", "_type": "Template46"}, {"hole0": "Duplicate", "hole1": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}], "hole0": {"_type": "Template52"}, "hole1": "add_effect", "_type": "Template44"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Duplicate", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Self", "Selector", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(Duplicate(Buff\n            (ChangeAttack(2))), SelfSelector())))\n        player.hand.append(new_minon)\n", "score": -8.668269004091599, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -1.4389195442199707, -6.29425048828125e-05, -7.62939453125e-06, -0.865778923034668, -0.00447845458984375, -0.002672553062438965, -7.62939453125e-06, -0.007225751876831055, -0.012956738471984863, 0.0, -0.7166211009025574, 0.0, -0.023848652839660645, -4.1961669921875e-05, 0.0, -0.04241371154785156, -1.1444091796875e-05, -0.04005146026611328, -5.7220458984375e-06, -0.7532415390014648, -0.5686308145523071, -1.1444091796875e-05, -0.5207324028015137, -4.76837158203125e-05, -0.0001926422119140625, -0.023279190063476562, -0.0002269744873046875, -0.6597687005996704, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"names": [{"name": "Preparation", "_type": "alias"}], "module": "hearthbreaker.cards.minions.druid", "level": 0, "_type": "ImportFrom"}, {"_type": "Template19"}, {"test": {"op": {"_type": "And"}, "values": [{"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "costs", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}], "_type": "BoolOp"}, "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"id": "card", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "_type": "If"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "Preparation", "<EOS>", "0", "<EOS>", 141, 133, 173, 19, 159, 6, 321, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 9, 320, 113, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "costs", "<EOS>", 317, 9, 320, 113, 334, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        from hearthbreaker.cards.minions.druid import Preparation\n        super().use(player, game)\n        if len(player.hand) > 0 and len(game.other_player.costs) > 0:\n            <UNK> = game.random_choice(player.hand)\n            player.hand.append(new_minon)\n            card.add_buff(Buff(ManaChange(-3)))\n", "score": -10.099357400814213, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.575709342956543, -0.0025348663330078125, -0.4130721092224121, 0.0, -0.07269668579101562, -0.0029821395874023438, -0.29875072836875916, -0.001098759239539504, -0.008804873563349247, -1.1444091796875e-05, -0.20748138427734375, -0.062236785888671875, -0.000568389892578125, -0.030757904052734375, -0.0008831024169921875, -0.0005130767822265625, -0.0033817291259765625, -0.00788116455078125, -0.0008459091186523438, -0.10976982116699219, -0.0028285980224609375, -0.000148773193359375, -0.0001087188720703125, -0.012040852569043636, -1.1920928244535389e-07, -0.0030717849731445312, -0.00011444091796875, -1.9073486328125e-06, -0.11970138549804688, -0.04829525947570801, -7.748603820800781e-06, -0.0019369125366210938, -1.5931453704833984, -7.62939453125e-06, -4.9591064453125e-05, -0.00699615478515625, -0.000579833984375, -0.005970001220703125, -0.0005016326904296875, -9.5367431640625e-06, -2.86102294921875e-05, -0.0036857109516859055, -1.1920928244535389e-07, -0.0005779266357421875, -7.43865966796875e-05, 0.0, -0.21307945251464844, 0.0, -0.4697227478027344, -5.7220458984375e-06, -0.0027419328689575195, 0.0, -0.0012295246124267578, -1.6689286894688848e-06, -0.6429636478424072, -2.491459235898219e-05, -0.000217437744140625, -0.04015064239501953, -2.86102294921875e-05, -8.96453857421875e-05, -0.12738418579101562, -0.016534805297851562, -1.1444091796875e-05, -2.47955322265625e-05, -6.103515625e-05, -5.7220458984375e-06, -0.10878705978393555, -2.3841855067985307e-07, -0.03199481964111328, -0.00031280517578125, -7.2479248046875e-05, -0.0001068115234375, -0.0031185150146484375, -1.9073486328125e-06, -0.23366568982601166, -1.0728830375228426e-06, -0.0952448844909668, 0.0, -2.09808349609375e-05, -0.13402366638183594, -6.103515625e-05, -0.0833139419555664, -0.13169848918914795, -4.410743713378906e-06, -0.13933277130126953, -0.0001316070556640625, -0.43248653411865234, 0.0, -0.17477893829345703, -0.004840373992919922, -3.063678741455078e-05, -0.027998924255371094, -1.9073486328125e-06, -0.000171661376953125, -0.05311012268066406, -9.1552734375e-05, -1.1134434938430786, 0.0, -0.09354782104492188, -2.09808349609375e-05, -0.016904830932617188, -5.7220458984375e-06, -0.11008322238922119, -0.00019669532775878906, -0.1449718475341797, 0.0, -2.6702880859375e-05, -0.5934324264526367, -0.0011234283447265625, -0.0003701448440551758, -0.0040857791900634766, -1.52587890625e-05, -2.47955322265625e-05, -0.007897377014160156, -0.0001373291015625, -0.017974853515625, -0.14356613159179688]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"names": [{"name": "Preparation", "_type": "alias"}], "module": "hearthbreaker.cards.minions.druid", "level": 0, "_type": "ImportFrom"}, {"_type": "Template19"}, {"test": {"op": {"_type": "And"}, "values": [{"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "costs", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}], "_type": "BoolOp"}, "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": "Buff", "hole1": "ManaChange", "_type": "Template28"}], "hole0": {"id": "card", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "_type": "If"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "Preparation", "<EOS>", "0", "<EOS>", 141, 133, 173, 19, 159, 6, 321, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 9, 320, 113, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "costs", "<EOS>", 317, 9, 320, 113, 334, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Mana", "Change", "<EOS>", "2", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        from hearthbreaker.cards.minions.druid import Preparation\n        super().use(player, game)\n        if len(player.hand) > 0 and len(game.other_player.costs) > 0:\n            <UNK> = game.random_choice(player.hand)\n            player.hand.append(new_minon)\n            card.add_buff(Buff(ManaChange(2)))\n", "score": -10.427019289488115, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.575709342956543, -0.0025348663330078125, -0.4130721092224121, 0.0, -0.07269668579101562, -0.0029821395874023438, -0.29875072836875916, -0.001098759239539504, -0.008804873563349247, -1.1444091796875e-05, -0.20748138427734375, -0.062236785888671875, -0.000568389892578125, -0.030757904052734375, -0.0008831024169921875, -0.0005130767822265625, -0.0033817291259765625, -0.00788116455078125, -0.0008459091186523438, -0.10976982116699219, -0.0028285980224609375, -0.000148773193359375, -0.0001087188720703125, -0.012040852569043636, -1.1920928244535389e-07, -0.0030717849731445312, -0.00011444091796875, -1.9073486328125e-06, -0.11970138549804688, -0.04829525947570801, -7.748603820800781e-06, -0.0019369125366210938, -1.5931453704833984, -7.62939453125e-06, -4.9591064453125e-05, -0.00699615478515625, -0.000579833984375, -0.005970001220703125, -0.0005016326904296875, -9.5367431640625e-06, -2.86102294921875e-05, -0.0036857109516859055, -1.1920928244535389e-07, -0.0005779266357421875, -7.43865966796875e-05, 0.0, -0.21307945251464844, 0.0, -0.4697227478027344, -5.7220458984375e-06, -0.0027419328689575195, 0.0, -0.0012295246124267578, -1.6689286894688848e-06, -0.6429636478424072, -2.491459235898219e-05, -0.000217437744140625, -0.04015064239501953, -2.86102294921875e-05, -8.96453857421875e-05, -0.12738418579101562, -0.016534805297851562, -1.1444091796875e-05, -2.47955322265625e-05, -6.103515625e-05, -5.7220458984375e-06, -0.10878705978393555, -2.3841855067985307e-07, -0.03199481964111328, -0.00031280517578125, -7.2479248046875e-05, -0.0001068115234375, -0.0031185150146484375, -1.9073486328125e-06, -0.23366568982601166, -1.0728830375228426e-06, -0.0952448844909668, 0.0, -2.09808349609375e-05, -0.13402366638183594, -6.103515625e-05, -0.0833139419555664, -0.13169848918914795, -4.410743713378906e-06, -0.13933277130126953, -0.0001316070556640625, -0.43248653411865234, 0.0, -0.17477893829345703, -0.004840373992919922, -3.063678741455078e-05, -0.027998924255371094, -1.9073486328125e-06, -0.000171661376953125, -0.05311012268066406, -9.1552734375e-05, -1.1134434938430786, 0.0, -0.09354782104492188, -2.09808349609375e-05, -0.016904830932617188, -5.7220458984375e-06, -0.11008322238922119, -0.00019669532775878906, -0.1449718475341797, 0.0, -2.6702880859375e-05, -0.8878231048583984, -0.0030527114868164062, -0.024625778198242188, -1.1444091796875e-05, -0.16695451736450195, -0.0004330873489379883, -4.00543212890625e-05, -0.013339178636670113, -9.5367431640625e-06]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Preparation", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"names": [{"name": "Preparation", "_type": "alias"}], "module": "hearthbreaker.cards.minions.druid", "level": 0, "_type": "ImportFrom"}, {"_type": "Template19"}, {"test": {"op": {"_type": "And"}, "values": [{"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Gt"}], "comparators": [{"_type": "Template76"}], "_type": "Compare"}], "_type": "BoolOp"}, "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"func": {"value": {"id": "game", "_type": "Name"}, "attr": "random_choice", "_type": "Attribute"}, "args": [{"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"id": "new_minon", "_type": "Name"}], "hole0": {"value": {"_type": "Template64"}, "attr": "hand", "_type": "Attribute"}, "hole1": "append", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"id": "card", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}], "_type": "If"}], "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 134, 175, "hearthbreaker.cards.minions.druid", "<EOS>", 311, 306, "Preparation", "<EOS>", "0", "<EOS>", 141, 133, 173, 19, 159, 6, 321, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 317, 9, 320, 113, 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 334, 126, 155, 320, 73, 186, "<UNK>", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 65, 156, 50, "hand", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>", 145, 250, 25, 186, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        from hearthbreaker.cards.minions.druid import Preparation\n        super().use(player, game)\n        if len(player.hand) > 0 and len(game.other_player.minions) > 0:\n            <UNK> = game.random_choice(player.hand)\n            player.hand.append(new_minon)\n            card.add_buff(Buff(ManaChange(-3)))\n", "score": -10.749930460879412, "score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.7943458557128906, -1.52587890625e-05, -1.0490362910786644e-05, -3.814697265625e-06, -0.00020825862884521484, 0.0, -0.15374314785003662, -5.7220458984375e-06, -0.0003854036331176758, 0.0, -7.152556463552173e-06, 0.0, -6.186893733683974e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.7881393432617188e-05, -3.814697265625e-06, -0.13202381134033203, -0.575709342956543, -0.0025348663330078125, -0.4130721092224121, 0.0, -0.07269668579101562, -0.0029821395874023438, -0.29875072836875916, -0.001098759239539504, -0.008804873563349247, -1.1444091796875e-05, -0.20748138427734375, -0.062236785888671875, -0.000568389892578125, -0.030757904052734375, -0.0008831024169921875, -0.0005130767822265625, -0.0033817291259765625, -0.00788116455078125, -0.0008459091186523438, -0.10976982116699219, -0.0028285980224609375, -0.000148773193359375, -0.0001087188720703125, -0.012040852569043636, -1.1920928244535389e-07, -0.0030717849731445312, -0.00011444091796875, -1.9073486328125e-06, -0.11970138549804688, -0.04829525947570801, -7.748603820800781e-06, -0.0019369125366210938, -1.5931453704833984, -7.62939453125e-06, -4.9591064453125e-05, -0.00699615478515625, -0.000579833984375, -0.005970001220703125, -0.0005016326904296875, -9.5367431640625e-06, -2.86102294921875e-05, -0.0036857109516859055, -1.1920928244535389e-07, -0.0005779266357421875, -7.43865966796875e-05, 0.0, -0.21307945251464844, 0.0, -0.4697227478027344, -5.7220458984375e-06, -0.0027419328689575195, 0.0, -0.0012295246124267578, -1.6689286894688848e-06, -0.7717153429985046, -2.09808349609375e-05, -0.00040435791015625, -0.24424362182617188, -4.76837158203125e-05, -0.0002307891845703125, -0.1487255096435547, -0.008655548095703125, -7.62939453125e-06, -3.0517578125e-05, -9.1552734375e-05, -3.814697265625e-06, -0.22768020629882812, -2.3841855067985307e-07, -0.041263580322265625, -0.0001964569091796875, -5.340576171875e-05, -0.0001583099365234375, -0.0029754638671875, -1.9073486328125e-06, -0.31106874346733093, -1.4305104514278355e-06, -0.08866167068481445, 0.0, -2.09808349609375e-05, -0.14722919464111328, -5.53131103515625e-05, -0.07642745971679688, -0.148301362991333, -4.5299530029296875e-06, -0.2801828384399414, -0.0001621246337890625, -0.35773563385009766, 0.0, -0.14402389526367188, -0.005241870880126953, -3.254413604736328e-05, -0.02663421630859375, -1.9073486328125e-06, -0.0001697540283203125, -0.049521446228027344, -8.96453857421875e-05, -1.159868836402893, 0.0, -0.08202934265136719, -2.47955322265625e-05, -0.015562057495117188, -7.62939453125e-06, -0.10801982879638672, -0.00018334388732910156, -0.13846516609191895, 0.0, -2.6702880859375e-05, -0.621403694152832, -0.0011653900146484375, -0.0003548860549926758, -0.0039751529693603516, -1.52587890625e-05, -2.47955322265625e-05, -0.007569313049316406, -0.0001354217529296875, -0.01713275909423828, -0.1432647705078125]}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -3.7860486567687985, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -0.45406460762023926, 0.0, -0.0011310577392578125, -0.0002994537353515625, -0.0007333755493164062, -0.0008831024169921875, -7.62939453125e-06, -0.0003528594970703125, -0.000637054443359375, -8.58306884765625e-05, -0.004459381103515625, -9.5367431640625e-06, -0.0007419586181640625, -0.018466949462890625, -9.5367431640625e-06, -1.1444091796875e-05, -0.0055789947509765625, -1.9073486328125e-06, -0.1616058349609375, -1.9073486328125e-06, -0.0016498565673828125, -0.014683127403259277, -3.814697265625e-06, -0.0007361172465607524, -9.095667337533087e-05, -0.00619196891784668, 0.0, -0.0002422332763671875, -6.4849853515625e-05, -0.0001277923583984375, -0.6241340637207031, 0.0, -0.0009307861328125, -0.0001163482666015625, -0.000598907470703125, -0.0010843276977539062, -7.62939453125e-06, -0.00083160400390625, -9.918212890625e-05, -0.000644683837890625, -7.62939453125e-06, -0.005267143249511719, -0.0022735595703125, -0.2108144760131836, -0.0063934326171875, -0.000179290771484375, -0.0001125335693359375, -0.021035194396972656, -3.814697265625e-06, -0.036163330078125, -0.024974822998046875, -3.814697265625e-06, -0.0101165771484375, 0.0, -0.09494936466217041, -5.507469177246094e-05, -0.3948722183704376, 0.0, -4.00543212890625e-05, -0.25249385833740234, -0.0001316070556640625, -0.0022565126419067383, -1.9073486328125e-05, -0.0716768354177475, -0.01962721347808838, 0.0, -0.3580056428909302, -3.814697265625e-05, -0.019708633422851562, -5.53131103515625e-05, -0.0003604888916015625, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007610321044921875, -0.0008360147476196289, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -4.115248827702999, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -0.45406460762023926, 0.0, -0.0011310577392578125, -0.0002994537353515625, -0.0007333755493164062, -0.0008831024169921875, -7.62939453125e-06, -0.0003528594970703125, -0.000637054443359375, -8.58306884765625e-05, -0.004459381103515625, -9.5367431640625e-06, -0.0007419586181640625, -0.018466949462890625, -9.5367431640625e-06, -1.1444091796875e-05, -0.0055789947509765625, -1.9073486328125e-06, -0.1616058349609375, -1.9073486328125e-06, -0.0016498565673828125, -0.014683127403259277, -3.814697265625e-06, -0.0007361172465607524, -9.095667337533087e-05, -0.00619196891784668, 0.0, -0.0002422332763671875, -6.4849853515625e-05, -0.0001277923583984375, -0.9931788444519043, 0.0, -0.0009098052978515625, -0.0003509521484375, -0.0005369186401367188, -0.001033782958984375, -7.62939453125e-06, -0.0015087127685546875, -9.918212890625e-05, -0.00081634521484375, -7.62939453125e-06, -0.004872322082519531, -0.002048492431640625, -0.19124603271484375, -0.0064868927001953125, -0.0001735687255859375, -0.0001163482666015625, -0.022179603576660156, -3.814697265625e-06, -0.033489227294921875, -0.02147388458251953, -3.814697265625e-06, -0.010683059692382812, 0.0, -0.10002481937408447, -5.507469177246094e-05, -0.3735138475894928, 0.0, -4.00543212890625e-05, -0.25583934783935547, -0.000133514404296875, -0.0022526979446411133, -1.9073486328125e-05, -0.07325369864702225, -0.01942312717437744, 0.0, -0.35430485010147095, -3.814697265625e-05, -0.018752098083496094, -5.7220458984375e-05, -0.0003681182861328125, -5.14984130859375e-05, -4.1961669921875e-05, -3.814697265625e-06, -4.541873204289004e-05, -0.0007476806640625, -0.0008322000503540039, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -4.527546421591069, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -1.3380160331726074, 0.0, -0.01565563678741455, -4.1961669921875e-05, -0.0044317240826785564, 0.0, -0.00882720947265625, -0.008546829223632812, -3.814697265625e-06, -0.014974594116210938, -1.9073486328125e-05, -0.0100860595703125, -1.9073486328125e-06, -0.000392913818359375, -0.004290815908461809, -4.172325134277344e-06, -0.0024321062956005335, -6.866453622933477e-05, -0.013953804969787598, 0.0, -0.002552032470703125, -0.000125885009765625, -9.72747802734375e-05, -0.457226037979126, 0.0, -0.0010509490966796875, -0.0002803802490234375, -0.0007190704345703125, -0.0008945465087890625, -7.62939453125e-06, -0.000347137451171875, -0.000606536865234375, -8.7738037109375e-05, -0.0044394731521606445, -9.5367431640625e-06, -0.0007381439208984375, -0.017110824584960938, -9.5367431640625e-06, -1.1444091796875e-05, -0.0054779052734375, -1.9073486328125e-06, -0.16068458557128906, -1.9073486328125e-06, -0.00164031982421875, -0.01476740837097168, -3.814697265625e-06, -0.0007362364558503032, -9.095667337533087e-05, -0.006209135055541992, 0.0, -0.000240325927734375, -6.4849853515625e-05, -0.0001277923583984375, -0.6233243942260742, 0.0, -0.0009307861328125, -0.00011444091796875, -0.000598907470703125, -0.0010843276977539062, -7.62939453125e-06, -0.000823974609375, -9.918212890625e-05, -0.0006465911865234375, -7.62939453125e-06, -0.0052623748779296875, -0.002277374267578125, -0.21087169647216797, -0.006381034851074219, -0.000179290771484375, -0.0001125335693359375, -0.020990371704101562, -3.814697265625e-06, -0.036083221435546875, -0.024987220764160156, -3.814697265625e-06, -0.010118484497070312, 0.0, -0.09477102756500244, -5.507469177246094e-05, -0.3952568471431732, 0.0, -4.00543212890625e-05, -0.25261592864990234, -0.0001316070556640625, -0.0022565126419067383, -1.9073486328125e-05, -0.07167404145002365, -0.01962721347808838, 0.0, -0.35803914070129395, -3.814697265625e-05, -0.019721031188964844, -5.53131103515625e-05, -0.0003604888916015625, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007610321044921875, -0.0008360147476196289, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -4.621570883758068, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -1.3147928714752197, 0.0, -0.0013446807861328125, -0.0001506805419921875, -0.001007080078125, -0.00112152099609375, -5.7220458984375e-06, -0.00043487548828125, -0.000347137451171875, -7.43865966796875e-05, -0.006023287773132324, -1.1444091796875e-05, -0.0006275177001953125, -0.013040542602539062, -9.5367431640625e-06, -9.5367431640625e-06, -0.0047397613525390625, -1.9073486328125e-06, -0.1634979248046875, -1.9073486328125e-06, -0.001567840576171875, -0.01471710205078125, -3.814697265625e-06, -0.0007311104563996196, -9.334085916634649e-05, -0.0063561201095581055, 0.0, -0.000232696533203125, -6.67572021484375e-05, -0.0001277923583984375, -0.6081199645996094, 0.0, -0.00091552734375, -0.000110626220703125, -0.0005950927734375, -0.001087188720703125, -7.62939453125e-06, -0.0007839202880859375, -9.918212890625e-05, -0.0006465911865234375, -7.62939453125e-06, -0.005222320556640625, -0.00225830078125, -0.20992183685302734, -0.006390571594238281, -0.00017547607421875, -0.00011444091796875, -0.021460533142089844, -3.814697265625e-06, -0.03617286682128906, -0.024641990661621094, -3.814697265625e-06, -0.010087966918945312, 0.0, -0.09602606296539307, -5.507469177246094e-05, -0.3891858160495758, 0.0, -4.00543212890625e-05, -0.25196361541748047, -0.000133514404296875, -0.0022603273391723633, -1.9073486328125e-05, -0.07159627228975296, -0.01966249942779541, 0.0, -0.35742464661598206, -3.814697265625e-05, -0.019695281982421875, -5.7220458984375e-05, -0.00035858154296875, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007572174072265625, -0.0008360147476196289, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -4.858754687908913, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -1.3380160331726074, 0.0, -0.01565563678741455, -4.1961669921875e-05, -0.0044317240826785564, 0.0, -0.00882720947265625, -0.008546829223632812, -3.814697265625e-06, -0.014974594116210938, -1.9073486328125e-05, -0.0100860595703125, -1.9073486328125e-06, -0.000392913818359375, -0.004290815908461809, -4.172325134277344e-06, -0.0024321062956005335, -6.866453622933477e-05, -0.013953804969787598, 0.0, -0.002552032470703125, -0.000125885009765625, -9.72747802734375e-05, -0.457226037979126, 0.0, -0.0010509490966796875, -0.0002803802490234375, -0.0007190704345703125, -0.0008945465087890625, -7.62939453125e-06, -0.000347137451171875, -0.000606536865234375, -8.7738037109375e-05, -0.0044394731521606445, -9.5367431640625e-06, -0.0007381439208984375, -0.017110824584960938, -9.5367431640625e-06, -1.1444091796875e-05, -0.0054779052734375, -1.9073486328125e-06, -0.16068458557128906, -1.9073486328125e-06, -0.00164031982421875, -0.01476740837097168, -3.814697265625e-06, -0.0007362364558503032, -9.095667337533087e-05, -0.006209135055541992, 0.0, -0.000240325927734375, -6.4849853515625e-05, -0.0001277923583984375, -0.994377613067627, 0.0, -0.0009098052978515625, -0.0003490447998046875, -0.0005369186401367188, -0.001033782958984375, -7.62939453125e-06, -0.0014972686767578125, -9.918212890625e-05, -0.0008182525634765625, -7.62939453125e-06, -0.004864692687988281, -0.0020513534545898438, -0.19129085540771484, -0.0064697265625, -0.0001735687255859375, -0.0001163482666015625, -0.022139549255371094, -3.814697265625e-06, -0.03343009948730469, -0.02149200439453125, -3.814697265625e-06, -0.010683059692382812, 0.0, -0.09984838962554932, -5.507469177246094e-05, -0.373871386051178, 0.0, -4.00543212890625e-05, -0.25597667694091797, -0.000133514404296875, -0.0022526979446411133, -1.9073486328125e-05, -0.07324427366256714, -0.019424080848693848, 0.0, -0.35435551404953003, -3.814697265625e-05, -0.018759727478027344, -5.7220458984375e-05, -0.0003662109375, -5.14984130859375e-05, -4.1961669921875e-05, -3.814697265625e-06, -4.541873204289004e-05, -0.0007476806640625, -0.0008322000503540039, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -4.99026219404459, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -1.3147928714752197, 0.0, -0.0013446807861328125, -0.0001506805419921875, -0.001007080078125, -0.00112152099609375, -5.7220458984375e-06, -0.00043487548828125, -0.000347137451171875, -7.43865966796875e-05, -0.006023287773132324, -1.1444091796875e-05, -0.0006275177001953125, -0.013040542602539062, -9.5367431640625e-06, -9.5367431640625e-06, -0.0047397613525390625, -1.9073486328125e-06, -0.1634979248046875, -1.9073486328125e-06, -0.001567840576171875, -0.01471710205078125, -3.814697265625e-06, -0.0007311104563996196, -9.334085916634649e-05, -0.0063561201095581055, 0.0, -0.000232696533203125, -6.67572021484375e-05, -0.0001277923583984375, -1.0160775184631348, 0.0, -0.00089263916015625, -0.0003414154052734375, -0.0005340576171875, -0.00103759765625, -7.62939453125e-06, -0.001430511474609375, -9.72747802734375e-05, -0.0008182525634765625, -7.62939453125e-06, -0.0048313140869140625, -0.0020418167114257812, -0.19031333923339844, -0.006470680236816406, -0.0001697540283203125, -0.000118255615234375, -0.022429466247558594, -3.814697265625e-06, -0.03347969055175781, -0.021173477172851562, -3.814697265625e-06, -0.010660171508789062, 0.0, -0.10074102878570557, -5.507469177246094e-05, -0.36897191405296326, 0.0, -4.00543212890625e-05, -0.2552938461303711, -0.000133514404296875, -0.0022584199905395508, -1.9073486328125e-05, -0.07312562316656113, -0.019470810890197754, 0.0, -0.3537861704826355, -3.814697265625e-05, -0.018758773803710938, -5.7220458984375e-05, -0.0003643035888671875, -5.14984130859375e-05, -4.1961669921875e-05, -3.814697265625e-06, -4.541873204289004e-05, -0.0007437467575073242, -0.0008322000503540039, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(2)))\n        super().reveal()\n", "score": -5.024704819984436, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -0.45406460762023926, 0.0, -0.0011310577392578125, -0.0002994537353515625, -0.0007333755493164062, -0.0008831024169921875, -7.62939453125e-06, -0.0003528594970703125, -0.000637054443359375, -8.58306884765625e-05, -0.004459381103515625, -9.5367431640625e-06, -0.0007419586181640625, -0.018466949462890625, -9.5367431640625e-06, -1.1444091796875e-05, -0.0055789947509765625, -1.9073486328125e-06, -0.1616058349609375, -1.9073486328125e-06, -0.0016498565673828125, -0.014683127403259277, -3.814697265625e-06, -0.0007361172465607524, -9.095667337533087e-05, -0.00619196891784668, 0.0, -0.0002422332763671875, -6.4849853515625e-05, -0.0001277923583984375, -0.6241340637207031, 0.0, -0.0009307861328125, -0.0001163482666015625, -0.000598907470703125, -0.0010843276977539062, -7.62939453125e-06, -0.00083160400390625, -9.918212890625e-05, -0.000644683837890625, -7.62939453125e-06, -0.005267143249511719, -0.0022735595703125, -0.2108144760131836, -0.0063934326171875, -0.000179290771484375, -0.0001125335693359375, -0.021035194396972656, -3.814697265625e-06, -0.036163330078125, -0.024974822998046875, -3.814697265625e-06, -0.0101165771484375, 0.0, -0.09494936466217041, -5.507469177246094e-05, -0.3948722183704376, 0.0, -4.00543212890625e-05, -0.25249385833740234, -0.0001316070556640625, -0.0022565126419067383, -1.9073486328125e-05, -0.0716768354177475, -0.01962721347808838, 0.0, -1.6025744676589966, 0.0, -0.013340950012207031, -2.6702880859375e-05, -0.0007114410400390625, -4.9591064453125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -4.720687138615176e-05, -0.0010311603546142578, -0.0007731914520263672, -0.0001583099365234375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -5.349760682288434, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -1.3380160331726074, 0.0, -0.01565563678741455, -4.1961669921875e-05, -0.0044317240826785564, 0.0, -0.00882720947265625, -0.008546829223632812, -3.814697265625e-06, -0.014974594116210938, -1.9073486328125e-05, -0.0100860595703125, -1.9073486328125e-06, -0.000392913818359375, -0.004290815908461809, -4.172325134277344e-06, -0.0024321062956005335, -6.866453622933477e-05, -0.013953804969787598, 0.0, -0.002552032470703125, -0.000125885009765625, -9.72747802734375e-05, -1.3089005947113037, 0.0, -0.001209259033203125, -0.0001373291015625, -0.0009784698486328125, -0.0011453628540039062, -5.7220458984375e-06, -0.0004215240478515625, -0.0003299713134765625, -7.62939453125e-05, -0.005967140197753906, -1.1444091796875e-05, -0.0006256103515625, -0.011789321899414062, -7.62939453125e-06, -9.5367431640625e-06, -0.00440216064453125, -1.9073486328125e-06, -0.16301345825195312, -1.9073486328125e-06, -0.0015411376953125, -0.014639616012573242, -3.814697265625e-06, -0.0007276533870026469, -9.346006845589727e-05, -0.006386756896972656, 0.0, -0.0002307891845703125, -6.67572021484375e-05, -0.00012969970703125, -0.6029572486877441, 0.0, -0.000919342041015625, -0.000110626220703125, -0.0005931854248046875, -0.001087188720703125, -7.62939453125e-06, -0.000774383544921875, -9.918212890625e-05, -0.00064849853515625, -7.62939453125e-06, -0.0052165985107421875, -0.0022630691528320312, -0.20998001098632812, -0.0063800811767578125, -0.00017547607421875, -0.00011444091796875, -0.02140522003173828, -3.814697265625e-06, -0.03611564636230469, -0.024663925170898438, -3.814697265625e-06, -0.01009368896484375, 0.0, -0.09588110446929932, -5.507469177246094e-05, -0.3895472288131714, 0.0, -4.00543212890625e-05, -0.25209808349609375, -0.000133514404296875, -0.0022603273391723633, -1.9073486328125e-05, -0.07158423215150833, -0.01966536045074463, 0.0, -0.3574502766132355, -3.814697265625e-05, -0.01971149444580078, -5.7220458984375e-05, -0.00035858154296875, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007572174072265625, -0.0008360147476196289, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(2)))\n        super().reveal()\n", "score": -5.36836740232593, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -0.45406460762023926, 0.0, -0.0011310577392578125, -0.0002994537353515625, -0.0007333755493164062, -0.0008831024169921875, -7.62939453125e-06, -0.0003528594970703125, -0.000637054443359375, -8.58306884765625e-05, -0.004459381103515625, -9.5367431640625e-06, -0.0007419586181640625, -0.018466949462890625, -9.5367431640625e-06, -1.1444091796875e-05, -0.0055789947509765625, -1.9073486328125e-06, -0.1616058349609375, -1.9073486328125e-06, -0.0016498565673828125, -0.014683127403259277, -3.814697265625e-06, -0.0007361172465607524, -9.095667337533087e-05, -0.00619196891784668, 0.0, -0.0002422332763671875, -6.4849853515625e-05, -0.0001277923583984375, -0.9931788444519043, 0.0, -0.0009098052978515625, -0.0003509521484375, -0.0005369186401367188, -0.001033782958984375, -7.62939453125e-06, -0.0015087127685546875, -9.918212890625e-05, -0.00081634521484375, -7.62939453125e-06, -0.004872322082519531, -0.002048492431640625, -0.19124603271484375, -0.0064868927001953125, -0.0001735687255859375, -0.0001163482666015625, -0.022179603576660156, -3.814697265625e-06, -0.033489227294921875, -0.02147388458251953, -3.814697265625e-06, -0.010683059692382812, 0.0, -0.10002481937408447, -5.507469177246094e-05, -0.3735138475894928, 0.0, -4.00543212890625e-05, -0.25583934783935547, -0.000133514404296875, -0.0022526979446411133, -1.9073486328125e-05, -0.07325369864702225, -0.01942312717437744, 0.0, -1.6128822565078735, 0.0, -0.01285552978515625, -2.6702880859375e-05, -0.000701904296875, -5.14984130859375e-05, -3.4332275390625e-05, -5.7220458984375e-06, -4.708766573457979e-05, -0.001015782356262207, -0.0007712841033935547, -0.0001583099365234375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -5.655856761109135, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -2.435807704925537, -1.9073486328125e-06, -0.02749311923980713, -1.33514404296875e-05, -0.008166790008544922, 0.0, -0.004253387451171875, -0.010379791259765625, -5.7220458984375e-06, -0.011370658874511719, -1.33514404296875e-05, -0.010303497314453125, -1.9073486328125e-06, -0.000438690185546875, -0.004567740019410849, -4.0531158447265625e-06, -0.00247013452462852, -9.858606063062325e-05, -0.012006998062133789, 0.0, -0.0015468597412109375, -0.000110626220703125, -9.72747802734375e-05, -0.47550320625305176, 0.0, -0.0010089874267578125, -0.0003490447998046875, -0.0007085800170898438, -0.0008869171142578125, -7.62939453125e-06, -0.0003414154052734375, -0.0006256103515625, -9.5367431640625e-05, -0.004325270652770996, -9.5367431640625e-06, -0.0008068084716796875, -0.0191802978515625, -7.62939453125e-06, -1.1444091796875e-05, -0.00579071044921875, -1.9073486328125e-06, -0.1597461700439453, -1.9073486328125e-06, -0.0015621185302734375, -0.01384890079498291, -3.814697265625e-06, -0.0007327793864533305, -9.095667337533087e-05, -0.006258606910705566, 0.0, -0.000244140625, -6.67572021484375e-05, -0.0001277923583984375, -0.6270961761474609, 0.0, -0.00093841552734375, -0.0001163482666015625, -0.000598907470703125, -0.0010881423950195312, -7.62939453125e-06, -0.0008544921875, -9.918212890625e-05, -0.0006427764892578125, -7.62939453125e-06, -0.0052394866943359375, -0.0022783279418945312, -0.21074771881103516, -0.00635528564453125, -0.0001811981201171875, -0.0001125335693359375, -0.02087116241455078, -3.814697265625e-06, -0.03632545471191406, -0.025142669677734375, -3.814697265625e-06, -0.010076522827148438, 0.0, -0.09453451633453369, -5.507469177246094e-05, -0.3965272009372711, 0.0, -4.00543212890625e-05, -0.2524280548095703, -0.0001316070556640625, -0.0022565126419067383, -1.9073486328125e-05, -0.0716252401471138, -0.019632935523986816, 0.0, -0.35828685760498047, -3.814697265625e-05, -0.01971435546875, -5.53131103515625e-05, -0.0003604888916015625, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007610321044921875, -0.0008360147476196289, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}], "hole1": "SecretCard", "hole3": "activate", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "hole7": [{"body": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}], "hole0": {"id": "minion", "_type": "Name"}, "hole1": "add_buff", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "args": {"args": [{"_type": "Template54"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n", "score": -5.731399961713578, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -1.3380160331726074, 0.0, -0.01565563678741455, -4.1961669921875e-05, -0.0044317240826785564, 0.0, -0.00882720947265625, -0.008546829223632812, -3.814697265625e-06, -0.014974594116210938, -1.9073486328125e-05, -0.0100860595703125, -1.9073486328125e-06, -0.000392913818359375, -0.004290815908461809, -4.172325134277344e-06, -0.0024321062956005335, -6.866453622933477e-05, -0.013953804969787598, 0.0, -0.002552032470703125, -0.000125885009765625, -9.72747802734375e-05, -1.3089005947113037, 0.0, -0.001209259033203125, -0.0001373291015625, -0.0009784698486328125, -0.0011453628540039062, -5.7220458984375e-06, -0.0004215240478515625, -0.0003299713134765625, -7.62939453125e-05, -0.005967140197753906, -1.1444091796875e-05, -0.0006256103515625, -0.011789321899414062, -7.62939453125e-06, -9.5367431640625e-06, -0.00440216064453125, -1.9073486328125e-06, -0.16301345825195312, -1.9073486328125e-06, -0.0015411376953125, -0.014639616012573242, -3.814697265625e-06, -0.0007276533870026469, -9.346006845589727e-05, -0.006386756896972656, 0.0, -0.0002307891845703125, -6.67572021484375e-05, -0.00012969970703125, -1.0238604545593262, 0.0, -0.0008945465087890625, -0.000339508056640625, -0.0005331039428710938, -0.00103759765625, -7.62939453125e-06, -0.001415252685546875, -9.72747802734375e-05, -0.000820159912109375, -7.62939453125e-06, -0.004822731018066406, -0.0020465850830078125, -0.1903533935546875, -0.0064544677734375, -0.0001697540283203125, -0.000118255615234375, -0.022377967834472656, -3.814697265625e-06, -0.03344917297363281, -0.021207809448242188, -3.814697265625e-06, -0.010663986206054688, 0.0, -0.10060751438140869, -5.507469177246094e-05, -0.36930498480796814, 0.0, -4.00543212890625e-05, -0.2554330825805664, -0.000133514404296875, -0.0022584199905395508, -1.9073486328125e-05, -0.07310037314891815, -0.019473671913146973, 0.0, -0.3538375496864319, -3.814697265625e-05, -0.01877117156982422, -5.7220458984375e-05, -0.0003643035888671875, -5.14984130859375e-05, -4.1961669921875e-05, -3.814697265625e-06, -4.541873204289004e-05, -0.0007437467575073242, -0.0008322000503540039, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole4": "minion", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole7": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n    if len(self.player.minions) < 7:\n        mirror = minion.copy(self.player)\n        mirror.<UNK>(len(self.player.minions))\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n", "score": -6.62784981400641, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -1.580068588256836, -0.02220439910888672, -0.0003910064697265625, -1.5139465176616795e-05, -1.3351424058782868e-05, -7.986971468199044e-06, 0.0, -0.4112964868545532, -3.814697265625e-06, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.0026521682739257812, -0.01859760284423828, 0.0, -0.032958984375, -2.09808349609375e-05, -4.4345855712890625e-05, 0.0, -0.03439629077911377, -9.5367431640625e-06, -0.10794353485107422, 0.0, -0.0002460479736328125, -0.007617950439453125, -0.000331878662109375, -0.00037384033203125, -1.33514404296875e-05, -0.001468658447265625, -0.000186920166015625, -3.4332275390625e-05, -2.09808349609375e-05, -0.0006303786649368703, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0009899139404296875, 0.0, -0.0006103515625, 0.0, -0.0028676986694335938, -0.0001350640959572047, 0.0, -0.0008280277252197266, -1.9073486328125e-06, -2.288818359375e-05, -0.0013751983642578125, -1.9073486328125e-05, -0.0054779052734375, -0.044913291931152344, -0.0003070831298828125, -0.0009250640869140625, -6.67572021484375e-05, -0.0003147125244140625, 0.0, -0.1031409502029419, -1.0728830375228426e-06, -0.00037097930908203125, -0.001708984375, -0.0002422332763671875, -8.0108642578125e-05, -0.0041179656982421875, -7.62939453125e-06, -0.01811528205871582, -2.2649765014648438e-06, -0.05010068416595459, 0.0, -7.62939453125e-06, -0.0002288818359375, -3.814697265625e-06, -0.008930206298828125, -0.0006008148193359375, 0.0, -0.0002460479736328125, -2.47955322265625e-05, -0.00086212158203125, 0.0, -0.5440917015075684, -9.775130820344202e-06, -0.005720734596252441, -1.1920928244535389e-07, -4.1961669921875e-05, -0.038697242736816406, -0.00183868408203125, -0.000873565673828125, -9.5367431640625e-06, -0.02203953266143799, -2.0265579223632812e-06, -4.57763671875e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.005814552307128906, 0.0, -0.0034961700439453125, -0.00012993808195460588, -1.9073486328125e-06, -0.0007263422012329102, -3.814697265625e-06, -0.00016021728515625, -6.67572021484375e-05, -0.0015621185302734375, 0.0, -0.0030231475830078125, 0.0, -0.0047397613525390625, -2.09808349609375e-05, -0.07682013511657715, 0.0, -0.030074715614318848, -1.9073486328125e-06, -0.0002117156982421875, -0.0008220672607421875, -4.9591064453125e-05, -0.057347893714904785, 0.0, -0.00051116943359375, 0.0, -0.09597539901733398, -3.576278118089249e-07, -0.0839385986328125, -3.4332275390625e-05, -0.0010204315185546875, 0.0, -0.004267692565917969, 0.0, -0.003907203674316406, -0.000118255615234375, -0.09113800525665283, 0.0, -0.009179352782666683, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001888275146484375, -2.09808349609375e-05, -0.11874556541442871, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.0778512954711914, -1.1920928244535389e-07, -0.20425796508789062, -3.814697265625e-05, -0.001003265380859375, 0.0, -0.009366989135742188, 0.0, -0.0094757080078125, -8.58306884765625e-05, -0.038524746894836426, 0.0, -0.015065908432006836, -1.9073486328125e-06, -6.67572021484375e-05, -0.0001583099365234375, -1.9073486328125e-05, -0.14574170112609863, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.07775592803955078, -1.1920928244535389e-07, -0.1343517303466797, -0.028860092163085938, -0.0001678466796875, -0.026746749877929688, 0.0, -0.0051288604736328125, -0.00048828125, -7.62939453125e-06, 0.0, -0.0007783174514770508, -2.0265579223632812e-06, -2.288818359375e-05, -0.00091552734375, 0.0, -0.0027523040771484375, 0.0, -0.00542449951171875, -0.00015699860523454845, 0.0, -0.0009483098983764648, -1.9073486328125e-06, -1.71661376953125e-05, -0.0022945404052734375, -7.62939453125e-06, -0.0128326416015625, -0.1099843978881836, -0.0002040863037109375, -0.0006580352783203125, -8.58306884765625e-05, -0.0001850128173828125, 0.0, -0.10952246189117432, -1.5497195136049413e-06, -0.00040531158447265625, -0.00185394287109375, -0.00022125244140625, -8.0108642578125e-05, -0.00452423095703125, -5.7220458984375e-06, -0.021653413772583008, -2.2649765014648438e-06, -0.05097007751464844, 0.0, -7.62939453125e-06, -0.00022125244140625, -3.814697265625e-06, -0.009202957153320312, -0.000728607177734375, 0.0, -0.0002155303955078125, -2.86102294921875e-05, -0.0009632110595703125, 0.0, -0.581974983215332, -1.013275596051244e-05, -0.005924820899963379, -1.1920928244535389e-07, -4.1961669921875e-05, -0.03705787658691406, -0.0018291473388671875, -0.0008459091186523438, -9.5367431640625e-06, -0.02172863483428955, -2.0265579223632812e-06, -4.76837158203125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.00595855712890625, 0.0, -0.003490447998046875, -0.00013184543058741838, -1.9073486328125e-06, -0.0007244348526000977, -3.814697265625e-06, -0.0001373291015625, -7.43865966796875e-05, -0.001384735107421875, 0.0, -0.0028057098388671875, 0.0, -0.0047550201416015625, -1.71661376953125e-05, -0.07320642471313477, 0.0, -0.028942465782165527, -1.9073486328125e-06, -0.00022125244140625, -0.000797271728515625, -4.9591064453125e-05, -0.05505990982055664, 0.0, -0.00052642822265625, 0.0, -0.09615278244018555, -3.576278118089249e-07, -0.08111572265625, -3.814697265625e-05, -0.0009975433349609375, 0.0, -0.004131317138671875, 0.0, -0.003933906555175781, -0.0001163482666015625, -0.08869624137878418, 0.0, -0.009325503371655941, -1.9073486328125e-06, -7.43865966796875e-05, -0.0001773834228515625, -2.288818359375e-05, -0.11783480644226074, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.07805824279785156, -1.1920928244535389e-07, -0.1955890655517578, -4.00543212890625e-05, -0.000980377197265625, 0.0, -0.008889198303222656, 0.0, -0.009551048278808594, -8.392333984375e-05, -0.0386502742767334, 0.0, -0.015155553817749023, -1.9073486328125e-06, -6.866455078125e-05, -0.0001506805419921875, -1.9073486328125e-05, -0.14546895027160645, 0.0, -0.0002040863037109375, -1.9073486328125e-06, -0.07788562774658203, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "PALADIN", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole4": "minion", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole7": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n    if len(self.player.minions) < 7:\n        mirror = minion.copy(self.player)\n        mirror.<UNK>(len(self.player.minions))\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n", "score": -7.796625610954898, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -1.580068588256836, -0.02220439910888672, -0.0003910064697265625, -1.5139465176616795e-05, -1.3351424058782868e-05, -7.986971468199044e-06, 0.0, -1.5072590112686157, -1.9073486328125e-06, -0.0004329681396484375, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -0.003936767578125, -0.039440155029296875, 0.0, -0.028444290161132812, -2.09808349609375e-05, -4.6372413635253906e-05, 0.0, -0.05500328540802002, -9.5367431640625e-06, -0.14279115200042725, 0.0, -0.00029754638671875, -0.008371353149414062, -0.0004634857177734375, -0.0003528594970703125, -1.33514404296875e-05, -0.0014057159423828125, -0.000186920166015625, -3.62396240234375e-05, -2.47955322265625e-05, -0.0006111860275268555, -1.1920928244535389e-07, -9.5367431640625e-06, -0.0011119842529296875, 0.0, -0.0006084442138671875, 0.0, -0.0028810501098632812, -0.0001388787932228297, 0.0, -0.0008242130279541016, -1.9073486328125e-06, -2.47955322265625e-05, -0.001338958740234375, -1.9073486328125e-05, -0.0053462982177734375, -0.04545879364013672, -0.00029754638671875, -0.0009288787841796875, -6.866455078125e-05, -0.000316619873046875, 0.0, -0.10195505619049072, -1.0728830375228426e-06, -0.00036907196044921875, -0.0016956329345703125, -0.000244140625, -8.20159912109375e-05, -0.004025459289550781, -7.62939453125e-06, -0.018136262893676758, -2.2649765014648438e-06, -0.049722909927368164, 0.0, -7.62939453125e-06, -0.0002307891845703125, -3.814697265625e-06, -0.008909225463867188, -0.0005931854248046875, 0.0, -0.000247955322265625, -2.47955322265625e-05, -0.000858306884765625, 0.0, -0.5433297157287598, -9.775130820344202e-06, -0.005718708038330078, -1.1920928244535389e-07, -4.1961669921875e-05, -0.038985252380371094, -0.0018405914306640625, -0.0008726119995117188, -9.5367431640625e-06, -0.02198612689971924, -2.0265579223632812e-06, -4.57763671875e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.005845069885253906, 0.0, -0.0034875869750976562, -0.00012993808195460588, -1.9073486328125e-06, -0.0007272958755493164, -3.814697265625e-06, -0.0001621246337890625, -6.67572021484375e-05, -0.0015382766723632812, 0.0, -0.0030002593994140625, 0.0, -0.00473785400390625, -2.09808349609375e-05, -0.07799410820007324, 0.0, -0.03032660484313965, -1.9073486328125e-06, -0.0002117156982421875, -0.000823974609375, -4.9591064453125e-05, -0.057327866554260254, 0.0, -0.0005092620849609375, 0.0, -0.09595727920532227, -3.576278118089249e-07, -0.083831787109375, -3.62396240234375e-05, -0.0010271072387695312, 0.0, -0.0042324066162109375, 0.0, -0.0038938522338867188, -0.000118255615234375, -0.0911017656326294, 0.0, -0.009183286689221859, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001888275146484375, -2.09808349609375e-05, -0.11841750144958496, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.07785606384277344, -1.1920928244535389e-07, -0.20436477661132812, -4.00543212890625e-05, -0.0010166168212890625, 0.0, -0.009294509887695312, 0.0, -0.009427070617675781, -8.58306884765625e-05, -0.03858768939971924, 0.0, -0.015069723129272461, -1.9073486328125e-06, -6.67572021484375e-05, -0.0001583099365234375, -1.9073486328125e-05, -0.1451876163482666, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.07776260375976562, -1.1920928244535389e-07, -0.13442039489746094, -0.028860092163085938, -0.0001678466796875, -0.02670001983642578, 0.0, -0.005129814147949219, -0.00048828125, -7.62939453125e-06, 0.0, -0.0007773637771606445, -2.0265579223632812e-06, -2.288818359375e-05, -0.00091552734375, 0.0, -0.0027446746826171875, 0.0, -0.0054225921630859375, -0.00015699860523454845, 0.0, -0.0009483098983764648, -1.9073486328125e-06, -1.71661376953125e-05, -0.00229644775390625, -7.62939453125e-06, -0.012842178344726562, -0.10990047454833984, -0.0002040863037109375, -0.0006580352783203125, -8.58306884765625e-05, -0.0001850128173828125, 0.0, -0.10952770709991455, -1.5497195136049413e-06, -0.0004062652587890625, -0.00185394287109375, -0.00022125244140625, -8.0108642578125e-05, -0.004525184631347656, -5.7220458984375e-06, -0.021651506423950195, -2.2649765014648438e-06, -0.05097198486328125, 0.0, -7.62939453125e-06, -0.00022125244140625, -3.814697265625e-06, -0.009202957153320312, -0.000728607177734375, 0.0, -0.0002155303955078125, -2.86102294921875e-05, -0.0009632110595703125, 0.0, -0.5819664001464844, -1.013275596051244e-05, -0.005923867225646973, -1.1920928244535389e-07, -4.1961669921875e-05, -0.03705883026123047, -0.0018291473388671875, -0.0008459091186523438, -9.5367431640625e-06, -0.02172863483428955, -2.0265579223632812e-06, -4.76837158203125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.00595855712890625, 0.0, -0.003490447998046875, -0.00013184543058741838, -1.9073486328125e-06, -0.0007244348526000977, -3.814697265625e-06, -0.0001373291015625, -7.43865966796875e-05, -0.0013837814331054688, 0.0, -0.0028057098388671875, 0.0, -0.0047550201416015625, -1.71661376953125e-05, -0.0732121467590332, 0.0, -0.028943419456481934, -1.9073486328125e-06, -0.00022125244140625, -0.000797271728515625, -4.9591064453125e-05, -0.05505800247192383, 0.0, -0.00052642822265625, 0.0, -0.09615278244018555, -3.576278118089249e-07, -0.08111763000488281, -3.814697265625e-05, -0.0009975433349609375, 0.0, -0.004131317138671875, 0.0, -0.003933906555175781, -0.0001163482666015625, -0.08870196342468262, 0.0, -0.009325503371655941, -1.9073486328125e-06, -7.43865966796875e-05, -0.0001773834228515625, -2.288818359375e-05, -0.11783385276794434, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.07805824279785156, -1.1920928244535389e-07, -0.19559860229492188, -4.00543212890625e-05, -0.000980377197265625, 0.0, -0.008889198303222656, 0.0, -0.009550094604492188, -8.392333984375e-05, -0.03865218162536621, 0.0, -0.015155553817749023, -1.9073486328125e-06, -6.866455078125e-05, -0.0001506805419921875, -1.9073486328125e-05, -0.14546704292297363, 0.0, -0.0002040863037109375, -1.9073486328125e-06, -0.07788467407226562, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole4": "minion", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole7": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n    if len(self.player.minions) < 7:\n        mirror = minion.copy(self.player)\n        mirror.<UNK>(len(self.player.minions))\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n        super().reveal()\n", "score": -7.888950463723681, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -1.580068588256836, -0.02220439910888672, -0.0003910064697265625, -1.5139465176616795e-05, -1.3351424058782868e-05, -7.986971468199044e-06, 0.0, -0.4112964868545532, -3.814697265625e-06, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.0026521682739257812, -0.01859760284423828, 0.0, -0.032958984375, -2.09808349609375e-05, -4.4345855712890625e-05, 0.0, -0.03439629077911377, -9.5367431640625e-06, -0.10794353485107422, 0.0, -0.0002460479736328125, -0.007617950439453125, -0.000331878662109375, -0.00037384033203125, -1.33514404296875e-05, -0.001468658447265625, -0.000186920166015625, -3.4332275390625e-05, -2.09808349609375e-05, -0.0006303786649368703, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0009899139404296875, 0.0, -0.0006103515625, 0.0, -0.0028676986694335938, -0.0001350640959572047, 0.0, -0.0008280277252197266, -1.9073486328125e-06, -2.288818359375e-05, -0.0013751983642578125, -1.9073486328125e-05, -0.0054779052734375, -0.044913291931152344, -0.0003070831298828125, -0.0009250640869140625, -6.67572021484375e-05, -0.0003147125244140625, 0.0, -0.1031409502029419, -1.0728830375228426e-06, -0.00037097930908203125, -0.001708984375, -0.0002422332763671875, -8.0108642578125e-05, -0.0041179656982421875, -7.62939453125e-06, -0.01811528205871582, -2.2649765014648438e-06, -0.05010068416595459, 0.0, -7.62939453125e-06, -0.0002288818359375, -3.814697265625e-06, -0.008930206298828125, -0.0006008148193359375, 0.0, -0.0002460479736328125, -2.47955322265625e-05, -0.00086212158203125, 0.0, -0.5440917015075684, -9.775130820344202e-06, -0.005720734596252441, -1.1920928244535389e-07, -4.1961669921875e-05, -0.038697242736816406, -0.00183868408203125, -0.000873565673828125, -9.5367431640625e-06, -0.02203953266143799, -2.0265579223632812e-06, -4.57763671875e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.005814552307128906, 0.0, -0.0034961700439453125, -0.00012993808195460588, -1.9073486328125e-06, -0.0007263422012329102, -3.814697265625e-06, -0.00016021728515625, -6.67572021484375e-05, -0.0015621185302734375, 0.0, -0.0030231475830078125, 0.0, -0.0047397613525390625, -2.09808349609375e-05, -0.07682013511657715, 0.0, -0.030074715614318848, -1.9073486328125e-06, -0.0002117156982421875, -0.0008220672607421875, -4.9591064453125e-05, -0.057347893714904785, 0.0, -0.00051116943359375, 0.0, -0.09597539901733398, -3.576278118089249e-07, -0.0839385986328125, -3.4332275390625e-05, -0.0010204315185546875, 0.0, -0.004267692565917969, 0.0, -0.003907203674316406, -0.000118255615234375, -0.09113800525665283, 0.0, -0.009179352782666683, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001888275146484375, -2.09808349609375e-05, -0.11874556541442871, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.0778512954711914, -1.1920928244535389e-07, -0.20425796508789062, -3.814697265625e-05, -0.001003265380859375, 0.0, -0.009366989135742188, 0.0, -0.0094757080078125, -8.58306884765625e-05, -0.038524746894836426, 0.0, -0.015065908432006836, -1.9073486328125e-06, -6.67572021484375e-05, -0.0001583099365234375, -1.9073486328125e-05, -0.14574170112609863, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.07775592803955078, -1.1920928244535389e-07, -0.1343517303466797, -0.028860092163085938, -0.0001678466796875, -0.026746749877929688, 0.0, -0.0051288604736328125, -0.00048828125, -7.62939453125e-06, 0.0, -0.0007783174514770508, -2.0265579223632812e-06, -2.288818359375e-05, -0.00091552734375, 0.0, -0.0027523040771484375, 0.0, -0.00542449951171875, -0.00015699860523454845, 0.0, -0.0009483098983764648, -1.9073486328125e-06, -1.71661376953125e-05, -0.0022945404052734375, -7.62939453125e-06, -0.0128326416015625, -0.1099843978881836, -0.0002040863037109375, -0.0006580352783203125, -8.58306884765625e-05, -0.0001850128173828125, 0.0, -0.10952246189117432, -1.5497195136049413e-06, -0.00040531158447265625, -0.00185394287109375, -0.00022125244140625, -8.0108642578125e-05, -0.00452423095703125, -5.7220458984375e-06, -0.021653413772583008, -2.2649765014648438e-06, -0.05097007751464844, 0.0, -7.62939453125e-06, -0.00022125244140625, -3.814697265625e-06, -0.009202957153320312, -0.000728607177734375, 0.0, -0.0002155303955078125, -2.86102294921875e-05, -0.0009632110595703125, 0.0, -0.581974983215332, -1.013275596051244e-05, -0.005924820899963379, -1.1920928244535389e-07, -4.1961669921875e-05, -0.03705787658691406, -0.0018291473388671875, -0.0008459091186523438, -9.5367431640625e-06, -0.02172863483428955, -2.0265579223632812e-06, -4.76837158203125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.00595855712890625, 0.0, -0.003490447998046875, -0.00013184543058741838, -1.9073486328125e-06, -0.0007244348526000977, -3.814697265625e-06, -0.0001373291015625, -7.43865966796875e-05, -0.001384735107421875, 0.0, -0.0028057098388671875, 0.0, -0.0047550201416015625, -1.71661376953125e-05, -0.07320642471313477, 0.0, -0.028942465782165527, -1.9073486328125e-06, -0.00022125244140625, -0.000797271728515625, -4.9591064453125e-05, -0.05505990982055664, 0.0, -0.00052642822265625, 0.0, -0.09615278244018555, -3.576278118089249e-07, -0.08111572265625, -3.814697265625e-05, -0.0009975433349609375, 0.0, -0.004131317138671875, 0.0, -0.003933906555175781, -0.0001163482666015625, -0.08869624137878418, 0.0, -0.009325503371655941, -1.9073486328125e-06, -7.43865966796875e-05, -0.0001773834228515625, -2.288818359375e-05, -0.11783480644226074, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.07805824279785156, -1.1920928244535389e-07, -1.750701904296875, -2.47955322265625e-05, -0.002361297607421875, -2.6702880859375e-05, -4.00543212890625e-05, -7.62939453125e-06, -0.00010073174053104594, -2.6822082872968167e-05, -0.0004024505615234375, -0.000148773193359375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Repentance", "hole1": 1, "_type": "Template14"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole4": "minion", "_type": "Template1", "hole6": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"id": "mirror", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole7": [{"test": {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, "body": [{"targets": [{"id": "mirror", "_type": "Name"}], "value": {"func": {"value": {"id": "minion", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "_type": "Call"}, "_type": "Assign"}, {"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "hole0": {"id": "targets", "_type": "Name"}, "hole1": "extend", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}, {"hole2": [{"s": "<UNK>", "_type": "Str"}, {"id": "mirror", "_type": "Name"}], "hole0": {"value": {"id": "minion", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "hole1": "trigger", "_type": "Template44"}], "_type": "If"}], "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 333, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "minion", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "mirror", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 332, 133, 173, 21, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 336, 126, 155, 320, 73, 186, "mirror", "<EOS>", 20, 163, 17, 156, 25, 186, "minion", "<EOS>", "copy", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 25, 186, "targets", "<EOS>", "extend", "<EOS>", 320, 65, 156, 53, "player", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>", 145, 250, 17, 156, 25, 186, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 321, 76, 194, "<UNK>", "<EOS>", 73, 186, "mirror", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n            minion.player.trigger('<UNK>', mirror)\n    if len(self.player.minions) < 7:\n        mirror = minion.copy(self.player)\n        targets.extend(self.player)\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n        minion.player.trigger('<UNK>', mirror)\n", "score": -9.007727143887756, "score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -1.580068588256836, -0.02220439910888672, -0.0003910064697265625, -1.5139465176616795e-05, -1.3351424058782868e-05, -7.986971468199044e-06, 0.0, -0.4112964868545532, -3.814697265625e-06, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.0026521682739257812, -0.01859760284423828, 0.0, -0.032958984375, -2.09808349609375e-05, -4.4345855712890625e-05, 0.0, -0.03439629077911377, -9.5367431640625e-06, -0.10794353485107422, 0.0, -0.0002460479736328125, -0.007617950439453125, -0.000331878662109375, -0.00037384033203125, -1.33514404296875e-05, -0.001468658447265625, -0.000186920166015625, -3.4332275390625e-05, -2.09808349609375e-05, -0.0006303786649368703, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0009899139404296875, 0.0, -0.0006103515625, 0.0, -0.0028676986694335938, -0.0001350640959572047, 0.0, -0.0008280277252197266, -1.9073486328125e-06, -2.288818359375e-05, -0.0013751983642578125, -1.9073486328125e-05, -0.0054779052734375, -0.044913291931152344, -0.0003070831298828125, -0.0009250640869140625, -6.67572021484375e-05, -0.0003147125244140625, 0.0, -0.1031409502029419, -1.0728830375228426e-06, -0.00037097930908203125, -0.001708984375, -0.0002422332763671875, -8.0108642578125e-05, -0.0041179656982421875, -7.62939453125e-06, -0.01811528205871582, -2.2649765014648438e-06, -0.05010068416595459, 0.0, -7.62939453125e-06, -0.0002288818359375, -3.814697265625e-06, -0.008930206298828125, -0.0006008148193359375, 0.0, -0.0002460479736328125, -2.47955322265625e-05, -0.00086212158203125, 0.0, -0.5440917015075684, -9.775130820344202e-06, -0.005720734596252441, -1.1920928244535389e-07, -4.1961669921875e-05, -0.038697242736816406, -0.00183868408203125, -0.000873565673828125, -9.5367431640625e-06, -0.02203953266143799, -2.0265579223632812e-06, -4.57763671875e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.005814552307128906, 0.0, -0.0034961700439453125, -0.00012993808195460588, -1.9073486328125e-06, -0.0007263422012329102, -3.814697265625e-06, -0.00016021728515625, -6.67572021484375e-05, -0.0015621185302734375, 0.0, -0.0030231475830078125, 0.0, -0.0047397613525390625, -2.09808349609375e-05, -0.07682013511657715, 0.0, -0.030074715614318848, -1.9073486328125e-06, -0.0002117156982421875, -0.0008220672607421875, -4.9591064453125e-05, -0.057347893714904785, 0.0, -0.00051116943359375, 0.0, -0.09597539901733398, -3.576278118089249e-07, -0.0839385986328125, -3.4332275390625e-05, -0.0010204315185546875, 0.0, -0.004267692565917969, 0.0, -0.003907203674316406, -0.000118255615234375, -0.09113800525665283, 0.0, -0.009179352782666683, -1.9073486328125e-06, -7.2479248046875e-05, -0.0001888275146484375, -2.09808349609375e-05, -0.11874556541442871, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.0778512954711914, -1.1920928244535389e-07, -0.20425796508789062, -3.814697265625e-05, -0.001003265380859375, 0.0, -0.009366989135742188, 0.0, -0.0094757080078125, -8.58306884765625e-05, -0.038524746894836426, 0.0, -0.015065908432006836, -1.9073486328125e-06, -6.67572021484375e-05, -0.0001583099365234375, -1.9073486328125e-05, -0.14574170112609863, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.07775592803955078, -1.1920928244535389e-07, -0.1343517303466797, -0.028860092163085938, -0.0001678466796875, -0.026746749877929688, 0.0, -0.0051288604736328125, -0.00048828125, -7.62939453125e-06, 0.0, -0.0007783174514770508, -2.0265579223632812e-06, -2.288818359375e-05, -0.00091552734375, 0.0, -0.0027523040771484375, 0.0, -0.00542449951171875, -0.00015699860523454845, 0.0, -0.0009483098983764648, -1.9073486328125e-06, -1.71661376953125e-05, -0.0022945404052734375, -7.62939453125e-06, -0.0128326416015625, -0.1099843978881836, -0.0002040863037109375, -0.0006580352783203125, -8.58306884765625e-05, -0.0001850128173828125, 0.0, -0.10952246189117432, -1.5497195136049413e-06, -0.00040531158447265625, -0.00185394287109375, -0.00022125244140625, -8.0108642578125e-05, -0.00452423095703125, -5.7220458984375e-06, -0.021653413772583008, -2.2649765014648438e-06, -0.05097007751464844, 0.0, -7.62939453125e-06, -0.00022125244140625, -3.814697265625e-06, -0.009202957153320312, -0.000728607177734375, 0.0, -0.0002155303955078125, -2.86102294921875e-05, -0.0009632110595703125, 0.0, -1.829333782196045, -1.33514404296875e-05, -0.6575703620910645, 0.0, -0.000125885009765625, -0.015314102172851562, 0.0, -0.18277549743652344, -0.0017490386962890625, 0.0, -0.0011920928955078125, -2.47955322265625e-05, -0.2609701156616211, 0.0, -0.024677276611328125, 0.0, -0.019094467163085938, -1.9073486328125e-05, -0.038611531257629395, 0.0, -0.041194915771484375, -1.9073486328125e-06, -0.0008335113525390625, -0.000499725341796875, -2.6702880859375e-05, -0.0737999677658081, 0.0, -0.00043487548828125, 0.0, -0.09258508682250977, -2.3841855067985307e-07, -0.14178466796875, -4.57763671875e-05, -0.0010585784912109375, 0.0, -0.008099555969238281, 0.0, -0.0071926116943359375, -9.5367431640625e-05, -0.046073317527770996, 0.0, -0.012503623962402344, -1.9073486328125e-06, -7.05718994140625e-05, -0.0001659393310546875, -2.09808349609375e-05, -0.13662564754486084, 0.0, -0.000209808349609375, -1.9073486328125e-06, -0.07773590087890625, -1.1920928244535389e-07, -0.20914840698242188, -4.00543212890625e-05, -0.0009832382202148438, 0.0, -0.009388923645019531, 0.0, -0.011870384216308594, -8.20159912109375e-05, -0.032050490379333496, 0.0, -0.016647934913635254, -1.9073486328125e-06, -6.866455078125e-05, -0.000148773193359375, -1.9073486328125e-05, -0.15030121803283691, 0.0, -0.0002040863037109375, -1.9073486328125e-06, -0.07782459259033203, -1.1920928244535389e-07]}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -2.460226513617954, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -0.13558046519756317, -0.013291239738464355, -0.000392913818359375, -0.032749176025390625, -1.9073486328125e-05, -0.00034390389919281006, -0.0032164149452000856, -0.0005640595336444676, -0.20139272511005402, -0.5147083401679993, -0.02803741954267025, -3.814697265625e-06, -0.0015850067138671875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 1, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -3.530985203893124, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -1.3608955144882202, 0.0, -0.18118500709533691, 0.0, -0.0012575387954711914, 0.0, -0.010189056396484375, 0.0, -2.5033950805664062e-05, 0.0, -2.09808349609375e-05, -0.0004520416259765625, -0.0002002716064453125, -8.344646857949556e-07, -1.9788545614574105e-05, -0.0002746215322986245, -1.0728830375228426e-06, -0.0967860221862793, 0.0, -0.0018854141235351562, -2.47955322265625e-05, -0.001815199851989746, -1.52587890625e-05, -0.000133514404296875, -0.05760478973388672, -4.1961669921875e-05, -0.18144959211349487, -0.1393022984266281, -0.012965083122253418, -0.0003814697265625, -0.03279304504394531, -1.9073486328125e-05, -0.00034975260496139526, -0.0032105855643749237, -0.000574663165025413, -0.20109789073467255, -0.5130560398101807, -0.028414230793714523, -3.814697265625e-06, -0.001621246337890625]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowNothing", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Nothing", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowNothing()))])\n", "score": -3.5767376815763328, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -0.13558046519756317, -0.013291239738464355, -0.000392913818359375, -0.032749176025390625, -1.9073486328125e-05, -0.00034390389919281006, -0.0032164149452000856, -0.0005640595336444676, -0.20139272511005402, -1.5488992929458618, -0.10834728926420212, -0.0032672882080078125, -0.000331878662109375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "Adjacent", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n", "score": -3.886061910712442, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -0.13558046519756317, -0.013291239738464355, -0.000392913818359375, -0.032749176025390625, -1.9073486328125e-05, -0.00034390389919281006, -0.0032164149452000856, -0.0005640595336444676, -1.8675625324249268, -0.019171984866261482, -0.2846813201904297, -0.0001468658447265625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -3.95580538218519, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.4778156280517578, -0.0014286041259765625, -0.2442779541015625, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.6229020357131958, 0.0, -2.86102294921875e-05, -0.010423660278320312, -0.000240325927734375, -1.811964830267243e-05, -7.867782187531702e-06, -0.00020597397815436125, -1.311301275563892e-06, -0.07017946243286133, 0.0, -0.0002002716064453125, -3.0517578125e-05, -0.0009266138076782227, -9.5367431640625e-06, -9.5367431640625e-05, -0.058653831481933594, -1.52587890625e-05, -0.20107553899288177, -0.2460612654685974, -0.0211256742477417, -0.000213623046875, -0.03643798828125, -2.6702880859375e-05, -0.0003851950168609619, -0.0039831772446632385, -0.0006409033667296171, -0.18256443738937378, -0.47152048349380493, -0.03069111704826355, -1.9073486328125e-06, -0.0008716583251953125]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "Shadow0", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "0", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Shadow0()))])\n", "score": -3.9975592357857295, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -0.13558046519756317, -0.013291239738464355, -0.000392913818359375, -0.032749176025390625, -1.9073486328125e-05, -0.00034390389919281006, -0.0032164149452000856, -0.0005640595336444676, -0.20139272511005402, -2.0803658962249756, -3.8742269680369645e-05, -0.00109100341796875, -0.000171661376953125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -4.1663839242439735, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.4778156280517578, -0.0014286041259765625, -0.2442779541015625, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.7805596590042114, -1.71661376953125e-05, -7.62939453125e-06, -0.028264999389648438, -0.000423431396484375, -3.313963316031732e-05, -6.6756979322235566e-06, -0.0008793861488811672, -1.1920922133867862e-06, -0.06525969505310059, 0.0, -0.000232696533203125, -2.47955322265625e-05, -0.0009911060333251953, -9.5367431640625e-06, -9.72747802734375e-05, -0.06804275512695312, -1.71661376953125e-05, -0.2111477553844452, -0.2677006125450134, -0.01970064640045166, -0.0001983642578125, -0.036365509033203125, -2.47955322265625e-05, -0.00041087716817855835, -0.0038875837344676256, -0.0006691375165246427, -0.18292218446731567, -0.469880610704422, -0.03140218183398247, -1.9073486328125e-06, -0.0009365081787109375]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 0, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>Deathrattle", "_type": "Template46"}, {"hole0": "PlayerSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Deathrattle", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score": -4.492261005372711, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -2.7877602577209473, -0.0014678211882710457, -0.0062923431396484375, -1.33514404296875e-05, -0.16811682283878326, -0.00019990296277683228, -1.7881377516459906e-06, -5.7220458984375e-06, -6.103515625e-05]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 1, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowNothing", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Nothing", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowNothing()))])\n", "score": -4.652499133111178, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -1.3608955144882202, 0.0, -0.18118500709533691, 0.0, -0.0012575387954711914, 0.0, -0.010189056396484375, 0.0, -2.5033950805664062e-05, 0.0, -2.09808349609375e-05, -0.0004520416259765625, -0.0002002716064453125, -8.344646857949556e-07, -1.9788545614574105e-05, -0.0002746215322986245, -1.0728830375228426e-06, -0.0967860221862793, 0.0, -0.0018854141235351562, -2.47955322265625e-05, -0.001815199851989746, -1.52587890625e-05, -0.000133514404296875, -0.05760478973388672, -4.1961669921875e-05, -0.18144959211349487, -0.1393022984266281, -0.012965083122253418, -0.0003814697265625, -0.03279304504394531, -1.9073486328125e-05, -0.00034975260496139526, -0.0032105855643749237, -0.000574663165025413, -0.20109789073467255, -1.5512772798538208, -0.1094486191868782, -0.003551483154296875, -0.000331878662109375]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -4.740153408918502, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.9831113815307617, -4.57763671875e-05, -0.031841278076171875, 0.0, -0.25841712951660156, -0.0001163482666015625, -0.00025177001953125, -0.41889476776123047, 0.0, -0.1453533172607422, 0.0, -0.0559539794921875, 0.0, -4.76837158203125e-05, -0.011195182800292969, -0.00131988525390625, -2.8729025871143676e-05, -5.483612312673358e-06, -0.0008354383171536028, -3.576278118089249e-07, -0.18062424659729004, 0.0, -0.000194549560546875, -3.62396240234375e-05, -0.001164555549621582, -2.09808349609375e-05, -4.9591064453125e-05, -0.06151580810546875, -5.7220458984375e-05, -0.38364577293395996, -0.17540962994098663, -0.020926356315612793, -0.0002956390380859375, -0.03215980529785156, -1.9073486328125e-05, -0.0003013014793395996, -0.006824939977377653, -0.0006119536119513214, -0.1387411653995514, -0.5277537703514099, -0.02908250316977501, -1.9073486328125e-06, -0.0006561279296875]}, {"model_output": {"hole2": [{"hole2": "PRIEST", "hole0": "Shadow of Nothing", "hole1": 1, "hole3": "EPIC", "_type": "Template15"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "Adjacent", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n", "score": -4.993240862474977, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -1.3608955144882202, 0.0, -0.18118500709533691, 0.0, -0.0012575387954711914, 0.0, -0.010189056396484375, 0.0, -2.5033950805664062e-05, 0.0, -2.09808349609375e-05, -0.0004520416259765625, -0.0002002716064453125, -8.344646857949556e-07, -1.9788545614574105e-05, -0.0002746215322986245, -1.0728830375228426e-06, -0.0967860221862793, 0.0, -0.0018854141235351562, -2.47955322265625e-05, -0.001815199851989746, -1.52587890625e-05, -0.000133514404296875, -0.05760478973388672, -4.1961669921875e-05, -0.18144959211349487, -0.1393022984266281, -0.012965083122253418, -0.0003814697265625, -0.03279304504394531, -1.9073486328125e-05, -0.00034975260496139526, -0.0032105855643749237, -0.000574663165025413, -1.870041012763977, -0.01921197585761547, -0.3170490264892578, -0.0001468658447265625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowNothing", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Nothing", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowNothing()))])\n", "score": -5.204347601585596, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.4778156280517578, -0.0014286041259765625, -0.2442779541015625, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.6229020357131958, 0.0, -2.86102294921875e-05, -0.010423660278320312, -0.000240325927734375, -1.811964830267243e-05, -7.867782187531702e-06, -0.00020597397815436125, -1.311301275563892e-06, -0.07017946243286133, 0.0, -0.0002002716064453125, -3.0517578125e-05, -0.0009266138076782227, -9.5367431640625e-06, -9.5367431640625e-05, -0.058653831481933594, -1.52587890625e-05, -0.20107553899288177, -0.2460612654685974, -0.0211256742477417, -0.000213623046875, -0.03643798828125, -2.6702880859375e-05, -0.0003851950168609619, -0.0039831772446632385, -0.0006409033667296171, -0.18256443738937378, -1.6480940580368042, -0.10141044855117798, -0.0018634796142578125, -0.0002593994140625]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "Adjacent", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n", "score": -5.37071669889292, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.4778156280517578, -0.0014286041259765625, -0.2442779541015625, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.6229020357131958, 0.0, -2.86102294921875e-05, -0.010423660278320312, -0.000240325927734375, -1.811964830267243e-05, -7.867782187531702e-06, -0.00020597397815436125, -1.311301275563892e-06, -0.07017946243286133, 0.0, -0.0002002716064453125, -3.0517578125e-05, -0.0009266138076782227, -9.5367431640625e-06, -9.5367431640625e-05, -0.058653831481933594, -1.52587890625e-05, -0.20107553899288177, -0.2460612654685974, -0.0211256742477417, -0.000213623046875, -0.03643798828125, -2.6702880859375e-05, -0.0003851950168609619, -0.0039831772446632385, -0.0006409033667296171, -1.9601376056671143, -0.020063893869519234, -0.12023735046386719, -0.0001220703125]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowNothing", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Nothing", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowNothing()))])\n", "score": -5.415186627117919, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.4778156280517578, -0.0014286041259765625, -0.2442779541015625, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.7805596590042114, -1.71661376953125e-05, -7.62939453125e-06, -0.028264999389648438, -0.000423431396484375, -3.313963316031732e-05, -6.6756979322235566e-06, -0.0008793861488811672, -1.1920922133867862e-06, -0.06525969505310059, 0.0, -0.000232696533203125, -2.47955322265625e-05, -0.0009911060333251953, -9.5367431640625e-06, -9.72747802734375e-05, -0.06804275512695312, -1.71661376953125e-05, -0.2111477553844452, -0.2677006125450134, -0.01970064640045166, -0.0001983642578125, -0.036365509033203125, -2.47955322265625e-05, -0.00041087716817855835, -0.0038875837344676256, -0.0006691375165246427, -0.18292218446731567, -1.6459553241729736, -0.10298004001379013, -0.0018329620361328125, -0.000255584716796875]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Shadow of Nothing", "_type": "Str"}, {"_type": "Template72"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Template56"}, "attr": "EPIC", "_type": "Attribute"}], "keywords": [{"arg": "target_func", "value": {"value": {"_type": "Template50"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "auras", "hole0": 0, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": "<UNK>SpellTarget", "_type": "Template46"}, {"hole0": "MinionSelector", "hole1": "ShadowShadow", "_type": "Template31"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 111, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 7, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n", "score": -5.4514654959229745, "score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.7343120574951172, -3.814697265625e-06, -2.47955322265625e-05, -0.05698966979980469, -0.00023651123046875, -8.392333984375e-05, -2.86102294921875e-05, -0.000335693359375, -8.225102646974847e-05, -0.0009444938623346388, -0.000698816089425236, -0.000125885009765625, -0.00017726069199852645, -0.0003376007080078125, -0.20747661590576172, -3.814697265625e-06, 0.0, -0.0001220703125, -1.52587890625e-05, -0.00022125244140625, -3.814697265625e-06, -0.18690693378448486, -1.9073486328125e-06, -0.04040813446044922, -3.814697265625e-06, -0.000118255615234375, -0.0010690689086914062, -7.82012939453125e-05, -2.86102294921875e-05, -0.9831113815307617, -4.57763671875e-05, -0.031841278076171875, 0.0, -0.25841712951660156, -0.0001163482666015625, -0.00025177001953125, -1.356400489807129, -1.9073486328125e-06, -0.0650491714477539, 0.0, -0.025855064392089844, 0.0, -6.29425048828125e-05, -0.008023262023925781, -0.0014362335205078125, -3.313963316031732e-05, -4.529942543740617e-06, -0.0010099192149937153, -2.3841855067985307e-07, -0.197312593460083, 0.0, -0.0001983642578125, -3.62396240234375e-05, -0.0011507272720336914, -1.71661376953125e-05, -4.9591064453125e-05, -0.06568336486816406, -5.14984130859375e-05, -0.2790940999984741, -0.1516330987215042, -0.02127969264984131, -0.0003337860107421875, -0.0302886962890625, -1.9073486328125e-05, -0.0002776682376861572, -0.006718693301081657, -0.0006058776052668691, -0.13972210884094238, -0.5223601460456848, -0.02963448315858841, -1.9073486328125e-06, -0.00069427490234375]}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "score": -1.9764316641172712, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -0.2395162582397461, -3.0517578125e-05, -0.10480022430419922, -4.76837158203125e-05, -0.00021839141845703125, -2.861018856492592e-06, -0.040970563888549805, -1.1920928244535389e-07, -0.002098553813993931, -1.5616295058862306e-05, -0.0013784072361886501, 0.0, -5.53131103515625e-05, -0.0006427764892578125, -2.09808349609375e-05, -2.288818359375e-05, -6.115436553955078e-05, -2.3841855067985307e-07, -0.5019422769546509, -3.576278118089249e-07, -0.005222320556640625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "score": -2.190716681700188, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -1.0558099746704102, -0.32748928666114807, 0.0, -9.5367431640625e-06, -0.0006999969482421875, -1.9073486328125e-06, -4.9591064453125e-05, -7.367134094238281e-05, 0.0, -0.15866370499134064, 0.0, -0.0001888275146484375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "score": -2.377375243240543, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -0.13829803466796875, -1.33514404296875e-05, -0.1064605712890625, -6.866455078125e-05, -0.24225521087646484, -0.0001354217529296875, -0.00011682510375976562, -1.5497195136049413e-06, -0.027397513389587402, 0.0, -0.002441638382151723, -7.271740287251305e-06, -0.0025605179835110903, 0.0, -4.57763671875e-05, -0.0004444122314453125, -2.86102294921875e-05, -2.09808349609375e-05, -6.461143493652344e-05, -3.576278118089249e-07, -0.5084419250488281, -2.3841855067985307e-07, -0.0042629241943359375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(0), self)\n", "score": -2.4718140922274614, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -0.2395162582397461, -3.0517578125e-05, -0.10480022430419922, -4.76837158203125e-05, -0.00021839141845703125, -2.861018856492592e-06, -0.040970563888549805, -1.1920928244535389e-07, -0.002098553813993931, -1.5616295058862306e-05, -0.0013784072361886501, 0.0, -5.53131103515625e-05, -0.0006427764892578125, -2.09808349609375e-05, -2.288818359375e-05, -6.115436553955078e-05, -2.3841855067985307e-07, -0.9960229396820068, -1.4662683497590479e-05, -0.0065097808837890625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        game.other_player.hero.damage(player.effective_spell_damage(0), self)\n", "score": -2.856481192572396, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -0.13829803466796875, -1.33514404296875e-05, -0.1064605712890625, -6.866455078125e-05, -0.24225521087646484, -0.0001354217529296875, -0.00011682510375976562, -1.5497195136049413e-06, -0.027397513389587402, 0.0, -0.002441638382151723, -7.271740287251305e-06, -0.0025605179835110903, 0.0, -4.57763671875e-05, -0.0004444122314453125, -2.86102294921875e-05, -2.09808349609375e-05, -6.461143493652344e-05, -3.576278118089249e-07, -0.9855831861495972, -1.3708998267247807e-05, -0.006214141845703125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "Frozen", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -3.412107845466572, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -1.0558099746704102, -1.4655098915100098, 0.0, -0.000156402587890625, -0.0027904510498046875, -0.2340402603149414, -0.006066866219043732, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 41, "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        self.target.player.hero.damage(player.effective_spell_damage(2), self)\n", "score": -3.8332959664835684, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -0.13829803466796875, -1.33514404296875e-05, -0.1064605712890625, -6.866455078125e-05, -1.6401948928833008, -0.02088475227355957, -1.0728830375228426e-06, -0.0036787986755371094, -6.90197994117625e-05, -0.06098012626171112, 0.0, -4.00543212890625e-05, -0.0006275177001953125, -1.71661376953125e-05, -4.1961669921875e-05, -0.00010955333709716797, -2.3841855067985307e-07, -0.5141230821609497, -3.576278118089249e-07, -0.0033779144287109375]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.card.add_buff(Buff(ManaChange(-4)))\n", "score": -3.896199060302216, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -1.7404985427856445, -0.06614339351654053, -1.33514404296875e-05, -0.4625004529953003, 0.0, -0.000324249267578125, -0.06005287170410156, -0.018113136291503906, -0.0003949403762817383, -0.0007630586624145508, -2.288818359375e-05, -2.86102294921875e-05, -0.004637718200683594, -0.00048828125, -0.38312530517578125, -0.07970809936523438]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "score": -4.023608130905124, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -2.0561046600341797, -0.31699731945991516, 0.0, -9.5367431640625e-06, -0.0011854171752929688, -1.9073486328125e-06, -4.76837158203125e-05, -8.463859558105469e-05, 0.0, -0.3047117292881012, 0.0, -0.000156402587890625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.damage(player.effective_spell_damage(0), self)\n", "score": -4.103812439063141, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -1.0558099746704102, -0.32748928666114807, 0.0, -9.5367431640625e-06, -0.0006999969482421875, -1.9073486328125e-06, -4.9591064453125e-05, -7.367134094238281e-05, 0.0, -2.0712785720825195, -4.053113570989808e-06, -0.0006656646728515625]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 41, "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        self.target.player.hero.damage(player.effective_spell_damage(0), self)\n", "score": -4.296992803860654, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -0.13829803466796875, -1.33514404296875e-05, -0.1064605712890625, -6.866455078125e-05, -1.6401948928833008, -0.02088475227355957, -1.0728830375228426e-06, -0.0036787986755371094, -6.90197994117625e-05, -0.06098012626171112, 0.0, -4.00543212890625e-05, -0.0006275177001953125, -1.71661376953125e-05, -4.1961669921875e-05, -0.00010955333709716797, -2.3841855067985307e-07, -0.9770056009292603, -1.1682462172757369e-05, -0.004180908203125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"value": {"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "hole1": "damage", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 41, "player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.player.hero.damage(player.effective_spell_damage(2), self)\n", "score": -4.658985534154816, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -0.2395162582397461, -3.0517578125e-05, -2.7648677825927734, -0.04826533794403076, -1.1920922133867862e-06, -0.0018421411514282227, -8.892617915989831e-05, -0.0176222026348114, 0.0, -5.14984130859375e-05, -0.000820159912109375, -1.1444091796875e-05, -4.76837158203125e-05, -0.0001342296600341797, -2.3841855067985307e-07, -0.5038467645645142, -2.3841855067985307e-07, -0.0024547576904296875]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 0, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "Frozen", "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "damage", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 232, "Frozen", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        self.target.add_buff(Buff(Frozen()))\n", "score": -4.91722547266567, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -1.121296763420105, -1.788126610335894e-05, -9.918212890625e-05, -0.03365516662597656, -3.814697265625e-05, -2.0561046600341797, -1.4182102680206299, 0.0, -0.0001621246337890625, -0.0031261444091796875, -0.0897512435913086, -0.005558381322771311, -3.814697265625e-06]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"value": {"_type": "Template52"}, "attr": "player", "_type": "Attribute"}, {"id": "game", "_type": "Name"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"value": {"_type": "Template52"}, "attr": "card", "_type": "Attribute"}, "hole1": "summon", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 41, "card", "<EOS>", "summon", "<EOS>", 322, 65, 156, 41, "player", "<EOS>", 73, 186, "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.card.summon(self.target.player, game, len(game.\n            other_player.minions))\n", "score": -4.998741818283371, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -1.7404985427856445, -0.06614339351654053, -1.33514404296875e-05, -1.1903904676437378, 0.0, -0.05108833312988281, -0.04897594451904297, -3.814697265625e-06, -0.16991901397705078, -0.12642383575439453, 0.0, -0.03167438507080078, -1.33514404296875e-05, -0.0001468658447265625, 0.0, -0.005866050720214844, -0.000377655029296875, -0.0003490447998046875, 0.0, -0.0003439188003540039, -3.6954811548639555e-06, -3.4332275390625e-05, -2.6702880859375e-05, 0.0, -0.010328292846679688, -1.9073486328125e-06, -0.42233848571777344, -7.62939453125e-06, -0.005475044250488281, 0.0, -0.04862701892852783, 0.0, -0.0002846717834472656, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 2, "hole3": "target_func", "hole4": {"value": {"_type": "Template50"}, "attr": "find_spell_target", "_type": "Attribute"}, "_type": "Template11", "hole0": "Slam"}], "hole1": "SpellCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "hole0": {"_type": "Template64"}, "hole1": "effective_spell_damage", "_type": "Template37"}, {"_type": "Template68"}], "hole0": {"_type": "Template52"}, "hole1": "damage", "_type": "Template44"}, {"hole2": [{"hole0": "ManaChange", "hole1": [{"operand": {"_type": "Template63"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Template30"}], "hole0": {"_type": "Template52"}, "hole1": "add_buff", "_type": "Template44"}], "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 41, "add_buff", "<EOS>", 320, 81, 233, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 49], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(ManaChange(-4)))\n", "score": -5.106150222640473, "score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -1.0558099746704102, -1.4655098915100098, 0.0, -0.000156402587890625, -0.0027904510498046875, -1.6085176467895508, -0.001721024513244629, -0.0036984682083129883, -4.57763671875e-05, -0.019468307495117188, -0.013823509216308594, -0.0005321502685546875, -0.22619056701660156, -0.06015586853027344]}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -1.5173597800086327, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -0.0851602554321289, -0.0004177093505859375, -0.000728607177734375, -0.003856658935546875, -0.0007381439208984375, -0.0006529092788696289, -3.24249267578125e-05, -0.0002180336305173114, -0.0023118257522583008, 0.0, -0.0006904574111104012, -0.0004215240478515625, -0.1502513885498047, -0.0001068115234375, -0.0017626285552978516, -2.86102294921875e-05, -0.0005550384521484375, -0.03768455982208252, -1.1444091796875e-05, -0.004454850219190121, -2.86102294921875e-05, -0.0015239715576171875, -0.001678466796875, -3.814697265625e-06, 0.0, -0.3121671676635742, -1.71661376953125e-05, -1.1444091796875e-05, -0.0008547306060791016, -0.00011444091796875, -0.0003490447998046875, -3.0517578125e-05, -0.00029790401458740234, -5.543231964111328e-05, -0.000278472900390625, -0.0020160675048828125, 0.0, -2.1219253540039062e-05, 0.0, -4.57763671875e-05, -0.00019073486328125, -7.62939453125e-06, -2.3841823804104934e-07, -2.5510509658488445e-05, -0.0018101311288774014, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -2.603205157033244, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -0.0851602554321289, -0.0004177093505859375, -0.000728607177734375, -0.003856658935546875, -0.0007381439208984375, -0.0006529092788696289, -3.24249267578125e-05, -0.0002180336305173114, -0.0023118257522583008, 0.0, -0.0006904574111104012, -0.0004215240478515625, -0.1502513885498047, -0.0001068115234375, -0.0017626285552978516, -2.86102294921875e-05, -0.0005550384521484375, -0.03768455982208252, -1.1444091796875e-05, -0.004454850219190121, -2.86102294921875e-05, -0.0015239715576171875, -0.001678466796875, -3.814697265625e-06, 0.0, -1.3249025344848633, -3.814697265625e-06, -1.9073486328125e-06, -0.07330322265625, -1.9073486328125e-06, -1.9073486328125e-05, -3.0517578125e-05, -0.0015851259231567383, -2.2053714928915724e-05, -2.288818359375e-05, -1.33514404296875e-05, -8.0108642578125e-05, -0.0006504058837890625, -3.0517578125e-05, -0.0002040863037109375, -3.814697265625e-06, -0.00013947486877441406, -3.814697265625e-05, -5.14984130859375e-05, -0.0008296966552734375, 0.0, -2.491474151611328e-05, 0.0, -5.340576171875e-05, -0.0002079010009765625, -5.7220458984375e-06, -3.576271865313174e-07, -2.1695894247386605e-05, -0.0018907423363998532, -2.622600959512056e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -3.2213417624270733, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -2.2546677589416504, -0.0006833125371485949, -2.6583669750834815e-05, -0.0014632941456511617, 0.0, -0.00023412704467773438, -0.000148773193359375, -0.3822031021118164, -0.00043240742525085807, -0.19266510009765625, -1.9073486328125e-06, 0.0, -0.27867889404296875, -2.09808349609375e-05, 0.0, -0.08434104919433594, -1.9073486328125e-06, -0.000141143798828125, -5.7220458984375e-06, -0.0019818544387817383, -1.7881393432617188e-05, -2.288818359375e-05, -1.52587890625e-05, -0.0002002716064453125, -0.0006656646728515625, -4.9591064453125e-05, -0.000232696533203125, -5.7220458984375e-06, -0.00012612342834472656, -3.62396240234375e-05, -8.58306884765625e-05, -0.0008544921875, 0.0, -2.491474151611328e-05, 0.0, -4.76837158203125e-05, -0.0001049041748046875, -9.5367431640625e-06, -2.3841812435421161e-07, -2.062299427052494e-05, -0.0016857328591868281, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Damage(1)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -3.2346732804893463, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.9237560629844666, -0.0002149343490600586, -5.7220458984375e-06, -0.5063295364379883, -0.002361297607421875, -1.0783976316452026, -0.01164896972477436, -0.27323123812675476, -6.16312026977539e-05, -0.03490150347352028, -1.9073486328125e-06, -2.0265579223632812e-06, -0.009136199951171875, -1.9073486328125e-06, -1.1444091796875e-05, -0.0004978179931640625, -1.9073486328125e-06, -5.14984130859375e-05, -5.7220458984375e-06, -0.0003682374954223633, -8.344650268554688e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001506805419921875, -0.001132965087890625, -2.288818359375e-05, -0.000217437744140625, -3.814697265625e-06, -0.00016999244689941406, -3.62396240234375e-05, -3.24249267578125e-05, -0.00016021728515625, 0.0, -1.5497207641601562e-05, 0.0, -4.00543212890625e-05, -5.7220458984375e-05, -1.1444091796875e-05, -2.3841823804104934e-07, -2.4914430468925275e-05, -0.0017503255512565374, -2.7418097943154862e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 105, 105, "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1))]), MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.11808363877617, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -0.0851602554321289, -0.0004177093505859375, -0.000728607177734375, -0.003856658935546875, -0.0007381439208984375, -0.0006529092788696289, -3.24249267578125e-05, -0.0002180336305173114, -0.0023118257522583008, 0.0, -0.0006904574111104012, -0.0004215240478515625, -1.9935827255249023, -0.8038644790649414, -0.020437240600585938, -9.5367431640625e-06, 0.0, -0.28028297424316406, -3.814697265625e-06, -1.9073486328125e-06, -0.009534835815429688, -1.9073486328125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -0.004953622817993164, -2.0861623852397315e-05, -2.09808349609375e-05, -1.33514404296875e-05, -0.000179290771484375, -0.0007343292236328125, -4.38690185546875e-05, -0.0002460479736328125, -3.814697265625e-06, -0.00012803077697753906, -3.62396240234375e-05, -9.5367431640625e-05, -0.0007534027099609375, 0.0, -2.491474151611328e-05, 0.0, -4.9591064453125e-05, -0.0001354217529296875, -7.62939453125e-06, -3.57626959157642e-07, -2.1815101717947982e-05, -0.0018868970219045877, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.132216620632903, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.9237560629844666, -0.0002149343490600586, -5.7220458984375e-06, -2.3580408096313477, -0.0013637542724609375, -0.00179290771484375, -0.0039768218994140625, -0.00018310546875, -0.0018409490585327148, -6.4849853515625e-05, -6.461136945290491e-05, -0.005693674087524414, 0.0, -0.0005335796740837395, -0.0004405975341796875, -0.08477020263671875, -7.05718994140625e-05, -0.0020314455032348633, -3.4332275390625e-05, -0.000591278076171875, -0.026920080184936523, -5.7220458984375e-06, -0.004805087111890316, -1.52587890625e-05, -0.0012607574462890625, -0.00156402587890625, -3.814697265625e-06, 0.0, -0.31616783142089844, -1.71661376953125e-05, -1.1444091796875e-05, -0.0009175539016723633, -0.0001163482666015625, -0.0003337860107421875, -3.0517578125e-05, -0.00029599666595458984, -5.543231964111328e-05, -0.0003185272216796875, -0.0019989013671875, 0.0, -1.919269561767578e-05, 0.0, -4.76837158203125e-05, -0.0001888275146484375, -7.62939453125e-06, -2.3841823804104934e-07, -2.503368341422174e-05, -0.001808461849577725, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), SelfSelector()]), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.184293837772884, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -0.0851602554321289, -0.0004177093505859375, -0.000728607177734375, -0.003856658935546875, -0.0007381439208984375, -0.0006529092788696289, -3.24249267578125e-05, -0.0002180336305173114, -0.0023118257522583008, 0.0, -0.0006904574111104012, -0.0004215240478515625, -1.9935827255249023, -0.7648649215698242, -0.027375221252441406, -0.04081857204437256, -0.0003701448440551758, 0.0, -0.32941770553588867, -3.814697265625e-06, 0.0, -0.0211639404296875, -7.62939453125e-06, -1.9073486328125e-06, -0.000408172607421875, -1.9073486328125e-06, -5.91278076171875e-05, -1.1444091796875e-05, -0.001253366470336914, -1.6927717297221534e-05, -1.1444091796875e-05, -2.47955322265625e-05, -0.0001239776611328125, -0.00079345703125, -2.86102294921875e-05, -0.0002536773681640625, -3.814697265625e-06, -0.00012803077697753906, -3.62396240234375e-05, -6.4849853515625e-05, -0.0004405975341796875, 0.0, -1.919269561767578e-05, 0.0, -4.38690185546875e-05, -9.5367431640625e-05, -7.62939453125e-06, -3.576271865313174e-07, -2.3483997210860252e-05, -0.0018609577091410756, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.310557942413766, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -2.2546677589416504, -0.0006833125371485949, -2.6583669750834815e-05, -0.0014632941456511617, 0.0, -0.00023412704467773438, -0.000148773193359375, -0.3822031021118164, -0.00043240742525085807, -0.19266510009765625, -1.9073486328125e-06, 0.0, -1.4457406997680664, -2.6702880859375e-05, -1.9073486328125e-06, -0.007293701171875, -2.47955322265625e-05, -0.0007114410400390625, -1.9073486328125e-05, -0.000774383544921875, -3.24249267578125e-05, -3.24249267578125e-05, -0.0018215179443359375, 0.0, -2.300739288330078e-05, 0.0, -4.57763671875e-05, -0.0001773834228515625, -5.7220458984375e-06, -3.5762730021815514e-07, -3.313969500595704e-05, -0.001829328015446663, -2.7418097943154862e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Give", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Give", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Give(1)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.484066946879921, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.9237560629844666, -0.0002149343490600586, -5.7220458984375e-06, -0.5063295364379883, -0.002361297607421875, -2.14212703704834, -0.37923169136047363, -0.12277163565158844, -0.0005698204040527344, -0.00527501106262207, -3.814697265625e-06, -1.9073486328125e-06, -0.0067081451416015625, -3.814697265625e-06, -9.5367431640625e-06, -0.0005626678466796875, -1.9073486328125e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.0003529787063598633, -8.344650268554688e-06, -1.1444091796875e-05, -2.6702880859375e-05, -0.000164031982421875, -0.0011997222900390625, -2.288818359375e-05, -0.000213623046875, -3.814697265625e-06, -0.00016808509826660156, -3.62396240234375e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -1.537799835205078e-05, 0.0, -4.00543212890625e-05, -5.7220458984375e-05, -1.1444091796875e-05, -1.1920906217710581e-07, -2.5152843591058627e-05, -0.0017521139234304428, -2.7418097943154862e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "CharacterSelector", "hole4": [{"hole0": "Frozen", "_type": "Template46"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 93, 255, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.499923709907648, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -2.9174461364746094, -0.0001583099365234375, -0.6557170748710632, -3.5881646908819675e-05, -0.01461863238364458, -3.540477337082848e-05, 0.0, -0.0002460479736328125, -1.9073486328125e-06, -3.814697265625e-06, -0.000415802001953125, 0.0, -0.000102996826171875, -1.52587890625e-05, -0.001948237419128418, -2.622604188218247e-05, -1.9073486328125e-06, -4.57763671875e-05, -7.2479248046875e-05, -0.0009021759033203125, -2.47955322265625e-05, -0.0002346038818359375, -1.9073486328125e-06, -0.00016999244689941406, -2.86102294921875e-05, -2.86102294921875e-05, -0.0001220703125, 0.0, -1.537799835205078e-05, 0.0, -4.00543212890625e-05, -5.53131103515625e-05, -1.33514404296875e-05, -1.1920917586394353e-07, -2.706014311115723e-05, -0.0016200090758502483, -2.861018856492592e-06]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 4, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.538660718495521, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -3.75986385345459, -1.7046782886609435e-05, -1.1563301086425781e-05, -0.0014338495675474405, 0.0, -0.0004850625991821289, -0.000274658203125, -0.04584242030978203, -3.147125244140625e-05, -2.86102294921875e-05, -0.1954336166381836, -0.00274658203125, -0.0008525848388671875, -0.001186370849609375, -0.000202178955078125, -0.0008834600448608398, -7.05718994140625e-05, -0.00010943412053165957, -0.0034629106521606445, 0.0, -0.0004129407461732626, -0.00084686279296875, -0.04606056213378906, -0.0001354217529296875, -0.00162506103515625, -0.0001068115234375, -0.0003261566162109375, -0.028885960578918457, -1.1444091796875e-05, -0.003735898993909359, -2.6702880859375e-05, -0.002750396728515625, -0.0014630556106567383, -3.0517578125e-05, 0.0, -0.0002880096435546875, -0.007993698120117188, -0.2962064743041992, -5.7220458984375e-06, -1.9073486328125e-06, -0.004747152328491211, -0.011234402656555176, -0.00011086463928222656, -5.14984130859375e-05, -0.000774383544921875, -0.01945972442626953, -0.005075215827673674, -2.682209014892578e-05, -0.001171112060546875, -1.9073486328125e-06, -0.0013175010681152344, -0.0004273653030395508, 0.0, -0.0006313323974609375, -3.4332275390625e-05, -0.000553131103515625, -0.011305809020996094, -3.62396240234375e-05, -0.00250244140625, -0.0002536773681640625, -2.09808349609375e-05, -3.814697265625e-06, -0.007532238960266113, -0.006297707557678223, -2.3841830625315197e-06, -7.62939453125e-06, -0.0055942535400390625, -2.09808349609375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0006160736083984375, 0.0, -0.013466238975524902, -0.00012969970703125, -0.008253097534179688, -7.2479248046875e-05, -1.9073486328125e-06, -0.010376930236816406, 0.0, -0.0013275146484375, -0.000308990478515625, -1.9073486328125e-06, -2.3603439331054688e-05, 0.0, -0.0001583099365234375, -0.0004291534423828125, -1.52587890625e-05, 0.0, -7.021180499577895e-05, -0.0009062960743904114, -1.1801670552813448e-05]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "CharacterSelector", "hole4": [{"hole0": "Frozen", "_type": "Template46"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 93, 255, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.544735079529687, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.9237560629844666, -0.0002149343490600586, -5.7220458984375e-06, -2.4437198638916016, -4.38690185546875e-05, -0.7080806493759155, -2.8967540856683627e-05, -0.07308667153120041, -1.9073420844506472e-05, 0.0, -0.0003070831298828125, -1.9073486328125e-06, -3.814697265625e-06, -0.0004634857177734375, 0.0, -9.72747802734375e-05, -1.52587890625e-05, -0.0016772747039794922, -2.241134461655747e-05, -1.9073486328125e-06, -4.00543212890625e-05, -6.866455078125e-05, -0.0009098052978515625, -2.47955322265625e-05, -0.000232696533203125, -1.9073486328125e-06, -0.00014519691467285156, -2.86102294921875e-05, -2.6702880859375e-05, -0.000133514404296875, 0.0, -1.537799835205078e-05, 0.0, -4.00543212890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -1.1920917586394353e-07, -2.706014311115723e-05, -0.0016122664092108607, -2.861018856492592e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Bounce", "hole5": "Silence", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Silence", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), Silence(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.5683097444316445, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -2.2546677589416504, -0.0006833125371485949, -2.6583669750834815e-05, -0.0014632941456511617, 0.0, -0.00023412704467773438, -0.000148773193359375, -0.3822031021118164, -0.00043240742525085807, -1.7423406839370728, -0.000202178955078125, -0.10536384582519531, -0.00017547607421875, -1.9073486328125e-06, -0.05316126346588135, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -0.0033365488052368164, -2.1457672119140625e-05, -5.7220458984375e-06, -4.38690185546875e-05, -5.14984130859375e-05, -0.0008945465087890625, -7.2479248046875e-05, -0.000286102294921875, -5.7220458984375e-06, -0.00012409687042236328, -3.62396240234375e-05, -0.0001163482666015625, -0.0007610321044921875, 0.0, -2.300739288330078e-05, 0.0, -4.57763671875e-05, -9.918212890625e-05, -7.62939453125e-06, -2.3841812435421161e-07, -2.288796349603217e-05, -0.0017940213438123465, -2.50339189733495e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "Silence", "_type": "Template46"}], "_type": "Template6", "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 93, 255, "Silence", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Silence()),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.672762569732065, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -3.5381250381469727, -0.00157768779899925, -3.1709590984974056e-05, -0.004702568054199219, -1.1920928244535389e-07, -0.0030754804611206055, -0.00843048095703125, -0.45192670822143555, -9.775161743164062e-06, 0.0, -0.2046070098876953, -0.001232147216796875, -0.061547037214040756, -2.038458114839159e-05, -0.3766019344329834, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, 0.0, -1.9788742065429688e-05, 0.0, -8.20159912109375e-05, -8.20159912109375e-05, -1.1444091796875e-05, -1.1920917586394353e-07, -5.1616290875244886e-05, -0.0011600166326388717, -7.629365427419543e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole3": "Silence", "hole5": "MinionSelector", "hole4": [{"hole0": "MURLOCMURLOC", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Spellbreaker"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 4, "hole1": 3, "_type": "Template32"}], "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "MURLOC", "MURLOC", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(MURLOCMURLOC(1)\n            ), MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score": -4.776031401931043, "score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.9237560629844666, -0.0002149343490600586, -5.7220458984375e-06, -0.5063295364379883, -0.002361297607421875, -1.6193522214889526, -0.670878529548645, -0.06021308898925781, -0.5624178051948547, -1.9073486328125e-06, -0.02173924446105957, -5.7220458984375e-06, -1.1920928244535389e-07, -0.014078140258789062, -1.9073486328125e-06, -9.5367431640625e-06, -0.0005054473876953125, -1.9073486328125e-06, -6.67572021484375e-05, -5.7220458984375e-06, -0.0003701448440551758, -8.463859558105469e-06, -9.5367431640625e-06, -2.86102294921875e-05, -0.000156402587890625, -0.001132965087890625, -2.09808349609375e-05, -0.0002117156982421875, -1.9073486328125e-06, -0.00020813941955566406, -4.00543212890625e-05, -2.09808349609375e-05, -0.0001659393310546875, 0.0, -1.5497207641601562e-05, 0.0, -4.00543212890625e-05, -5.7220458984375e-05, -1.1444091796875e-05, -1.1920906217710581e-07, -2.47952248173533e-05, -0.0017494899220764637, -2.7418097943154862e-06]}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "TauntGive", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "Give", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntGive(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -2.9471437672071588, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.0678406953811646, -0.7181675434112549, -8.583057933719829e-06, -0.4461786448955536, 0.0, -0.0021381378173828125, -2.2649765014648438e-06, -1.0728830375228426e-06, -0.03919029235839844, -2.288818359375e-05, -7.62939453125e-06, -0.05334758758544922, -8.392333984375e-05, -0.0017223358154296875, -3.24249267578125e-05, -0.03119560144841671, -0.0006313323974609375, -0.0010285377502441406, 0.0, -9.655950634623878e-06, 0.0, -0.0001220703125, -0.0016994476318359375, -9.5367431640625e-06, -1.049041748046875e-05, -1.1920928244535389e-07, -1.6570091247558594e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "minionsAttack", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "minions", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(minionsAttack(1)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.845870060648373, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.134737253189087, -1.2668079137802124, -0.00025248524616472423, -0.43331921100616455, -1.1920928244535389e-07, -0.2569490671157837, -3.933906555175781e-06, -2.9802317840221804e-06, -0.12110710144042969, -2.09808349609375e-05, -1.9073486328125e-06, -0.033603787422180176, -9.5367431640625e-06, -0.0002155303955078125, -2.6702880859375e-05, -0.0008181333541870117, -7.271765298355604e-06, -5.340576171875e-05, -1.52587890625e-05, -1.33514404296875e-05, -0.007084012031555176, -7.62939453125e-06, -0.0002079010009765625, -9.5367431640625e-06, -0.0012261864030733705, -0.00020432472229003906, -1.52587890625e-05, -0.005090832710266113, -3.814697265625e-06, -2.2649757738690823e-05, 0.0, -2.86102294921875e-05, -0.0002956390380859375, -9.5367431640625e-06, -1.049041748046875e-05, -1.1920928244535389e-07, -1.1324880688334815e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "TauntGive", "hole1": 2, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "Give", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntGive(2)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -3.956718528848249, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.0678406953811646, -0.7181675434112549, -8.583057933719829e-06, -1.344080924987793, -2.0861623852397315e-05, -0.0004595518403220922, -3.814697265625e-06, -3.576278118089249e-07, -0.06414222717285156, -4.76837158203125e-05, -7.62939453125e-06, -0.091583251953125, -0.0001163482666015625, -0.0024509429931640625, -3.24249267578125e-05, -0.058043401688337326, -0.0008983612060546875, -0.0013794898986816406, 0.0, -9.536741345073096e-06, 0.0, -0.0001506805419921875, -0.023557662963867188, -1.52587890625e-05, -1.0371208190917969e-05, -1.1920928244535389e-07, -1.442432312614983e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "adjacentAttack", "hole1": 2, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "adjacent", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(adjacentAttack(2)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.218607702712653, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.5493205785751343, -0.8595583438873291, -0.026519857347011566, -0.9946148991584778, -2.4676208340679295e-05, -0.049517128616571426, -5.7220458984375e-06, -2.861022494471399e-06, -0.09749317169189453, -1.1444091796875e-05, -1.9073486328125e-06, -0.03986656665802002, -7.62939453125e-06, -0.0001468658447265625, -3.0517578125e-05, -0.0013303756713867188, -7.152556463552173e-06, -4.57763671875e-05, -1.1444091796875e-05, -1.1444091796875e-05, -0.005098462104797363, -9.5367431640625e-06, -0.000194549560546875, -7.62939453125e-06, -0.0012055629631504416, -0.00016045570373535156, -1.33514404296875e-05, -0.008426785469055176, -3.814697265625e-06, -1.990794771700166e-05, 0.0, -2.86102294921875e-05, -0.0012035369873046875, -9.5367431640625e-06, -1.0132789611816406e-05, -2.3841855067985307e-07, -1.0967253729177173e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "minions", "hole1": 2, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "minions", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(minions(2)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.31565109134948, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.134737253189087, -2.2436258792877197, -0.09710298478603363, -0.00015282351523637772, -0.03686691075563431, -7.62939453125e-06, -2.9802317840221804e-06, -0.1731586456298828, -7.62939453125e-06, -1.9073486328125e-06, -0.025448918342590332, -5.7220458984375e-06, -0.0001926422119140625, -3.24249267578125e-05, -0.0016050338745117188, -7.6293927122605965e-06, -4.57763671875e-05, -1.1444091796875e-05, -1.1444091796875e-05, -0.0027314424514770508, -1.52587890625e-05, -0.0002288818359375, -7.62939453125e-06, -0.001077889814041555, -0.00012421607971191406, -1.1444091796875e-05, -0.0123521089553833, -5.7220458984375e-06, -1.77621805050876e-05, 0.0, -2.86102294921875e-05, -0.0023174285888671875, -9.5367431640625e-06, -1.0013580322265625e-05, -2.3841855067985307e-07, -1.0848044439626392e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "Give", "hole1": 2, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Give", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Give(2)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.407136733435038, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -2.7840325832366943, -0.0007106556440703571, -0.2160542756319046, -0.00020158140978310257, -0.0080344770103693, -9.5367431640625e-06, -1.5497195136049413e-06, -0.7732477188110352, -7.62939453125e-06, -1.9073486328125e-06, -0.021738171577453613, -9.5367431640625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0017879009246826172, -7.271765298355604e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0034543275833129883, -1.52587890625e-05, -0.0001983642578125, -9.5367431640625e-06, -0.0011367793194949627, -0.00012421607971191406, -1.33514404296875e-05, -0.0108872652053833, -5.7220458984375e-06, -1.7642971215536818e-05, 0.0, -2.86102294921875e-05, -0.0014667510986328125, -7.62939453125e-06, -1.0132789611816406e-05, -2.3841855067985307e-07, -1.0848044439626392e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "TauntGive", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtectorProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "Give", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtectorProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntGive(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.450838541257312, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -1.591854214668274, -0.003390120342373848, -1.716568658594042e-05, -6.616114114876837e-05, -4.7087669372558594e-05, -0.000347137451171875, -0.00287628173828125, -0.1972198486328125, -0.00011836890189442784, -1.7404556274414062e-05, -1.6808508007670753e-05, -0.2397603988647461, -0.0006995201110839844, 0.0, -0.0012452597729861736, -6.866455078125e-05, -0.01558859646320343, -0.0027438350953161716, -6.29425048828125e-05, -0.05022907257080078, -0.005763053894042969, -1.0938633680343628, -0.5386837720870972, -9.179100743494928e-06, -0.4569806456565857, 0.0, -0.0034407377243041992, -4.172325134277344e-06, -3.218649908376392e-06, -0.06638908386230469, -2.47955322265625e-05, -9.5367431640625e-06, -0.053351402282714844, -8.0108642578125e-05, -0.00164794921875, -3.24249267578125e-05, -0.031156037002801895, -0.0006237030029296875, -0.0010437965393066406, 0.0, -9.775159924174659e-06, 0.0, -0.0001392364501953125, -0.008144378662109375, -9.5367431640625e-06, -1.049041748046875e-05, -1.1920928244535389e-07, -1.4662741705251392e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "TauntMinionCount", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "Minion", "Count", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntMinionCount(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.482552847082125, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.0678406953811646, -2.089895725250244, -0.07782423496246338, -0.26456427574157715, -0.07351166754961014, 0.0, -0.0022716522216796875, -4.0531158447265625e-06, -7.152555099310121e-07, -0.20221519470214844, -2.86102294921875e-05, -1.1444091796875e-05, -0.08292484283447266, -6.4849853515625e-05, -0.003719329833984375, -3.4332275390625e-05, -0.03066381812095642, -0.0004634857177734375, -0.001125931739807129, 0.0, -1.001357759378152e-05, 0.0, -0.000118255615234375, -0.0015430450439453125, -1.1444091796875e-05, -1.2278556823730469e-05, -1.1920928244535389e-07, -1.6450881958007812e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "minionsDamage", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "minions", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(minionsDamage(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.500422426495774, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.134737253189087, -1.9132517576217651, -0.00024199373729061335, -0.19670991599559784, -2.0265579223632812e-06, -0.06742250919342041, -3.933906555175781e-06, -2.861022494471399e-06, -0.5081138610839844, -2.47955322265625e-05, -7.62939453125e-06, -0.058836936950683594, -4.1961669921875e-05, -0.0019073486328125, -3.24249267578125e-05, -0.03206513449549675, -0.0004425048828125, -0.001225113868713379, 0.0, -1.215934389620088e-05, 0.0, -0.0001373291015625, -0.0014934539794921875, -9.5367431640625e-06, -8.70227722771233e-06, -1.1920928244535389e-07, -1.4901160284352954e-05, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "Give", "hole1": 2, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Give", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Give(2)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.512585419490335, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -2.7840325832366943, -0.0007106556440703571, -0.2160542756319046, -0.00020158140978310257, -0.0080344770103693, -9.5367431640625e-06, -1.5497195136049413e-06, -0.6220979690551758, -0.0001964569091796875, -1.1444091796875e-05, -0.12487602233886719, -8.0108642578125e-05, -0.00213623046875, -3.24249267578125e-05, -0.06358786672353745, -0.0009222030639648438, -0.001484513282775879, 0.0, -9.655950634623878e-06, 0.0, -0.000156402587890625, -0.1042327880859375, -1.52587890625e-05, -1.0371208190917969e-05, -2.3841855067985307e-07, -1.442432312614983e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "Taunt", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "condition", "value": {"hole0": "Adjacent", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Taunt(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.627739833854719, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.0678406953811646, -2.0833446979522705, -0.33834531903266907, -5.9604644775390625e-06, -0.03134572505950928, -5.9604644775390625e-06, -5.006789251638111e-06, -0.3798942565917969, -2.86102294921875e-05, -7.62939453125e-06, -0.04950237274169922, -4.57763671875e-05, -0.001529693603515625, -3.24249267578125e-05, -0.03292200341820717, -0.0005397796630859375, -0.001179337501525879, 0.0, -9.894368304230738e-06, 0.0, -0.0001373291015625, -0.05730438232421875, -1.1444091796875e-05, -1.0371208190917969e-05, -2.3841855067985307e-07, -1.454353241570061e-05, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole3": "Give", "hole5": "MinionSelector", "hole4": [{"hole0": "adjacentAttack", "hole1": 1, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Sunfury Protector"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 3, "_type": "Template32"}], "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "adjacent", "Attack", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(adjacentAttack(1)),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -4.7222677225426395, "score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.5493205785751343, -0.8595583438873291, -0.026519857347011566, -1.2296013832092285, -3.576278118089249e-07, -0.2514772117137909, -7.867813110351562e-06, -5.483625955093885e-06, -0.17882633209228516, -2.47955322265625e-05, -1.9073486328125e-06, -0.027246475219726562, -1.1444091796875e-05, -0.000244140625, -2.6702880859375e-05, -0.0008637905120849609, -7.152556463552173e-06, -5.14984130859375e-05, -1.71661376953125e-05, -1.52587890625e-05, -0.00924694538116455, -7.62939453125e-06, -0.0001983642578125, -9.5367431640625e-06, -0.0014069076860323548, -0.00021386146545410156, -1.71661376953125e-05, -0.0035191774368286133, -3.814697265625e-06, -2.2530550268129446e-05, 0.0, -2.6702880859375e-05, -5.91278076171875e-05, -9.5367431640625e-06, -1.060962586052483e-05, -1.1920928244535389e-07, -1.1682508556987159e-05, -1.1920928244535389e-07]}, {"model_output": {"body": [{"body": [{"hole8": {"hole4": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole2": "PlayerSelector", "hole0": "Draw", "hole1": [{"_type": "Template59"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 2, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MURLOC", "hole7": "battlecry", "hole0": "Sunfury Protector"}, {"hole0": 2, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "SunfuryProtector", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Sunfury", "Protector", "<EOS>", 320, 100, 333, 136, 197, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 217, "Draw", "<EOS>", 320, 102, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 150, 302, "2", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=\n            Battlecry(Draw(2), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.002263905894971, "score_history": [-2.674412727355957, -4.1961669921875e-05, -6.103515625e-05, -0.0018024444580078125, -4.00543212890625e-05, -0.016105202957987785, -4.696760879596695e-05, -0.004718597512692213, -0.0001544952392578125, -0.0002803802490234375, -1.52587890625e-05, -0.000415802001953125, -0.0001087188720703125, -0.00019882152264472097, -2.7775726266554557e-05, -1.5258787243510596e-05, -9.34600830078125e-05, -7.092952728271484e-05, 0.0, -5.364418029785156e-05, -0.0009002685546875, -6.365776062011719e-05, -3.814697265625e-06, -0.00048434731434099376, -2.2649765014648438e-06, -0.0001010894775390625, -0.0001220703125, -5.7220458984375e-05, -1.1920928244535389e-07, -0.08291411399841309, -7.62939453125e-06, -0.00010204313002759591, -1.9073486328125e-05, -0.0022792816162109375, -0.2020416259765625, -1.7843035459518433, -4.2676241719163954e-05, -3.814697265625e-06, -0.014803886413574219, -0.20062237977981567, -2.0265579223632812e-06, -7.152555099310121e-07, -0.0029296875, -0.0001678466796875, -1.71661376953125e-05, -0.008202552795410156, -5.7220458984375e-06, -5.7220458984375e-06, -1.33514404296875e-05, -0.00020194039097987115, -1.9669532775878906e-05, -2.288818359375e-05, -0.00298309326171875, -6.29425048828125e-05, -1.6569983927183785e-05, -2.3841855067985307e-07, -4.601478576660156e-05, -6.318072337307967e-06, -2.09808349609375e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 2, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MURLOC", "hole7": "battlecry", "hole0": "Sunfury Protector"}, {"hole0": 2, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "SunfuryProtector", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Sunfury", "Protector", "<EOS>", 320, 100, 333, 136, 197, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 217, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=\n            Battlecry(Give(ChangeHealth(1)), MinionSelector(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -5.900346087110499, "score_history": [-2.674412727355957, -4.1961669921875e-05, -6.103515625e-05, -0.0018024444580078125, -4.00543212890625e-05, -0.016105202957987785, -4.696760879596695e-05, -0.004718597512692213, -0.0001544952392578125, -0.0002803802490234375, -1.52587890625e-05, -0.000415802001953125, -0.0001087188720703125, -0.00019882152264472097, -2.7775726266554557e-05, -1.5258787243510596e-05, -9.34600830078125e-05, -7.092952728271484e-05, 0.0, -5.364418029785156e-05, -0.0009002685546875, -6.365776062011719e-05, -3.814697265625e-06, -0.00048434731434099376, -2.2649765014648438e-06, -0.0001010894775390625, -0.0001220703125, -5.7220458984375e-05, -1.1920928244535389e-07, -0.08291411399841309, -7.62939453125e-06, -0.00010204313002759591, -1.9073486328125e-05, -0.0022792816162109375, -0.2020416259765625, -0.6762349009513855, -0.00013886996021028608, -1.33514404296875e-05, -0.9156608581542969, -0.000362396240234375, -0.9857712984085083, 0.0, -0.285403311252594, -4.291534423828125e-06, -9.65590606938349e-06, -0.013813018798828125, -1.52587890625e-05, -4.57763671875e-05, -0.03015899658203125, -2.86102294921875e-05, -2.86102294921875e-05, -1.9073486328125e-05, -0.002444143872708082, -7.2479248046875e-05, -1.71661376953125e-05, -0.00215911865234375, -4.76837158203125e-05, -8.690025424584746e-05, -8.344646857949556e-07, -1.7762184143066406e-05, -8.583032467868179e-06, -2.09808349609375e-05]}, {"model_output": {"body": [{"body": [{"hole8": {"hole4": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole2": "MinionSelector", "hole0": "Give", "hole1": [{"hole0": 3, "_type": "Template40"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 2, "hole3": "RARE", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "MURLOC", "hole7": "battlecry", "hole0": "Sunfury Protector"}, {"hole0": 2, "hole1": 3, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "SunfuryProtector", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Sunfury", "Protector", "<EOS>", 320, 100, 333, 136, 197, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 217, "Give", "<EOS>", 320, 88, 246, "3", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "3", "<EOS>", 147], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=\n            Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score": -6.190496701624845, "score_history": [-2.674412727355957, -4.1961669921875e-05, -6.103515625e-05, -0.0018024444580078125, -4.00543212890625e-05, -0.016105202957987785, -4.696760879596695e-05, -0.004718597512692213, -0.0001544952392578125, -0.0002803802490234375, -1.52587890625e-05, -0.000415802001953125, -0.0001087188720703125, -0.00019882152264472097, -2.7775726266554557e-05, -1.5258787243510596e-05, -9.34600830078125e-05, -7.092952728271484e-05, 0.0, -5.364418029785156e-05, -0.0009002685546875, -6.365776062011719e-05, -3.814697265625e-06, -0.00048434731434099376, -2.2649765014648438e-06, -0.0001010894775390625, -0.0001220703125, -5.7220458984375e-05, -1.1920928244535389e-07, -0.08291411399841309, -7.62939453125e-06, -0.00010204313002759591, -1.9073486328125e-05, -0.0022792816162109375, -0.2020416259765625, -0.6762349009513855, -0.00013886996021028608, -1.33514404296875e-05, -0.9156608581542969, -0.000362396240234375, -1.2453118562698364, -1.549711487314198e-05, -0.2796507179737091, -4.291534423828125e-06, -2.4318398573086597e-05, -0.010602951049804688, -1.9073486328125e-05, -3.0517578125e-05, -0.06922435760498047, -1.9073486328125e-05, -2.288818359375e-05, -2.09808349609375e-05, -0.00325834471732378, -0.0001163482666015625, -1.1444091796875e-05, -0.001819610595703125, -5.14984130859375e-05, -7.545703556388617e-05, -9.536738616588991e-07, -1.5735626220703125e-05, -9.179073458653875e-06, -1.9073486328125e-05]}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "HasSquirrel", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Has", "Squirrel", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(HasSquirrel(), EnemyPlayer())\n            ))), SelfSelector()]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.0411167610538925, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -0.4181991219520569, -0.1460791826248169, -0.013888510875403881, -0.023214340209960938, -3.62396240234375e-05, -0.07340836524963379, -1.8835005903383717e-05, -1.3589859008789062e-05, -0.18498802185058594, -0.3024873733520508, -9.5367431640625e-06, -0.017044857144355774, -1.6689240510459058e-05, -1.0728830375228426e-06, -0.0034777140244841576, -2.6821779101737775e-05, -5.960462772236497e-07, -0.0001420974440407008, -2.47955322265625e-05, -1.7285345165873878e-05, 0.0, -0.000202178955078125, -0.0001583099365234375, -7.62939453125e-06, -6.198883056640625e-06, -1.1920928244535389e-07, -2.393123577348888e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 276, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(IsType(MINION_TYPE.DRAGON), players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.229786145289367, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.478734016418457, -0.00017331528943032026, -0.00047230703057721257, -1.823902130126953e-05, 0.0, -1.5974157577147707e-05, -2.503394853192731e-06, -0.008589625358581543, 0.0, -0.009511452168226242, -7.510169325541938e-06, -0.000201517716050148, -7.867813110351562e-06, -1.1920928244535389e-07, -0.16640472412109375, -0.0041217803955078125, -0.0037431716918945312, -0.0001068115234375, -1.1444091796875e-05, -0.06580495834350586, -0.003052472835406661, -1.1324866136419587e-05, -0.006649017333984375, -0.0009212493896484375, -6.29425048828125e-05, -2.288818359375e-05, 0.0, -6.4849853515625e-05, 0.0, -0.053420066833496094, -0.0005130767822265625, -0.03167533874511719, -5.7220458984375e-06, -1.9073486328125e-06, -0.09635257720947266, -1.9073486328125e-06, -0.000186920166015625, 0.0, -0.08983147144317627, -3.814689989667386e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.07987689971923828, -1.9073486328125e-06, -0.0020265579223632812, -1.9073486328125e-06, -0.07636857032775879, -0.00041615962982177734, -5.7220458984375e-06, -0.0032492876052856445, -1.9073486328125e-05, -1.9550323486328125e-05, 0.0, -0.0001544952392578125, -0.0001049041748046875, -1.1444091796875e-05, -8.106231689453125e-06, -1.1920928244535389e-07, -2.6682246243581176e-05, -2.622604142743512e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasSquirrel", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "Squirrel", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(MinionHasSquirrel(),\n            EnemyPlayer())))), SelfSelector()]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -3.9209273225437116, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -1.1630464792251587, -0.2156425416469574, -0.0015731294406577945, -0.014408626593649387, -0.034340858459472656, -4.76837158203125e-05, -0.09443199634552002, -1.62123869813513e-05, -9.775161743164062e-06, -0.1883993148803711, -0.3352012634277344, -9.5367431640625e-06, -0.0122291911393404, -1.657003303989768e-05, -9.536738616588991e-07, -0.0032686195336282253, -2.6106541554327123e-05, -4.768370445162873e-07, -0.00013649460743181407, -2.6702880859375e-05, -1.7046926586772315e-05, 0.0, -0.0002346038818359375, -0.0001811981201171875, -7.62939453125e-06, -6.198883056640625e-06, -1.1920928244535389e-07, -2.4646200472489e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "HasSquirrel", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Has", "Squirrel", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(HasSquirrel(), EnemyPlayer())\n            )))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.170177435611542, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -0.4181991219520569, -0.1460791826248169, -0.013888510875403881, -0.023214340209960938, -3.62396240234375e-05, -0.07340836524963379, -1.8835005903383717e-05, -1.3589859008789062e-05, -0.18498802185058594, -1.368269920349121, -0.08014313876628876, -1.2993770724278875e-05, -3.576278118089249e-07, -6.365776062011719e-05, -5.7220458984375e-06, -1.7642974853515625e-05, 0.0, -0.000331878662109375, -0.0038242340087890625, -5.7220458984375e-06, -4.172325134277344e-06, -1.1920928244535389e-07, -2.832215977832675e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 271, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.585331616058127, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -4.218344688415527, -3.8146954466355965e-06, -0.00012254678586032242, -4.76837158203125e-05, -1.1920928244535389e-07, -4.172787157585844e-06, -8.344646857949556e-07, -0.006036520004272461, -1.9073486328125e-06, -0.07469470798969269, -4.42257514805533e-05, -0.0419083833694458, -4.410743713378906e-06, -2.3841855067985307e-07, -0.00019466876983642578, 0.0, -4.911421274300665e-05, 0.0, -0.0001773834228515625, -0.19690704345703125, -5.7220458984375e-06, -4.172325134277344e-06, -1.1920928244535389e-07, -1.799550955183804e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Kill", "hole5": "MinionSelector", "_type": "Template6", "hole6": [{"func": {"id": "Has<UNK>", "_type": "Name"}, "args": [{"s": "Transform", "_type": "Str"}], "_type": "Call"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "UserPicker", "_type": "Template46"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 274, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "Has", "<UNK>", "<EOS>", 320, 76, 194, "Transform", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(Has<UNK>('Transform'), EnemyPlayer(), UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.705394693323079, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.317194938659668, -2.9682672902708873e-05, -3.6835648643318564e-05, -6.318092346191406e-06, -1.9073486328125e-06, -0.0003798009711317718, -2.3841855067985307e-07, -0.01030266284942627, -1.1444091796875e-05, -0.02127460390329361, -3.8504123949678615e-05, -0.0009387618047185242, -4.291534423828125e-06, -9.536738616588991e-07, -0.2057943344116211, -0.0002994537353515625, -0.00016021728515625, -1.71661376953125e-05, -4.1961669921875e-05, -0.28082072734832764, -0.08298643678426743, -5.960462203802308e-06, -0.0007228851318359375, -0.06651592254638672, -0.0006160736083984375, -1.3361854553222656, -7.82012939453125e-05, -0.06368255615234375, -3.814697265625e-06, -0.16933751106262207, -2.2888067178428173e-05, -1.1444091796875e-05, -0.000621795654296875, -1.33514404296875e-05, -0.0985245630145073, -0.0013011691626161337, -3.933906555175781e-06, -0.00018501278827898204, -9.5367431640625e-06, -5.2690502343466505e-05, 0.0, -0.0002574920654296875, -9.1552734375e-05, -1.1444091796875e-05, -4.291534423828125e-06, -1.1920928244535389e-07, -3.252425813116133e-05, -2.622604142743512e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Transform", "hole5": "PlayerSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "source", "value": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "source", "<EOS>", 17, 156, 25, 186, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.<UNK>)), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.707179895249396, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.2515006065368652, -6.794906312279636e-06, -1.96695291379001e-05, -7.867813110351562e-06, -9.5367431640625e-06, -5.817427154397592e-05, -2.3841855067985307e-07, -0.050084829330444336, 0.0, -0.3132171928882599, -0.0019783726893365383, -0.0004062652587890625, -0.2701730728149414, -0.008241653442382812, -0.0007181167602539062, -0.000102996826171875, -0.0007859468460083008, -0.00015270709991455078, -1.52587890625e-05, -0.03689002990722656, -0.000141143798828125, -1.9073486328125e-06, -1.3981876373291016, -1.71661376953125e-05, -0.0014848709106445312, -0.0003604888916015625, -0.00016021728515625, 0.0, -0.010293960571289062, -0.0005103349685668945, -0.000784754753112793, -8.821482879284304e-06, -0.23807194828987122, -2.384185791015625e-06, 0.0, -0.0013523101806640625, -1.9073486328125e-06, 0.0, -0.03963184356689453, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.005338788032531738, -3.576278118089249e-07, -2.09808349609375e-05, -0.0001188516616821289, -8.392333984375e-05, -7.987022399902344e-06, 0.0, -0.0002593994140625, -0.02911376953125, -1.33514404296875e-05, -2.491474151611328e-05, -2.3841855067985307e-07, -1.2604141375049949e-05, -3.099440846199286e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "PlayerSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "HasDevilsaur", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Has", "Devilsaur", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(HasDevilsaur(), EnemyPlayer()\n            )))), SelfSelector()]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.899887012328001, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -0.4181991219520569, -2.004849433898926, -0.013888510875403881, -0.023214340209960938, -3.62396240234375e-05, -0.07340836524963379, -1.8835005903383717e-05, -1.3589859008789062e-05, -0.18498802185058594, -0.3024873733520508, -9.5367431640625e-06, -0.017044857144355774, -1.6689240510459058e-05, -1.0728830375228426e-06, -0.0034777140244841576, -2.6821779101737775e-05, -5.960462772236497e-07, -0.0001420974440407008, -2.47955322265625e-05, -1.7285345165873878e-05, 0.0, -0.000202178955078125, -0.0001583099365234375, -7.62939453125e-06, -6.198883056640625e-06, -1.1920928244535389e-07, -2.393123577348888e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"hole0": "MinionHasSquirrel", "_type": "Template46"}, {"hole0": "EnemyPlayer", "_type": "Template46"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"_type": "Template62_expr_seq"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "Squirrel", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(MinionHasSquirrel(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -4.901773849529484, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -1.1630464792251587, -0.2156425416469574, -0.0015731294406577945, -0.014408626593649387, -0.034340858459472656, -4.76837158203125e-05, -0.09443199634552002, -1.62123869813513e-05, -9.775161743164062e-06, -0.1883993148803711, -1.277247428894043, -0.05014863610267639, -1.0490395652595907e-05, -3.576278118089249e-07, -5.7816505432128906e-05, -5.7220458984375e-06, -1.7642974853515625e-05, 0.0, -0.0004482269287109375, -0.0042572021484375, -5.7220458984375e-06, -4.172325134277344e-06, -1.1920928244535389e-07, -3.0347815481945872e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "<UNK>", "hole5": "MinionSelector", "hole8": [{"hole0": "OpponentMinionCountIsGreaterThan", "hole1": 3, "_type": "Template41"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "condition", "value": {"value": "Null", "_type": "NameConstant"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 273, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "<UNK>", "<EOS>", "Minion", "Selector", "<EOS>", 329, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "condition", "<EOS>", 26, 187, "Null", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 89, 247, "Opponent", "Minion", "Count", "Is", "Greater", "Than", "<EOS>", "3", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(<UNK>(),\n            MinionSelector(players=EnemyPlayer(), condition=Null, picker=\n            RandomPicker()), OpponentMinionCountIsGreaterThan(3)))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.105996220206137, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -3.0814385414123535, -0.0004024887748528272, -0.00034046004293486476, -4.172325134277344e-06, 0.0, -0.00012719958613160998, -1.1920928244535389e-07, -0.017572879791259766, -2.288818359375e-05, -0.03946639969944954, -0.008812026120722294, -0.21493825316429138, -2.0265579223632812e-06, -2.3841855067985307e-07, -0.08528518676757812, -0.0008640289306640625, -3.4332275390625e-05, -0.01913142204284668, -9.72747802734375e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0006104707717895508, -2.861022494471399e-06, -3.814697265625e-06, -0.0002593994140625, -1.9073486328125e-06, -0.02869701385498047, 0.0, -0.09546184539794922, -0.0002193450927734375, -0.0002187490463256836, -5.7220458984375e-06, -0.000133514404296875, -1.9073486328125e-06, -0.06172943115234375, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.05948221683502197, -2.551075340306852e-05, 0.0, 0.0, -0.28164196014404297, -0.0054950714111328125, -0.7330377101898193, -0.0032559633255004883, -0.00162506103515625, -0.0015627145767211914, -0.2958561182022095, -0.006384730339050293, -0.0046395063400268555, -0.006826329976320267, -4.982948303222656e-05, -0.003124713897705078, 0.0, -1.7166130419354886e-05, 0.0, -9.918212890625e-05, -0.0001354217529296875, -9.5367431640625e-06, -4.172325134277344e-06, -1.1920928244535389e-07, -2.2835767595097423e-05, -2.384185791015625e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            ), BothPlayer()]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.398976402771545, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -1.8259153366088867, -0.0017147064208984375, -0.000225067138671875, -9.5367431640625e-06, -7.62939453125e-06, -0.02712845802307129, -0.001761794090270996, -8.416175842285156e-05, -0.014219284057617188, -0.0670928955078125, -3.62396240234375e-05, -2.09808349609375e-05, 0.0, -0.00020599365234375, 0.0, -0.021051406860351562, -0.0001678466796875, -0.2890777587890625, -1.9073486328125e-06, -0.7136843204498291, -7.867782187531702e-06, -5.7220458984375e-06, -0.18460369110107422, -0.5756394863128662, -2.861022494471399e-06, 0.0, -7.545948028564453e-05, -7.62939453125e-06, -1.5974044799804688e-05, 0.0, -0.00075531005859375, -0.007863998413085938, -5.7220458984375e-06, -4.5299530029296875e-06, -1.1920928244535389e-07, -3.237457713112235e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.420125017983423, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.2515006065368652, -6.794906312279636e-06, -1.96695291379001e-05, -7.867813110351562e-06, -9.5367431640625e-06, -5.817427154397592e-05, -2.3841855067985307e-07, -0.050084829330444336, 0.0, -1.579667329788208, -0.049766406416893005, -1.1444091796875e-05, -0.005276679992675781, -6.67572021484375e-05, -0.000942230224609375, -0.39980506896972656, -0.000392913818359375, -1.9907929527107626e-05, -1.9073486328125e-06, -0.005125145893543959, -0.0008865592535585165, -1.9073486328125e-06, -0.0043312665075063705, -1.9073486328125e-06, -0.0007915496826171875, -6.67572021484375e-05, -7.069110870361328e-05, 0.0, -9.179061453323811e-05, -0.0004146099090576172, 0.0, -0.02972489595413208, -1.52587890625e-05, -0.000141143798828125, -0.4870537519454956, -4.076919867657125e-05, -2.3841855067985307e-07, -0.00072479248046875, -7.62939453125e-06, -6.29425048828125e-05, -0.14152729511260986, -9.894371032714844e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.21186089515686035, -0.0001518726348876953, -3.814697265625e-06, -0.05658066272735596, -3.24249267578125e-05, -4.410743713378906e-06, 0.0, -0.000148773193359375, -0.09577560424804688, -1.52587890625e-05, -2.872943878173828e-05, -3.576278118089249e-07, -1.1763855582103133e-05, -3.576277322281385e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole0": "ChangeAttack", "hole1": [{"hole2": [{"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}], "hole0": "Count", "hole1": {"_type": "Template74"}, "_type": "Template35"}], "_type": "Template30"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(IsType(MINION_TYPE.DRAGON))))\n            ), EnemyPlayer()]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -5.528437811742883, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -1.8259153366088867, -0.0017147064208984375, -0.000225067138671875, -9.5367431640625e-06, -7.62939453125e-06, -0.02712845802307129, -0.001761794090270996, -8.416175842285156e-05, -0.014219284057617188, -0.0670928955078125, -3.62396240234375e-05, -2.09808349609375e-05, 0.0, -0.00020599365234375, 0.0, -0.021051406860351562, -0.0001678466796875, -0.2890777587890625, -1.9073486328125e-06, -0.823188066482544, -2.0265558760002023e-06, -3.814697265625e-06, -0.23566722869873047, -0.5435949563980103, -2.384185791015625e-06, 0.0, -7.522106170654297e-05, -9.5367431640625e-06, -1.7762184143066406e-05, 0.0, -0.00077056884765625, -0.008792877197265625, -5.7220458984375e-06, -4.5299530029296875e-06, -1.1920928244535389e-07, -3.166060196235776e-05, -2.503394853192731e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Transform", "hole5": "MinionSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"elts": [{"hole2": [{"s": "mana", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "hole0": "ManaSquirrel", "hole1": {"id": "Attribute", "_type": "Name"}, "_type": "Template35"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsMinion", "_type": "Template45_expr_seq"}], "_type": "List"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 84, 239, "Mana", "Squirrel", "<EOS>", 25, 186, "Attribute", "<EOS>", 321, 76, 194, "mana", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 92, 253, "Is", "Minion", "<EOS>", 320, 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -6.468622535846819, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.2515006065368652, -6.794906312279636e-06, -1.96695291379001e-05, -7.867813110351562e-06, -9.5367431640625e-06, -5.817427154397592e-05, -2.3841855067985307e-07, -0.050084829330444336, 0.0, -0.3132171928882599, -0.0019783726893365383, -0.0004062652587890625, -0.2701730728149414, -0.008241653442382812, -0.0007181167602539062, -0.000102996826171875, -0.0007859468460083008, -0.00015270709991455078, -1.52587890625e-05, -0.03689002990722656, -0.000141143798828125, -1.9073486328125e-06, -0.30379295349121094, -1.9073486328125e-06, -0.040462493896484375, -0.0001068115234375, -0.0005474090576171875, -0.013445854187011719, -0.0001316070556640625, -0.1520237922668457, -0.09324811398983002, -0.0018965000053867698, -0.012986183166503906, -1.9073486328125e-06, -0.004525303840637207, -2.09808349609375e-05, -0.0035190582275390625, -0.0003108978271484375, -1.52587890625e-05, -1.2433382272720337, -1.9073486328125e-06, -0.05082988739013672, -8.392333984375e-05, -0.11936795711517334, -2.1219253540039062e-05, 0.0, -0.023957252502441406, -0.000705718994140625, -0.008943955413997173, -0.5459124445915222, -1.9073486328125e-06, -9.918212890625e-05, -0.0001201629638671875, -0.010220088995993137, -9.5367431640625e-06, -1.1920928244535389e-07, -0.00197601318359375, -1.9073486328125e-06, -3.0517578125e-05, -0.6462182998657227, -1.9073486328125e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.0994945764541626, -0.00019693374633789062, -1.9073486328125e-06, -0.10735511779785156, -3.0517578125e-05, -3.933906555175781e-06, 0.0, -0.0002079010009765625, -0.001079559326171875, -9.5367431640625e-06, -1.7404556274414062e-05, -1.1920928244535389e-07, -1.845136284828186e-05, -2.9802317840221804e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole3": "Transform", "hole5": "MinionSelector", "hole4": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"arg": "conditions", "value": {"elts": [{"hole2": [{"s": "mana", "_type": "Str"}, {"hole0": "SelfSelector", "_type": "Template46"}], "hole0": "ManaSquirrel", "hole1": {"id": "Attribute", "_type": "Name"}, "_type": "Template35"}, {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IsMinion", "_type": "Template45_expr_seq"}], "_type": "List"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Tinkmaster Overspark"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 3, "hole1": 3, "_type": "Template32"}], "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 23, 181, 321, 84, 239, "Mana", "Squirrel", "<EOS>", 25, 186, "Attribute", "<EOS>", 321, 76, 194, "mana", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 92, 253, "Is", "Minion", "<EOS>", 320, 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score": -6.580602388233686, "score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -2.2515006065368652, -6.794906312279636e-06, -1.96695291379001e-05, -7.867813110351562e-06, -9.5367431640625e-06, -5.817427154397592e-05, -2.3841855067985307e-07, -0.050084829330444336, 0.0, -0.3132171928882599, -0.0019783726893365383, -0.0004062652587890625, -0.2701730728149414, -0.008241653442382812, -0.0007181167602539062, -0.000102996826171875, -0.0007859468460083008, -0.00015270709991455078, -1.52587890625e-05, -0.03689002990722656, -0.000141143798828125, -1.9073486328125e-06, -0.30379295349121094, -1.9073486328125e-06, -0.040462493896484375, -0.0001068115234375, -0.0005474090576171875, -0.013445854187011719, -0.0001316070556640625, -0.1520237922668457, -0.09324811398983002, -0.0018965000053867698, -0.012986183166503906, -1.9073486328125e-06, -0.004525303840637207, -2.09808349609375e-05, -0.0035190582275390625, -0.0003108978271484375, -1.52587890625e-05, -1.2433382272720337, -1.9073486328125e-06, -0.05082988739013672, -8.392333984375e-05, -0.11936795711517334, -2.1219253540039062e-05, 0.0, -0.023957252502441406, -0.000705718994140625, -0.008943955413997173, -0.5459124445915222, -1.9073486328125e-06, -9.918212890625e-05, -0.0001201629638671875, -0.010220088995993137, -9.5367431640625e-06, -1.1920928244535389e-07, -0.00197601318359375, -1.9073486328125e-06, -3.0517578125e-05, -0.9082040786743164, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.005932927131652832, -9.179100743494928e-06, -9.5367431640625e-06, -0.0003077983856201172, -0.0001201629638671875, -5.841255187988281e-06, 0.0, -0.000370025634765625, -0.05163002014160156, -1.1444091796875e-05, -1.9311904907226562e-05, -1.1920928244535389e-07, -1.4885299606248736e-05, -2.741813204920618e-06]}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}], "hole1": "SecretCard", "hole3": "use", "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "_type": "Template1", "hole6": [{"_type": "Template19"}], "hole7": [{"body": [{"test": {"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, "body": [{"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}], "value": {"_type": "Template79"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "args": {"args": [{"_type": "Template54"}, {"arg": "card", "_type": "arg"}, {"arg": "index", "_type": "arg"}], "_type": "arguments"}, "name": "_reveal", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 332, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 141, 334, 132, 170, "_reveal", "<EOS>", 5, 308, 316, 0, 1, 307, "card", "<EOS>", 1, 307, "index", "<EOS>", 332, 133, 173, 37, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 333, 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 62, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 132, 170, "activate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, card, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n", "score": -5.723100297155717, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -1.4013547897338867, -0.0001468658447265625, -4.76837158203125e-05, -1.6689286894688848e-06, -1.9073486328125e-06, -2.741813204920618e-06, 0.0, -0.01616191864013672, -3.814697265625e-06, -0.00015842914581298828, 0.0, -0.008057713508605957, 0.0, -1.9669532775878906e-05, 0.0, -9.5367431640625e-06, -0.0002002716064453125, -1.71661376953125e-05, -0.00066375732421875, -1.9073486328125e-06, -0.0013971328735351562, -0.013715744018554688, -0.01390838623046875, -0.006342887878417969, -0.000110626220703125, -0.007463574409484863, -3.814697265625e-06, -0.0015878677368164062, -0.00067901611328125, -0.015347480773925781, -0.000850677490234375, -0.0001125335693359375, -6.866455078125e-05, -0.4478764533996582, -0.00027561187744140625, -0.00026702880859375, -0.0043487548828125, -0.08336496353149414, -0.0012149810791015625, -0.001995086669921875, -0.000102996826171875, -3.4332275390625e-05, -0.008207321166992188, -0.000518798828125, -0.0001277923583984375, -1.9073486328125e-06, -0.29721927642822266, -1.9073486328125e-06, -1.895427340059541e-05, -1.2278481335670222e-05, -0.10633659362792969, -0.0052509307861328125, -5.7220458984375e-06, -9.5367431640625e-06, -2.0771284103393555, -1.9073486328125e-06, -0.000179290771484375, -1.9073486328125e-06, -0.06353259086608887, -9.894371032714844e-06, -0.007416724693030119, -1.1920928244535389e-07, -0.011533737182617188, -0.003968238830566406, 0.0, -0.2834653854370117, -5.7220458984375e-06, -5.14984130859375e-05, -7.62939453125e-06, -3.755075522349216e-05, -1.3470649719238281e-05, -0.0005971193313598633, -4.38690185546875e-05, -0.0017719268798828125, -2.6702880859375e-05, -0.009395599365234375, -6.4849853515625e-05, -0.0008792877197265625, -0.02310943603515625, -0.000110626220703125, -1.1444091796875e-05, -0.0072784423828125, -1.9073486328125e-06, -0.00765228271484375, -3.814697265625e-06, -0.00136566162109375, -0.00588406715542078, -5.7220458984375e-06, -0.0034430017694830894, -0.0001437664031982422, -0.02809906005859375, -5.7220458984375e-06, -8.0108642578125e-05, -5.7220458984375e-05, -6.103515625e-05, -0.23226475715637207, -3.814697265625e-06, -0.0010356903076171875, -4.57763671875e-05, -0.0002613067626953125, -0.0003814697265625, -2.47955322265625e-05, -0.001277923583984375, -1.52587890625e-05, -0.11271095275878906, -1.9073486328125e-06, -0.00074005126953125, -0.09999465942382812, -2.6702880859375e-05, -1.52587890625e-05, -0.0061473846435546875, -1.9073486328125e-06, -0.02024078369140625, -1.9073486328125e-06, -0.00167083740234375, -0.004794588312506676, -3.814697265625e-06, -0.0007268188637681305, -5.602836608886719e-05, -0.007150530815124512, -3.814697265625e-06, -7.43865966796875e-05, -5.14984130859375e-05, -2.86102294921875e-05, -0.2042936086654663, -1.9073486328125e-06, -0.0008754730224609375, -4.9591064453125e-05, -0.0002117156982421875, -0.0003604888916015625, -3.0517578125e-05]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.27273517896878, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -0.8563499450683594, 0.0, -0.011054039001464844, -0.0002841949462890625, -0.3351612091064453, -3.24249267578125e-05, -0.0006923675537109375, -1.9073486328125e-06, -0.045135498046875, -0.0001220703125, -0.053031206130981445, 0.0, -0.2565169334411621, -1.3470649719238281e-05, -0.005794525146484375, -0.04448509216308594, -1.9073486328125e-06, -0.3573427200317383, -1.71661376953125e-05, -0.004168407525867224, -0.05968911200761795, -0.03657042607665062, -3.814697265625e-06, -0.009487152099609375, -0.00392913818359375, 0.0, -0.005645751953125, -0.0001697540283203125, -5.7220458984375e-06, -0.22094058990478516, -1.9073486328125e-06, -0.41779136657714844, -1.9073486328125e-06, -0.004764556884765625, -0.00038826465606689453, -9.5367431640625e-06, -0.0034171342849731445, -5.7220458984375e-06, -8.96453857421875e-05, -0.0001678466796875, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007816314697265625, 0.0, -0.056746482849121094, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.25504016876220703, -9.5367431640625e-06, -0.0001621246337890625, -0.012346267700195312, -8.0108642578125e-05, -0.0011119842529296875, 0.0, -0.031003952026367188, -6.67572021484375e-05, -0.5634609460830688, 0.0, -0.04681587219238281, -0.000652313232421875, -3.24249267578125e-05, 0.0, -0.004604339599609375, -5.7220458984375e-06, -0.0015811920166015625, -0.00023531897750217468, -3.814697265625e-06, -0.012625455856323242, -7.62939453125e-06, -0.00223541259765625, -0.0014581680297851562, -0.01932239532470703, -0.0067234039306640625, -0.0032711029052734375, -0.000736236572265625, -0.015659332275390625, -1.9073486328125e-06, -0.08818435668945312, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001926422119140625, -0.0001010894775390625, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018268823623657227, -0.00012969970703125, -0.0003452301025390625, -0.15492630004882812, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.0013523101806640625, -0.0010992882307618856, -5.841255187988281e-06, -0.004867388401180506, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25971341133117676, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.9760704040527344, -0.0003528594970703125, -9.5367431640625e-06, -0.04476165771484375, -3.814697265625e-06, -0.0016002655029296875, -0.0001811981201171875, -0.0007171630859375, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.00124943011905998, -3.743171691894531e-05, -0.042229652404785156, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.2712671756744385, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003681182861328125, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.48853206634521484, -4.57763671875e-05, -0.00020420551300048828, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.343997529597566, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9144706726074219, 0.0, -0.012354850769042969, -0.000286102294921875, -0.34806346893310547, -3.24249267578125e-05, -0.0006561279296875, -1.9073486328125e-06, -0.045848846435546875, -0.0001201629638671875, -0.05232834815979004, 0.0, -0.25575315952301025, -1.3470649719238281e-05, -0.00377655029296875, -0.04117584228515625, -1.9073486328125e-06, -0.3216361999511719, -1.71661376953125e-05, -0.003711477154865861, -0.06325465440750122, -0.03868579491972923, -3.814697265625e-06, -0.009517669677734375, -0.0039348602294921875, 0.0, -0.005615234375, -0.0001697540283203125, -5.7220458984375e-06, -0.2223663330078125, -1.9073486328125e-06, -0.4185781478881836, -1.9073486328125e-06, -0.004723548889160156, -0.00038444995880126953, -9.5367431640625e-06, -0.003422856330871582, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.0078277587890625, 0.0, -0.05675983428955078, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23567676544189453, -9.5367431640625e-06, -0.0001621246337890625, -0.0126190185546875, -8.392333984375e-05, -0.0011005401611328125, 0.0, -0.030569076538085938, -6.67572021484375e-05, -0.5547596216201782, 0.0, -0.046543121337890625, -0.000640869140625, -3.24249267578125e-05, 0.0, -0.0046443939208984375, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.01269221305847168, -7.62939453125e-06, -0.0022306442260742188, -0.0014543533325195312, -0.01931476593017578, -0.0067138671875, -0.0032634735107421875, -0.0007343292236328125, -0.016203880310058594, -1.9073486328125e-06, -0.093414306640625, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006866455078125, -0.0001926422119140625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.1542797088623047, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011002415558323264, -5.841255187988281e-06, -0.00486953416839242, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2597811222076416, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.9759683609008789, -0.0003528594970703125, -9.5367431640625e-06, -0.044734954833984375, -3.814697265625e-06, -0.0016002655029296875, -0.0001811981201171875, -0.0007171630859375, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.0012475227704271674, -3.743171691894531e-05, -0.042229652404785156, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.2712738513946533, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003662109375, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.4885425567626953, -4.57763671875e-05, -0.00020420551300048828, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "index", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "index", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, index):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.68002835003221, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.9892946481704712, -6.592273712158203e-05, -0.0002155303955078125, -0.0001163482666015625, -0.0001678466796875, -0.047962188720703125, -0.0017185211181640625, -0.0002593994140625, -0.020772933959960938, -0.004281044006347656, -0.001674652099609375, -7.82012939453125e-05, -3.24249267578125e-05, -0.01076352596282959, -2.300739288330078e-05, -0.07231950759887695, -9.417489309271332e-06, -0.0034770965576171875, -2.47955322265625e-05, -0.001216888427734375, -0.000518798828125, 0.0, -0.0001983642578125, -0.004415631294250488, -1.1920928244535389e-07, -0.00016021728515625, -3.24249267578125e-05, 0.0, -0.0008525848388671875, 0.0, -0.02357959747314453, -5.125997995492071e-05, -1.9073486328125e-06, -0.0002579689025878906, -7.62939453125e-06, -0.0001201629638671875, -0.0012111663818359375, -4.00543212890625e-05, -0.0023555755615234375, -0.0001544952392578125, -5.7220458984375e-05, -1.1444091796875e-05, 0.0, -0.050713539123535156, -2.288818359375e-05, -0.9210386276245117, 0.0, -0.01265716552734375, -0.0002880096435546875, -0.36768150329589844, -3.24249267578125e-05, -0.000667572021484375, -3.814697265625e-06, -0.04281044006347656, -0.0001220703125, -0.053717851638793945, 0.0, -0.2617769241333008, -1.3470649719238281e-05, -0.00318145751953125, -0.0369720458984375, -1.9073486328125e-06, -0.3208932876586914, -1.71661376953125e-05, -0.003976466599851847, -0.06671660393476486, -0.03811466321349144, -3.814697265625e-06, -0.0095977783203125, -0.00403594970703125, 0.0, -0.005530357360839844, -0.0001678466796875, -5.7220458984375e-06, -0.22412967681884766, -1.9073486328125e-06, -0.4133462905883789, -1.9073486328125e-06, -0.004763603210449219, -0.00039207935333251953, -9.5367431640625e-06, -0.003384828567504883, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007822036743164062, 0.0, -0.056629180908203125, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.2071695327758789, -9.5367431640625e-06, -0.0001659393310546875, -0.011365890502929688, -8.58306884765625e-05, -0.0011005401611328125, 0.0, -0.030582427978515625, -6.866455078125e-05, -0.5523887872695923, 0.0, -0.046894073486328125, -0.000629425048828125, -3.0517578125e-05, 0.0, -0.00460052490234375, -5.7220458984375e-06, -0.0015859603881835938, -0.00023734553542453796, -3.814697265625e-06, -0.012719869613647461, -7.62939453125e-06, -0.0022211074829101562, -0.0014486312866210938, -0.01932239532470703, -0.006710052490234375, -0.003246307373046875, -0.0007343292236328125, -0.013727188110351562, -1.9073486328125e-06, -0.09528064727783203, -2.09808349609375e-05, -5.53131103515625e-05, -3.24249267578125e-05, -0.0002283942885696888, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001983642578125, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.15427017211914062, -0.000370025634765625, -1.9073486328125e-05, -0.000335693359375, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011026256252080202, -5.841255187988281e-06, -0.004873468074947596, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2596590518951416, -3.814697265625e-06, -0.000743865966796875, -3.814697265625e-05, -0.00020599365234375, -0.000537872314453125, -1.1444091796875e-05, -0.0061931610107421875, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.0001201629638671875, -0.0003681182861328125, -0.0007610321044921875, 0.0, -0.9761734008789062, -0.0003509521484375, -9.5367431640625e-06, -0.044769287109375, -3.814697265625e-06, -0.0016021728515625, -0.0001811981201171875, -0.0007171630859375, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.00124943011905998, -3.743171691894531e-05, -0.04223155975341797, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.27126049995422363, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003662109375, -2.288818359375e-05, -0.010679244995117188, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.4885215759277344, -4.57763671875e-05, -0.00020420551300048828, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = player\n", "score": -8.751698911688202, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -0.8563499450683594, 0.0, -0.011054039001464844, -0.0002841949462890625, -0.3351612091064453, -3.24249267578125e-05, -0.0006923675537109375, -1.9073486328125e-06, -0.045135498046875, -0.0001220703125, -0.053031206130981445, 0.0, -0.2565169334411621, -1.3470649719238281e-05, -0.005794525146484375, -0.04448509216308594, -1.9073486328125e-06, -0.3573427200317383, -1.71661376953125e-05, -0.004168407525867224, -0.05968911200761795, -0.03657042607665062, -3.814697265625e-06, -0.009487152099609375, -0.00392913818359375, 0.0, -0.005645751953125, -0.0001697540283203125, -5.7220458984375e-06, -0.22094058990478516, -1.9073486328125e-06, -0.41779136657714844, -1.9073486328125e-06, -0.004764556884765625, -0.00038826465606689453, -9.5367431640625e-06, -0.0034171342849731445, -5.7220458984375e-06, -8.96453857421875e-05, -0.0001678466796875, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007816314697265625, 0.0, -0.056746482849121094, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.25504016876220703, -9.5367431640625e-06, -0.0001621246337890625, -0.012346267700195312, -8.0108642578125e-05, -0.0011119842529296875, 0.0, -0.031003952026367188, -6.67572021484375e-05, -0.5634609460830688, 0.0, -0.04681587219238281, -0.000652313232421875, -3.24249267578125e-05, 0.0, -0.004604339599609375, -5.7220458984375e-06, -0.0015811920166015625, -0.00023531897750217468, -3.814697265625e-06, -0.012625455856323242, -7.62939453125e-06, -0.00223541259765625, -0.0014581680297851562, -0.01932239532470703, -0.0067234039306640625, -0.0032711029052734375, -0.000736236572265625, -0.015659332275390625, -1.9073486328125e-06, -0.08818435668945312, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001926422119140625, -0.0001010894775390625, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018268823623657227, -0.00012969970703125, -0.0003452301025390625, -0.15492630004882812, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.0013523101806640625, -0.0010992882307618856, -5.841255187988281e-06, -0.004867388401180506, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25971341133117676, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.9760704040527344, -0.0003528594970703125, -9.5367431640625e-06, -0.04476165771484375, -3.814697265625e-06, -0.0016002655029296875, -0.0001811981201171875, -0.0007171630859375, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.00124943011905998, -3.743171691894531e-05, -0.042229652404785156, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.2712671756744385, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003681182861328125, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.9677457809448242]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.<UNK> and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.783329213800918, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9662561416625977, 0.0, -0.02855682373046875, -0.0008392333984375, -0.6432704925537109, -7.82012939453125e-05, -0.0007953643798828125, -1.9073486328125e-06, -0.01409149169921875, -0.000125885009765625, -0.09231054782867432, 0.0, -0.23682737350463867, -9.655952453613281e-06, -0.0056476593017578125, -0.10770225524902344, -1.9073486328125e-06, -0.38594722747802734, -1.71661376953125e-05, -0.0038762460462749004, -0.056882452219724655, -0.03323900327086449, -5.7220458984375e-06, -0.009305953979492188, -0.0037784576416015625, -1.9073486328125e-06, -0.006840705871582031, -0.000141143798828125, -5.7220458984375e-06, -0.23219871520996094, -1.9073486328125e-06, -0.3911018371582031, -1.9073486328125e-06, -0.0053005218505859375, -0.00042450428009033203, -9.5367431640625e-06, -0.0032895803451538086, -5.7220458984375e-06, -8.58306884765625e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007968902587890625, 0.0, -0.05686187744140625, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.22357654571533203, -7.62939453125e-06, -0.0001544952392578125, -0.013625144958496094, -8.20159912109375e-05, -0.0010776519775390625, 0.0, -0.030351638793945312, -6.866455078125e-05, -0.5482774972915649, 0.0, -0.04619312286376953, -0.00063323974609375, -3.0517578125e-05, 0.0, -0.004680633544921875, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.012641668319702148, -7.62939453125e-06, -0.00222015380859375, -0.0014486312866210938, -0.019262313842773438, -0.00670623779296875, -0.003261566162109375, -0.0007343292236328125, -0.018909454345703125, -1.9073486328125e-06, -0.0928049087524414, -2.09808349609375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.00022851319226901978, -2.1457672119140625e-06, -0.00069427490234375, -0.0001888275146484375, -9.918212890625e-05, -7.2479248046875e-05, -2.09808349609375e-05, -0.001835465431213379, -0.00012969970703125, -0.000347137451171875, -0.15166091918945312, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005016326904296875, 0.0, -0.0013494491577148438, -0.0010985732078552246, -5.841255187988281e-06, -0.004867031238973141, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25983643531799316, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.0062084197998046875, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.9758548736572266, -0.0003509521484375, -9.5367431640625e-06, -0.044684410095214844, -3.814697265625e-06, -0.001598358154296875, -0.0001811981201171875, -0.0007152557373046875, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.0012475227704271674, -3.743171691894531e-05, -0.04223346710205078, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.27127766609191895, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003681182861328125, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.4885568618774414, -4.57763671875e-05, -0.00020420551300048828, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.802162933836136, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -0.8563499450683594, 0.0, -0.011054039001464844, -0.0002841949462890625, -0.3351612091064453, -3.24249267578125e-05, -0.0006923675537109375, -1.9073486328125e-06, -0.045135498046875, -0.0001220703125, -0.053031206130981445, 0.0, -0.2565169334411621, -1.3470649719238281e-05, -0.005794525146484375, -0.04448509216308594, -1.9073486328125e-06, -0.3573427200317383, -1.71661376953125e-05, -0.004168407525867224, -0.05968911200761795, -0.03657042607665062, -3.814697265625e-06, -0.009487152099609375, -0.00392913818359375, 0.0, -0.005645751953125, -0.0001697540283203125, -5.7220458984375e-06, -0.22094058990478516, -1.9073486328125e-06, -0.41779136657714844, -1.9073486328125e-06, -0.004764556884765625, -0.00038826465606689453, -9.5367431640625e-06, -0.0034171342849731445, -5.7220458984375e-06, -8.96453857421875e-05, -0.0001678466796875, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007816314697265625, 0.0, -0.056746482849121094, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.25504016876220703, -9.5367431640625e-06, -0.0001621246337890625, -0.012346267700195312, -8.0108642578125e-05, -0.0011119842529296875, 0.0, -0.031003952026367188, -6.67572021484375e-05, -0.5634609460830688, 0.0, -0.04681587219238281, -0.000652313232421875, -3.24249267578125e-05, 0.0, -0.004604339599609375, -5.7220458984375e-06, -0.0015811920166015625, -0.00023531897750217468, -3.814697265625e-06, -0.012625455856323242, -7.62939453125e-06, -0.00223541259765625, -0.0014581680297851562, -0.01932239532470703, -0.0067234039306640625, -0.0032711029052734375, -0.000736236572265625, -0.015659332275390625, -1.9073486328125e-06, -0.08818435668945312, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001926422119140625, -0.0001010894775390625, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018268823623657227, -0.00012969970703125, -0.0003452301025390625, -0.15492630004882812, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.0013523101806640625, -0.0010992882307618856, -5.841255187988281e-06, -0.004867388401180506, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25971341133117676, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4827756881713867, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010068893432617188, -7.62939453125e-06, -0.9686193466186523, 0.0, -0.0025625228881835938, -0.04038238525390625, -0.0003490447998046875, -9.5367431640625e-05, -0.0012722015380859375, 0.0, -0.00214385986328125, 0.0, -0.0008792877197265625, -0.0027770823799073696, -3.814697265625e-06, -0.002386207925155759, -4.279613494873047e-05, -0.08962523937225342, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.2818033695220947, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.0035305023193359375, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.000492095947265625, -0.0002994537353515625, 0.0, -0.4805002212524414, -4.38690185546875e-05, -0.00019848346710205078, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = player\n", "score": -8.822932652087495, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9144706726074219, 0.0, -0.012354850769042969, -0.000286102294921875, -0.34806346893310547, -3.24249267578125e-05, -0.0006561279296875, -1.9073486328125e-06, -0.045848846435546875, -0.0001201629638671875, -0.05232834815979004, 0.0, -0.25575315952301025, -1.3470649719238281e-05, -0.00377655029296875, -0.04117584228515625, -1.9073486328125e-06, -0.3216361999511719, -1.71661376953125e-05, -0.003711477154865861, -0.06325465440750122, -0.03868579491972923, -3.814697265625e-06, -0.009517669677734375, -0.0039348602294921875, 0.0, -0.005615234375, -0.0001697540283203125, -5.7220458984375e-06, -0.2223663330078125, -1.9073486328125e-06, -0.4185781478881836, -1.9073486328125e-06, -0.004723548889160156, -0.00038444995880126953, -9.5367431640625e-06, -0.003422856330871582, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.0078277587890625, 0.0, -0.05675983428955078, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23567676544189453, -9.5367431640625e-06, -0.0001621246337890625, -0.0126190185546875, -8.392333984375e-05, -0.0011005401611328125, 0.0, -0.030569076538085938, -6.67572021484375e-05, -0.5547596216201782, 0.0, -0.046543121337890625, -0.000640869140625, -3.24249267578125e-05, 0.0, -0.0046443939208984375, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.01269221305847168, -7.62939453125e-06, -0.0022306442260742188, -0.0014543533325195312, -0.01931476593017578, -0.0067138671875, -0.0032634735107421875, -0.0007343292236328125, -0.016203880310058594, -1.9073486328125e-06, -0.093414306640625, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006866455078125, -0.0001926422119140625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.1542797088623047, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011002415558323264, -5.841255187988281e-06, -0.00486953416839242, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2597811222076416, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.9759683609008789, -0.0003528594970703125, -9.5367431640625e-06, -0.044734954833984375, -3.814697265625e-06, -0.0016002655029296875, -0.0001811981201171875, -0.0007171630859375, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.0012475227704271674, -3.743171691894531e-05, -0.042229652404785156, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.2712738513946533, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003662109375, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.9677276611328125]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50, 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.<UNK> and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.849781185668455, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -1.0611062049865723, 0.0, -0.02563762664794922, -0.000885009765625, -0.609400749206543, -7.62939453125e-05, -0.0008563995361328125, -1.9073486328125e-06, -0.013983726501464844, -0.0001277923583984375, -0.09206831455230713, 0.0, -0.23621344566345215, -1.1563301086425781e-05, -0.008559226989746094, -0.11731529235839844, -1.9073486328125e-06, -0.42589282989501953, -1.9073486328125e-05, -0.004241802264004946, -0.052895739674568176, -0.03193151578307152, -5.7220458984375e-06, -0.009357452392578125, -0.003757476806640625, -1.9073486328125e-06, -0.0068874359130859375, -0.000141143798828125, -5.7220458984375e-06, -0.23098087310791016, -1.9073486328125e-06, -0.3909578323364258, -1.9073486328125e-06, -0.005347251892089844, -0.00042831897735595703, -9.5367431640625e-06, -0.003283858299255371, -5.7220458984375e-06, -8.58306884765625e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007984161376953125, 0.0, -0.05688285827636719, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23798370361328125, -7.62939453125e-06, -0.000156402587890625, -0.013316154479980469, -8.0108642578125e-05, -0.001094818115234375, 0.0, -0.030936241149902344, -6.866455078125e-05, -0.558327317237854, 0.0, -0.04648590087890625, -0.000644683837890625, -3.24249267578125e-05, 0.0, -0.00464630126953125, -5.7220458984375e-06, -0.0015821456909179688, -0.0002371071168454364, -3.814697265625e-06, -0.012572050094604492, -7.62939453125e-06, -0.002223968505859375, -0.001453399658203125, -0.01926898956298828, -0.006714820861816406, -0.003269195556640625, -0.0007343292236328125, -0.01832103729248047, -1.9073486328125e-06, -0.08757400512695312, -2.09808349609375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0002280364278703928, -2.1457672119140625e-06, -0.000690460205078125, -0.000186920166015625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.001835465431213379, -0.00012969970703125, -0.000347137451171875, -0.1520519256591797, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005016326904296875, 0.0, -0.0013484954833984375, -0.0010958317434415221, -5.841255187988281e-06, -0.004864766262471676, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25975728034973145, -3.814697265625e-06, -0.000743865966796875, -3.814697265625e-05, -0.0002040863037109375, -0.0005397796630859375, -1.1444091796875e-05, -0.0062103271484375, -3.4332275390625e-05, -4.00543212890625e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.975977897644043, -0.0003509521484375, -9.5367431640625e-06, -0.044712066650390625, -3.814697265625e-06, -0.001598358154296875, -0.0001811981201171875, -0.0007152557373046875, -5.53131103515625e-05, -0.000179290771484375, 0.0, -0.0006923675537109375, 0.0, -0.000701904296875, -0.0007613824564032257, -3.814697265625e-06, -0.0012475227704271674, -3.743171691894531e-05, -0.04223442077636719, 0.0, -7.82012939453125e-05, -4.1961669921875e-05, -3.0517578125e-05, -0.2712700366973877, -3.814697265625e-06, -0.001323699951171875, -4.38690185546875e-05, -0.000202178955078125, -0.0003681182861328125, -2.288818359375e-05, -0.01067352294921875, -4.1961669921875e-05, -0.0001010894775390625, -2.288818359375e-05, -0.0001373291015625, -0.00039958953857421875, -0.0004100799560546875, 0.0, -0.48854637145996094, -4.57763671875e-05, -0.00020420551300048828, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -8.873637000163164, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9144706726074219, 0.0, -0.012354850769042969, -0.000286102294921875, -0.34806346893310547, -3.24249267578125e-05, -0.0006561279296875, -1.9073486328125e-06, -0.045848846435546875, -0.0001201629638671875, -0.05232834815979004, 0.0, -0.25575315952301025, -1.3470649719238281e-05, -0.00377655029296875, -0.04117584228515625, -1.9073486328125e-06, -0.3216361999511719, -1.71661376953125e-05, -0.003711477154865861, -0.06325465440750122, -0.03868579491972923, -3.814697265625e-06, -0.009517669677734375, -0.0039348602294921875, 0.0, -0.005615234375, -0.0001697540283203125, -5.7220458984375e-06, -0.2223663330078125, -1.9073486328125e-06, -0.4185781478881836, -1.9073486328125e-06, -0.004723548889160156, -0.00038444995880126953, -9.5367431640625e-06, -0.003422856330871582, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.0078277587890625, 0.0, -0.05675983428955078, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23567676544189453, -9.5367431640625e-06, -0.0001621246337890625, -0.0126190185546875, -8.392333984375e-05, -0.0011005401611328125, 0.0, -0.030569076538085938, -6.67572021484375e-05, -0.5547596216201782, 0.0, -0.046543121337890625, -0.000640869140625, -3.24249267578125e-05, 0.0, -0.0046443939208984375, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.01269221305847168, -7.62939453125e-06, -0.0022306442260742188, -0.0014543533325195312, -0.01931476593017578, -0.0067138671875, -0.0032634735107421875, -0.0007343292236328125, -0.016203880310058594, -1.9073486328125e-06, -0.093414306640625, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006866455078125, -0.0001926422119140625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.1542797088623047, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011002415558323264, -5.841255187988281e-06, -0.00486953416839242, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2597811222076416, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4828367233276367, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010042190551757812, -7.62939453125e-06, -0.968693733215332, 0.0, -0.0025625228881835938, -0.040386199951171875, -0.0003490447998046875, -9.5367431640625e-05, -0.0012722015380859375, 0.0, -0.00214385986328125, 0.0, -0.0008792877197265625, -0.0027770823799073696, -3.814697265625e-06, -0.002386207925155759, -4.279613494873047e-05, -0.08960044384002686, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.28180527687072754, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.003528594970703125, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.000492095947265625, -0.0002994537353515625, 0.0, -0.48050880432128906, -4.38690185546875e-05, -0.00019848346710205078, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def activate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -9.137629793931175, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -0.8563499450683594, 0.0, -0.011054039001464844, -0.0002841949462890625, -0.3351612091064453, -3.24249267578125e-05, -0.0006923675537109375, -1.9073486328125e-06, -0.045135498046875, -0.0001220703125, -0.053031206130981445, 0.0, -0.2565169334411621, -1.3470649719238281e-05, -0.005794525146484375, -0.04448509216308594, -1.9073486328125e-06, -0.3573427200317383, -1.71661376953125e-05, -0.004168407525867224, -0.05968911200761795, -0.03657042607665062, -3.814697265625e-06, -0.009487152099609375, -0.00392913818359375, 0.0, -0.005645751953125, -0.0001697540283203125, -5.7220458984375e-06, -0.22094058990478516, -1.9073486328125e-06, -0.41779136657714844, -1.9073486328125e-06, -0.004764556884765625, -0.00038826465606689453, -9.5367431640625e-06, -0.0034171342849731445, -5.7220458984375e-06, -8.96453857421875e-05, -0.0001678466796875, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007816314697265625, 0.0, -0.056746482849121094, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.25504016876220703, -9.5367431640625e-06, -0.0001621246337890625, -0.012346267700195312, -8.0108642578125e-05, -0.0011119842529296875, 0.0, -0.031003952026367188, -6.67572021484375e-05, -0.5634609460830688, 0.0, -0.04681587219238281, -0.000652313232421875, -3.24249267578125e-05, 0.0, -0.004604339599609375, -5.7220458984375e-06, -0.0015811920166015625, -0.00023531897750217468, -3.814697265625e-06, -0.012625455856323242, -7.62939453125e-06, -0.00223541259765625, -0.0014581680297851562, -0.01932239532470703, -0.0067234039306640625, -0.0032711029052734375, -0.000736236572265625, -0.015659332275390625, -1.9073486328125e-06, -0.08818435668945312, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001926422119140625, -0.0001010894775390625, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018268823623657227, -0.00012969970703125, -0.0003452301025390625, -0.15492630004882812, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.0013523101806640625, -0.0010992882307618856, -5.841255187988281e-06, -0.004867388401180506, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25971341133117676, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4827756881713867, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010068893432617188, -7.62939453125e-06, -1.3160629272460938, -9.5367431640625e-06, -0.021015167236328125, -0.016292572021484375, -0.0006694793701171875, -7.62939453125e-05, -0.00135040283203125, 0.0, -0.010564804077148438, 0.0, -0.0007190704345703125, -0.001031149411574006, -3.814697265625e-06, -0.0014331217389553785, -4.1484832763671875e-05, -0.06961143016815186, -1.9073486328125e-06, -0.00026702880859375, -3.0517578125e-05, -2.86102294921875e-05, -0.2905466556549072, -1.9073486328125e-06, -0.0007686614990234375, -4.38690185546875e-05, -0.00019073486328125, -0.000331878662109375, -2.09808349609375e-05, -0.0035152435302734375, -3.814697265625e-05, -4.9591064453125e-05, -2.47955322265625e-05, -8.392333984375e-05, -0.0004863739013671875, -0.0002899169921875, 0.0, -0.47951412200927734, -4.38690185546875e-05, -0.00020992755889892578, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def activate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -9.209178246854883, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9144706726074219, 0.0, -0.012354850769042969, -0.000286102294921875, -0.34806346893310547, -3.24249267578125e-05, -0.0006561279296875, -1.9073486328125e-06, -0.045848846435546875, -0.0001201629638671875, -0.05232834815979004, 0.0, -0.25575315952301025, -1.3470649719238281e-05, -0.00377655029296875, -0.04117584228515625, -1.9073486328125e-06, -0.3216361999511719, -1.71661376953125e-05, -0.003711477154865861, -0.06325465440750122, -0.03868579491972923, -3.814697265625e-06, -0.009517669677734375, -0.0039348602294921875, 0.0, -0.005615234375, -0.0001697540283203125, -5.7220458984375e-06, -0.2223663330078125, -1.9073486328125e-06, -0.4185781478881836, -1.9073486328125e-06, -0.004723548889160156, -0.00038444995880126953, -9.5367431640625e-06, -0.003422856330871582, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.0078277587890625, 0.0, -0.05675983428955078, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23567676544189453, -9.5367431640625e-06, -0.0001621246337890625, -0.0126190185546875, -8.392333984375e-05, -0.0011005401611328125, 0.0, -0.030569076538085938, -6.67572021484375e-05, -0.5547596216201782, 0.0, -0.046543121337890625, -0.000640869140625, -3.24249267578125e-05, 0.0, -0.0046443939208984375, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.01269221305847168, -7.62939453125e-06, -0.0022306442260742188, -0.0014543533325195312, -0.01931476593017578, -0.0067138671875, -0.0032634735107421875, -0.0007343292236328125, -0.016203880310058594, -1.9073486328125e-06, -0.093414306640625, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006866455078125, -0.0001926422119140625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.1542797088623047, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011002415558323264, -5.841255187988281e-06, -0.00486953416839242, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2597811222076416, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4828367233276367, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010042190551757812, -7.62939453125e-06, -1.3161897659301758, -9.5367431640625e-06, -0.0210113525390625, -0.016300201416015625, -0.0006694793701171875, -7.62939453125e-05, -0.00135040283203125, 0.0, -0.010564804077148438, 0.0, -0.0007190704345703125, -0.001031149411574006, -3.814697265625e-06, -0.0014331217389553785, -4.1484832763671875e-05, -0.0696038007736206, -1.9073486328125e-06, -0.00026702880859375, -3.0517578125e-05, -2.86102294921875e-05, -0.29055237770080566, -1.9073486328125e-06, -0.0007686614990234375, -4.38690185546875e-05, -0.00019073486328125, -0.000331878662109375, -2.09808349609375e-05, -0.0035152435302734375, -3.814697265625e-05, -4.9591064453125e-05, -2.47955322265625e-05, -8.392333984375e-05, -0.0004863739013671875, -0.0002899169921875, 0.0, -0.4795217514038086, -4.38690185546875e-05, -0.00020992755889892578, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "index", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "index", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, index):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -9.21053757157437, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.9892946481704712, -6.592273712158203e-05, -0.0002155303955078125, -0.0001163482666015625, -0.0001678466796875, -0.047962188720703125, -0.0017185211181640625, -0.0002593994140625, -0.020772933959960938, -0.004281044006347656, -0.001674652099609375, -7.82012939453125e-05, -3.24249267578125e-05, -0.01076352596282959, -2.300739288330078e-05, -0.07231950759887695, -9.417489309271332e-06, -0.0034770965576171875, -2.47955322265625e-05, -0.001216888427734375, -0.000518798828125, 0.0, -0.0001983642578125, -0.004415631294250488, -1.1920928244535389e-07, -0.00016021728515625, -3.24249267578125e-05, 0.0, -0.0008525848388671875, 0.0, -0.02357959747314453, -5.125997995492071e-05, -1.9073486328125e-06, -0.0002579689025878906, -7.62939453125e-06, -0.0001201629638671875, -0.0012111663818359375, -4.00543212890625e-05, -0.0023555755615234375, -0.0001544952392578125, -5.7220458984375e-05, -1.1444091796875e-05, 0.0, -0.050713539123535156, -2.288818359375e-05, -0.9210386276245117, 0.0, -0.01265716552734375, -0.0002880096435546875, -0.36768150329589844, -3.24249267578125e-05, -0.000667572021484375, -3.814697265625e-06, -0.04281044006347656, -0.0001220703125, -0.053717851638793945, 0.0, -0.2617769241333008, -1.3470649719238281e-05, -0.00318145751953125, -0.0369720458984375, -1.9073486328125e-06, -0.3208932876586914, -1.71661376953125e-05, -0.003976466599851847, -0.06671660393476486, -0.03811466321349144, -3.814697265625e-06, -0.0095977783203125, -0.00403594970703125, 0.0, -0.005530357360839844, -0.0001678466796875, -5.7220458984375e-06, -0.22412967681884766, -1.9073486328125e-06, -0.4133462905883789, -1.9073486328125e-06, -0.004763603210449219, -0.00039207935333251953, -9.5367431640625e-06, -0.003384828567504883, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007822036743164062, 0.0, -0.056629180908203125, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.2071695327758789, -9.5367431640625e-06, -0.0001659393310546875, -0.011365890502929688, -8.58306884765625e-05, -0.0011005401611328125, 0.0, -0.030582427978515625, -6.866455078125e-05, -0.5523887872695923, 0.0, -0.046894073486328125, -0.000629425048828125, -3.0517578125e-05, 0.0, -0.00460052490234375, -5.7220458984375e-06, -0.0015859603881835938, -0.00023734553542453796, -3.814697265625e-06, -0.012719869613647461, -7.62939453125e-06, -0.0022211074829101562, -0.0014486312866210938, -0.01932239532470703, -0.006710052490234375, -0.003246307373046875, -0.0007343292236328125, -0.013727188110351562, -1.9073486328125e-06, -0.09528064727783203, -2.09808349609375e-05, -5.53131103515625e-05, -3.24249267578125e-05, -0.0002283942885696888, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001983642578125, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.15427017211914062, -0.000370025634765625, -1.9073486328125e-05, -0.000335693359375, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011026256252080202, -5.841255187988281e-06, -0.004873468074947596, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2596590518951416, -3.814697265625e-06, -0.000743865966796875, -3.814697265625e-05, -0.00020599365234375, -0.000537872314453125, -1.1444091796875e-05, -0.0061931610107421875, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.0001201629638671875, -0.0003681182861328125, -0.0007610321044921875, 0.0, -0.4827156066894531, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010026931762695312, -7.62939453125e-06, -0.9699583053588867, 0.0, -0.0025634765625, -0.04040336608886719, -0.0003490447998046875, -9.5367431640625e-05, -0.0012722015380859375, 0.0, -0.0021419525146484375, 0.0, -0.0008792877197265625, -0.0027770823799073696, -3.814697265625e-06, -0.002386207925155759, -4.279613494873047e-05, -0.0895928144454956, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.28176426887512207, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.00353240966796875, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.0004930496215820312, -0.0002994537353515625, 0.0, -0.48049259185791016, -4.38690185546875e-05, -0.00019848346710205078, 0.0]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "<UNK>", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"_type": "Template64"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 50], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, <UNK>, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = player\n", "score": -9.301912951955948, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.9492096900939941, -3.814697265625e-06, -0.050689697265625, -5.53131103515625e-05, -3.62396240234375e-05, -0.28281962871551514, 0.0, -0.0002460479736328125, -0.0047512054443359375, -0.000217437744140625, -0.12865543365478516, -0.0018901824951171875, -0.000865936279296875, -0.03934669494628906, -0.0019588470458984375, -0.00215911865234375, -8.7738037109375e-05, -3.62396240234375e-05, -0.011142253875732422, -3.4332275390625e-05, -0.14141356945037842, -1.2278503163543064e-05, -0.0035648345947265625, -2.09808349609375e-05, -0.0017795562744140625, -0.000591278076171875, 0.0, -0.00014495849609375, -0.0043555498123168945, -1.1920928244535389e-07, -0.0001926422119140625, -4.1961669921875e-05, 0.0, -0.0010833740234375, 0.0, -0.026175498962402344, -4.923342203255743e-05, -1.9073486328125e-06, -0.00022363662719726562, -7.62939453125e-06, -0.0001049041748046875, -0.0012149810791015625, -4.00543212890625e-05, -0.0022754669189453125, -0.000152587890625, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.05005645751953125, -2.288818359375e-05, -0.8563499450683594, 0.0, -0.011054039001464844, -0.0002841949462890625, -0.3351612091064453, -3.24249267578125e-05, -0.0006923675537109375, -1.9073486328125e-06, -0.045135498046875, -0.0001220703125, -0.053031206130981445, 0.0, -0.2565169334411621, -1.3470649719238281e-05, -0.005794525146484375, -0.04448509216308594, -1.9073486328125e-06, -0.3573427200317383, -1.71661376953125e-05, -0.004168407525867224, -0.05968911200761795, -0.03657042607665062, -3.814697265625e-06, -0.009487152099609375, -0.00392913818359375, 0.0, -0.005645751953125, -0.0001697540283203125, -5.7220458984375e-06, -0.22094058990478516, -1.9073486328125e-06, -0.41779136657714844, -1.9073486328125e-06, -0.004764556884765625, -0.00038826465606689453, -9.5367431640625e-06, -0.0034171342849731445, -5.7220458984375e-06, -8.96453857421875e-05, -0.0001678466796875, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007816314697265625, 0.0, -0.056746482849121094, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.25504016876220703, -9.5367431640625e-06, -0.0001621246337890625, -0.012346267700195312, -8.0108642578125e-05, -0.0011119842529296875, 0.0, -0.031003952026367188, -6.67572021484375e-05, -0.5634609460830688, 0.0, -0.04681587219238281, -0.000652313232421875, -3.24249267578125e-05, 0.0, -0.004604339599609375, -5.7220458984375e-06, -0.0015811920166015625, -0.00023531897750217468, -3.814697265625e-06, -0.012625455856323242, -7.62939453125e-06, -0.00223541259765625, -0.0014581680297851562, -0.01932239532470703, -0.0067234039306640625, -0.0032711029052734375, -0.000736236572265625, -0.015659332275390625, -1.9073486328125e-06, -0.08818435668945312, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006847381591796875, -0.0001926422119140625, -0.0001010894775390625, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018268823623657227, -0.00012969970703125, -0.0003452301025390625, -0.15492630004882812, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.0013523101806640625, -0.0010992882307618856, -5.841255187988281e-06, -0.004867388401180506, -9.775159560376778e-05, -0.004953861236572266, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25971341133117676, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4827756881713867, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010068893432617188, -7.62939453125e-06, -0.9686193466186523, 0.0, -0.0025625228881835938, -0.04038238525390625, -0.0003490447998046875, -9.5367431640625e-05, -0.0012722015380859375, 0.0, -0.00214385986328125, 0.0, -0.0008792877197265625, -0.0027770823799073696, -3.814697265625e-06, -0.002386207925155759, -4.279613494873047e-05, -0.08962523937225342, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.2818033695220947, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.0035305023193359375, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.000492095947265625, -0.0002994537353515625, 0.0, -0.9804925918579102]}, {"model_output": {"hole2": [{"hole2": "MAGE", "hole0": "Vaporize", "hole1": 3, "hole3": "RARE", "_type": "Template15"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "hole1": "SecretCard", "hole3": "_reveal", "hole5": [{"arg": "attacker", "_type": "arg"}], "hole4": "card", "_type": "Template1", "hole6": [{"test": {"op": {"_type": "And"}, "values": [{"hole0": {"id": "card", "_type": "Name"}, "hole1": "<UNK>", "_type": "Template43"}, {"left": {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Template72"}], "_type": "Compare"}, {"value": {"id": "card", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, {"hole0": {"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "hole1": "is_minion", "_type": "Template43"}], "_type": "BoolOp"}, "body": [{"hole2": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "game", "_type": "Attribute"}, {"func": {"id": "len", "_type": "Name"}, "args": [{"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "_type": "Call"}], "hole0": {"hole0": "Vaporize", "_type": "Template46"}, "hole1": "summon", "_type": "Template44"}, {"targets": [{"value": {"id": "card", "_type": "Name"}, "attr": "target", "_type": "Attribute"}], "value": {"slice": {"value": {"operand": {"_type": "Template60"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}, "_type": "Index"}, "value": {"value": {"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Subscript"}, "_type": "Assign"}, {"value": {"hole0": {"hole0": "super", "_type": "Template46"}, "hole1": "reveal", "_type": "Template43"}, "_type": "Expr"}], "_type": "If"}], "hole7": [{"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "bind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "activate", "_type": "FunctionDef"}, {"body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"value": {"_type": "Template68"}, "attr": "_reveal", "_type": "Attribute"}], "hole0": {"value": {"value": {"_type": "Template64"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "hole1": "unbind", "_type": "Template44"}, {"targets": [{"value": {"_type": "Template68"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "args": {"_type": "Template18"}, "name": "deactivate", "_type": "FunctionDef"}], "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.<UNK> and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n", "score": -9.313437892130189, "score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9662561416625977, 0.0, -0.02855682373046875, -0.0008392333984375, -0.6432704925537109, -7.82012939453125e-05, -0.0007953643798828125, -1.9073486328125e-06, -0.01409149169921875, -0.000125885009765625, -0.09231054782867432, 0.0, -0.23682737350463867, -9.655952453613281e-06, -0.0056476593017578125, -0.10770225524902344, -1.9073486328125e-06, -0.38594722747802734, -1.71661376953125e-05, -0.0038762460462749004, -0.056882452219724655, -0.03323900327086449, -5.7220458984375e-06, -0.009305953979492188, -0.0037784576416015625, -1.9073486328125e-06, -0.006840705871582031, -0.000141143798828125, -5.7220458984375e-06, -0.23219871520996094, -1.9073486328125e-06, -0.3911018371582031, -1.9073486328125e-06, -0.0053005218505859375, -0.00042450428009033203, -9.5367431640625e-06, -0.0032895803451538086, -5.7220458984375e-06, -8.58306884765625e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.007968902587890625, 0.0, -0.05686187744140625, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.22357654571533203, -7.62939453125e-06, -0.0001544952392578125, -0.013625144958496094, -8.20159912109375e-05, -0.0010776519775390625, 0.0, -0.030351638793945312, -6.866455078125e-05, -0.5482774972915649, 0.0, -0.04619312286376953, -0.00063323974609375, -3.0517578125e-05, 0.0, -0.004680633544921875, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.012641668319702148, -7.62939453125e-06, -0.00222015380859375, -0.0014486312866210938, -0.019262313842773438, -0.00670623779296875, -0.003261566162109375, -0.0007343292236328125, -0.018909454345703125, -1.9073486328125e-06, -0.0928049087524414, -2.09808349609375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.00022851319226901978, -2.1457672119140625e-06, -0.00069427490234375, -0.0001888275146484375, -9.918212890625e-05, -7.2479248046875e-05, -2.09808349609375e-05, -0.001835465431213379, -0.00012969970703125, -0.000347137451171875, -0.15166091918945312, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005016326904296875, 0.0, -0.0013494491577148438, -0.0010985732078552246, -5.841255187988281e-06, -0.004867031238973141, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.25983643531799316, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.0062084197998046875, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.48290443420410156, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010000228881835938, -7.62939453125e-06, -0.9689645767211914, 0.0, -0.0025606155395507812, -0.04030036926269531, -0.0003490447998046875, -9.5367431640625e-05, -0.00127410888671875, 0.0, -0.002147674560546875, 0.0, -0.0008792877197265625, -0.002778989728540182, -3.814697265625e-06, -0.0023881152737885714, -4.279613494873047e-05, -0.08967673778533936, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.28183674812316895, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.0035247802734375, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.000492095947265625, -0.0002994537353515625, 0.0, -0.48050975799560547, -4.38690185546875e-05, -0.00019848346710205078, 0.0]}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score": -0.025704022652348613, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -0.02086353302001953, 0.0, -0.00079345703125]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "score": -4.779178258187017, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -4.774261474609375, -3.24249267578125e-05, -0.0008373260498046875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "charge", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "score": -6.304893609291753, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -6.300709247589111, 0.0, -0.0001373291015625]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 2, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Buff", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 38, 252, "Buff", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(ChangeAttack(1), SelfSelector())])\n", "score": -6.329552629652312, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -5.473910331726074, -4.57763671875e-05, -0.06534385681152344, -0.0005817413330078125, -0.4947483539581299, -5.7220458984375e-06, -0.0038433074951171875, -0.18787288665771484, -2.288818359375e-05, -0.025595059618353844, -1.9073486328125e-06, -0.0002498626708984375, -7.2479248046875e-05, -0.004159323405474424, -2.2649765014648438e-06, 0.0, -7.43865966796875e-05, -0.06897544860839844]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(2, 1, stealth=True)\n", "score": -6.464765666200833, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -6.438626289367676, 0.0, -7.82012939453125e-05, -0.002948760986328125, -7.82012939453125e-05, -4.8160552978515625e-05, 0.0, -6.174830195959657e-05, 0.0, -0.020908355712890625, 0.0, -0.0003108978271484375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "Started", "hole0": 2, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "Started", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, Started=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -6.767623234229973, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -6.524470329284668, -3.814697265625e-06, -0.046456336975097656, -0.0004558563232421875, -0.13329410552978516, -1.9073486328125e-06, -0.0028285980224609375, -0.0061664581298828125, -0.000202178955078125, -0.021960074082016945, -3.0517578125e-05, -0.0001850128173828125, -6.67572021484375e-05, -0.003045437391847372, -2.384185791015625e-06, 0.0, -0.0002765655517578125, -0.024129867553710938]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 2, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score": -7.4258100824343956, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -7.401725769042969, 0.0, -3.2782554626464844e-05, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -0.0002747774124145508, 0.0, -0.0001430511474609375, -0.0003185272216796875, -1.9073486328125e-05, -1.537799835205078e-05, 0.0, -7.509892020607367e-05, 0.0, -0.02130889892578125, 0.0, -0.000820159912109375]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -7.545173475674233, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -7.2830939292907715, -1.9073486328125e-06, -0.001007080078125, -0.000492095947265625, -0.20652782917022705, -3.814697265625e-06, -0.0028972625732421875, -0.002468109130859375, -0.0001735687255859375, -0.020321086049079895, -2.288818359375e-05, -0.000186920166015625, -7.05718994140625e-05, -0.0043009500950574875, -2.384185791015625e-06, 0.0, -0.0002155303955078125, -0.01934051513671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "buffs", "hole0": 2, "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Aura(ChangeAttack(1), SelfSelector())])\n", "score": -7.612543301346591, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -5.473910331726074, -4.57763671875e-05, -0.06534385681152344, -0.0005817413330078125, -2.0019943714141846, -1.33514404296875e-05, -0.0025177001953125, -0.002590179443359375, -6.4849853515625e-05, -0.03149016946554184, -3.62396240234375e-05, -0.000240325927734375, -8.7738037109375e-05, -0.0034238076768815517, -2.2649765014648438e-06, 0.0, -0.0001354217529296875, -0.026018142700195312]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "stealth", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template75"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 58], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=False)\n", "score": -7.720773335701665, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -0.02086353302001953, 0.0, -7.695862770080566]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 1, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 93, 255, "Self", "Selector", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Stealth(), SelfSelector()))\n", "score": -8.02033730984374, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -6.865501880645752, -0.0002040863037109375, -0.0010280609130859375, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, -0.005825042724609375, -2.384185791015625e-06, -0.0041217803955078125, -0.023305892944335938, -9.918212890625e-05, -0.15121492743492126, -5.841255187988281e-06, -0.7493820190429688, -6.4849853515625e-05, -0.21546566486358643, -1.9073486328125e-06, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "taunt", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, taunt=True)\n", "score": -8.124385472542485, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -8.119974136352539, 0.0, -0.0003643035888671875]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "5", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "5", "<EOS>", 62], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, 5=True)\n", "score": -8.364842053658208, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -8.342826843261719, 0.0, -0.017968177795410156]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -8.368640780748024, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -8.364953994750977, -6.866455078125e-05, -1.2516951755969785e-05, 0.0, -1.3947414117865264e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "ALL", "hole0": "Worgen Infiltrator", "hole1": 1, "_type": "Template14"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 1, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole0": "Stealth", "_type": "Template46"}, {"hole0": "HeroSelector", "hole1": "EnemyPlayer", "_type": "Template31"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Stealth", "<EOS>", 82, 234, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Stealth(), HeroSelector\n            (EnemyPlayer())))\n", "score": -8.98230651704477, "score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -6.865501880645752, -0.0002040863037109375, -0.0010280609130859375, -1.71661376953125e-05, -4.9591064453125e-05, 0.0, -0.005825042724609375, -2.384185791015625e-06, -0.0041217803955078125, -0.023305892944335938, -9.918212890625e-05, -0.15121492743492126, -5.841255187988281e-06, -0.6681919097900391, -0.0001468658447265625, -0.7615329027175903, -9.655875328462571e-05, -1.1920928244535389e-07, -0.4440644085407257, -0.05278782173991203, -6.306171417236328e-05]}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -1.9791402565548353, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.550582766532898, 0.0, -0.10539969056844711, -2.801397567964159e-05, -0.041425321251153946, -5.7220458984375e-06, 0.0, -0.11967277526855469, -1.9073486328125e-06, -2.09808349609375e-05, -0.0016384124755859375, -5.14984130859375e-05, -0.0002460479736328125, -1.9073486328125e-06, -0.009853720664978027, -0.000148773193359375, -3.814697265625e-06, -0.013613104820251465, 0.0, -7.62939453125e-06, 0.0, -6.29425048828125e-05, -5.91278076171875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -5.960462772236497e-07, -0.0006772279739379883, 0.0]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template61"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 104, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -2.4505559143296978, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.6126718521118164, -6.318092346191406e-06, -2.1219253540039062e-05, -5.125998541188892e-06, 0.0, -0.0001922233495861292, 0.0, -0.22669708728790283, 0.0, -0.05484171584248543, -7.987022399902344e-06, -0.0001049041748046875, -0.5104236602783203, -0.005715012550354004, -5.125969255459495e-05, 0.0, -0.0004749298095703125, -1.9073486328125e-06, 0.0, -0.0003032684326171875, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -0.0007660388946533203, -4.5299530029296875e-06, -1.9073486328125e-06, -5.340576171875e-05, -1.71661376953125e-05, -0.0017528533935546875, -7.62939453125e-06, -0.011189460754394531, -3.814697265625e-06, -0.0015374422073364258, -0.00048470497131347656, -3.814697265625e-06, -0.001753091812133789, 0.0, -1.728534698486328e-05, 0.0, -4.57763671875e-05, -5.91278076171875e-05, -8.0108642578125e-05, -1.9073486328125e-06, -3.576278118089249e-07, -0.0002652406692504883, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -2.9787528980356157, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.9695776700973511, -3.814697265625e-06, -0.6471881866455078, -7.986718264874071e-05, -0.023363839834928513, -9.5367431640625e-06, 0.0, -0.1784830093383789, -1.9073486328125e-06, -1.71661376953125e-05, -0.0017070770263671875, -4.76837158203125e-05, -0.000240325927734375, -1.9073486328125e-06, -0.009518980979919434, -0.0001850128173828125, -5.7220458984375e-06, -0.011890769004821777, 0.0, -7.62939453125e-06, 0.0, -6.103515625e-05, -5.7220458984375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -5.960462772236497e-07, -0.0006656646728515625, 0.0]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"_type": "Template60"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -3.9025466374138773, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.6126718521118164, -6.318092346191406e-06, -2.1219253540039062e-05, -5.125998541188892e-06, 0.0, -0.0001922233495861292, 0.0, -0.22669708728790283, 0.0, -0.05484171584248543, -7.987022399902344e-06, -0.0001049041748046875, -1.9661312103271484, -0.0005398980574682355, -8.821474693831988e-06, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -0.0004444122314453125, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.0007826089859008789, -4.5299530029296875e-06, -1.9073486328125e-06, -6.67572021484375e-05, -2.09808349609375e-05, -0.0021572113037109375, -7.62939453125e-06, -0.012801170349121094, -1.9073486328125e-06, -0.0015050172805786133, -0.0006277561187744141, -3.814697265625e-06, -0.0009521245956420898, 0.0, -1.537799835205078e-05, 0.0, -3.24249267578125e-05, -4.38690185546875e-05, -0.000102996826171875, -1.9073486328125e-06, -4.768370445162873e-07, -0.0002747774124145508, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "minion_type", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(minion_type(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.06901671108573, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.9695776700973511, -3.814697265625e-06, -1.772688865661621, 0.0, -0.06997869163751602, -2.288818359375e-05, 0.0, -0.09404373168945312, -1.9073486328125e-06, -1.1444091796875e-05, -0.0024394989013671875, -4.76837158203125e-05, -0.0002307891845703125, -1.9073486328125e-06, -0.011545538902282715, -0.0002040863037109375, -5.7220458984375e-06, -0.011753439903259277, 0.0, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -6.103515625e-05, -2.86102294921875e-05, -1.9073486328125e-06, -5.960462772236497e-07, -0.0006885528564453125, 0.0]}, {"model_output": {"hole2": [{"hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "hole2": "COMMON", "hole1": 5, "hole3": "Give", "hole5": "SelfSelector", "hole4": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 1, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template6", "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 278, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.277403671373918, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.3600926399230957, -4.768367489305092e-06, -3.5762786865234375e-05, -3.576278118089249e-07, 0.0, -0.0002666878863237798, 0.0, -0.07618486881256104, -3.814697265625e-06, -0.29271814227104187, -9.775161743164062e-06, -1.1444091796875e-05, -1.1406784057617188, -7.82012939453125e-05, -0.001995086669921875, -0.0030117034912109375, -1.1444091796875e-05, -5.14984130859375e-05, 0.0, -0.0001263608573935926, -0.09218430519104004, 0.0, -0.0010036203311756253, -3.814697265625e-06, -0.0233612060546875, -0.00037384033203125, -0.0064067840576171875, -3.814697265625e-06, -0.00027298927307128906, -0.0052623748779296875, -3.814697265625e-06, -0.011277674697339535, -5.7220458984375e-05, -3.24249267578125e-05, -0.0006198883056640625, -3.814697265625e-06, 0.0, -0.00701141357421875, -0.0011234283447265625, -0.09357833862304688, -1.9073486328125e-06, -9.5367431640625e-06, -0.012190818786621094, -0.0014176367549225688, 0.0, -0.000568389892578125, -0.0030670166015625, -0.05045127868652344, -0.0003638267517089844, -3.814697265625e-06, -0.000274658203125, -1.71661376953125e-05, -0.004080772399902344, -0.0023746490478515625, 0.0, -0.0007610321044921875, -1.33514404296875e-05, -0.0004119873046875, -0.001102447509765625, -1.9073486328125e-05, -0.0001926422119140625, -0.0005397796630859375, -2.09808349609375e-05, -1.71661376953125e-05, -0.0008374452590942383, -0.001356482389383018, -1.6689286894688848e-06, -6.866455078125e-05, -0.0011119842529296875, -0.000209808349609375, -0.00046539306640625, -7.62939453125e-06, -0.023889541625976562, 0.0, -0.028044700622558594, -5.7220458984375e-06, -0.0002460479736328125, -3.814697265625e-06, -1.9073486328125e-06, -0.0022126436233520508, 0.0, -0.0014171600341796875, -0.0001773834228515625, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.0004520416259765625, -0.0001373291015625, -2.288818359375e-05, -3.814697265625e-06, -8.344646857949556e-07, -0.00011074542999267578, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Damage", "hole5": "MinionSelector", "hole4": [{"_type": "Template63"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(4),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.405731195085309, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.6126718521118164, -6.318092346191406e-06, -2.1219253540039062e-05, -5.125998541188892e-06, 0.0, -0.0001922233495861292, 0.0, -0.22669708728790283, 0.0, -0.05484171584248543, -7.987022399902344e-06, -0.0001049041748046875, -2.029661178588867, -0.43861520290374756, -0.0012093782424926758, 0.0, -0.0011425018310546875, -3.814697265625e-06, 0.0, -0.0008373260498046875, 0.0, -0.0002040863037109375, -7.62939453125e-06, -0.0010931490687653422, -6.914137884450611e-06, -1.9073486328125e-06, -3.24249267578125e-05, -3.0517578125e-05, -0.0018177032470703125, -9.5367431640625e-06, -0.008701324462890625, -3.814697265625e-06, -0.0020602941513061523, -0.0004731416702270508, -5.7220458984375e-06, -0.0039484500885009766, 0.0, -1.919269561767578e-05, 0.0, -6.866455078125e-05, -0.0001010894775390625, -6.67572021484375e-05, -1.9073486328125e-06, -3.576278118089249e-07, -0.00023865699768066406, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Damage", "hole5": "CharacterSelector", "hole4": [{"n": 5, "_type": "Num"}], "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Damage", "<EOS>", 320, 75, 190, "5", "<EOS>", "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(5),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.5083629726916, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.6126718521118164, -6.318092346191406e-06, -2.1219253540039062e-05, -5.125998541188892e-06, 0.0, -0.0001922233495861292, 0.0, -0.22669708728790283, 0.0, -0.05484171584248543, -7.987022399902344e-06, -0.0001049041748046875, -2.3573551177978516, -8.7738037109375e-05, -0.19353649020195007, -4.291534423828125e-06, -0.01829087734222412, -0.00021481511066667736, 0.0, -0.0005321502685546875, -1.9073486328125e-06, 0.0, -0.000370025634765625, 0.0, -0.0001583099365234375, -7.62939453125e-06, -0.000743865966796875, -7.5101784204889555e-06, -1.9073486328125e-06, -3.4332275390625e-05, -2.09808349609375e-05, -0.00118255615234375, -7.62939453125e-06, -0.012808799743652344, -5.7220458984375e-06, -0.002913236618041992, -0.00042748451232910156, -3.814697265625e-06, -0.0037653446197509766, 0.0, -1.919269561767578e-05, 0.0, -9.1552734375e-05, -4.00543212890625e-05, -4.57763671875e-05, -1.9073486328125e-06, -4.768370445162873e-07, -0.0003129243850708008, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -4.760517452866843, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.550582766532898, 0.0, -0.10539969056844711, -2.801397567964159e-05, -0.041425321251153946, -5.7220458984375e-06, 0.0, -2.1911849975585938, -1.9073486328125e-06, 0.0, -0.7190237045288086, -5.7220458984375e-06, -0.0001430511474609375, 0.0, -0.0009618997573852539, -1.0371208190917969e-05, -1.9073486328125e-06, -3.0517578125e-05, -8.96453857421875e-05, -0.0012760162353515625, -9.5367431640625e-06, -0.005687713623046875, -5.7220458984375e-06, -0.002244114875793457, -0.0004998445510864258, -9.5367431640625e-06, -0.005829215049743652, 0.0, -1.728534698486328e-05, 0.0, -6.67572021484375e-05, -3.0517578125e-05, -3.814697265625e-05, -1.9073486328125e-06, -4.768370445162873e-07, -0.0002976655960083008, 0.0]}, {"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole3": "Bounce", "hole5": "MinionSelector", "_type": "Template6", "hole7": [{"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}, {"arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template46"}, "_type": "keyword"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.03723380437588, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.550582766532898, 0.0, -0.10539969056844711, -2.801397567964159e-05, -0.041425321251153946, -5.7220458984375e-06, 0.0, -2.1911849975585938, -1.9073486328125e-06, 0.0, -0.6727285385131836, -3.814697265625e-06, -0.00030517578125, -1.9073486328125e-06, -0.005029916763305664, -0.000698089599609375, -5.7220458984375e-06, -2.47955322265625e-05, -0.000125885009765625, -0.31897926330566406, -1.9073486328125e-06, -0.0034809112548828125, -7.62939453125e-06, -0.002275705337524414, -0.0014744997024536133, -5.7220458984375e-06, -0.007330536842346191, 0.0, -1.71661376953125e-05, 0.0, -8.20159912109375e-05, -3.62396240234375e-05, -4.38690185546875e-05, -1.9073486328125e-06, -5.960462772236497e-07, -0.0003339052200317383, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole6": [{"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "damageTarget", "_type": "Template46"}, {"func": {"id": "Is<UNK>", "_type": "Name"}, "args": [{"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "UserPicker", "_type": "Template46"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "damage", "Target", "<EOS>", 68, 163, 25, 186, "Is", "<UNK>", "<EOS>", 320, 65, 156, 43, "LEGENDARY", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 93, 255, "User", "Picker", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(And(damageTarget(), Is<UNK>(CARD_RARITY.\n            LEGENDARY)), BothPlayer(), UserPicker()), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.051361273168759, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.1449804306030273, -0.0001536559429951012, -1.7285339708905667e-05, -1.1920928244535389e-07, 0.0, -6.69015571475029e-05, -2.2649765014648438e-06, -0.01008296012878418, 0.0, -0.0485900342464447, -1.311301275563892e-06, -0.0028813183307647705, -0.00013375282287597656, 0.0, -0.007639884948730469, -0.001300811767578125, -0.00116729736328125, -2.47955322265625e-05, -1.33514404296875e-05, -0.2802150249481201, -0.00012493015674408525, -0.0004062652587890625, -0.0024566650390625, -3.814697265625e-05, -0.08345361053943634, -1.3116698265075684, -7.62939453125e-05, -0.07678604125976562, -0.0012054443359375, -0.005011558532714844, -3.814697265625e-06, -0.010920524597167969, -0.1091080904006958, -4.6491513785440475e-06, -0.0004291534423828125, -0.00330352783203125, -0.001277923583984375, -0.009540557861328125, -0.004045724868774414, -1.52587890625e-05, -4.38690185546875e-05, -3.814697265625e-06, -0.00019860267639160156, -3.552380439941771e-05, -1.9073486328125e-06, -0.009035110473632812, -0.0001049041748046875, -0.5791127681732178, -0.000240325927734375, -5.7220458984375e-06, -1.71661376953125e-05, -0.004978179931640625, -0.0031223297119140625, -1.9073486328125e-06, -3.814697265625e-06, -0.014949798583984375, -0.000555872917175293, -1.9073486328125e-06, -6.103515625e-05, -0.006554603576660156, -0.21969223022460938, -0.00022518634796142578, -5.7220458984375e-06, -0.0003490447998046875, -1.52587890625e-05, -0.007664680480957031, -0.00262451171875, 0.0, -0.0004730224609375, -9.5367431640625e-06, -0.0003528594970703125, -0.0010242462158203125, -1.52587890625e-05, -0.0001277923583984375, -0.000545501708984375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007848739624023438, -0.0013192890910431743, -1.9073468138230965e-06, -6.103515625e-05, -0.0009822845458984375, -0.0002155303955078125, -0.00054168701171875, -7.62939453125e-06, -0.02425861358642578, 0.0, -0.02774333953857422, -5.7220458984375e-06, -0.000362396240234375, -3.814697265625e-06, -1.9073486328125e-06, -0.0019246339797973633, 0.0, -0.0014734268188476562, -0.000156402587890625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -0.00096893310546875, -0.00022125244140625, -2.288818359375e-05, -3.814697265625e-06, -8.344646857949556e-07, -0.00010704994201660156, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole6": [{"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "damageTarget", "_type": "Template46"}, {"func": {"id": "Is<UNK>", "_type": "Name"}, "args": [{"value": {"_type": "Template56"}, "attr": "LEGENDARY", "_type": "Attribute"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "damage", "Target", "<EOS>", 68, 163, 25, 186, "Is", "<UNK>", "<EOS>", 320, 65, 156, 43, "LEGENDARY", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(And(damageTarget(), Is<UNK>(CARD_RARITY.\n            LEGENDARY)), BothPlayer(), RandomPicker()), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.320004413183078, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.1449804306030273, -0.0001536559429951012, -1.7285339708905667e-05, -1.1920928244535389e-07, 0.0, -6.69015571475029e-05, -2.2649765014648438e-06, -0.01008296012878418, 0.0, -0.0485900342464447, -1.311301275563892e-06, -0.0028813183307647705, -0.00013375282287597656, 0.0, -0.007639884948730469, -0.001300811767578125, -0.00116729736328125, -2.47955322265625e-05, -1.33514404296875e-05, -0.2802150249481201, -0.00012493015674408525, -0.0004062652587890625, -0.0024566650390625, -3.814697265625e-05, -0.08345361053943634, -1.3116698265075684, -7.62939453125e-05, -0.07678604125976562, -0.0012054443359375, -0.005011558532714844, -3.814697265625e-06, -0.010920524597167969, -0.1091080904006958, -4.6491513785440475e-06, -0.0004291534423828125, -0.00330352783203125, -0.001277923583984375, -0.009540557861328125, -0.004045724868774414, -1.52587890625e-05, -4.38690185546875e-05, -3.814697265625e-06, -0.00019860267639160156, -3.552380439941771e-05, -1.9073486328125e-06, -0.009035110473632812, -0.0001049041748046875, -0.8324019908905029, -5.4716285376343876e-05, 0.0, -3.24249267578125e-05, -0.012900352478027344, -0.006709098815917969, -7.62939453125e-06, -5.7220458984375e-06, -0.028845787048339844, -0.0008329153060913086, 0.0, -4.38690185546875e-05, -0.007424354553222656, -0.20949077606201172, -0.00020611286163330078, -5.7220458984375e-06, -0.000324249267578125, -1.52587890625e-05, -0.00742340087890625, -0.0025482177734375, 0.0, -0.0004482269287109375, -9.5367431640625e-06, -0.0003604888916015625, -0.0010433197021484375, -1.71661376953125e-05, -0.0001277923583984375, -0.000553131103515625, -1.9073486328125e-05, -1.52587890625e-05, -0.0007781982421875, -0.0013269184855744243, -1.9073468138230965e-06, -6.103515625e-05, -0.0009822845458984375, -0.0002155303955078125, -0.0005321502685546875, -7.62939453125e-06, -0.02390289306640625, 0.0, -0.027693748474121094, -5.7220458984375e-06, -0.0003490447998046875, -3.814697265625e-06, -1.9073486328125e-06, -0.0018330812454223633, 0.0, -0.0015392303466796875, -0.0001583099365234375, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -0.000949859619140625, -0.000232696533203125, -2.288818359375e-05, -3.814697265625e-06, -8.344646857949556e-07, -0.00010693073272705078, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole6": [{"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "damage", "_type": "Template46"}, {"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "damage", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(And(damage(), ActionTag(Give(ChangeAttack(2)),\n            SelfSelector())), EnemyPlayer(), RandomPicker()), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.418020259357995, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.1449804306030273, -0.0001536559429951012, -1.7285339708905667e-05, -1.1920928244535389e-07, 0.0, -6.69015571475029e-05, -2.2649765014648438e-06, -0.01008296012878418, 0.0, -0.0485900342464447, -1.311301275563892e-06, -0.0028813183307647705, -0.00013375282287597656, 0.0, -0.007639884948730469, -0.001300811767578125, -0.00116729736328125, -2.47955322265625e-05, -1.33514404296875e-05, -0.2802150249481201, -0.00012493015674408525, -0.0004062652587890625, -0.0024566650390625, -3.814697265625e-05, -0.08345361053943634, -0.3731054663658142, -0.6783628463745117, -0.043590545654296875, -0.08381450176239014, 0.0, -1.9073486328125e-06, -0.3224782943725586, -0.0020513534545898438, -0.1809920072555542, -0.001077890396118164, -0.0003412961959838867, 0.0, 0.0, -0.02705860137939453, -7.05718994140625e-05, -0.013678312301635742, -2.622604142743512e-06, -1.9073486328125e-06, -0.04343223571777344, -1.33514404296875e-05, -0.000521540641784668, -3.3855438232421875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.5582189559936523, -0.017316818237304688, -5.7220458984375e-06, -5.7220458984375e-06, -0.02746105194091797, -0.0020831823348999023, -1.9073486328125e-06, -5.53131103515625e-05, -0.007931709289550781, -0.3531646728515625, -0.00017750263214111328, -7.62939453125e-06, -0.0003223419189453125, -1.52587890625e-05, -0.008599281311035156, -0.002674102783203125, 0.0, -0.000492095947265625, -1.1444091796875e-05, -0.000347137451171875, -0.0010776519775390625, -1.71661376953125e-05, -0.00012969970703125, -0.0005435943603515625, -1.71661376953125e-05, -1.52587890625e-05, -0.0007668733596801758, -0.0013326405314728618, -1.9073468138230965e-06, -6.29425048828125e-05, -0.000988006591796875, -0.0002155303955078125, -0.000537872314453125, -7.62939453125e-06, -0.02495288848876953, 0.0, -0.027990341186523438, -5.7220458984375e-06, -0.0003757476806640625, -3.814697265625e-06, -3.814697265625e-06, -0.0018979310989379883, 0.0, -0.0014858245849609375, -0.0001544952392578125, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -0.000949859619140625, -0.0002155303955078125, -2.288818359375e-05, -3.814697265625e-06, -9.536738616588991e-07, -0.00011074542999267578, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"_type": "Template62_expr_seq"}], "_type": "Template6", "hole6": [{"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "damage", "_type": "Template46"}, {"hole0": "Give", "hole1": [{"hole0": 2, "_type": "Template38"}], "hole3": "SelfSelector", "_type": "Template23"}], "_type": "Call"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "damage", "<EOS>", 79, 223, "Give", "<EOS>", 320, 86, 244, "2", "<EOS>", "Self", "Selector", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 105, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(And(damage(), ActionTag(Give(ChangeAttack(2)),\n            SelfSelector())), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -5.5500040164929985, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.1449804306030273, -0.0001536559429951012, -1.7285339708905667e-05, -1.1920928244535389e-07, 0.0, -6.69015571475029e-05, -2.2649765014648438e-06, -0.01008296012878418, 0.0, -0.0485900342464447, -1.311301275563892e-06, -0.0028813183307647705, -0.00013375282287597656, 0.0, -0.007639884948730469, -0.001300811767578125, -0.00116729736328125, -2.47955322265625e-05, -1.33514404296875e-05, -0.2802150249481201, -0.00012493015674408525, -0.0004062652587890625, -0.0024566650390625, -3.814697265625e-05, -0.08345361053943634, -0.3731054663658142, -0.6783628463745117, -0.043590545654296875, -0.08381450176239014, 0.0, -1.9073486328125e-06, -0.3224782943725586, -0.0020513534545898438, -0.1809920072555542, -0.001077890396118164, -0.0003412961959838867, 0.0, 0.0, -0.02705860137939453, -7.05718994140625e-05, -0.013678312301635742, -2.622604142743512e-06, -1.9073486328125e-06, -0.04343223571777344, -1.33514404296875e-05, -0.000521540641784668, -3.3855438232421875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.174459457397461, -4.9591064453125e-05, 0.0, -1.5139577953959815e-05, 0.0, -4.38690185546875e-05, -3.62396240234375e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.311301275563892e-06, -0.0001659393310546875, 0.0]}, {"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 5, "hole3": "Kill", "hole5": "MinionSelector", "hole8": [{"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Template6", "hole6": [{"func": {"id": "And", "_type": "Name"}, "args": [{"hole0": "damage", "_type": "Template46"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}, {"hole0": "RandomPicker", "_type": "Template46"}], "hole0": "Blackwing Corruptor"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 5, "hole1": 4, "_type": "Template32"}], "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 275, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "LEGENDARY", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 322, 68, 163, 25, 186, "And", "<EOS>", 321, 93, 255, "damage", "<EOS>", 68, 162, 57, 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", 320, 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(),\n            MinionSelector(And(damage(), MinionSelector(condition=IsType(\n            MINION_TYPE.DRAGON))), BothPlayer(), RandomPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score": -6.237247357831784, "score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -2.1449804306030273, -0.0001536559429951012, -1.7285339708905667e-05, -1.1920928244535389e-07, 0.0, -6.69015571475029e-05, -2.2649765014648438e-06, -0.01008296012878418, 0.0, -0.0485900342464447, -1.311301275563892e-06, -0.0028813183307647705, -0.00013375282287597656, 0.0, -0.007639884948730469, -0.001300811767578125, -0.00116729736328125, -2.47955322265625e-05, -1.33514404296875e-05, -0.2802150249481201, -0.00012493015674408525, -0.0004062652587890625, -0.0024566650390625, -3.814697265625e-05, -0.08345361053943634, -0.3731054663658142, -1.3215742111206055, -0.024816513061523438, -0.19096755981445312, -0.06032562255859375, -1.71661376953125e-05, -0.000141143798828125, -0.695207953453064, -1.1444091796875e-05, -0.27519893646240234, -0.0005664825439453125, -0.0002536773681640625, -1.52587890625e-05, -0.004746198654174805, -0.0007165666902437806, -7.152555099310121e-07, -6.103515625e-05, -0.0012912750244140625, -0.000152587890625, -0.00107574462890625, -1.33514404296875e-05, -0.023649215698242188, 0.0, -0.010988235473632812, -3.814697265625e-06, -0.0006389617919921875, -1.9073486328125e-06, -0.03577542304992676, -5.483620952873025e-06, -1.9073486328125e-06, -0.0018825531005859375, -5.14984130859375e-05, -0.15799713134765625, -5.340517236618325e-05, 0.0, -7.2479248046875e-05, -0.007418632507324219, -0.0054874420166015625, -9.5367431640625e-06, -3.814697265625e-06, -0.023496627807617188, -0.001111149787902832, 0.0, -5.7220458984375e-05, -0.007171630859375, -0.32938194274902344, -0.00021564960479736328, -7.62939453125e-06, -0.00032806396484375, -1.52587890625e-05, -0.00952911376953125, -0.002628326416015625, 0.0, -0.0004177093505859375, -9.5367431640625e-06, -0.0003337860107421875, -0.0010528564453125, -1.52587890625e-05, -0.0001277923583984375, -0.0005340576171875, -1.9073486328125e-05, -1.52587890625e-05, -0.0007886886596679688, -0.0013306139735504985, -1.9073468138230965e-06, -6.103515625e-05, -0.00098419189453125, -0.000213623046875, -0.000560760498046875, -7.62939453125e-06, -0.024695396423339844, 0.0, -0.027510643005371094, -5.7220458984375e-06, -0.0003376007080078125, -3.814697265625e-06, -1.9073486328125e-06, -0.0017663240432739258, 0.0, -0.0015506744384765625, -0.000156402587890625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -0.001491546630859375, -0.0002727508544921875, -2.288818359375e-05, -3.814697265625e-06, -8.344646857949556e-07, -0.00010502338409423828, -1.9073486328125e-06]}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "15", "hole1": [{"n": 6, "_type": "Num"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -1.162718326480551, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -0.42133235931396484, -0.0002651214599609375, -0.0015861818101257086, -0.00022995455947238952, -0.020703673362731934, -9.179114385915454e-06, -1.1920928244535389e-07, -0.001438140869140625, -5.340576171875e-05, -0.00010049229604192078, -0.00010966674017254263, -5.2014365792274475e-06, -0.0002234936982858926, -0.0001392364501953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeHealth", "hole1": [{"hole0": "Count", "hole1": "CardSelector", "_type": "Template31"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Health", "<EOS>", 320, 82, 234, "Count", "<EOS>", "Card", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -2.9526469340258927, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -1.709488868713379, -0.011315345764160156, -0.00730133056640625, -0.7470006942749023, -0.0009098052978515625, -0.0006399138947017491, -0.05177545174956322, -1.9073486328125e-06, -4.1961669921875e-05, -0.016017913818359375, -0.000102996826171875, -0.0007661564159207046, -0.0002834796905517578, -0.000475883309263736, -0.00011443928087828681, 0.0, -6.806848250562325e-05, -7.033347174001392e-06, 0.0, -0.0004520416259765625, -4.00543212890625e-05, -0.00017332278366666287, -9.059865078597795e-06, -1.3026612577959895e-05, -1.5735555280116387e-05, -0.0003719329833984375]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "15", "hole1": [{"_type": "Template67"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 109, "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -2.977391538478173, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -2.223414421081543, -0.034810870885849, -4.1246410546591505e-05, 0.0, -0.001834869384765625, -0.0001964569091796875, -0.00012564304051920772, -7.104634278221056e-05, -7.489812560379505e-06, -0.00013851237599737942, -0.0002288818359375]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "15", "hole1": [{"n": 6, "_type": "Num"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(15(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.1179919166185, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -1.844166874885559, 0.0, -0.0002557039260864258, -1.9073486328125e-06, -0.0054931640625, -0.1770639419555664, -0.4173753559589386, -0.003736774204298854, -0.013957023620605469, -0.5191488265991211, -0.0002346038818359375, -0.001850778004154563, -0.00025963771622627974, -0.028574705123901367, -1.251697449333733e-05, -1.1920928244535389e-07, -0.0020008087158203125, -0.0001049041748046875, -9.56041767494753e-05, -0.00012957234866917133, -6.633636076003313e-06, -0.00023553158098366112, -0.0001430511474609375]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "15", "hole1": [{"_type": "Template61"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 104, "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -3.5248752008434323, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -2.801337242126465, -0.004656062461435795, -0.0002000326057896018, -1.1920928244535389e-07, -0.0015621185302734375, -0.0001049041748046875, -0.0001331525854766369, -7.486063259420916e-05, -6.745889550074935e-06, -0.00017677275172900409, -0.0001010894775390625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "has", "hole1": [{"n": 6, "_type": "Num"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "has", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(has(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.135433763892813, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -3.2676708698272705, -0.008293386548757553, -0.008012771606445312, -0.42133235931396484, -0.0002651214599609375, -0.0015861818101257086, -0.00022995455947238952, -0.020703673362731934, -9.179114385915454e-06, -1.1920928244535389e-07, -0.001438140869140625, -5.340576171875e-05, -0.00010049229604192078, -0.00010966674017254263, -5.2014365792274475e-06, -0.0002234936982858926, -0.0001392364501953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": "ChangeHealth", "hole1": [{"hole0": "Count", "hole1": "CardSelector", "_type": "Template31"}], "_type": "Template30"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 81, 233, "Change", "Health", "<EOS>", 320, 82, 234, "Count", "<EOS>", "Card", "Selector", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.341038307714939, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -1.844166874885559, 0.0, -0.0002557039260864258, -1.9073486328125e-06, -0.0054931640625, -0.1770639419555664, -1.3001168966293335, -0.012340188026428223, -0.01735210418701172, -0.7838401794433594, -0.001064300537109375, -0.0004570473975036293, -0.07230078428983688, -1.9073486328125e-06, -3.4332275390625e-05, -0.020460128784179688, -0.0001010894775390625, -0.000787614262662828, -0.00028252601623535156, -0.0005019901436753571, -0.00011253214324824512, 0.0, -6.639953062403947e-05, -9.059905096364673e-06, 0.0, -0.0004940032958984375, -3.814697265625e-05, -0.00016557487833779305, -1.0132738680113107e-05, -1.159636303782463e-05, -1.5258723578881472e-05, -0.0003490447998046875]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "15", "hole1": [{"_type": "Template67"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "BEAST", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 109, "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(15(5), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.415276833895966, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -1.844166874885559, 0.0, -0.0002557039260864258, -1.9073486328125e-06, -0.0054931640625, -0.1770639419555664, -0.4173753559589386, -0.003736774204298854, -0.013957023620605469, -1.8122024536132812, -0.03544720262289047, -4.649161928682588e-05, -1.1920928244535389e-07, -0.001689910888671875, -0.00022125244140625, -0.00011014674964826554, -6.735110946465284e-05, -8.324801456183195e-06, -0.00011348143743816763, -0.00017547607421875]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"hole0": 1, "_type": "Template40"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(ChangeHealth(1)), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.426700853119314, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -1.709488868713379, -0.011315345764160156, -0.00730133056640625, -1.760462760925293, -0.018013954162597656, -0.509693443775177, -2.0265579223632812e-06, -0.0030670147389173508, -6.484889308921993e-05, 0.0, -0.0010986328125, -3.814697265625e-05, -7.29560706531629e-05, -0.00011002412065863609, -9.582872735336423e-06, -0.00020931039762217551, -0.000492095947265625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "HeroSelector", "hole0": "+3/+3", "hole1": [{"n": 6, "_type": "Num"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "+3/+3", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(+3/+3(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.494824022681875, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -3.627061128616333, -0.008293386548757553, -0.008012771606445312, -0.42133235931396484, -0.0002651214599609375, -0.0015861818101257086, -0.00022995455947238952, -0.020703673362731934, -9.179114385915454e-06, -1.1920928244535389e-07, -0.001438140869140625, -5.340576171875e-05, -0.00010049229604192078, -0.00010966674017254263, -5.2014365792274475e-06, -0.0002234936982858926, -0.0001392364501953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "15", "hole1": [{"hole0": "BattleAxe", "_type": "Template46"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 93, 255, "Battle", "Axe", "<EOS>", "Player", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15(BattleAxe()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.62335858871171, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -3.3503236770629883, -6.103515625e-05, -0.4308788478374481, -0.1172773689031601, -1.9073486328125e-06, -0.00662504555657506, -5.7220458984375e-06, 0.0, -0.00031280517578125, -1.1444091796875e-05, -0.0010275181848555803, -3.576278118089249e-07, -1.8935243133455515e-05, -2.479527029208839e-05, -0.00026702880859375]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.634424133146801, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -1.709488868713379, -0.011315345764160156, -0.00730133056640625, -1.5970735549926758, -5.7220458984375e-05, -0.0040416717529296875, -0.015471458435058594, -0.000179290771484375, -0.00012040138244628906, -3.814697265625e-06, -7.784308400005102e-05, -0.01339578628540039, 0.0, -0.7918217182159424, -3.0517578125e-05, -0.018281936645507812, -0.00222015380859375, -0.0002689361572265625, -1.33514404296875e-05, -0.00042724609375, -0.004085063934326172, -3.814697265625e-06, -0.04927182197570801, -0.0016641616821289062, -0.000919342041015625, -2.6345251171733253e-05, -0.0006281137466430664, -1.1920928244535389e-07, -0.0003299713134765625, -2.6702880859375e-05, -0.00022637133952230215, -9.524404595140368e-05, -5.554279778152704e-05, -9.369571489514783e-05, -0.0001468658447265625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "PlayerSelector", "hole0": "AddCard", "hole1": [{"hole0": "15", "_type": "Template46"}, {"_type": "Template59"}], "hole3": [{"hole0": "EnemyPlayer", "_type": "Template46"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 218, "Add", "Card", "<EOS>", 321, 93, 255, "15", "<EOS>", 102, "Player", "Selector", "<EOS>", 320, 93, 255, "Enemy", "Player", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(AddCard(15(), 2), PlayerSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -4.942871673417017, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -2.997990608215332, -0.9394673109054565, -0.0006122589111328125, -5.53131103515625e-05, -0.000492095947265625, -0.014295578002929688, -0.00012969970703125, -0.5855422616004944, -0.0003617815673351288, -0.03851604461669922, -0.004949092864990234, -2.288818359375e-05, 0.0, -5.7220458984375e-06, -0.000186920166015625, -0.0005741119384765625, -0.05827510356903076, -2.110004425048828e-05, -1.33514404296875e-05, -0.000209808349609375, -3.24249267578125e-05, -3.075597123824991e-05, -5.006777428206988e-06, -1.99037604033947e-05, -1.2874543244834058e-05, -0.000171661376953125]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "Give", "hole1": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 3, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 105, "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(3))]),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -5.051759997039532, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -1.709488868713379, -0.011315345764160156, -0.00730133056640625, -1.5970735549926758, -5.7220458984375e-05, -0.0040416717529296875, -0.015471458435058594, -0.000179290771484375, -0.00012040138244628906, -3.814697265625e-06, -7.784308400005102e-05, -0.01339578628540039, 0.0, -1.1639444828033447, -1.9073486328125e-06, -0.045960426330566406, -0.0017070770263671875, -0.0002727508544921875, -9.5367431640625e-06, -0.0004291534423828125, -0.0045539140701293945, -3.814697265625e-06, -0.06824040412902832, -0.0008707046508789062, -0.0006275177001953125, -3.087520235567354e-05, -0.0004202127456665039, -1.1920928244535389e-07, -0.0003337860107421875, -1.52587890625e-05, -0.00020586975733749568, -7.140407979022712e-05, -5.3148920414969325e-05, -6.7947905336041e-05, -0.000152587890625]}, {"model_output": {"body": [{"body": [{"hole8": {"hole2": "SelfSelector", "hole0": "15", "hole1": [{"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "IncreaseDurability", "_type": "Template45_expr_seq"}], "hole0": "AuraUntil", "hole1": [{"func": {"id": "ManaChange", "_type": "Name"}, "args": [{"operand": {"_type": "Template61"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, {"_type": "Template75"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Template45"}], "_type": "Template22"}, "hole2": "ALL", "hole1": 6, "hole3": "COMMON", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "_type": "Template0", "hole6": "DRAGON", "hole7": "battlecry", "hole0": "Drakonid Crusher"}, {"hole0": 6, "hole1": 6, "_type": "Template8"}], "bases": [{"_type": "Template57"}], "name": "DrakonidCrusher", "_type": "ClassDef"}, {"_type": "Template55_stmt_seq"}], "_type": "Module"}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 91, 252, "Aura", "Until", "<EOS>", 323, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 112, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 92, 253, "Increase", "Durability", "<EOS>", 320, 105, "Self", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15([AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON)), False, MINION_TYPE.DRAGON),\n            IncreaseDurability()]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score": -7.649131401364798, "score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -2.562389373779297, -0.0200347900390625, -0.1428019106388092, -0.0384061336517334, -0.0004609823226928711, -0.01653289794921875, -0.1305856704711914, -0.000713348388671875, -3.62396240234375e-05, -3.814697265625e-06, -0.030620813369750977, -0.0015277861384674907, -4.649161837733118e-06, -3.814697265625e-06, -0.0470733642578125, -0.0003108978271484375, -0.0003833770751953125, -0.2349071502685547, -0.0013780593872070312, -0.0001678466796875, -8.58306884765625e-05, -1.9073486328125e-06, -0.0014077425003051758, -0.000244140625, 0.0, -0.000141143798828125, -0.00022125244140625, -0.0001468658447265625, -0.0071544647216796875, -0.00011444091796875, -0.0014801025390625, -6.103515625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.007717609405517578, -0.0003566720988601446, -6.437280717364047e-06, -2.288818359375e-05, -0.0077610015869140625, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0025453567504882812, 0.0, -0.002522706985473633, -6.4849853515625e-05, -0.7658872604370117, -0.13476943969726562, -2.47955322265625e-05, -0.002346038818359375, 0.0, -0.003966331481933594, -1.52587890625e-05, -0.05173492431640625, -7.43865966796875e-05, -3.814697265625e-06, -0.1280364990234375, -0.18397808074951172, -1.2501517534255981, -0.8802481293678284, -7.05718994140625e-05, -1.9073486328125e-06, -0.2434682846069336, -0.02608046680688858, -3.933906555175781e-06, 0.0, -0.0005340576171875, -4.00543212890625e-05, -0.00014769614790566266, -8.106198947643861e-06, -9.457464329898357e-06, -1.7404487152816728e-05, -0.00057220458984375]}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "DEMON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -0.06471763015630927, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -0.042098283767700195, -6.29425048828125e-05, -0.0002002716064453125, -1.9073486328125e-06, -0.00020551681518554688, 0.0, -4.00543212890625e-05, -3.0517578125e-05, -2.6702880859375e-05, -7.522105443058535e-05, 0.0, -7.157723302952945e-06, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "DRAGON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -3.5093242949978674, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -3.4868004322052, -3.814697265625e-06, -0.0001506805419921875, -3.814697265625e-06, -0.00023734569549560547, 0.0, -4.9591064453125e-05, -1.71661376953125e-05, -3.24249267578125e-05, -5.578994387178682e-05, 0.0, -6.087881047278643e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "SHAMAN", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "SHAMAN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.SHAMAN)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -5.903563370929049, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -5.880695819854736, -1.71661376953125e-05, -7.82012939453125e-05, -1.9073486328125e-06, -0.0006096363067626953, 0.0, -5.91278076171875e-05, -5.53131103515625e-05, -4.1961669921875e-05, -2.968310764117632e-05, 0.0, -7.40708492230624e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, "create_minion", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False\n            )\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n", "score": -5.99340120502751, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -5.352052688598633, -0.0011730194091796875, -0.0712747573852539, -0.00042724609375, -0.0002536773681640625, -3.576278118089249e-07, -9.393397340318188e-05, -0.0001735687255859375, -0.0011157989501953125, -0.023879051208496094, -1.71661376953125e-05, -0.4550955891609192, -7.62939453125e-06, -0.08501888066530228, -2.6702880859375e-05, -4.38690185546875e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0006830671918578446, -2.9802317840221804e-06, -7.104648102540523e-05, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "DEMON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.107824902896908, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -5.765100479125977, -0.0001068115234375, -0.00196075439453125, -0.001071929931640625, -0.0003509521484375, -0.32548725605010986, -6.67572021484375e-05, -0.0002994537353515625, -1.9073486328125e-06, -8.916854858398438e-05, 0.0, -4.00543212890625e-05, -3.62396240234375e-05, -2.288818359375e-05, -4.994868868379854e-05, 0.0, -7.993730832822621e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "TOTEM", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.136359560626232, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -6.113307476043701, -5.7220458984375e-06, -0.0005017518997192383, 0.0, -0.00041234493255615234, 0.0, -4.00543212890625e-05, -4.76837158203125e-05, -3.0517578125e-05, -4.053115480928682e-05, 0.0, -6.331727490760386e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_weapon", "hole4": "p", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, "create_weapon", "<EOS>", "p", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False\n            )\n\n    def create_weapon(self, p):\n        return Minion(1, 1)\n", "score": -6.573692334876739, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -5.352052688598633, -0.0011730194091796875, -0.0712747573852539, -0.00042724609375, -0.0002536773681640625, -3.576278118089249e-07, -9.393397340318188e-05, -0.0001735687255859375, -0.0011157989501953125, -0.023879051208496094, -1.71661376953125e-05, -1.0905773639678955, -0.003894805908203125, -0.013214509934186935, -0.000396728515625, -3.4332275390625e-05, -0.012788772583007812, -5.14984130859375e-05, -0.00033485880703665316, -2.384185791015625e-06, -3.7193018215475604e-05, -2.0265579223632812e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template60"}, {"_type": "Template60"}, {"_type": "Template48"}], "keywords": [{"hole0": "DEMON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 103, 103, 95, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, 1, 1, CHARACTER_CLASS.ALL, minion_type=\n            MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -6.9560327322605815, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -6.2698259353637695, -0.6173295974731445, -0.0198211669921875, -0.010955810546875, -0.0021076202392578125, -0.0010242462158203125, -0.024390459060668945, -6.67572021484375e-05, -0.0002422332763671875, -1.9073486328125e-06, -0.0003764629364013672, 0.0, -4.57763671875e-05, -2.47955322265625e-05, -2.86102294921875e-05, -0.00010633467900333926, 0.0, -8.82618041941896e-06, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}], "keywords": [{"hole0": "DEMON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 103, 95, 96, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.100588781805499, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -6.2698259353637695, -0.785059928894043, -0.004482269287109375, -0.001018524169921875, -0.0015850067138671875, -0.0011005401611328125, -0.027076363563537598, -5.53131103515625e-05, -0.000286102294921875, -1.9073486328125e-06, -0.00025010108947753906, 0.0, -5.340576171875e-05, -4.1961669921875e-05, -2.47955322265625e-05, -4.482268923311494e-05, 0.0, -7.518887287005782e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "DRAGON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.100714670511451, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -5.765100479125977, -0.0001068115234375, -0.00196075439453125, -0.001071929931640625, -0.0003509521484375, -1.3183165788650513, -3.814697265625e-06, -0.0004329681396484375, -1.9073486328125e-06, -0.00010192394256591797, 0.0, -4.00543212890625e-05, -1.71661376953125e-05, -3.24249267578125e-05, -3.8266178307821974e-05, 0.0, -6.330490577965975e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "DEMON", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "ImpImp"}, "choice_history": [121, 198, "Imp", "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class ImpImp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.130770579481549, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -7.067255020141602, -0.000564908201340586, -0.00029794039437547326, -1.1920928955078125e-05, -8.881022222340107e-05, -0.0001277923583984375, -5.53131103515625e-05, -3.4332275390625e-05, -2.86102294921875e-05, -0.003936767578125, -0.0001468658447265625, -0.0014286041259765625, -3.814697265625e-05, -0.0001468658447265625, -2.3841855067985307e-07, -0.0002107613254338503, -0.00030517578125, -0.0042781829833984375, -0.003650665283203125, -0.000301361083984375, -0.002685546875, -0.00113677978515625, -0.0007495880126953125, -0.04224228858947754, -6.67572021484375e-05, -0.0002117156982421875, -1.9073486328125e-06, -0.00021696090698242188, 0.0, -4.1961669921875e-05, -3.0517578125e-05, -2.6702880859375e-05, -7.724761235294864e-05, 0.0, -7.992101018317044e-06, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.253851992910285, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -7.231419086456299, -3.62396240234375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.00024271011352539062, 0.0, -3.814697265625e-05, -3.4332275390625e-05, -3.24249267578125e-05, -3.719329470186494e-05, 0.0, -6.5650674514472485e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "taunt", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.taunt)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.411843399363505, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -7.389094352722168, 0.0, -0.00041222572326660156, 0.0, -0.0002040863037109375, 0.0, -4.00543212890625e-05, -2.86102294921875e-05, -3.0517578125e-05, -5.7101242418866605e-05, 0.0, -7.3966875788755715e-06, -1.9073486328125e-06]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "keywords": [{"hole0": "MECH", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -7.482046834254078, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -7.458482265472412, -1.1444091796875e-05, -0.0005550384521484375, -1.9073486328125e-06, -0.0008609294891357422, 0.0, -5.14984130859375e-05, -4.38690185546875e-05, -3.4332275390625e-05, -3.2663341698935255e-05, 0.0, -5.739144398830831e-06, 0.0]}, {"model_output": {"hole2": [{"value": {"func": {"_type": "Template34"}, "args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"_type": "Template47"}, {"_type": "Template75"}], "keywords": [{"hole0": "BEAST", "_type": "Template42"}], "_type": "Call"}, "_type": "Expr"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 1, "hole1": 1, "_type": "Template32"}], "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score": -8.151628644162855, "score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -7.136661529541016, -0.0001506805419921875, -2.288818359375e-05, -5.7220458984375e-06, -0.00027227355167269707, -4.947185516357422e-05, -0.015945587307214737, -1.9073486328125e-06, -0.0019283294677734375, -0.00022125244140625, -0.0002040863037109375, -0.0030517578125, -0.00018310546875, -0.9828338623046875, -2.6702880859375e-05, -0.000141143798828125, 0.0, -3.635883331298828e-05, 0.0, -2.09808349609375e-05, -0.000148773193359375, -3.24249267578125e-05, -8.940691259340383e-06, 0.0, -6.579561159014702e-06, 0.0]}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "windfury", "hole0": 2, "hole1": 1, "hole3": {"_type": "Template79"}, "_type": "Template27"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 62], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "score": -2.1012189296570725, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -0.6437606811523438, -3.814697265625e-06, -0.0034792423248291016, -2.384185791015625e-06, -2.2172678654897027e-05, -9.179088920063805e-06, -0.5057663917541504, -1.9073486328125e-06, -0.0074481964111328125]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": 1, "hole0": "Minion", "hole1": 2, "_type": "Template36"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 241, "Minion", "<EOS>", "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -2.171889415392876, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -1.167266845703125, -0.05822277069091797, -1.6927691831369884e-05, -7.939338684082031e-05, -0.005573391914367676, -8.344646857949556e-07, -4.053107204526896e-06, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -2.8034444958412834, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -1.8602657318115234, -1.1444091796875e-05, -0.0024394989013671875, -1.0728830375228426e-06, -1.3113011618770543e-06, -4.768370445162873e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -2.8302985188287693, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -0.47148603200912476, -1.1444091796875e-05, -0.4560890197753906, -0.0018367767333984375, -0.00091552734375, -4.1961669921875e-05, -2.8848648071289062e-05, -0.024151086807250977, -1.1444091796875e-05, -0.14366893470287323, -5.14984130859375e-05, -0.0007724761962890625, -0.0003490447998046875, -9.5367431640625e-06, -0.0003491640090942383, -0.009397745132446289, -5.9604644775390625e-06, -0.014469146728515625, -0.0055179595947265625, -0.0003643035888671875, -9.5367431640625e-06, -3.814697265625e-05, -0.0003566741943359375, 0.0, -0.0001735687255859375, -0.007426261901855469, -0.012251853942871094, -4.971027374267578e-05, -0.00025177001953125, -0.0002307891845703125, -1.9073486328125e-06, -0.0011997222900390625, -0.0004082918167114258, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.0001068115234375, -0.00142669677734375, -0.000209808349609375, -0.0001010894775390625, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007240772247314453, -0.00034129590494558215, -2.3841855067985307e-07, -2.47955322265625e-05, -0.000354766845703125, -7.62939453125e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.0012111663818359375, -0.000164031982421875, -2.86102294921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.0011386871337890625, 0.0, -0.005423545837402344, -0.00012969970703125, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.58306884765625e-05, -0.00016021728515625, -1.71661376953125e-05, -0.0036584138870239258, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "args": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template46"}, {"hole0": "UserPicker", "_type": "Template46"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 68, 163, 25, 186, "Character", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "User", "Picker", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(Null, EnemyPlayer(), UserPicker()),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -3.9823759048631047, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -1.13763427734375, -0.0002498626708984375, -0.362656831741333, -3.361701965332031e-05, -0.02237028256058693, 0.0, -0.009416580200195312, -0.2184600830078125, -0.0039730072021484375, -1.9073486328125e-06, -0.03883540630340576, -0.0010131499730050564, 0.0, -0.04596900939941406, -0.5524196624755859, -0.0003681182861328125, -3.5524364648154005e-05, -0.000186920166015625, -4.76837158203125e-05, -1.9073486328125e-06, -0.19313454627990723, -1.9073486328125e-06, -3.814697265625e-06, -0.23186969757080078, -0.0001850128173828125, -0.1380702257156372, -0.000110626220703125, -1.9073486328125e-06, -0.01659393310546875, -4.76837158203125e-05, -0.08211195468902588, -2.86102294921875e-05, 0.0, -0.0004311800003051758, -5.7220458984375e-06, -4.410743713378906e-06, 0.0, -0.000213623046875, -0.0003662109375, -1.71661376953125e-05, -0.0032330751419067383, -1.1920928244535389e-07, -4.410740075400099e-06, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.062117388509634, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -1.225574254989624, -1.9073486328125e-06, -0.5345468521118164, -0.0002498626708984375, -0.0036363601684570312, -4.57763671875e-05, -7.05718994140625e-05, -0.011696219444274902, -1.1444091796875e-05, -0.5510266423225403, -3.4332275390625e-05, -0.000362396240234375, -0.00041961669921875, -1.1444091796875e-05, -0.0003757476806640625, -0.005687832832336426, -7.867813110351562e-06, -0.021648406982421875, -0.005634307861328125, -0.0005092620849609375, -1.1444091796875e-05, -4.1961669921875e-05, -0.00034236907958984375, 0.0, -9.34600830078125e-05, -0.007496833801269531, -0.012004852294921875, -5.161762237548828e-05, -0.0002536773681640625, -0.0002307891845703125, -1.9073486328125e-06, -0.0012035369873046875, -0.0004063844680786133, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.00011444091796875, -0.0014476776123046875, -0.0002117156982421875, -9.918212890625e-05, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007345676422119141, -0.0003362890856806189, -2.3841855067985307e-07, -2.47955322265625e-05, -0.000347137451171875, -7.62939453125e-06, -0.00011444091796875, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.00121307373046875, -0.000164031982421875, -2.86102294921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.001148223876953125, 0.0, -0.005436897277832031, -0.0001277923583984375, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.58306884765625e-05, -0.0001621246337890625, -1.71661376953125e-05, -0.0036603212356567383, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"elts": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}, {"hole2": 2, "hole0": "Give", "hole1": "ChangeAttack", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}, {"hole0": "SelfSelector", "_type": "Template46"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 321, 71, 181, 322, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 80, 231, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeAttack(2))], SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.230541296705887, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -1.951462745666504, -0.05544567108154297, -0.0004291534423828125, -0.019540786743164062, -0.0050048828125, -3.814697265625e-06, -0.9346895217895508, -0.00016605854034423828, -0.038255296647548676, 0.0, -0.09695148468017578, -0.00077056884765625, -0.09158802032470703, -5.7220458984375e-06, -3.421306610107422e-05, -0.2303091287612915, 0.0, -0.016893142834305763, -4.00543212890625e-05, -0.0008106231689453125, -0.010463714599609375, -0.0002117156982421875, -0.004670143127441406, -3.635883331298828e-05, -2.3841855067985307e-07, -0.0015202760696411133, -1.1444091796875e-05, -8.583057933719829e-06, 0.0, -0.00014495849609375, -0.0003643035888671875, -4.00543212890625e-05, -0.003481149673461914, 0.0, -2.980227463922347e-06, -2.3841855067985307e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole0": "1", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "1", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (2)), Buff(1())]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.315023114942427, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -0.47148603200912476, -1.1444091796875e-05, -1.1571741104125977, -0.004619598388671875, -0.947900652885437, 0.0, -0.000728607177734375, -8.96453857421875e-05, -0.00012969970703125, -0.0005494356155395508, -0.00024819374084472656, -1.1920928244535389e-07, -0.02378368377685547, -0.011472702026367188, -6.103515625e-05, -1.9073486328125e-06, -3.24249267578125e-05, -0.0003204345703125, 0.0, -0.00022125244140625, -0.007163047790527344, -0.008864402770996094, -4.601478576660156e-05, -6.29425048828125e-05, -0.0001621246337890625, -1.9073486328125e-06, -0.0008411407470703125, -0.0003606081008911133, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0001163482666015625, -0.0015506744384765625, -0.0001850128173828125, -0.0001068115234375, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007202625274658203, -0.00035941568785347044, -2.3841855067985307e-07, -2.47955322265625e-05, -0.000347137451171875, -7.62939453125e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.000171661376953125, 0.0, -0.0012035369873046875, -0.0001659393310546875, -2.6702880859375e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.00118255615234375, 0.0, -0.005539894104003906, -0.0001277923583984375, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.7738037109375e-05, -0.0001659393310546875, -1.71661376953125e-05, -0.0037080049514770508, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"hole0": "Damage", "hole1": 1, "_type": "Template41"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 89, 247, "Damage", "<EOS>", "1", "<EOS>", 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CardSelector\n            (condition=IsType(MINION_TYPE.DRAGON)), BothPlayer()))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.60950284655835, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -1.13763427734375, -0.0002498626708984375, -0.362656831741333, -3.361701965332031e-05, -0.02237028256058693, 0.0, -0.009416580200195312, -1.6536579132080078, -0.0067195892333984375, -1.9073486328125e-06, -0.12446880340576172, -0.00010120868682861328, 0.0, -0.026033401489257812, -2.288818359375e-05, -8.96453857421875e-05, -0.001369476318359375, -0.0001125335693359375, -0.0001239776611328125, -7.05718994140625e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005247592926025391, -0.0009235141333192587, -9.536738616588991e-07, -4.38690185546875e-05, -0.0001392364501953125, -5.7220458984375e-06, -0.0003833770751953125, -1.9073486328125e-06, -0.0001373291015625, 0.0, -0.0009746551513671875, -9.918212890625e-05, -0.33405208587646484, -3.814697265625e-06, -0.0007859468460083008, -1.0132789611816406e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.82012939453125e-05, -0.0002079010009765625, -1.1444091796875e-05, -0.0036870241165161133, -1.1920928244535389e-07, -3.576276867534034e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 1, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole0": "MinionSelector", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 81, 232, "Minion", "Selector", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(MinionSelector())]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.808652208224245, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -1.225574254989624, -1.9073486328125e-06, -1.0800790786743164, -0.010316848754882812, -0.7558339238166809, -0.012823219411075115, -4.768370445162873e-07, -0.0011444091796875, -0.000286102294921875, -3.4332275390625e-05, -0.0007936954498291016, -2.491474151611328e-05, 0.0, -0.0033550262451171875, -0.01706695556640625, -2.47955322265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -0.00028514862060546875, 0.0, -0.000240325927734375, -0.010206222534179688, -0.010448455810546875, -4.398822784423828e-05, -6.866455078125e-05, -0.00016021728515625, -1.9073486328125e-06, -0.0008029937744140625, -0.0003873109817504883, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -0.0001068115234375, -0.0015621185302734375, -0.0001735687255859375, -0.000102996826171875, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007202625274658203, -0.00032889810972847044, -2.3841855067985307e-07, -2.47955322265625e-05, -0.0003871917724609375, -7.62939453125e-06, -0.000110626220703125, -1.9073486328125e-06, -0.0001773834228515625, 0.0, -0.0012149810791015625, -0.0001659393310546875, -3.24249267578125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.001232147216796875, 0.0, -0.00539398193359375, -0.0001239776611328125, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.7738037109375e-05, -0.0001678466796875, -1.71661376953125e-05, -0.0037137269973754883, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 2, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole0": "MinionSelector", "_type": "Template30"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 81, 232, "Minion", "Selector", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (2)), Buff(MinionSelector())]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -4.862897134394537, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -0.47148603200912476, -1.1444091796875e-05, -1.1571741104125977, -0.004619598388671875, -1.4875338077545166, -0.008990810252726078, -2.3841855067985307e-07, -0.0012607574462890625, -0.00037384033203125, -1.1444091796875e-05, -0.0013970136642456055, -2.8848648071289062e-05, -1.1920928244535389e-07, -0.0026702880859375, -0.02802276611328125, -1.52587890625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.00026035308837890625, 0.0, -0.0002899169921875, -0.008690834045410156, -0.009927749633789062, -4.398822784423828e-05, -7.2479248046875e-05, -0.0001621246337890625, -1.9073486328125e-06, -0.000820159912109375, -0.0003758668899536133, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -9.5367431640625e-05, -0.0015430450439453125, -0.0001678466796875, -0.000102996826171875, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007250308990478516, -0.0003296133363619447, -2.3841855067985307e-07, -2.47955322265625e-05, -0.000377655029296875, -7.62939453125e-06, -0.000110626220703125, -1.9073486328125e-06, -0.0001773834228515625, 0.0, -0.0012149810791015625, -0.0001659393310546875, -2.86102294921875e-05, -7.62939453125e-06, -7.62939453125e-06, -0.0012187957763671875, 0.0, -0.005469322204589844, -0.0001239776611328125, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.7738037109375e-05, -0.0001659393310546875, -1.71661376953125e-05, -0.0037080049514770508, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 1, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole2": 2, "hole0": "Give", "hole1": "ChangeAttack", "_type": "Template28"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 80, 231, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 68, 162, 57, 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Give(ChangeAttack(2)),\n            MinionSelector(condition=IsType(MINION_TYPE.DRAGON))))\n", "score": -4.987520198537929, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -0.6437606811523438, -3.814697265625e-06, -0.0034792423248291016, -2.384185791015625e-06, -2.2172678654897027e-05, -9.179088920063805e-06, -1.5940499305725098, -0.0005083084106445312, -0.0009288787841796875, -8.20159912109375e-05, -0.0002460479736328125, -9.5367431640625e-06, -0.0022774934768676758, -4.768370445162873e-07, -0.0015201568603515625, -0.7138442993164062, -0.016371726989746094, -0.00615692138671875, 0.0, -0.000473645341116935, -0.12165164947509766, 0.0, -0.15326735377311707, -9.655952453613281e-06, -0.012208938598632812, -0.0001697540283203125, -0.013369560241699219, -0.009283065795898438, -7.62939453125e-06, -2.6702880859375e-05, -0.670401930809021, -1.9073486328125e-05, -0.07144451141357422, -9.5367431640625e-05, -3.24249267578125e-05, 0.0, -0.006888151168823242, -0.0014247822109609842, -1.1920922133867862e-06, -2.86102294921875e-05, -0.000347137451171875, -7.62939453125e-06, -0.00045013427734375, -1.9073486328125e-06, -0.0002307891845703125, 0.0, -0.0015621185302734375, -0.000118255615234375]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "battlecry", "hole4": {"func": {"_type": "Template66"}, "args": [{"func": {"_type": "Template73"}, "args": [{"elts": [{"hole2": 3, "hole0": "Buff", "hole1": "ChangeAttack", "_type": "Template28"}, {"hole2": 2, "hole0": "Buff", "hole1": "ChangeHealth", "_type": "Template28"}, {"_type": "Template62_expr_seq"}], "_type": "List"}], "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template46"}, {"func": {"id": "GreaterThan", "_type": "Name"}, "args": [{"hole0": "Count", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole3": [{"arg": "condition", "value": {"func": {"id": "IsType", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, "_type": "keyword"}], "_type": "Template35"}], "keywords": [{"arg": "value", "value": {"_type": "Template76"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole0": 2, "hole1": 1, "_type": "Template32"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score": -5.0076301005114345, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -2.584308385848999, -0.00020599365234375, -0.0873870849609375, -0.0003204345703125, -0.0017185211181640625, -4.9591064453125e-05, -0.000118255615234375, -0.09763908386230469, -3.4332275390625e-05, -0.5030510425567627, -4.00543212890625e-05, -0.00030517578125, -0.0003070831298828125, -9.5367431640625e-06, -0.0002689361572265625, -0.0075724124908447266, -7.867813110351562e-06, -0.02067279815673828, -0.0039730072021484375, -0.0005235671997070312, -9.5367431640625e-06, -3.62396240234375e-05, -0.000316619873046875, 0.0, -0.000110626220703125, -0.007559776306152344, -0.010512351989746094, -5.161762237548828e-05, -0.000247955322265625, -0.00022125244140625, -1.9073486328125e-06, -0.001216888427734375, -0.0004140138626098633, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.00011444091796875, -0.001453399658203125, -0.0002117156982421875, -9.918212890625e-05, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007278919219970703, -0.00034224955015815794, -2.3841855067985307e-07, -2.47955322265625e-05, -0.0003452301025390625, -7.62939453125e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.0012111663818359375, -0.000164031982421875, -2.86102294921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.001148223876953125, 0.0, -0.005428314208984375, -0.0001277923583984375, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.58306884765625e-05, -0.0001621246337890625, -1.71661376953125e-05, -0.0036603212356567383, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "deathrattle", "hole0": 2, "hole1": 1, "hole3": {"func": {"id": "Deathrattle", "_type": "Name"}, "args": [{"hole2": 2, "hole0": "Give", "hole1": "ChangeAttack", "_type": "Template28"}, {"func": {"_type": "Template74"}, "keywords": [{"arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template46"}, "_type": "keyword"}], "_type": "Call"}], "_type": "Call"}, "_type": "Template27"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 80, 231, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 68, 162, 57, 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, deathrattle=Deathrattle(Give(ChangeAttack(2)),\n            MinionSelector(picker=RandomPicker())))\n", "score": -5.570689785262282, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -0.6437606811523438, -3.814697265625e-06, -0.0034792423248291016, -2.384185791015625e-06, -2.2172678654897027e-05, -9.179088920063805e-06, -1.5940499305725098, -0.0005083084106445312, -0.0009288787841796875, -8.20159912109375e-05, -0.0002460479736328125, -9.5367431640625e-06, -0.0022774934768676758, -4.768370445162873e-07, -0.0015201568603515625, -0.7138442993164062, -0.016371726989746094, -0.00615692138671875, 0.0, -0.000473645341116935, -0.12165164947509766, 0.0, -0.15326735377311707, -9.655952453613281e-06, -0.012208938598632812, -0.0001697540283203125, -0.013369560241699219, -0.009283065795898438, -7.62939453125e-06, -2.6702880859375e-05, -0.7641128301620483, -0.00011444091796875, -0.020534515380859375, -9.5367431640625e-06, -0.5514264106750488, -2.586841583251953e-05, 0.0]}, {"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 1, "hole3": "minion_type", "hole4": {"_type": "Template53"}, "_type": "Template11", "hole0": "Twilight Whelp"}], "hole1": "MinionCard", "hole3": "create_minion", "hole4": "player", "_type": "Template1", "hole6": [{"hole2": "enrage", "hole0": 2, "hole1": 1, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "hole0": "Choice", "hole1": [{"hole0": "Dispel", "_type": "Template46"}, {"func": {"id": "Summon", "_type": "Name"}, "args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template46"}], "_type": "Template45_expr_seq"}], "hole0": "Aura", "hole1": [{"hole0": 1, "_type": "Template38"}, {"hole2": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "hole0": "MinionSelector", "hole1": {"id": "IsType", "_type": "Name"}, "_type": "Template35"}], "_type": "Template45"}, "_type": "Template27"}], "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Dispel", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 320, 105], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, enrage=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.DRAGON))), Choice(Dispel(), Summon(\n            MINION_TYPE.DRAGON), BothPlayer())])\n", "score": -8.448230257127754, "score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.7879213094711304, -1.9073486328125e-06, -0.12082576751708984, -0.0021610260009765625, -1.9073486328125e-06, -0.002396225929260254, 0.0, -7.62939453125e-05, -0.6437606811523438, -3.814697265625e-06, -0.0034792423248291016, -2.384185791015625e-06, -2.2172678654897027e-05, -9.179088920063805e-06, -2.662813663482666, 0.0, -0.014181137084960938, -0.00011444091796875, -0.15790677070617676, -3.62396240234375e-05, -0.044289588928222656, -0.00213623046875, -0.000324249267578125, -0.2900015115737915, -3.24249267578125e-05, -0.017701148986816406, -0.001880645751953125, -0.001310110092163086, -3.4928321838378906e-05, -9.655952453613281e-06, -0.000946044921875, -3.814697265625e-06, -0.001425027847290039, -0.0007460117340087891, -9.5367431640625e-06, -6.29425048828125e-05, -0.0018901824951171875, -6.67572021484375e-05, -9.5367431640625e-06, 0.0, -6.103515625e-05, -1.9073486328125e-06, -0.012471199035644531, -2.09808349609375e-05, -4.9591064453125e-05, -0.4750051498413086, -0.012775421142578125, -0.14562034606933594, -0.0002384185791015625, -0.013812065124511719, -0.00012969970703125, -4.9591064453125e-05, -1.5424273014068604, -0.0011886355932801962, -0.07155799865722656, -0.002307891845703125, -0.06396198272705078, -5.7220458984375e-06, -0.5919381380081177, -8.940656698541716e-06, -0.5835628509521484, -0.04746532440185547, -0.0002269744873046875, -0.000110626220703125, -1.9073486328125e-06, -0.00041961669921875, 0.0, -0.004138946533203125, -1.9073486328125e-06, -0.09067249298095703, -7.62939453125e-06, -0.001924753189086914, -1.1920928955078125e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.000102996826171875]}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
