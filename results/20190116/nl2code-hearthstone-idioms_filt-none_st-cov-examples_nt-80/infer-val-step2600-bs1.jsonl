{"beams": [{"score_history": [-0.0002574920654296875, -0.0009212493896484375, -0.00012886477634310722, -0.009655559435486794, -0.00016962319205049425, -0.00021252798615023494, -0.00045835881610400975, -0.00010979175567626953, -0.004222869873046875, -0.006313323974609375, -0.00130462646484375, -0.0002902745909523219, -0.00028228759765625, -0.006856958847492933, -3.814697265625e-06, -0.003074878128245473, -4.1961669921875e-05, -0.29584789276123047, -9.5367431640625e-06, -0.7319053411483765, 0.0, -0.0021554231643676758, -1.1444091796875e-05, -0.00025665760040283203, 0.0, -7.43865966796875e-05, -0.0001201629638671875, -0.004314422607421875, -0.0025352223310619593, -4.57763671875e-05, -0.0013278722763061523, 0.0, -0.017699353396892548, -0.0001735687255859375], "model_output": {"hole3": "create_weapon", "hole6": [{"hole2": 4, "_type": "Template36", "hole1": 3, "hole0": "Weapon"}], "hole2": [{"hole2": "PALADIN", "_type": "Template15", "hole1": 5, "hole3": "RARE", "hole0": "<UNK> Blade"}], "_type": "Template1", "hole1": "WeaponCard", "hole4": "player", "hole0": "<UNK>Blade"}, "choice_history": [121, 198, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 332, 144, 241, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "score": -1.0907815240352647, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"score_history": [-1.71661376953125e-05, -1.33514404296875e-05, -0.003481994615867734, -0.00011896401701960713, -1.347060333500849e-05, -5.960409907856956e-07, -5.364416665543104e-06, -6.794924956921022e-06, -0.0013141632080078125, -0.05328941345214844, -0.0001544952392578125, -1.1920928244535389e-07, -1.52587890625e-05, -3.6954811548639555e-06, 0.0, -0.002993164351209998, 0.0, -0.017595529556274414, 0.0, -0.0018273591995239258, 0.0, -0.0007535219192504883, 0.0, -2.9086942959111184e-05, 0.0, -2.288818359375e-05, -0.01361846923828125, -2.09808349609375e-05, -5.173683166503906e-05, -2.622600959512056e-06, -0.0006836648681201041, -3.933898824470816e-06, -0.24050652980804443, 0.0, -0.001056671142578125, -3.814697265625e-05, -0.0014128684997558594, -0.000255584716796875, -0.10751533508300781, -0.0039119720458984375, -0.0003414154052734375, -1.1984773874282837, -5.841255187988281e-06, -0.4609699249267578, -0.000274658203125, -0.0012318708468228579, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -0.10791397094726562, -0.00035858154296875, -7.62939453125e-06, -0.00018990039825439453, -0.0013604164123535156, -1.9073486328125e-06, -7.62939453125e-06, -0.009136199951171875, -0.002384185791015625, -0.002595186233520508, -1.1920928244535389e-07, -0.0018129348754882812, -0.0023403167724609375, -0.0004367828369140625, -6.103515625e-05, -1.52587890625e-05, 0.0, -0.0002812056918628514, -0.0006780890980735421, -7.62939453125e-06, -2.09808349609375e-05, -0.6787319183349609, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-05, -0.00011444091796875, -0.642486572265625, -7.62939453125e-06, -0.000232696533203125, -2.288818359375e-05, -2.09808349609375e-05, -0.015110969543457031, 0.0, -0.0059375762939453125, -2.6702880859375e-05, -0.0001201629638671875], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "auras", "_type": "Template27", "hole1": 7, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole1": [{"_type": "Template38", "hole0": 1}, {"_type": "Template46", "hole0": "SelfSelector"}, {"args": [{"hole2": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Template35", "hole1": {"_type": "Template74"}, "hole0": "Count"}], "_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Template76"}}]}], "hole0": "Aura"}, "hole0": 6}], "hole2": [{"hole2": "ALL", "_type": "Template15", "hole1": 6, "hole3": "FREE", "hole0": "Boulderfist Ogre"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "BoulderfistOgre"}, "choice_history": [121, 198, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "6", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 322, 86, 244, "1", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, 320, 105], "score": -3.5845808192868702, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, auras=[Aura(ChangeAttack(1), SelfSelector(),\n            GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))),\n            value=0))])\n"}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"score_history": [-0.0027980804443359375, -0.000148773193359375, -2.5033937163243536e-06, -1.3232166566012893e-05, -0.002319839084520936, -0.0001583639532327652, -0.0001583099365234375, -3.814697265625e-06, -5.340576171875e-05, -0.21394920349121094, -3.62396240234375e-05, -5.6028256949502975e-06, -0.00018239019846078008, -2.9802317840221804e-06, 0.0, -3.5523102269507945e-05, 0.0, -1.0441436767578125, 0.0, -0.001385331153869629, -9.5367431640625e-06, -0.000240325927734375, 0.0, -2.2172915123519488e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -4.9591064453125e-05, -2.5629868105170317e-05, 0.0, -0.6291790008544922, -4.38690185546875e-05, -0.0044002532958984375, -2.09808349609375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003358125686645508, -1.1920928244535389e-07, -0.0020236968994140625, 0.0, -0.007259368896484375, -0.032359957695007324, 0.0, -2.09808349609375e-05, -0.07688331604003906, -7.62939453125e-06, -0.000247955322265625, -1.52587890625e-05, -0.0001392364501953125, 0.0, -0.00010120868682861328, -1.9073486328125e-06, -0.02645421028137207, -1.9073486328125e-06, -0.2563466727733612, -5.7220458984375e-06], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "PRIEST", "_type": "Template15", "hole1": 1, "hole3": "FREE", "hole0": "Deadly Poison"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"_type": "For", "iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Template64"}}, "body": [{"_type": "Expr", "value": {"hole2": 3, "_type": "Template37", "hole1": "change_temp_attack", "hole0": {"_type": "Name", "id": "minion"}}}], "target": {"_type": "Name", "id": "minion"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "DeadlyPoison"}, "choice_history": [121, 200, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 131, 169, 25, 186, "minion", "<EOS>", 17, 156, 50, "minions", "<EOS>", 332, 130, 168, 34, 243, 25, 186, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"], "score": -2.3016450895365708, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n"}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"score_history": [-9.5367431640625e-06, -2.09808349609375e-05, -0.0018933956744149327, -3.755058423848823e-05, -1.1920928244535389e-07, -3.576255949155893e-07, -1.4901160284352954e-05, -6.055711128283292e-05, -0.000148773193359375, -0.036536216735839844, -4.9591064453125e-05, -1.0728836059570312e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0007142221438698471, -1.1920928244535389e-07, -0.1323089599609375, -1.9073486328125e-06, -0.0028400421142578125, -7.62939453125e-06, -0.14560317993164062, -0.11656856536865234, -0.003981159068644047, -0.10783860087394714, -9.5367431640625e-06, -0.6694965362548828, -0.040016353130340576, -4.887569048150908e-06, 0.0, -0.07608318328857422, -5.7220458984375e-06, 0.0, -0.000667572021484375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.00014972686767578125, -6.937980651855469e-05, -7.62939453125e-06, -2.288818359375e-05, -0.00012969970703125, -0.0019683837890625, -3.0517578125e-05, -0.0020809173583984375, -1.9073486328125e-06, -0.0012929439544677734, -0.0006160736083984375, -1.1444091796875e-05, -0.03175961971282959, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.123283386230469e-05, -8.2254373410251e-06, -0.012914536520838737, -7.62939453125e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 5, "hole0": 6}], "hole2": [{"hole3": "battlecry", "hole2": "PRIEST", "_type": "Template11", "hole1": 6, "hole4": {"hole2": "CharacterSelector", "_type": "Template22", "hole1": [{"_type": "Template59"}], "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template46", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole0": "Damage"}, "hole0": "Fire Elemental"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "FireElemental"}, "choice_history": [121, 198, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 217, "Damage", "<EOS>", 320, 102, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "6", "<EOS>", "5", "<EOS>"], "score": -1.3862014875080462, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"score_history": [-4.1961669921875e-05, -3.4332275390625e-05, -0.0009829933987930417, -0.00031585534452460706, -2.133836824214086e-05, -4.410652763908729e-06, -2.1457672119140625e-06, -1.7762184143066406e-05, -0.0017642974853515625, -0.00177764892578125, -1.0893921852111816, -0.0002360078797210008, -4.6491426473949105e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.008731367066502571, -2.3841855067985307e-07, -0.0016211270121857524, -5.7220458984375e-06, -0.0953272134065628, -0.0008844400872476399, -0.3316808044910431, -1.9073486328125e-06, -5.960462772236497e-07, -0.028055191040039062, -0.0003032684326171875, 0.0, -0.038886189460754395, -1.33514404296875e-05, -0.0007801055908203125, -1.71661376953125e-05, -0.016329169273376465, -0.0002256631851196289, -3.814697265625e-06, -0.0037938356399536133, 0.0, -2.6106834411621094e-05, 0.0, -0.000194549560546875, -0.0015926361083984375, -0.0002117156982421875, -5.960462772236497e-07, -6.603976362384856e-05, -2.145765392924659e-06, -4.52994936495088e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 4, "hole0": 2}], "hole2": [{"hole3": "Bounce", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole5": "MinionSelector", "hole2": "COMMON", "_type": "Template6", "hole1": 4, "hole0": "Gnomish Inventor"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "GnomishInventor"}, "choice_history": [121, 198, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "4", "<EOS>"], "score": -1.6234312534121216, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"score_history": [-0.0002803802490234375, -0.0001964569091796875, -2.3603161025675945e-05, -3.552392445271835e-05, -3.933881816919893e-05, -3.576133167371154e-07, -3.24249267578125e-05, -4.1961669921875e-05, -0.000133514404296875, -0.006923675537109375, -4.1961669921875e-05, -3.3854863431770355e-05, -0.00011491774785099551, -8.463859558105469e-06, 0.0, -7.152546004363103e-07, 0.0, -0.008029937744140625, 0.0, -0.003062725067138672, -1.1444091796875e-05, -0.0002499818801879883, 0.0, -3.397456384846009e-05, 0.0, -4.76837158203125e-05, -5.340576171875e-05, -4.38690185546875e-05, -0.00025781933800317347, -2.0265579223632812e-06, -0.003543853759765625, -0.0061740875244140625, -0.003223419189453125, -2.47955322265625e-05, -2.09808349609375e-05, -5.7220458984375e-06, -0.000286102294921875, 0.0, -6.4849853515625e-05, -0.0004506352124735713, -4.768371127283899e-06, -0.0038399696350097656, -1.9073486328125e-06, -0.09471923112869263, -1.9073486328125e-06, -0.005756378173828125, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0012073516845703125, 0.0, -8.58306884765625e-05, -0.00019465151126496494, -7.867813110351562e-06, -0.07100546360015869, 0.0, -0.2143024206161499, -1.9073486328125e-06], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "DRUID", "_type": "Template15", "hole1": 2, "hole3": "FREE", "hole0": "Heroic Strike"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"_type": "Expr", "value": {"hole2": 2, "_type": "Template37", "hole1": "change_temp_attack", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Template64"}}}}, {"_type": "Expr", "value": {"hole2": 2, "_type": "Template37", "hole1": "change_temp_attack", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Template64"}}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "HeroicStrike"}, "choice_history": [121, 200, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 130, 168, 34, 243, 17, 156, 50, "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>"], "score": -0.4246355639554622, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(2)\n"}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"score_history": [-4.1961669921875e-05, -3.24249267578125e-05, -0.24289163947105408, -0.02197142504155636, -2.825225419655908e-05, -7.152048056013882e-07, -5.841255187988281e-06, -3.516674041748047e-05, -7.2479248046875e-05, -0.001163482666015625, -0.0004024505615234375, -0.00018892886873800308, -1.7642974853515625e-05, -2.384185791015625e-06, 0.0, -0.0029608297627419233, 0.0, -0.12116074562072754, -5.7220458984375e-06, -0.0002384185791015625, 0.0, -0.03528594970703125, 0.0, -0.000118255615234375, -0.0004367828369140625, -1.52587890625e-05, -2.3841855067985307e-07, -3.576278118089249e-07, -0.00016364455223083496, -3.814697265625e-06, -0.0003038644790649414, 0.0, -0.0002193450927734375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "taunt", "_type": "Template27", "hole1": 8, "hole3": {"_type": "Template79"}, "hole0": 8}], "hole2": [{"hole2": "MAGE", "_type": "Template14", "hole1": 8, "hole0": "Ironbark Protector"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "<UNK>Protector"}, "choice_history": [121, 198, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "score": -0.4277680228932752, "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"score_history": [-3.814697265625e-05, -0.00020599365234375, -0.000593962671700865, -0.00015735553461126983, -0.07826385647058487, -0.00023743716883473098, -6.878367275930941e-05, -6.079637387301773e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002727508544921875, -8.20159912109375e-05, -1.52587890625e-05, -0.0001430511474609375, -0.000179290771484375, -0.0001373291015625, -2.47955322265625e-05, -0.0001506805419921875, -0.0003070831298828125, -5.411955135059543e-05, -0.00047457218170166016, -0.0002560610882937908, -4.9591064453125e-05, -0.014863887801766396, -0.0003185272216796875, -0.0006767479353584349, 0.0, -0.0014438629150390625, -0.0008087158203125, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.063678741455078e-05, -1.9073486328125e-06, -0.1566476821899414, 0.0, -0.0001068115234375, -6.103515625e-05, -3.814697265625e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.10868644714355469, -5.7220458984375e-06, 0.0, -2.2888176317792386e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, -1.52587890625e-05, -0.00010776519775390625, -4.00543212890625e-05, -0.03025531768798828, -0.0001049041748046875, -0.02420330047607422, -0.0002574920654296875, -0.00394439697265625, -0.0064341360703110695, -5.7220458984375e-06, -0.0001544952392578125, -0.03454875946044922, -9.34600830078125e-05, -0.0050182342529296875, -1.9073486328125e-06, -2.47955322265625e-05, -0.0042425282299518585, -7.998638466233388e-05, -1.33514404296875e-05, -0.007354736328125, -0.0019321441650390625, -0.014981269836425781, -0.026086926460266113, -3.814697265625e-06, -0.004567146301269531], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Mark of the Wild", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template51"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Template39"}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"_type": "Template43", "hole1": "calculate_max_health", "hole0": {"_type": "Template52"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Template64"}}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "heal", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "MarkOfTheWild"}, "choice_history": [121, 200, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score": -0.5300042276030581, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"score_history": [-1.9073486328125e-05, -0.4483184814453125, -1.45434760270291e-05, -1.1324817933200393e-05, -1.4162855222821236e-05, -9.441375732421875e-05, -2.503394853192731e-06, -0.0003871917724609375, -0.2008352279663086, -0.0036468505859375, -3.421306610107422e-05, 0.0, -0.00022971630096435547, 0.0, -0.031803131103515625, -2.47955322265625e-05, -0.0012989044189453125, -2.09808349609375e-05, -0.0060329437255859375, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -7.62939453125e-06, -8.392333984375e-05, -5.7220458984375e-05, -9.775161743164062e-06, -1.1920928244535389e-07, -0.7220001220703125, -0.00017547607421875, -0.20001602172851562, -2.288818359375e-05, -7.05718994140625e-05, -0.000194549560546875, -1.9073486328125e-06, -0.29003071784973145, -9.5367431640625e-06, -0.000545501708984375, -3.0517578125e-05, -3.814697265625e-06, 0.0, -0.033428192138671875, 0.0, -0.005691527854651213, -8.463859558105469e-05, -0.0010577439097687602, 0.0, -1.33514404296875e-05, -0.0006313323974609375, -3.814697265625e-06, -5.7220458984375e-05, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -6.198883056640625e-06, -1.07287787614041e-05, -0.00033700448693707585, -5.483620952873025e-06, -0.008703834377229214, -1.1444091796875e-05, -0.024274826049804688, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.027892470359802246, -5.7220458984375e-06, -8.20159912109375e-05, -9.918212890625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.0015344583662226796, -4.41074053014745e-06, -0.0001068115234375, -0.000148773193359375, -0.47132110595703125, -0.04844093322753906, -0.000453948974609375, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.001740574836730957, -4.172325134277344e-06, -0.0002536773681640625, -0.0002384185791015625, -3.24249267578125e-05, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.0007179970853030682, -1.8954096958623268e-05, -0.003390789031982422, -2.622604142743512e-06, -3.814697265625e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.4807969331741333, -2.1457672119140625e-06, -0.0001850128173828125, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.02942800521850586, -8.606910705566406e-05, -0.0438445508480072, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0036287307739257812, -1.9073486328125e-06, -0.0018254518508911133, -7.987022399902344e-06, -0.0008544921875, -1.52587890625e-05, -0.0003643035888671875, -1.9073486328125e-06, -0.005174517631530762, -2.7537309506442398e-05, -0.001579392934218049, 0.0, -0.0001277923583984375, -0.001796722412109375, -1.9073486328125e-06, -1.9073486328125e-05, -7.164478302001953e-05, -2.3841855067985307e-07, -0.017220228910446167, 0.0, -6.866455078125e-05, -0.0001506805419921875, -0.005138397216796875, -9.5367431640625e-06, -0.0003405809111427516, -1.52587890625e-05, -0.0001735687255859375, -4.9591064453125e-05, -0.000759124755859375, -7.62939453125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.000400543212890625, -0.0009765625, -0.00012969970703125, -2.6702880859375e-05, -2.288818359375e-05, -4.76837158203125e-05, -5.3286406910046935e-05, -3.933906555175781e-06, -0.00010681143612600863, 0.0, -0.0003396272659301758, 0.0, -0.0004673004150390625, 0.0, -0.009924888610839844, -7.62939453125e-06, -0.000102996826171875, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -7.212160562630743e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.021154403686523438, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.589557647705078e-05, -4.768370445162873e-07, -0.0005320310592651367, -2.741813204920618e-06, -0.0002506923920009285, -1.9073486328125e-06, -0.0002307891845703125, -0.00982666015625, -0.001331329345703125, -0.5506439208984375], "model_output": {"hole3": "use", "hole7": [{"name": "can_use", "_type": "FunctionDef", "args": {"_type": "Template17"}, "body": [{"_type": "Return", "value": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"hole2": "player", "_type": "Template33", "hole1": "can_use", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "GtE"}], "_type": "Compare", "left": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template59"}]}]}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "MAGE", "_type": "Template15", "hole1": 4, "hole3": "FREE", "hole0": "Multi-Shot"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"_type": "Assign", "targets": [{"_type": "Name", "id": "minions"}], "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "For", "iter": {"args": [{"_type": "Template76"}, {"_type": "Template59"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Assign", "targets": [{"_type": "Name", "id": "minion"}], "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"hole2": [{"_type": "Name", "id": "minion"}], "_type": "Template44", "hole1": "remove", "hole0": {"_type": "Name", "id": "minions"}}, {"hole2": [{"hole2": 3, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "target": {"_type": "Name", "id": "i"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Multi-Shot"}, "choice_history": [121, 201, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Multi-Shot", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 126, 155, 320, 73, 186, "minions", "<EOS>", 20, 163, 17, 156, 25, 186, "copy", "<EOS>", "copy", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 131, 169, 25, 186, "i", "<EOS>", 20, 163, 25, 186, "range", "<EOS>", 321, 113, 102, 334, 126, 155, 320, 73, 186, "minion", "<EOS>", 20, 163, 17, 156, 25, 186, "game", "<EOS>", "random_choice", "<EOS>", 320, 73, 186, "minions", "<EOS>", 145, 250, 25, 186, "minions", "<EOS>", "remove", "<EOS>", 320, 73, 186, "minion", "<EOS>", 145, 250, 25, 186, "minion", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 10, 320, 102], "score": -3.7282821158745065, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"score_history": [-0.3390636444091797, -2.47955322265625e-05, -3.814697265625e-05, -0.0007305145263671875, -3.62396240234375e-05, -1.680836794548668e-05, -0.02179396152496338, -0.025956034660339355, -1.1920928244535389e-07, -7.82012939453125e-05, -0.003025054931640625, -5.7220458984375e-06, -0.0003814697265625, -0.000286102294921875, -0.00012778419477399439, -0.003052353858947754, -0.14866741001605988, -0.025037765502929688, -0.022979736328125, -3.814697265625e-06, -0.000614573189523071, 0.0, -1.1739970445632935, -1.9073486328125e-06, -0.09721946716308594, -1.9073486328125e-06, -0.0004724263562820852, 0.0, -0.001438140869140625, -0.06438350677490234, -3.814697265625e-06, -0.0010402202606201172, -8.0108642578125e-05, -0.000545501708984375, -0.00162506103515625, -8.20159912109375e-05, -5.91278076171875e-05, -0.6484606266021729, -2.3841855067985307e-07, -0.01617431640625, -0.004225730895996094, -0.0005283355712890625, -0.0002307891845703125, -0.00186920166015625, -9.5367431640625e-05, -0.0033512115478515625, -5.7220458984375e-06, -0.008441925048828125, -1.33514404296875e-05, -0.008459091186523438, -3.814697265625e-06, -0.019436120986938477, -2.4437898900941946e-05, -0.030359387397766113, -1.33514404296875e-05, -0.008658019825816154, -7.62939453125e-06, -0.0001354217529296875, -0.6339273452758789, -2.47955322265625e-05, -0.0021953582763671875, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0006875991821289062, 0.0, -0.2816963195800781, 0.0, -0.4098701477050781, -0.0042705535888671875, -0.009273529052734375, -2.288818359375e-05, -0.08895301818847656, -1.9073486328125e-06, -0.0034694671630859375, -4.57763671875e-05, -1.2737879753112793, -1.9073486328125e-06, -0.024549484252929688, -1.1444091796875e-05, -0.04181957244873047, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.8867759704589844, -1.9073486328125e-06, -0.3787720203399658, 0.0, -0.20606069266796112, 0.0, -0.02398681640625], "model_output": {"_type": "Module", "body": [{"name": "PowerWordShield", "_type": "ClassDef", "bases": [{"_type": "Template65"}], "body": [{"hole8": {"_type": "Lambda", "args": {"_type": "Template26", "hole0": "minion"}, "body": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"ops": [{"_type": "Is"}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}}, "comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}, {"ops": [{"_type": "In"}], "_type": "Compare", "left": {"_type": "Template52"}, "comparators": [{"_type": "Name", "id": "targets"}]}]}}, "hole3": "FREE", "hole7": "filter_func", "hole5": {"_type": "Template50"}, "hole2": "WARRIOR", "_type": "Template0", "hole6": "find_friendly_minion_spell_target", "hole1": 1, "hole4": "target_func", "hole0": "Power Word Shield"}, {"_type": "Expr", "value": {"hole2": 1, "_type": "Template37", "hole1": "increase_health", "hole0": {"_type": "Name", "id": "character"}}}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Power", "Word", "Shield", "<EOS>", 320, 108, 333, 136, 197, "Power", " ", "Word", " ", "Shield", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 40, "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 22, 180, 4, 229, "minion", "<EOS>", 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "minion", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 12, 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 69, 166, 41, 317, 11, 320, 73, 186, "targets", "<EOS>", 130, 168, 34, 243, 25, 186, "character", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>", 147], "score": -6.9535920712641754, "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda minion: \n            minion.card.minion_type is MINION_TYPE.BEAST and self.target in\n            targets)\n    character.increase_health(1)\n"}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"score_history": [-1.71661376953125e-05, -1.52587890625e-05, -0.06537004560232162, -0.0055418056435883045, -1.9788581994362175e-05, -8.344591151399072e-07, -3.099440846199286e-06, -6.401538848876953e-05, -7.2479248046875e-05, -0.001495361328125, -0.000156402587890625, -1.168244216387393e-05, -1.3589859008789062e-05, -2.312633478140924e-05, 0.0, -9.41749385674484e-06, 0.0, -0.2326040267944336, -1.9073486328125e-06, -0.0013561248779296875, -1.9073486328125e-06, -0.00020599365234375, 0.0, -0.0002804994583129883, 0.0, -9.72747802734375e-05, -7.2479248046875e-05, -3.814697265625e-05, -3.0994406188256107e-06, -1.0728830375228426e-06, -0.001543520949780941, -3.814697265625e-06, -0.0004119873046875, 0.0, -0.0004634857177734375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "taunt", "_type": "Template27", "hole1": 5, "hole3": {"_type": "Template79"}, "hole0": 3}], "hole2": [{"hole2": "MAGE", "_type": "Template15", "hole1": 4, "hole3": "FREE", "hole0": "Sen'jin Shieldmasta"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Sen'jinShieldmasta"}, "choice_history": [121, 198, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 62], "score": -0.3098994148114116, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"score_history": [-1.9073486328125e-05, -6.866455078125e-05, -1.0728831512096804e-05, -5.5908545618876815e-05, -1.1444075425970368e-05, -1.9073486328125e-06, -0.00010895729064941406, -0.0001131296157836914, -0.0032329559326171875, -0.000476837158203125, -1.71661376953125e-05, -6.29407586529851e-05, -6.413458322640508e-05, -1.3113020031596534e-05, 0.0, -0.0005573034286499023, 0.0, -0.07078659534454346, -1.9073486328125e-06, -0.000732421875, -1.9073486328125e-05, -0.0009613037109375, -1.9073486328125e-06, -3.302078039268963e-05, 0.0, -3.814697265625e-06, -6.4849853515625e-05, -5.53131103515625e-05, -1.537799835205078e-05, 0.0, -0.0011463165283203125, -3.0517578125e-05, -0.37366485595703125, -0.000400543212890625, -0.0011806488037109375, -1.33514404296875e-05, -0.0001850128173828125, -7.62939453125e-06, -0.0007839202880859375, -1.9073486328125e-06, -0.0001361370086669922, -1.1920928244535389e-07, -0.05596518516540527, -2.3841855067985307e-07, -0.01133665256202221, -4.768370445162873e-07, -0.0007256047101691365, 0.0, -0.00067901611328125, -8.0108642578125e-05, -7.43865966796875e-05, -0.0001850128173828125, -0.0002595186233520508, -2.861018856492592e-06, -0.0015610409900546074, -8.225431884056889e-06, -4.9591064453125e-05], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "PRIEST", "_type": "Template15", "hole1": 1, "hole3": "FREE", "hole0": "Sinister Strike"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 3, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "SinisterStrike"}, "choice_history": [121, 200, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "3", "<EOS>", 110], "score": -0.5259687288965651, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"score_history": [-0.002410888671875, -2.47955322265625e-05, -0.00011444091796875, -0.0002155303955078125, -1.1444091796875e-05, -0.010429994203150272, -6.472867244156078e-05, -7.62939453125e-06, -0.0002002716064453125, -1.9073486328125e-05, -0.000102996826171875, -9.5367431640625e-06, -2.1934327378403395e-05, -3.8623809814453125e-05, -0.14789748191833496, 0.0, -0.14718079566955566, 0.0, -0.14291679859161377, -2.288818359375e-05, -0.002356290817260742, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.0001659393310546875, 0.0, -0.8416357040405273, -9.34600830078125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.005908966064453125, -1.4877490997314453, -0.012457610107958317, -0.47422751784324646, -0.03153064101934433, -2.2649765014648438e-06, 0.0, -0.26933956146240234, -0.0035066604614257812, -6.985545041970909e-05, -0.0010871996637433767, -9.572086128173396e-05, -1.1920928244535389e-07, -0.06844782829284668, 0.0, -0.0006580352783203125, -2.86102294921875e-05], "model_output": {"_type": "Module", "body": [{"name": "Succubus", "_type": "ClassDef", "bases": [{"_type": "Template57"}], "body": [{"hole8": {"hole2": "PlayerSelector", "_type": "Template22", "hole0": "Discard"}, "hole3": "FREE", "hole7": "battlecry", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole2": "HUNTER", "_type": "Template0", "hole6": "DEMON", "hole1": 2, "hole4": "minion_type", "hole0": "Succubus"}, {"hole2": "taunt", "_type": "Template7", "hole1": 3, "hole3": {"_type": "Template79"}, "hole0": 4}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Succubus", "<EOS>", 320, 100, 333, 136, 197, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 29, 213, "Discard", "<EOS>", "Player", "Selector", "<EOS>", 149, 291, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 62, 147], "score": -3.6512836344991157, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n"}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"score_history": [-4.57763671875e-05, -2.6702880859375e-05, -0.4998043179512024, -0.0038224030286073685, -7.760318112559617e-05, -7.152475518523715e-07, -2.1457672119140625e-06, -1.251697449333733e-05, -0.0001373291015625, -0.6474142074584961, -0.0005950927734375, -3.814697265625e-06, -0.003116607666015625, -9.5367431640625e-06, -0.4830493927001953, -0.0001239776611328125, -7.43865966796875e-05, -1.7881377516459906e-06, -3.0398339731618762e-05, -0.00017260048480238765, 0.0, -0.6023883819580078, -0.15958786010742188, -0.25017738342285156, -1.9073486328125e-06, -0.0006351470947265625, -0.007445216178894043, -9.5367431640625e-06, -0.0008106231689453125, -0.000102996826171875, 0.0, -2.86102294921875e-05, 0.0, -0.0001087188720703125, -0.00012969970703125, -7.62939453125e-06, -2.253030106658116e-05, -7.62939453125e-06, -5.304715159581974e-05, -6.29425048828125e-05], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 7, "hole0": 7}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "War Golem", "_type": "Str"}, {"_type": "Template59"}, {"_type": "Template48"}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template56"}}, {"_type": "Template75"}], "_type": "Call", "func": {"_type": "Template34"}}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "WarGolem"}, "choice_history": [121, 198, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 163, 32, 324, 76, 194, "War", " ", "Golem", "<EOS>", 102, 95, 65, 156, 43, "LEGENDARY", "<EOS>", 112, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "7", "<EOS>", "7", "<EOS>"], "score": -2.6601011741624916, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, False)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"score_history": [-1.9073486328125e-05, -5.7220458984375e-05, -0.0004161934193689376, -1.39474832394626e-05, -1.4305084050647565e-06, -2.1457672119140625e-06, -1.3470649719238281e-05, -8.58306884765625e-05, -0.001201629638671875, -3.814697265625e-06, -7.05718994140625e-05, -7.43865966796875e-05, -1.71661376953125e-05, -8.392333984375e-05, -1.33514404296875e-05, -0.0001430511474609375, -2.2649765014648438e-06, 0.0, -0.6026945114135742, -0.00128936767578125, -0.0007135018240660429, -6.341835978673771e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-05, -6.29425048828125e-05, -0.8461095094680786, 0.0, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -0.00048828125, 0.0, -6.67572021484375e-05, -0.018096923828125, -0.0002193450927734375, -0.1357746124267578, -0.0001125335693359375, -6.4849853515625e-05, 0.0, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, -0.0003376007080078125, -3.814697265625e-06, -7.152555099310121e-07, -4.768370445162873e-07, -1.1920928244535389e-07, 0.0, -2.622566171339713e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -0.000125885009765625, -0.029451370239257812, -0.010948384180665016, -7.081031799316406e-05, -2.86102294921875e-05, -0.0003986358642578125, -0.010891914367675781, -0.12591195106506348, -0.00159454345703125, -1.9073486328125e-06, -0.201080322265625, -0.0009212493896484375, -0.002567291259765625, -0.002956390380859375, -0.0003757476806640625, -0.0002357959747314453, -1.33514404296875e-05, -0.00024890899658203125, -0.0014687776565551758, -1.9073486328125e-06, -0.3080427646636963, -1.9073486328125e-06, -0.0002155303955078125, -4.76837158203125e-05, -0.0013576745986938477, -1.9073486328125e-06, -1.1801716937043238e-05, -0.22085416316986084, -1.9073486328125e-06, -0.5613360404968262, -0.000240325927734375, -0.00341033935546875, -0.3628894090652466, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.013338088989257812], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 2, "_type": "Template36", "hole1": 4, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "List", "elts": [{"hole2": 2, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}, {"hole2": 2, "_type": "Template28", "hole1": "ChangeHealth", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole3": "SelfSelector", "hole0": "Give"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "Damaged"}], "hole0": "Minion"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "LEGENDARY", "value": {"_type": "Template56"}}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Acidmaw"}, "choice_history": [121, 198, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Acidmaw", "<EOS>", 75, 190, "7", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "LEGENDARY", "<EOS>", 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 327, 117, 227, "Damaged", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "score": -3.4696764066404597, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n"}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"score_history": [-1.1444091796875e-05, -2.47955322265625e-05, -5.006777428206988e-06, -2.1695894247386605e-05, -3.456858394201845e-06, -1.537799835205078e-05, -1.5497207641601562e-05, -0.0011997222900390625, -0.35835838317871094, -1.1444091796875e-05, -3.814697265625e-06, -0.5003585815429688, -3.24249267578125e-05, -0.001956939697265625, -7.2479248046875e-05, -0.0001964569091796875, -1.1920928244535389e-07, 0.0, -0.09096431732177734, -0.0013980865478515625, -7.62939453125e-06, -4.1961669921875e-05, 0.0, -3.4928321838378906e-05, -1.9073486328125e-06, -0.004311323165893555, 0.0, -0.003924369812011719, -0.0001201629638671875, -0.00011444091796875, -0.0032978057861328125, -0.0001659393310546875, -0.00023651123046875, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -3.445148468017578e-05, 0.0, -0.0005397796630859375, -0.008710861206054688, -0.000156402587890625, -8.20159912109375e-05, -5.722029527532868e-06, -2.038478669419419e-05, -2.3841855067985307e-07, -0.0018172162817791104, 0.0, -0.0003871917724609375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "charge", "_type": "Template27", "hole1": 2, "hole3": {"_type": "Template79"}, "hole0": 4}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Boar", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Boar"}, "choice_history": [121, 198, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Boar", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 62], "score": -0.9786784543229814, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"score_history": [-4.9591064453125e-05, -6.103515625e-05, -0.0018587778322398663, -0.06747663021087646, -0.006143573205918074, -8.82148651726311e-06, -4.648783942684531e-06, -1.9073486328125e-06, -0.00010907649993896484, -5.53131103515625e-05, -0.001789093017578125, -0.009523391723632812, -0.0012701002415269613, -4.9591064453125e-05, -0.00033342838287353516, -0.00033974647521972656, -0.0016379356384277344, 0.0, -1.2276519555598497e-05, 0.0, -0.46580028533935547, 0.0, -0.011409280821681023, -3.814697265625e-06, -0.5329189300537109, -4.1961669921875e-05, -3.814697265625e-06, -0.13322138786315918, 0.0, -3.4332275390625e-05, -0.2627582550048828, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.0002049462782451883, 0.0, -0.04877281188964844, 0.0, -8.96453857421875e-05], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "taunt", "_type": "Template27", "hole1": 2, "hole3": {"_type": "Template79"}, "hole0": 2}], "hole2": [{"hole3": "minion_type", "hole2": "PALADIN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Template53"}, "hole0": "Anodized Robo Cub"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "AnodizedRoboCub"}, "choice_history": [121, 198, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 62], "score": -1.5459864302965727, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"score_history": [-5.91278076171875e-05, -0.000118255615234375, -1.0251946150674485e-05, -4.565628114505671e-05, -3.087488948949613e-05, -1.9073486328125e-06, -9.5367431640625e-06, -4.780292510986328e-05, -0.0001125335693359375, -0.03975868225097656, -1.9073486328125e-06, -0.0004749298095703125, -0.00084686279296875, -9.5367431640625e-06, -0.0027027130126953125, -1.33514404296875e-05, -0.0001659393310546875, -2.098061486321967e-05, -7.808150257915258e-05, -4.160325261182152e-05, -1.1920928244535389e-07, -0.9503660202026367, -0.00055694580078125, 0.0, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.3702983856201172, 0.0, -0.04686164855957031, -5.7220458984375e-06, -0.002445220947265625, -0.0007593631744384766, -3.933906555175781e-06, -0.00122833251953125, -1.9073486328125e-05, -3.4332275390625e-05, -0.0053863525390625, -1.9073486328125e-06, -0.0022182464599609375, -5.14984130859375e-05, -0.0003376007080078125, -0.005785226821899414, 0.0, -5.7220458984375e-05, 0.0, -0.0020064115524291992, 0.0, -2.288818359375e-05, -2.6702880859375e-05, -0.000110626220703125, -0.0002739429473876953, 0.0, -0.8367147445678711, -1.71661376953125e-05, -0.003345489501953125, -0.0007534027099609375, -1.71661376953125e-05, -0.006478169467300177, 0.0, -6.866455078125e-05, -0.027545928955078125, -0.001407623291015625, -0.001361846923828125, -1.33514404296875e-05, -2.86102294921875e-05, -0.02518353797495365, -3.3378546504536644e-06, -3.814697265625e-06, -0.9486684799194336, -0.001331329345703125, -0.016904830932617188, -3.814697265625e-06, -0.30274391174316406, -1.9073486328125e-06, -0.03624570369720459, -1.1920928244535389e-07, -0.00024795529316179454, -2.3841855067985307e-07, -0.018583297729492188, -0.4202613830566406, -0.00431060791015625, -0.36820316314697266, 0.0, -0.017426490783691406, -1.9073486328125e-06, -0.022122621536254883, 0.0, -0.0014650821685791016, -3.576278118089249e-07, -0.07226371765136719, -0.29388427734375, -0.0032520294189453125, -0.3733406066894531, 0.0, -0.9328645467758179, -0.002162177814170718, -0.7142505645751953, -0.5467004776000977, -0.005828857421875, -0.011120457202196121, -0.06839223951101303, -0.6771026849746704, -0.0017056475626304746, -0.1045379638671875, -5.7220458984375e-06, -0.8261131048202515, -6.556510470545618e-06, -0.08917903900146484, -7.62939453125e-06, -0.7132198214530945, -4.768370445162873e-07, -0.33266448974609375, -0.000415802001953125, -0.501924991607666, -0.0009816884994506836], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Burrowing Mine", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template56"}}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Template50"}}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"args": [{"args": [{"args": [{"_type": "Template41", "hole1": 0, "hole0": "<UNK>"}, {"_type": "Template46", "hole0": "Draw"}, {"_type": "Template46", "hole0": "Draw"}], "_type": "Call", "func": {"_type": "Name", "id": "<UNK>"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Template64"}}}, {"_type": "Name", "id": "Player"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "BurrowingMine"}, "choice_history": [121, 200, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Burrowing", " ", "Mine", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_spell_damage", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 17, 156, 25, 186, "game", "<EOS>", "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "<UNK>", "<EOS>", 322, 89, 247, "<UNK>", "<EOS>", "take", "<EOS>", 93, 255, "Draw", "<EOS>", 93, 255, "Draw", "<EOS>", 73, 186, "Player", "<EOS>"], "score": -10.766950564729328, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.<UNK>(game.\n            <UNK>(<UNK>(<UNK>(0), Draw(), Draw())))), Player)\n"}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"score_history": [-0.001598358154296875, -5.7220458984375e-05, -1.1444091796875e-05, -0.00037384033203125, -4.9591064453125e-05, -5.0425333029124886e-05, -0.000524275004863739, -7.62939453125e-06, -0.0006561279296875, -7.82012939453125e-05, -0.0015659332275390625, -0.000148773193359375, -0.0003918393049389124, -1.072883515007561e-05, -0.022552967071533203, 0.0, -1.0246469974517822, -4.9591064453125e-05, -0.0004215240478515625, 0.0, -0.0002231597900390625, 0.0, -0.000743865966796875, -0.001178741455078125, -3.814697265625e-06, -0.4492950439453125, -4.9591064453125e-05, -0.3045539855957031, -5.53131103515625e-05, -0.0001888275146484375, -0.0004901885986328125, 0.0, -0.00109100341796875, -0.0001430511474609375, -0.000118255615234375, -0.0001392364501953125, -4.38690185546875e-05, -0.000331878662109375, -9.30981186684221e-05, 0.0, -4.9591064453125e-05, -0.0007038116455078125, -1.9073486328125e-06, -2.6702880859375e-05, -0.00021004676818847656, -3.933904736186378e-06, -0.0008681963663548231, -3.8384725485229865e-05, -1.52587890625e-05, -0.0004024505615234375], "model_output": {"_type": "Module", "body": [{"name": "Crackle", "_type": "ClassDef", "bases": [{"_type": "Template65"}], "body": [{"hole8": {"_type": "Template60"}, "hole3": "COMMON", "hole7": "overload", "hole5": {"_type": "Template50"}, "hole2": "MAGE", "_type": "Template0", "hole6": "find_spell_target", "hole1": 2, "hole4": "target_func", "hole0": "Crackle"}, {"name": "use", "_type": "FunctionDef", "args": {"_type": "Template17"}, "body": [{"_type": "Template19"}, {"hole2": [{"hole2": 6, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Template52"}}]}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Crackle", "<EOS>", 320, 108, 333, 136, 197, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 40, "find_spell_target", "<EOS>", "overload", "<EOS>", 46, 132, 170, "use", "<EOS>", 2, 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "6", "<EOS>", 110, 147], "score": -1.8142586754775039, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"score_history": [-0.0001430511474609375, -0.00011444091796875, -2.1099840523675084e-05, -9.894339200400282e-06, -5.125993993715383e-06, -3.576233211788349e-07, -1.52587890625e-05, -2.1457672119140625e-06, -0.0001697540283203125, -0.0051727294921875, -1.9073486328125e-06, -4.00543212890625e-05, -7.82012939453125e-05, -1.9073486328125e-05, -0.029825210571289062, -0.0003108978271484375, -0.0001430511474609375, -1.9311717551317997e-05, -9.882276935968548e-05, -2.7417810997576453e-05, 0.0, -0.0001316070556640625, -8.58306884765625e-05, -0.000293731689453125, -0.0001010894775390625, -5.7220458984375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0010766983032226562, 0.0, -0.06865978240966797, -5.14984130859375e-05, -0.0003299713134765625, -0.01679229736328125, 0.0, -0.00047206878662109375, 0.0, -0.00012135428551118821, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.1961669921875e-05, -1.537799835205078e-05, 0.0, -0.000782012939453125, -3.62396240234375e-05, -0.00829315185546875, -0.0025272369384765625, -0.01210784912109375, -0.055176835507154465, -1.9073486328125e-06, -0.001667022705078125, -0.6083564758300781, -0.000339508056640625, -0.000751495361328125, -1.9073486328125e-06, -0.0001049041748046875, -0.26248735189437866, -4.768370445162873e-07, -1.33514404296875e-05, -0.027679443359375, -0.00069427490234375, -0.049933433532714844, -0.4673348665237427, -3.814697265625e-06, -0.0026865005493164062], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Emergency Coolant", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"_type": "Template43", "hole1": "calculate_max_health", "hole0": {"_type": "Template52"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Template64"}}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "heal", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "EmergencyCoolant"}, "choice_history": [121, 200, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Emergency", " ", "Coolant", "<EOS>", 103, 95, 94, 112, 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_max_health", "<EOS>", 110], "score": -1.625546612309222, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n"}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"score_history": [-0.00016021728515625, -2.288818359375e-05, -0.00877938698977232, -0.0006198153714649379, -2.503394853192731e-06, -2.1088344510644674e-05, -1.9073486328125e-06, -2.09808349609375e-05, -6.866455078125e-05, -0.0014667510986328125, -0.00018310546875, -0.0002526922326069325, -0.0001201591148856096, -3.6954863844584906e-06, 0.0, -0.0012118816375732422, 0.0, -0.00031280517578125, -1.9073486328125e-06, -1.71661376953125e-05, -5.7220458984375e-06, -0.010926246643066406, -9.5367431640625e-06, -5.7220458984375e-06, -0.03494453430175781, 0.0, -0.001148223876953125, -0.024641990661621094, -1.1444091796875e-05, -8.82148651726311e-06, -5.960462772236497e-07, -5.744783265981823e-05, -1.9073486328125e-06, -0.12312793731689453, -8.96453857421875e-05, -0.0007877349853515625], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "windfury", "_type": "Template27", "hole1": 4, "hole3": {"_type": "Template79"}, "hole0": 1}], "hole2": [{"hole3": "minion_type", "hole2": "COMMON", "_type": "Template10", "hole1": 3, "hole4": {"_type": "Template53"}, "hole0": "Flying Machine"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "FlyingMachine"}, "choice_history": [121, 198, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 62], "score": -0.20903512681690017, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"score_history": [-0.029674530029296875, -0.0001506805419921875, -4.38690185546875e-05, -0.0026226043701171875, -1.1444091796875e-05, -0.0013709203340113163, -1.6927675460465252e-05, -1.7642851162236184e-05, -2.09808349609375e-05, -0.0006465911865234375, -2.47955322265625e-05, -0.000820159912109375, -6.103515625e-05, -9.655486064730212e-05, -0.00010955295874737203, -0.00013493681035470217, -1.1444091796875e-05, -0.0007010698318481445, 0.0, -0.07865262031555176, -1.9073486328125e-06, -0.03163635730743408, 0.0, -0.0011256933212280273, -3.24249267578125e-05, -0.0016193389892578125, 0.0, -0.0003070831298828125, -1.0728830375228426e-06, -0.4197767972946167, -1.9073486328125e-06, -0.0010349750518798828, 0.0, -0.00240325927734375, -0.21947002410888672, -0.016912339255213737, -2.9444672691170126e-05, -1.71661376953125e-05, -0.008668899536132812, -0.000370025634765625, -0.0008261035545729101, -2.47955322265625e-05, -0.00037991811404936016, -0.0044731940142810345, 0.0, -0.22266142070293427, -1.71661376953125e-05, -0.14063608646392822, 0.0, -2.622604142743512e-06, -0.000232696533203125, -0.2419595718383789, -0.0002498626708984375, -3.62396240234375e-05, 0.0, -0.019017696380615234, -0.0003997086314484477, -0.00023365020751953125, -3.24249267578125e-05, -0.15503692626953125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.09891128540039062, -0.00020420551300048828, -0.087554931640625, -0.015507698059082031, -2.4078501155599952e-05, -0.00032412115251645446, -0.00029695031116716564, -3.3736228942871094e-05, -3.814697265625e-06], "model_output": {"_type": "Module", "body": [{"name": "GoblinAuto-Barber", "_type": "ClassDef", "bases": [{"_type": "Template57"}], "body": [{"hole8": {"hole2": "MinionSelector", "_type": "Template22", "hole1": [{"hole2": 3, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}], "hole3": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "hole0": "Give"}, "hole3": "COMMON", "hole7": "battlecry", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole2": "HUNTER", "_type": "Template0", "hole6": "BEAST", "hole1": 2, "hole4": "minion_type", "hole0": "Goblin Auto-Barber"}, {"_type": "Template8", "hole1": 2, "hole0": 3}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Goblin", "Auto-Barber", "<EOS>", 320, 100, 333, 136, 197, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 29, 218, "Give", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 150, 302, "3", "<EOS>", "2", "<EOS>", 147], "score": -1.8077524881438194, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(3))), MinionSelector(IsType(\n            MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.0011671965476125479, -1.7881320673041046e-05, -1.0251977982989047e-05, -1.1920906217710581e-07, -2.503394853192731e-06, -5.9604644775390625e-06, -7.82012939453125e-05, -0.0003414154052734375, -3.814697265625e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.91278076171875e-05, -8.7738037109375e-05, -7.62939453125e-06, -3.0517578125e-05, -1.800052632461302e-05, -0.0005248620291240513, -3.266287239966914e-05, -1.1920928244535389e-07, -0.26883697509765625, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -0.9835996627807617, -3.4332275390625e-05, -0.000904083251953125, -8.20159912109375e-05, -0.0008525848388671875, -7.2479248046875e-05, -0.04764270782470703, 0.0, -0.0001239776611328125, 0.0, -1.1444091796875e-05, 0.0, -0.0001392364501953125, -0.0002899169921875, -0.0001239776611328125, -3.814689534920035e-06, -4.112651004106738e-05, -5.960462772236497e-07, 0.0, -0.0007567400461994112, -1.1920928244535389e-07, -3.814697265625e-06, -2.6702880859375e-05, -0.12140178680419922, -0.00016260147094726562, -0.011999130249023438, -4.768367489305092e-06, -2.47955322265625e-05, -0.0001163482666015625, -0.1038522720336914, -0.01589951105415821, -0.00013172625040169805, -7.62939453125e-06, -0.08928203582763672, -0.00098419189453125, -0.0017368787666782737, -3.814697265625e-06, -0.0013732090592384338, -0.0001926422119140625, -3.814697265625e-06, -0.000213623046875, -1.33514404296875e-05, -0.001445770263671875, -0.027410507202148438, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.002459287643432617, -3.159046173095703e-05, 0.0, 0.0, -0.000396728515625], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 2, "_type": "Template36", "hole1": 2, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Template40", "hole0": 1}], "hole3": "MinionSelector", "hole0": "Give", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "RandomPicker"}}]}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnEnded"}], "hole0": "Minion"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Iron Sensei", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template49"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "IronSensei"}, "choice_history": [121, 198, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Iron", " ", "Sensei", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 327, 117, 227, "Turn", "Ended", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 88, 246, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "score": -1.6852787820710518, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n"}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"score_history": [-0.009645462036132812, -0.0002651214599609375, -0.0001239703269675374, -2.2888176317792386e-05, -3.933856532967184e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0002040863037109375, -0.0001068115234375, -4.38690185546875e-05, -2.09808349609375e-05, -0.000152587890625, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -4.00543212890625e-05, -4.339212318882346e-05, -1.9073486328125e-06, -0.0998220443725586, -0.0002193450927734375, -0.00876687467098236, -8.821474693831988e-06, -0.0001506805419921875, -2.86102294921875e-05, -8.392333984375e-05, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.17076361179351807, 0.0, -0.034058570861816406, -3.814697265625e-06, -4.1961669921875e-05, -0.09569990634918213, -0.0001621246337890625, -3.0517578125e-05, -0.43515872955322266, -0.00151824951171875, -0.2783012390136719, 0.0, -0.3466987609863281, -0.7837066650390625, -0.05695260316133499, -0.00035828296677209437, -0.05464406684041023, -9.5367431640625e-06, -1.1920928244535389e-07, -0.06833362579345703, -9.5367431640625e-06, -0.0001964569091796875, -0.38385009765625, -4.1961669921875e-05, -6.103515625e-05, 0.0, -0.00023663043975830078, -4.935263859806582e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.288818359375e-05, -0.012297630310058594, -1.9073486328125e-06, -0.0002460479736328125, -1.9073486328125e-06, -0.07935010641813278, -0.00010120868682861328, -1.9073486328125e-06, -0.06795728206634521, 0.0, -5.841255187988281e-06, 0.0, -3.24249267578125e-05, -0.0016632080078125, -1.1444091796875e-05, -2.503394853192731e-06, 0.0, -6.556507287314162e-06, 0.0], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 7, "hole0": 9}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template56"}}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "combo", "value": {"hole2": "MinionSelector", "_type": "Template22", "hole4": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template46", "hole0": "BothPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole0": "Bounce"}}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Mal'Ganis"}, "choice_history": [121, 198, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mal'Ganis", "<EOS>", 75, 190, "9", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 214, "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "9", "<EOS>", "7", "<EOS>"], "score": -2.9926031784914287, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n"}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -9.72747802734375e-05, -0.0005060350522398949, -0.000815955747384578, -0.0001675945386523381, -0.0011571345385164022, -2.3841846541472478e-07, -5.006785613659304e-06, -4.0411949157714844e-05, -0.0001068115234375, -0.0001068115234375, -7.62939453125e-06, -1.33514404296875e-05, -0.000133514404296875, -0.000179290771484375, -4.38690185546875e-05, -3.24249267578125e-05, -0.0005588531494140625, -1.9430925021879375e-05, -0.00028312206268310547, -0.000275336584309116, -9.1552734375e-05, -0.00032423704396933317, -3.814697265625e-06, -0.7122507095336914, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -2.09808349609375e-05, -0.2954188585281372, 0.0, -0.000213623046875, -1.1444091796875e-05, -0.03301239013671875, -3.814697265625e-05, -0.43190956115722656, 0.0, -0.0042629241943359375, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -2.86102294921875e-05, -0.0136260986328125, -3.62396240234375e-05, -1.072882923836005e-06, -1.0728830375228426e-06, -1.7642974853515625e-05, -7.152555099310121e-07, -0.00014495849609375, -1.1920922133867862e-06, -0.0001773834228515625, -0.00017547607421875, -0.5661792755126953, -0.8263877630233765, -0.09106934070587158, -0.000110626220703125, -0.3694581985473633, -3.4332275390625e-05, -0.009043693542480469, -5.7220458984375e-06, -0.03613471984863281, -0.0005017518997192383, -1.919269561767578e-05, -4.57763671875e-05, -0.4953880310058594, -6.103515625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0003681182861328125, -5.340576171875e-05, -0.3896188735961914, -1.71661376953125e-05, -1.1444091796875e-05, -0.006298065185546875, -0.14582538604736328, -0.10022735595703125, -9.5367431640625e-06, -8.0108642578125e-05, -0.25819873809814453, -0.0006999969482421875, -5.841255187988281e-06, 0.0, -3.814697265625e-06, -9.5367431640625e-05], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 4, "_type": "Template36", "hole1": 1, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Template63"}], "hole3": "HeroSelector", "hole0": "Heal"}], "_type": "Template24", "hole1": [{"args": [{"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "Attack"}], "hole0": "Minion"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Mistress of Pain", "_type": "Str"}, {"_type": "Template63"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template49"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "MECH"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "MistressOfPain"}, "choice_history": [121, 198, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Mistress", " ", "of", " ", "Pain", "<EOS>", 106, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 118, 248, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 327, 117, 228, "Attack", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 79, 223, "Heal", "<EOS>", 320, 106, "Hero", "Selector", "<EOS>", 320, 105], "score": -4.7924072601822445, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Attack(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Heal(4), HeroSelector()))])\n"}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"score_history": [-3.814697265625e-06, -0.0003108978271484375, -0.0023712394759058952, -7.629321771673858e-05, -9.536738616588991e-07, -5.6505123211536556e-05, -2.5987625122070312e-05, -0.0001010894775390625, -0.0029926300048828125, -6.29425048828125e-05, -2.50339189733495e-06, -3.814697265625e-06, -4.070199793204665e-06, 0.0, -0.6155835390090942, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.01381683349609375, 0.0, -1.7523765563964844e-05, 0.0, -5.340576171875e-05, -0.40863990783691406, -0.000484466552734375, -1.1920922133867862e-06, -7.152555099310121e-07, -2.2649765014648438e-06, -2.1576648578047752e-05, -0.02258169651031494, -1.1920928244535389e-07, -0.000415802001953125, -0.0004329681396484375, -0.018713951110839844, -0.06851885467767715, -0.016724348068237305, -3.4332275390625e-05, -2.86102294921875e-05, -0.0008831024169921875, -9.5367431640625e-05, -0.0016822782345116138, -0.3183172643184662, -5.53131103515625e-05, 0.0, -0.000850677490234375, -0.615199089050293, -0.017740726470947266, -2.384185791015625e-06, -3.0517578125e-05, -0.6213150024414062, -0.0001964569091796875, -0.09528931975364685, -2.47955322265625e-05, -0.012106135487556458, 0.0, -1.1920928244535389e-07, -0.0047779083251953125, -1.52587890625e-05, -0.00017547607421875, -0.028036117553710938, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -0.16244912147521973, -3.4451481042196974e-05, 0.0, 0.0, -0.0031108856201171875], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 2, "_type": "Template36", "hole1": 3, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Template38", "hole0": 1}], "hole3": "MinionSelector", "hole0": "Give", "hole5": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "RandomPicker"}}]}], "_type": "Template24", "hole1": [{"_type": "Template46", "hole0": "IsSpell"}], "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "CharacterAttack"}], "hole0": "Weapon"}], "hole2": [{"hole2": "PRIEST", "_type": "Template15", "hole1": 3, "hole3": "RARE", "hole0": "Powermace"}], "_type": "Template1", "hole1": "WeaponCard", "hole4": "player", "hole0": "Powermace"}, "choice_history": [121, 198, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Character", "Attack", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "score": -3.0545185140499456, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, effects=[Effect(CharacterAttack(IsSpell()),\n            ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=\n            RandomPicker())))])\n"}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"score_history": [-0.0027790069580078125, -0.0001735687255859375, -2.09808349609375e-05, -0.000888824462890625, -1.71661376953125e-05, -0.0013066371902823448, -2.610666342661716e-05, -0.0010372998658567667, -1.9073486328125e-06, -0.0007266998291015625, -0.0002288818359375, -0.0016765594482421875, -5.340576171875e-05, -0.00012277826317586005, -0.00021420326083898544, -2.872943878173828e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.4692128896713257, -9.5367431640625e-06, -7.867813110351562e-05, 0.0, -0.001695977640338242, -0.0001888275146484375, -0.0002613067626953125, -3.24249267578125e-05, -0.0001544952392578125, -1.1920928244535389e-07, -0.39662039279937744, -1.9073486328125e-05, -0.0007089375867508352, 0.0, -0.0019626617431640625, -0.07732391357421875, -0.000638473778963089, -0.003398895263671875, -0.0001964569091796875, -0.13101768493652344, -0.004131317138671875, -0.09430883824825287, -0.00020813765877392143, -0.002216178923845291, -1.5497207641601562e-05, -2.3841855067985307e-07, -7.62939453125e-05, -0.0003986358642578125, -0.0013675689697265625, -3.814697265625e-06, -0.000396728515625, -0.0002845525450538844, -0.000184535892913118, -0.004043936729431152, -0.0001239776611328125, -0.0019321441650390625, -4.76837158203125e-05, -0.001094818115234375, -0.0007724761962890625, -0.033266305923461914, -1.9073486328125e-06, -0.00037384033203125, -4.1961669921875e-05, -0.012727375142276287, -5.340576171875e-05, 0.0, -0.00157928466796875, -0.000293731689453125, -3.266301064286381e-05, -4.768370445162873e-07, -4.315376281738281e-05, -5.722029527532868e-06, -4.38690185546875e-05], "model_output": {"_type": "Module", "body": [{"name": "ScrewjankClunker", "_type": "ClassDef", "bases": [{"_type": "Template57"}], "body": [{"hole8": {"hole3": [{"args": [{"_type": "Template53"}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "hole2": "MinionSelector", "_type": "Template22", "hole1": [{"_type": "Template40", "hole0": 4}], "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole0": "Give"}, "hole3": "RARE", "hole7": "battlecry", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole2": "HUNTER", "_type": "Template0", "hole6": "MECH", "hole1": 4, "hole4": "minion_type", "hole0": "Screwjank Clunker"}, {"_type": "Template8", "hole1": 5, "hole0": 2}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Screwjank", "Clunker", "<EOS>", 320, 100, 333, 136, 197, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 29, 219, "Give", "<EOS>", 320, 88, 246, "4", "<EOS>", "Minion", "Selector", "<EOS>", 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 99, 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", 150, 302, "2", "<EOS>", "5", "<EOS>", 147], "score": -1.2529099517431277, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"score_history": [-2.47955322265625e-05, -3.62396240234375e-05, -0.0001426914386684075, -0.3585166335105896, -0.004444820340722799, -7.748434654786251e-06, -9.894371032714844e-06, -1.71661376953125e-05, -0.0003910064697265625, -0.0086669921875, -0.002010345458984375, -0.0013775817351415753, -6.318092346191406e-05, -0.4612128734588623, -0.02422928810119629, -0.29061782360076904, 0.0, -0.0005300039774738252, 0.0, -0.0009274482727050781, 0.0, -0.011325836181640625, -1.52587890625e-05, 0.0, -1.1444089977885596e-05, 0.0, -0.00014495849609375, -0.0013561248779296875, 0.0, 0.0, -2.384185791015625e-06, -0.002158936345949769, -1.311301275563892e-06, -0.0005723237991333008, -0.0001316070556640625, -0.0016412734985351562, -0.0005893707275390625, -0.000152587890625, -2.288818359375e-05, -0.0004711151123046875, -4.5299530029296875e-06, -0.009244918823242188, -0.14270687103271484, -0.00025177001953125, -0.0025937482714653015, -0.00030218256870284677, -0.37529876828193665, -0.04088026285171509, -0.05161260440945625, -0.43958568572998047, -1.1444091796875e-05, -0.00026738643646240234, -5.125998541188892e-06, 0.0], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "deathrattle", "_type": "Template27", "hole1": 7, "hole3": {"args": [{"_type": "Template31", "hole1": "SneedOld", "hole0": "Summon"}, {"_type": "Template46", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}, "hole0": 5}], "hole2": [{"hole3": "minion_type", "hole2": "LEGENDARY", "_type": "Template10", "hole1": 8, "hole4": {"_type": "Template53"}, "hole0": "<UNK> Old"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "<UNK>Shredder"}, "choice_history": [121, 198, "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 332, 137, 202, "<UNK>", " ", "Old", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 42, "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 82, 234, "Summon", "<EOS>", "Sneed", "Old", "<EOS>", 93, 255, "Player", "Selector", "<EOS>"], "score": -2.2345892525790987, "inferred_code": "class <UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old', 8, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(SneedOld()),\n            PlayerSelector()))\n"}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"score_history": [-0.001880645751953125, -9.5367431640625e-06, -0.002676980569958687, -0.003724981565028429, -0.00030105121550150216, -4.661083221435547e-05, -7.82012939453125e-05, -0.01013946533203125, -0.03394603729248047, -1.5104637145996094, -0.9754371643066406, -0.14266908168792725, -0.49247026443481445, -0.0002713203430175781, -3.254413604736328e-05, -0.00011824991088360548, -0.03855883702635765, -7.62939453125e-06, -0.3635157346725464, -0.04050683230161667, -0.0001277923583984375, -0.11949443817138672, -0.007860183715820312, -0.036533355712890625, -0.23967838287353516, -0.00418853759765625, -0.01706695556640625, -3.24249267578125e-05, -0.0027713263407349586, -0.0035495758056640625, 0.0, -0.010929873213171959, 0.0, -0.0104522705078125, -0.0017242431640625, -0.0003566741943359375, -1.9073486328125e-05, -0.00019311904907226562, -0.004020333290100098, -1.9073486328125e-06, -0.020821526646614075, -5.7220458984375e-06, -0.0006198883056640625, -0.0066471099853515625, -2.1457672119140625e-06, 0.0, -0.0001735687255859375, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.0074253082275390625, -0.02516460418701172, -0.0001354217529296875, -3.170964555465616e-05, -2.741813204920618e-06, -0.00020955178479198366, -5.960462772236497e-07, -0.05738508701324463, -2.86102294921875e-05, -0.08719539642333984, -0.0008106231689453125, -0.001056671142578125, -7.05718994140625e-05, -0.05949997901916504, -8.344646857949556e-07, -0.025754928588867188, -0.6701459884643555, -1.1444091796875e-05, -0.7332749366760254, -9.167194366455078e-05, -0.11738204956054688, -5.340576171875e-05, -0.04582318663597107, -8.225420970120467e-06, -1.9073486328125e-06, -0.002355449367314577, -0.0005724430084228516, -5.7220458984375e-06], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "deathrattle", "_type": "Template27", "hole1": 7, "hole3": {"args": [{"_type": "Template46", "hole0": "Draw"}, {"_type": "Template31", "hole1": "EnemyPlayer", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}, "hole0": 5}], "hole2": [{"hole3": "Give", "hole5": "SelfSelector", "hole2": "LEGENDARY", "_type": "Template6", "hole1": 6, "hole4": [{"_type": "List", "elts": [{"hole2": 1, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}, {"hole2": 1, "_type": "Template28", "hole1": "ChangeHealth", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Add Spare"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Toshley"}, "choice_history": [121, 198, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Add", " ", "Spare", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 163, 25, 186, "Deathrattle", "<EOS>", 321, 93, 255, "Draw", "<EOS>", 82, 234, "Player", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"], "score": -5.938689227795237, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Add Spare', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            EnemyPlayer())))\n"}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"score_history": [-0.3645505905151367, -0.0002040863037109375, -0.00011240804451517761, -1.3351394954952411e-05, -9.889074135571718e-06, -5.7220458984375e-06, -0.00010323524475097656, -9.1552734375e-05, -0.011600494384765625, -4.1961669921875e-05, -0.00013791641686111689, -4.017353057861328e-05, -0.00014805795217398554, -4.768370445162873e-07, -0.510718822479248, 0.0, -0.26209306716918945, 0.0, -0.0015401840209960938, -0.3933677673339844, -0.8702365159988403, -0.00049792998470366, -0.0030651092529296875, -1.1121349334716797, -0.6548089981079102, -0.0025826692581176758, -0.0007160867680795491, -2.0265579223632812e-06, -3.814697265625e-05, -0.059983253479003906, -0.0024261474609375, -0.05727231502532959, -2.09808349609375e-05, -0.0025949478149414062, -0.00731658935546875, -0.03835582733154297, -0.0002288818359375, -5.7220458984375e-06, 0.0, -0.005094289779663086, -0.0005128346965648234, -3.635883331298828e-05, -7.05718994140625e-05, -0.005107879638671875, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -0.1296215057373047, -3.814697265625e-06, -0.006712079048156738, -1.52587890625e-05, 0.0, -0.000396728515625, 0.0, -0.0002307891845703125, 0.0, -0.0001544952392578125, -0.18395614624023438, -8.0108642578125e-05, -0.0009232072625309229, -1.9073486328125e-06, -0.0006282980320975184, -5.7220458984375e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 3, "hole0": 1}], "hole2": [{"hole3": "battlecry", "hole2": "PALADIN", "_type": "Template11", "hole1": 1, "hole4": {"hole2": "SelfSelector", "_type": "Template22", "hole1": [{"_type": "Template30", "hole1": [{"hole2": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Template35", "hole1": {"_type": "Template74"}, "hole0": "Count"}], "hole0": "ChangeAttack"}], "hole0": "Enrage"}, "hole0": "Warbot"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Warbot"}, "choice_history": [121, 198, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Warbot", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 29, 216, "Enrage", "<EOS>", 320, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 320, 68, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "3", "<EOS>"], "score": -4.690698942982522, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            COMMON, battlecry=Battlecry(Enrage(Buff(ChangeAttack(Count(\n            MinionSelector(IsType(MINION_TYPE.BEAST)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n"}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -1.6331539882230572e-05, -0.00010084671521326527, 0.0, -2.503394853192731e-06, -7.867811291362159e-06, -0.0001621246337890625, -0.000720977783203125, -0.0001316070556640625, -1.5497195136049413e-06, -2.2649765014648438e-06, -2.0265579223632812e-06, -3.576278118089249e-07, -3.290176027803682e-05, -3.814697265625e-06, -0.0003819465637207031, 0.0, -4.506111145019531e-05, 0.0, -4.673001967603341e-05, 0.0, -0.000110626220703125, -0.000240325927734375, -2.47955322265625e-05, -6.318092346191406e-06, 0.0, -0.0002365084656048566, -2.622600959512056e-06, -0.2138381004333496, 0.0, -0.000316619873046875], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "taunt", "_type": "Template27", "hole1": 8, "hole3": {"_type": "Template79"}, "hole0": 2}], "hole2": [{"hole2": "ALL", "_type": "Template15", "hole1": 3, "hole3": "RARE", "hole0": "Deathlord"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Deathlord"}, "choice_history": [121, 198, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 62], "score": -0.21646916138939787, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True)\n"}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.00250894739292562, -9.786603914108127e-05, -3.814689989667386e-06, 0.0, -3.576277322281385e-06, -6.079673767089844e-06, -8.7738037109375e-05, -0.31744861602783203, -1.0150136947631836, -3.099440846199286e-06, -1.1920928955078125e-05, -3.218649908376392e-06, -1.9073486328125e-06, -1.2516916285676416e-05, 0.0, -0.12006545066833496, -3.814697265625e-06, -0.035972245037555695, -0.1743994951248169, -1.1444091796875e-05, -0.4438304901123047, -0.00079345703125, -0.001155853271484375, -2.47955322265625e-05, -0.480849027633667, -0.0009349584579467773, -7.93933795648627e-05, -0.04046440124511719, -0.1983795166015625, -7.43865966796875e-05, -4.76837158203125e-05, -1.1444091796875e-05, -0.005556310992687941, -0.0027306033298373222, -2.1457672119140625e-06, -5.7220458984375e-06, -0.000240325927734375, -0.00043487548828125, -0.0007476806640625, -0.2173452377319336, -0.00159454345703125, -0.00061798095703125, -5.14984130859375e-05, -3.4332275390625e-05, -0.00023794174194335938, -3.707408541231416e-05, 0.0, -3.0517578125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -0.000518798828125, -9.72747802734375e-05, -0.0005435943603515625, -5.340576171875e-05, -3.814697265625e-06, 0.0, -0.00195920467376709, -0.000523686408996582, -2.0265579223632812e-06, -5.7220458984375e-06, -0.11037445068359375, -1.52587890625e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.000274658203125, 0.0, -0.00623321533203125, -4.1961669921875e-05, -0.03106975555419922, -1.71661376953125e-05, -0.001636505126953125, -2.0265579223632812e-06, -0.00026702880859375, -0.02395928092300892, -7.62939453125e-06, 0.0, -0.06383514404296875, -1.9073486328125e-06, -1.1444091796875e-05, -0.01085662841796875, -7.62939453125e-06, -8.7738037109375e-05, -2.6702880859375e-05, -0.0046471357345581055, -9.5367431640625e-05, 0.0, -0.0006009340286254883, 0.0, -7.748603820800781e-06, 0.0, -2.288818359375e-05, -3.4332275390625e-05, -2.288818359375e-05, -7.152555099310121e-07, 0.0, -0.0002518892288208008, -1.9073486328125e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 4, "hole0": 1}], "hole2": [{"hole3": "Give", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole5": "MinionSelector", "hole2": "COMMON", "_type": "Template6", "hole1": 2, "hole4": [{"args": [{"args": [{"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}], "_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"args": [{"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}}]}, {"_type": "Template46", "hole0": "BothPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}}], "hole0": "Nerub'ar Weblord"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Nerub'arWeblord"}, "choice_history": [121, 198, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 46, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 93, 255, "Both", "Player", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "4", "<EOS>"], "score": -3.3201634036590804, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(AuraUntil(\n            ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON)), BothPlayer())), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n"}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.00967681035399437, -0.00021300629305187613, -1.549711487314198e-05, -4.410647306940518e-06, -7.748603820800781e-06, -4.5299530029296875e-06, -3.814697265625e-05, -0.3277435302734375, -3.814697265625e-05, -3.576278118089249e-07, -1.33514404296875e-05, -1.9907789464923553e-05, 0.0, -0.0006499618757516146, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.6441516876220703, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -5.53131103515625e-05, -0.22689056396484375, -2.288818359375e-05, -1.1920928244535389e-07, 0.0, -0.00021420822304207832, -1.1920928244535389e-07, -0.2098522186279297, 0.0, -0.0386199951171875], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "spell_targetable", "_type": "Template27", "hole1": 6, "hole3": {"_type": "Template75"}, "hole0": 4}], "hole2": [{"hole2": "ALL", "_type": "Template15", "hole1": 5, "hole3": "COMMON", "hole0": "Spectral Knight"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "SpectralKnight"}, "choice_history": [121, 198, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 58], "score": -1.4583393307092791, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"score_history": [-9.5367431640625e-06, -1.9073486328125e-05, -0.028918195515871048, -0.0036775190383195877, -0.0001538882206659764, -2.3841846541472478e-07, -0.00014316091255750507, -2.1100036974530667e-05, -0.000118255615234375, -0.007938385009765625, -0.6236391067504883, -5.364403477869928e-06, -1.9431114196777344e-05, -2.622604142743512e-06, -1.9073486328125e-06, -1.621246337890625e-05, 0.0, -0.0004656313976738602, -9.5367431640625e-06, -0.06434791535139084, -0.00015878677368164062, -2.288818359375e-05, -0.11796092987060547, -0.0053195953369140625, -0.8985692262649536, -0.14789259433746338, -0.06189964711666107, -3.814697265625e-06, -0.0020427871495485306, -5.7220458984375e-06, -5.483625955093885e-06, -0.033344268798828125, -3.814697265625e-05, -4.76837158203125e-05, -0.0004749298095703125, -6.29425048828125e-05, -0.13382339477539062, -5.7220458984375e-06, -0.2224045991897583, -5.53131103515625e-05, -0.0003714561462402344, 0.0, -1.2397729733493179e-05, 0.0, -9.72747802734375e-05, -0.32560062408447266, -1.1444091796875e-05, -0.00019848346710205078, -1.0609570381348021e-05, -0.0002449524763505906, -6.4373016357421875e-06, -0.38543426990509033, -0.0011262893676757812, -0.07110214233398438, -0.0004405975341796875, -0.0002994537353515625, -0.015314102172851562, -0.002613067626953125, -0.9724612236022949, -0.12044885009527206, -0.0018264055252075195, -0.0046405792236328125], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "buffs", "_type": "Template27", "hole1": 5, "hole3": {"_type": "List", "elts": [{"_type": "Template30", "hole0": "WailingAttack"}, {"_type": "Template62_expr_seq"}]}, "hole0": 3}], "hole2": [{"hole3": "Silence", "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template46", "hole0": "Adjacent"}}], "hole5": "MinionSelector", "hole2": "RARE", "_type": "Template6", "hole1": 4, "hole4": [{"_type": "Template41", "hole1": 1, "hole0": "Silence"}], "hole0": "Wailing Soul"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "WailingSoul"}, "choice_history": [121, 198, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 320, 89, 247, "Silence", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "3", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 23, 181, 321, 81, 232, "Wailing", "Attack", "<EOS>", 105], "score": -4.25590621827007, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Silence(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(3, 5, buffs=[Buff(WailingAttack())])\n"}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"score_history": [-2.288818359375e-05, -0.000110626220703125, -0.0053550610318779945, -0.003182117361575365, -0.0006492665852420032, -2.145741746062413e-06, -4.2557716369628906e-05, -3.564357393770479e-05, -0.0001125335693359375, -0.000774383544921875, -0.00012969970703125, -1.6331539882230572e-05, -1.537799835205078e-05, -2.3483997210860252e-05, 0.0, -0.006609460338950157, 0.0, -0.0004544258117675781, -5.7220458984375e-06, -1.1563301086425781e-05, 0.0, -0.0005322694778442383, 0.0, -0.000225067138671875, -0.01668548583984375, -7.62939453125e-06, -1.9073486328125e-06, -7.152555099310121e-07, -6.34174284641631e-05, -1.1920922133867862e-06, -0.0030518770217895508, -3.814697265625e-06, -0.000255584716796875, -7.43865966796875e-05, -0.0033082962036132812, -3.4332275390625e-05, -0.000240325927734375, -0.00012969970703125, -0.00020599365234375, -0.6219713687896729, -0.00020110605692025274, -0.0005092620849609375, -5.14984130859375e-05, -0.0003750284668058157, -3.576278118089249e-07, -1.1920928244535389e-07, -0.0004749298095703125, -9.918212890625e-05], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "enrage", "_type": "Template27", "hole1": 3, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole1": [{"_type": "Template38", "hole0": 3}, {"_type": "Template46", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole0": 2}], "hole2": [{"hole2": "ALL", "_type": "Template14", "hole1": 2, "hole0": "Amani Berserker"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "AmaniBerserker"}, "choice_history": [121, 198, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "3", "<EOS>", 93, 255, "Self", "Selector", "<EOS>", 320, 105], "score": -0.6660581356308555, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"score_history": [-7.62939453125e-06, -7.62939453125e-06, -0.00017534149810671806, -3.2305197237292305e-05, -3.671598096843809e-05, -8.344645721081179e-07, -4.768371127283899e-06, -2.110004425048828e-05, -0.0002880096435546875, -0.0001964569091796875, -3.0517578125e-05, -5.960462772236497e-07, -2.753734588623047e-05, -1.1920928244535389e-07, 0.0, -0.02471962571144104, -1.1920928244535389e-07, -0.06474936008453369, -3.814697265625e-06, -0.00033795807394199073, 0.0, -0.0007021427154541016, 0.0, -8.225440979003906e-06, 0.0, -5.91278076171875e-05, -4.00543212890625e-05, -3.24249267578125e-05, -2.8610181743715657e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, -1.7881377516459906e-06, -4.017353057861328e-05, -1.311301275563892e-06, -1.71661376953125e-05, -9.1552734375e-05, -0.0019741058349609375, -0.001535365590825677, -0.008153915405273438, -0.00046432018280029297, -0.0001850128173828125, -0.016699790954589844, -0.000431060791015625, -0.004396796226501465, -0.024337291717529297, -0.00011265277862548828, -0.0023525578435510397, -3.814697265625e-05, -3.814697265625e-06, -0.0007648468017578125, -0.0003566741943359375, -0.016666173934936523, -0.00011110305786132812, -1.7523765563964844e-05, -5.7220458984375e-06, -0.0004425048828125, -4.00543212890625e-05, -0.0001087188720703125, 0.0, -0.00048673152923583984, -0.00020825862884521484, -0.0001220703125, -0.013669967651367188, -2.86102294921875e-05, -1.33514404296875e-05, -0.040671348571777344, -1.9073486328125e-06, -0.03204345703125, -0.0064029693603515625, -0.0007675886154174805, -0.0005218982696533203, -4.9591064453125e-05, -0.0021190643310546875, -0.0023670196533203125, -0.000156402587890625, -0.00609588623046875, -0.00016105173563119024, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 7, "_type": "Template36", "hole1": 5, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole1": [{"_type": "Template53"}], "hole0": "IsType"}}]}], "hole3": "PlayerSelector", "hole0": "AddCard"}], "_type": "Template24", "hole1": [{"_type": "Template41", "hole1": 1, "hole0": "ManaCost"}], "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "SpellCast"}], "hole0": "Minion"}], "hole2": [{"hole2": "ROGUE", "_type": "Template15", "hole1": 7, "hole3": "LEGENDARY", "hole0": "Archmage Antonidas"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "ArchmageAntonidas"}, "choice_history": [121, 198, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 327, 117, 228, "Spell", "Cast", "<EOS>", 320, 89, 247, "Mana", "Cost", "<EOS>", "1", "<EOS>", 320, 79, 223, "Add", "Card", "<EOS>", 320, 68, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 252, "Is", "Type", "<EOS>", 320, 99, 320, 105, "Player", "Selector", "<EOS>", 320, 105], "score": -0.27679912757119496, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n"}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"score_history": [-0.0019168853759765625, -0.000152587890625, -3.2186455882765586e-06, -3.576277322281385e-06, -1.0728108463808894e-06, -2.288818359375e-05, -2.0265579223632812e-06, -0.0001277923583984375, -9.1552734375e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.02440643310546875, -5.340576171875e-05, -0.0014324188232421875, -5.340576171875e-05, -0.00019073486328125, -1.9073468138230965e-06, -3.3378591979271732e-06, -0.07344341278076172, -0.0001697540283203125, -5.7220458984375e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0003896951675415039, 0.0, -0.0781548023223877, 0.0, -0.0001621246337890625, -0.0003337860107421875, -7.43865966796875e-05, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.03749275207519531, -4.9591064453125e-05, 0.0, -0.00020945070718880743, 0.0, -2.86102294921875e-05, -0.0004215240478515625, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0025386810302734375, -3.24249267578125e-05, -0.0006084442138671875, -1.1444091796875e-05, -9.34600830078125e-05, -1.130326747894287, -1.1920928244535389e-07, -0.000308990478515625, -0.232513427734375, -0.041235923767089844, -0.044785499572753906, -0.0881662368774414, -0.0004367828369140625, -3.814697265625e-06, -0.0004119873046875, -0.09932541847229004, -1.1920928244535389e-07], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Bananas", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template51"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Template39"}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "BinOp", "left": {"_type": "Template60"}, "right": {"_type": "Template43", "hole1": "calculate_attack", "hole0": {"_type": "Template52"}}, "op": {"_type": "Sub"}}], "_type": "Template44", "hole1": "change_attack", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Bananas"}, "choice_history": [121, 200, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Bananas", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 97, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "change_attack", "<EOS>", 320, 66, 158, 46, 123, 37, 249, 41, "calculate_attack", "<EOS>"], "score": -1.860370159052522, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"score_history": [-1.52587890625e-05, -0.00060272216796875, -0.00027533553657121956, -0.0009785888250917196, -1.3232166566012893e-05, -2.4418870452791452e-05, -0.00021958351135253906, -8.58306884765625e-06, -0.000232696533203125, -0.000759124755859375, -1.9073486328125e-06, -7.62939453125e-05, -0.0004367828369140625, -1.1444091796875e-05, -0.0009613037109375, -1.52587890625e-05, -7.62939453125e-06, -6.6756979322235566e-06, -0.00016868104285094887, -0.00012099142622901127, 0.0, -0.030138015747070312, -0.0010967254638671875, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.5881970688933507e-05, 0.0, -0.0741879940032959, 0.0, -0.0026493072509765625, -2.6702880859375e-05, -0.0001068115234375, -1.52587890625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.5403299331665039, -7.05718994140625e-05, 0.0, -0.00024092149396892637, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001277923583984375, -4.88758041683468e-06, -1.1920928244535389e-07, -0.21819496154785156, -9.5367431640625e-05, -0.02373504638671875, -0.000164031982421875, -0.20688629150390625, -0.15993976593017578, -2.09808349609375e-05, -0.0016307830810546875, -0.012763023376464844, -0.0006580352783203125, -0.007480621337890625, 0.0, -0.0001163482666015625, -0.12172549962997437, -0.0011132246581837535, -1.9073486328125e-05, -0.0139617919921875, -0.003803253173828125, -0.012816429138183594, -0.19878840446472168, -1.9073486328125e-06, -0.005158424377441406], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Blessed Champion", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template49"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Template39"}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"_type": "Template43", "hole1": "calculate_attack", "hole0": {"_type": "Template52"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Template64"}}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "heal", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "BlessedChampion"}, "choice_history": [121, 200, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Blessed", " ", "Champion", "<EOS>", 103, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 96, 327, 119, 310, "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "heal", "<EOS>", 321, 68, 163, 17, 156, 50, "effective_heal_power", "<EOS>", 320, 90, 249, 41, "calculate_attack", "<EOS>", 110], "score": -1.6433573209469543, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n"}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"score_history": [-0.0003070831298828125, -0.0019283294677734375, -0.00030441477429121733, -0.2540734112262726, -0.7658922672271729, -7.24771452951245e-05, -4.7683533921372145e-07, -4.0531158447265625e-06, -9.775161743164062e-06, -0.0002956390380859375, -0.6151695251464844, -0.0001220703125, -4.5299530029296875e-06, -1.52587890625e-05, -3.24249267578125e-05, -0.0022430419921875, -0.0131760835647583, 0.0, -5.686282383976504e-05, -2.1457672119140625e-06, -0.07874977588653564, -7.62939453125e-06, -0.033165931701660156, 0.0, -0.4975128173828125, -0.2114734649658203, -0.07439181208610535, -0.5324752330780029, -1.2040087312925607e-05, -5.7220458984375e-06, -0.22040176391601562, -0.0051364898681640625, -0.1583944410085678, -0.022107243537902832, -0.00019657611846923828, -0.04529571533203125, -0.3928375244140625, -0.00066375732421875, -0.00038909912109375, -9.5367431640625e-06, -0.004619121085852385, -0.0009256042540073395, -3.075599670410156e-05, -1.9073486328125e-06, -0.1103200912475586, -0.0006122589111328125, -0.00031280517578125, -0.31739044189453125, -0.0005931854248046875, -0.002384185791015625, -0.000141143798828125, -3.0517578125e-05, -0.0006273984909057617, -6.115436553955078e-05, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.001918792724609375, -3.814697265625e-06, -0.20981311798095703, -3.814697265625e-06, -0.0012578925816342235, -0.30071085691452026, -1.1444091796875e-05, -0.25973033905029297, -3.814697265625e-06, -0.02044844627380371, -2.264974000354414e-06, -7.987022399902344e-06, -1.222294807434082, -5.14984130859375e-05, -0.0008068084716796875, -0.08651292324066162, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, 0.0, -9.775153557711747e-06, 0.0, -0.0001430511474609375, -2.288818359375e-05, -4.00543212890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0006491247331723571, -1.71661376953125e-05], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 5, "hole0": 4}], "hole2": [{"hole3": "battlecry", "hole2": "PRIEST", "_type": "Template11", "hole1": 6, "hole4": {"hole2": "SelfSelector", "_type": "Template22", "hole1": [{"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole1": [{"args": [{"_type": "UnaryOp", "operand": {"_type": "Template61"}, "op": {"_type": "USub"}}], "_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template46", "hole0": "IsSpell"}}]}, {"_type": "Template46", "hole0": "BothPlayer"}, {"_type": "Template62_expr_seq"}], "hole0": "AuraUntil"}], "hole0": "GiveAura"}, "hole0": "Cabal Shadow Priest"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "CabalShadowPriest"}, "choice_history": [121, 198, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 29, 216, "Give", "Aura", "<EOS>", 320, 91, 252, "Aura", "Until", "<EOS>", 323, 68, 163, 25, 186, "Mana", "Change", "<EOS>", 320, 115, 305, 152, 47, 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Is", "Spell", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 105, 320, 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "5", "<EOS>"], "score": -6.469569769027885, "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura([AuraUntil(\n            ManaChange(-3), CardSelector(condition=IsSpell()), BothPlayer()\n            )]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"score_history": [-5.7220458984375e-05, -0.0001125335693359375, -0.00014447122521232814, -0.0002839558001141995, -0.0005001972313039005, -3.099440846199286e-06, -1.1920565157197416e-07, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.015010833740234375, -0.0006999969482421875, -5.364403477869928e-06, -9.179115295410156e-05, -0.00034797191619873047, -8.96453857421875e-05, -0.00020384788513183594, 0.0, -5.936617526458576e-05, -5.7220458984375e-06, -0.6969127655029297, -3.814697265625e-06, -0.0009613037109375, 0.0, -0.18367767333984375, -9.5367431640625e-06, 0.0, -1.1801719665527344e-05, 0.0, -7.62939453125e-06, -8.0108642578125e-05, -4.38690185546875e-05, -7.6293927122605965e-06, -0.0001163482666015625, -0.019904136657714844, -0.0004749298095703125, -0.000896453857421875, -7.62939453125e-06, -0.000232696533203125, -0.018882237374782562, 0.0, -1.33514404296875e-05, -0.9212398529052734, -3.814697265625e-06, -5.53131103515625e-05, -0.00016522403166163713, -1.1920928244535389e-07, -0.010819673538208008, 0.0, -0.0010662078857421875, -0.0054836273193359375, -1.1444091796875e-05, -0.0220184326171875, 0.0, -0.7537460327148438, -1.52587890625e-05, -0.002956390380859375, -1.9073486328125e-06, -1.919269561767578e-05, -1.1920928244535389e-07, -0.04563617706298828, -1.1920928244535389e-07, -0.015109993517398834, -1.9311717551317997e-05, -0.008848010562360287, 0.0, -4.76837158203125e-05, -0.0007801055908203125, -1.33514404296875e-05, -1.33514404296875e-05, -0.0001633167266845703, 0.0, -0.005602716002613306, 0.0, -0.0021610260009765625], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole3": "target_func", "hole2": "ROGUE", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Template39"}, "hole0": "Cone of Cold"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 1, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Template52"}}, {"hole2": [{"hole2": 1, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "ConeOfCold"}, "choice_history": [121, 200, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 35, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "1", "<EOS>", 110], "score": -2.735958915090329, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n"}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"score_history": [-0.0109710693359375, -5.91278076171875e-05, -0.0001764148473739624, -0.002387596992775798, -2.944431616924703e-05, -0.03952278569340706, -2.384184938364342e-07, -0.00020275742281228304, -6.270405719988048e-05, -0.0001678466796875, -0.0030193328857421875, -1.002821445465088, -0.005963328760117292, -0.00011563298903638497, -6.079673039494082e-05, -7.653236389160156e-05, -9.524819324724376e-05, -0.00030934810638427734, -0.0012458562850952148, 0.0, -0.0007839200552552938, -0.0002899169921875, -0.002566516399383545, -0.001804904779419303, -5.7220458984375e-06, -0.010756492614746094, -0.0001220703125, -0.000911712646484375, -0.018924713134765625, -0.0272064208984375, -0.001194880809634924, -0.08171826601028442, -7.62939453125e-06, -5.53131103515625e-05, -0.08486175537109375, -0.0005950927734375, -0.00013649438915308565, -1.7404556274414062e-05, -0.0014400482177734375, -0.000270843505859375, -0.0017633438110351562, -1.1444091796875e-05, -0.43563926219940186, -0.05862224102020264, -0.08890854567289352, -0.0016922949580475688, -0.0004863739013671875, -1.1444091796875e-05, -0.3817436695098877, -7.39089009584859e-05, -2.86102294921875e-05, -0.7078332901000977, -0.0021038055419921875, -0.00015425519086420536, -0.013201473280787468, 0.0, -0.049121856689453125, -0.09640979766845703, -0.0004711151123046875, -0.00026332895504310727, -2.9206275939941406e-05, -0.00072479248046875, -0.000370025634765625, -0.0071125030517578125, -1.71661376953125e-05, -0.02319962903857231, -0.0977540984749794, -0.03703439235687256, -0.0006554126157425344, -0.000652313232421875, -1.33514404296875e-05, -0.17315995693206787, -8.58303828863427e-05, -7.62939453125e-06, -0.4021005630493164, -0.006868958007544279, -0.00028121471405029297, -1.1920928244535389e-07, -0.0002346038818359375, 0.0, -2.384185791015625e-06, 0.0, -4.1961669921875e-05, -0.10537910461425781, -9.5367431640625e-06, -5.7220440794480965e-06, -2.3841830625315197e-06, -5.006785613659304e-06, -6.556489552167477e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 3, "hole0": 2}], "hole2": [{"hole3": "Give", "hole5": "SelfSelector", "hole2": "RARE", "_type": "Template6", "hole1": 4, "hole4": [{"_type": "List", "elts": [{"_type": "Template30", "hole1": [{"hole2": [{"_type": "Template46", "hole0": "MinionHasminions"}, {"_type": "Template46", "hole0": "BothPlayer"}], "_type": "Template35", "hole1": {"_type": "Template74"}, "hole0": "Count"}], "hole0": "ChangeAttack"}, {"_type": "Template30", "hole1": [{"hole2": [{"_type": "Template46", "hole0": "MinionHasminions"}, {"_type": "Template46", "hole0": "EnemyPlayer"}], "_type": "Template35", "hole1": {"_type": "Template74"}, "hole0": "Count"}], "hole0": "ChangeHealth"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Defender of Argus"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "DefenderOfArgus"}, "choice_history": [121, 198, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Both", "Player", "<EOS>", 81, 233, "Change", "Health", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Minion", "Has", "minions", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "score": -3.9952521093204254, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasminions(), BothPlayer())))), Buff\n            (ChangeHealth(Count(MinionSelector(MinionHasminions(),\n            EnemyPlayer()))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"score_history": [-7.62939453125e-06, -5.91278076171875e-05, -7.52183041186072e-05, -6.997521268203855e-05, -1.6927657270571217e-05, -0.0001691579818725586, -2.1457672119140625e-06, -4.00543212890625e-05, -0.022951126098632812, -1.33514404296875e-05, -1.52587890625e-05, -0.0379638671875, -4.00543212890625e-05, -0.05816459655761719, -1.1444091796875e-05, -2.09808349609375e-05, -1.4543533325195312e-05, -1.990795135498047e-05, -0.20392894744873047, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.012305259704589844, -3.814697265625e-06, -0.12314319610595703, -3.814697265625e-06, -0.0002803802490234375, -0.013708233833312988, -6.29425048828125e-05, -0.0004901885986328125, -0.061675071716308594, -3.24249267578125e-05, -0.5162621736526489, 0.0, -0.45702266693115234, -0.8027544021606445, -0.08044719696044922, -0.004413008689880371, -7.05718994140625e-05, -0.7031259536743164, -0.0006351470947265625, -1.0143694877624512, -0.11706042289733887, -2.3841855067985307e-07, -0.5093845129013062, 0.0, 0.0, -0.00799560546875, -7.62939453125e-06, -1.71661376953125e-05, -0.05180931091308594, -2.47955322265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.003153204917907715, -9.918212890625e-05, 0.0, -0.0055408477783203125, 0.0, -1.3947486877441406e-05, 0.0, -2.288818359375e-05, -2.09808349609375e-05, -1.52587890625e-05, -8.463859558105469e-06, 0.0, -0.7366963624954224, 0.0], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 2, "hole0": 2}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Doomhammer", "_type": "Str"}, {"_type": "Template61"}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template56"}}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "combo", "value": {"hole2": "PlayerSelector", "_type": "Template22", "hole1": [{"_type": "Template46", "hole0": "WeaponSelector"}], "hole4": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole0": "Give"}}]}}], "_type": "Template1", "hole1": "WeaponCard", "hole4": "player", "hole0": "Doomhammer"}, "choice_history": [121, 198, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Doomhammer", "<EOS>", 104, 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "combo", "<EOS>", 29, 217, "Give", "<EOS>", 320, 93, 255, "Weapon", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "2", "<EOS>"], "score": -5.546287771579927, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, combo=Battlecry(Give(WeaponSelector()),\n            PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"score_history": [-1.52587890625e-05, -0.0001392364501953125, -1.6331539882230572e-05, -1.1086422091466375e-05, -1.060962586052483e-05, -3.058149013668299e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002079010009765625, -0.000659942626953125, -5.14984130859375e-05, -1.07287787614041e-05, -2.4437889805994928e-05, -3.4332275390625e-05, 0.0, -6.139084143796936e-05, 0.0, -0.11914253234863281, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.37199878692626953, -9.5367431640625e-06, -5.53131103515625e-05, -0.2017679214477539, 0.0, -7.62939453125e-06, 0.0, -6.890296936035156e-05, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.000164031982421875, -9.298322765971534e-06, 0.0, -0.25267791748046875, -3.814697265625e-05, -0.02285003662109375, -5.53131103515625e-05, -3.814697265625e-05, -0.0001952543534571305, -2.3841855067985307e-07, -2.09808349609375e-05, -0.49609375, -0.0030498504638671875], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole3": "target_func", "hole2": "HUNTER", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Template50"}}, "hole0": "Earth Shock"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"_type": "Template63"}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Template52"}}], "hole1": "SpellCard", "hole4": "player", "hole0": "EarthShock"}, "choice_history": [121, 200, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 333, 141, 145, 250, 41, "damage", "<EOS>", 321, 106, 110], "score": -1.4695646083327745, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n"}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"score_history": [-0.0005817413330078125, -0.0652017593383789, -0.08905160427093506, -0.6212171316146851, -0.12967121601104736, -0.0013890283880755305, -0.0001939529465744272, -6.186960672494024e-05, -0.0005171316443011165, -0.21818161010742188, -0.07118606567382812, -2.09808349609375e-05, -0.00022457799059338868, -7.259845733642578e-05, -1.5139577953959815e-05, -8.20159912109375e-05, -0.00025773048400878906, 0.0, -5.006776973459637e-06, 0.0, -0.7261908054351807, -7.62939453125e-06, -0.02800774574279785, -1.9073486328125e-06, -0.5175299644470215, 0.0, -0.00148773193359375, -0.00064849853515625, -0.0001506805419921875, -0.3641855716705322, 0.0, -0.018804550170898438, -0.0169219970703125, -0.001033782958984375, -0.7602357864379883, -0.00470733642578125, -4.38690185546875e-05, -0.005931854248046875, -0.014430999755859375, -3.4332275390625e-05, -0.3849325180053711, 0.0, -0.08684253692626953, 0.0, -0.7204790115356445, 0.0, -0.5689640045166016, -1.9073486328125e-06, -0.038321733474731445, -1.9073486328125e-06, -0.09768235683441162, 0.0, -4.9591064453125e-05, -0.13625431060791016, -5.7220458984375e-06, -0.0007152557373046875, -5.340576171875e-05, -0.057987213134765625, 0.0, -0.21363449096679688, 0.0, -0.5610942840576172, 0.0, -1.173496127128601, 0.0, -0.8287947177886963, -3.4570634852570947e-06, -0.0035371780395507812, -0.00551605224609375, -0.0028066635131835938, -6.67572021484375e-05, 0.0, -9.5367431640625e-06, -0.12820923328399658, -2.384185791015625e-06, -2.47955322265625e-05, -0.0011444091796875, 0.0, -0.0127410888671875, -1.9073486328125e-06, -0.13095474243164062, 0.0, -0.013593673706054688, 0.0, -0.0006433725357055664, -1.1920928244535389e-07, -0.03119770810008049, 0.0, -1.52587890625e-05, -0.6382656097412109, -2.09808349609375e-05, -0.0008487701416015625, -0.6720180511474609, -0.003040313720703125, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.0735976696014404, -1.9073486328125e-06, -0.122100830078125, -0.0001621246337890625, -0.0001087188720703125, 0.0, -0.000396728515625, 0.0, -0.08355426788330078, -0.0005385815748013556, -1.1920928244535389e-07, -0.0848318338394165, -3.814697265625e-06, -0.0019130706787109375, -0.000213623046875, -0.22389888763427734, -0.005405426025390625, -0.013792037963867188, -0.0036716461181640625, -0.057804107666015625, -1.9073486328125e-06, -0.022909164428710938, -7.62939453125e-06, -1.5060992240905762, -1.7642974853515625e-05, -0.5552611351013184, 0.0, -5.7220458984375e-06, -0.7444086074829102, -0.000270843505859375, -0.0005397796630859375, -0.030794262886047363, -2.9802317840221804e-06, -0.40292906761169434, 0.0, -0.0019683837890625, -0.2108316421508789, -1.9073486328125e-06, -0.000553131103515625, 0.0, -0.6329765319824219, -0.6822553873062134, -8.106231689453125e-06, -0.3130723834037781, 0.0, -1.52587890625e-05, -0.05935382843017578, -0.00018310546875, -0.000652313232421875, -0.01951134204864502, -6.79492904964718e-06, -0.2662367522716522, 0.0, -0.0014858245849609375, -0.0003910064697265625, -0.010718345642089844, -0.0004100799560546875, -0.27940988540649414, 0.0, -0.08872604370117188, -0.000232696533203125, -0.001384735107421875, -0.000110626220703125, -0.00048828125, -0.0001678466796875, -7.2479248046875e-05, -0.0073757171630859375, -0.001743316650390625, -0.0002841949462890625, -0.000194549560546875, -0.0001850128173828125, -0.00019633729243651032, -3.635883331298828e-05, -0.0010935065802186728, -1.9073486328125e-06, -0.0005570650100708008, 0.0, -0.00020229816436767578, 0.0, -0.000530242919921875, -4.38690185546875e-05, -0.000396728515625, -0.0001506805419921875, 0.0, 0.0, -0.041963934898376465, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0001983642578125, 0.0, -0.00669097900390625, -1.9073486328125e-06, -0.28343772888183594, 0.0, -0.007567405700683594, 0.0, -0.0006643533706665039, -1.1920928244535389e-07, -0.12730419635772705, 0.0, -4.38690185546875e-05, -0.41965675354003906, -1.33514404296875e-05, -6.4849853515625e-05], "model_output": {"hole3": "_reveal", "hole7": [{"name": "can_use", "_type": "FunctionDef", "args": {"_type": "Template17"}, "body": [{"_type": "Return", "value": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"hole2": "player", "_type": "Template33", "hole1": "can_use", "hole3": "game", "hole0": {"_type": "Template46", "hole0": "super"}}, {"ops": [{"_type": "Gt"}], "_type": "Compare", "left": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template76"}]}]}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "PALADIN", "_type": "Template14", "hole1": 1, "hole0": "Eye for Eye"}], "_type": "Template1", "hole6": [{"_type": "If", "test": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"ops": [{"_type": "IsNot"}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "attacker"}}}, "comparators": [{"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "deathrattle", "value": {"_type": "Name", "id": "attacker"}}}]}, {"ops": [{"_type": "Gt"}], "_type": "Compare", "left": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template76"}]}]}, "body": [{"_type": "Assign", "targets": [{"_type": "Name", "id": "right_minion"}], "value": {"_type": "Subscript", "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}}, "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}}}}, {"hole2": [{"hole2": 1, "_type": "Template37", "hole1": "effective_heal_power", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "heal", "hole0": {"_type": "Name", "id": "minion"}}, {"hole2": [{"hole2": 1, "_type": "Template37", "hole1": "effective_heal_power", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "heal", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Template64"}}}]}], "hole1": "SecretCard", "hole4": "attacker", "hole0": "EyeforEye"}, "choice_history": [121, 201, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 314, 1, 307, "game", "<EOS>", 332, 133, 173, 19, 159, 6, 321, 69, 166, 17, 156, 17, 156, 25, 186, "attacker", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 317, 13, 320, 65, 156, 17, 156, 25, 186, "attacker", "<EOS>", "deathrattle", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113, 334, 126, 155, 320, 73, 186, "right_minion", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 145, 250, 25, 186, "minion", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 145, 250, 17, 156, 50, "hero", "<EOS>", "heal", "<EOS>", 321, 85, 243, 50, "effective_heal_power", "<EOS>", "1", "<EOS>", 110, 332, 132, 170, "can_use", "<EOS>", 2, 332, 135, 192, 19, 159, 6, 321, 83, 236, 39, 255, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 317, 9, 320, 113], "score": -19.57935386407914, "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, game):\n        if attacker.card.minion_type is not attacker.deathrattle.<UNK> and len(\n            game.other_player.minions) > 0:\n            right_minion = self.player.minions[-1]\n            minion.heal(player.effective_heal_power(1), self)\n            player.hero.heal(player.effective_heal_power(1), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 0\n"}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"score_history": [-2.288818359375e-05, -6.29425048828125e-05, -0.18682006001472473, -0.0022833344992250204, -0.0010070898570120335, -0.00019466876983642578, -2.288818359375e-05, -0.00090789794921875, -0.024251937866210938, -3.24249267578125e-05, -4.0292037738254294e-05, -1.9073486328125e-06, 0.0, 0.0, -0.4061318635940552, 0.0, -7.212157652247697e-05, 0.0, -0.00013566017150878906, 0.0, -0.00028264516731724143, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -4.9591064453125e-05, -5.125920142745599e-05, -7.867804924899247e-06, -0.033392906188964844, -0.010187149047851562, -0.2156972885131836, -4.1961669921875e-05, -0.4071483612060547, -0.0033079045824706554, -9.190892160404474e-05, -6.29425048828125e-05, -0.11475086212158203, -0.000247955322265625, -0.000553131103515625, 0.0, -0.42454993724823, -0.007458090782165527, -3.445148468017578e-05, -0.1884632110595703, -0.021299362182617188, -0.011612892150878906, -0.0017472425242885947, -0.04804472252726555, -6.103515625e-05, -0.036022450774908066, -4.053113570989808e-06, -0.0002002716064453125, -7.62939453125e-06, -0.044121526181697845, -0.0002844332193490118, -4.768370445162873e-07, -0.002498626708984375, -7.62939453125e-06, -0.008466154336929321, -0.023813605308532715, -0.0007919512572698295, -0.002685546875, -0.0001659393310546875, -6.4849853515625e-05, -0.0009250640869140625, -0.0001983642578125, -0.0030940771102905273, -5.650520324707031e-05], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole2": "ROGUE", "_type": "Template15", "hole1": 2, "hole3": "RARE", "hole0": "Flare"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"_type": "Template41", "hole1": 0, "hole0": "<UNK>Health"}, {"_type": "Template46", "hole0": "MinionSelector"}, {"_type": "Template46", "hole0": "TurnEnded"}], "_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}}], "_type": "Template44", "hole1": "<UNK>", "hole0": {"_type": "Template64"}}, {"_type": "Expr", "value": {"_type": "Template43", "hole1": "draw", "hole0": {"_type": "Template64"}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Flare"}, "choice_history": [121, 200, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 332, 140, 205, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 50, "<UNK>", "<EOS>", 320, 68, 163, 25, 186, "Aura", "Until", "<EOS>", 322, 89, 247, "<UNK>", "Health", "<EOS>", "Stealth", "<EOS>", 93, 255, "Minion", "Selector", "<EOS>", 93, 255, "Turn", "Ended", "<EOS>", 130, 168, 37, 249, 50, "draw", "<EOS>"], "score": -2.2345647000551025, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Health(0), MinionSelector(), TurnEnded()))\n        player.draw()\n"}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"score_history": [-1.9073486328125e-06, -0.0010223388671875, -0.000830872158985585, -0.0015547174261882901, -4.851818084716797e-05, -0.000104545135400258, -1.3947477782494389e-05, -0.00101470947265625, -0.01544952392578125, -3.814697265625e-05, -9.536738616588991e-07, -6.67572021484375e-05, -1.5329569578170776e-06, 0.0, -0.23793566226959229, 0.0, -0.001672983169555664, 0.0, -0.07697486877441406, 0.0, -3.933906555175781e-06, 0.0, -3.814697265625e-05, -0.03536224365234375, -0.00019073486328125, 0.0, -2.145764938177308e-06, -0.00592179037630558, -3.099436753473128e-06, -0.007411599159240723, 0.0, -7.43865966796875e-05, -0.0001010894775390625, -0.002259969711303711, 0.0, -0.002105712890625, -0.9907693862915039, -7.82012939453125e-05, -0.9339098334312439, -7.2479248046875e-05, -0.41032886505126953, -0.006679534912109375, -0.001683550770394504, -9.894368304230738e-06, -2.7418097943154862e-06, -0.0005550384521484375, -5.7220458984375e-06, -0.011194467544555664, -0.0007354021072387695, -5.7220458984375e-06, -5.340576171875e-05, -0.002017974853515625, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -0.7611627578735352, 0.0, -3.4332275390625e-05, -0.08461570739746094, -0.0005512237548828125, -0.20068776607513428, -9.930133819580078e-05, -0.018863677978515625, -0.3339519500732422, -0.0007953643798828125, -0.023985980078577995, -9.5367431640625e-06, -0.41705894470214844, -0.0038805007934570312, -0.006080816965550184, -1.4662741705251392e-05, -1.0728830375228426e-06, -0.04606437683105469, -5.7220458984375e-06, -0.0533069372177124, -0.0006227493286132812, -3.814697265625e-06, -2.288818359375e-05, -0.00299835205078125, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -0.000614166259765625, 0.0, -1.1024751663208008, -1.9073486328125e-06, -8.58306884765625e-05, -0.0002651214599609375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "auras", "_type": "Template27", "hole1": 7, "hole3": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole1": [{"_type": "Template40", "hole0": 1}, {"hole2": [{"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Template35", "hole1": {"_type": "Name", "id": "IsType"}, "hole0": "MinionSelector"}], "hole0": "Aura"}], "_type": "Template45", "hole1": [{"_type": "Template38", "hole0": 1}, {"hole2": [{"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Template35", "hole1": {"_type": "Name", "id": "IsType"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole0": 7}], "hole2": [{"hole2": "PRIEST", "_type": "Template15", "hole1": 7, "hole3": "EPIC", "hole0": "Gorehowl"}], "_type": "Template1", "hole1": "WeaponCard", "hole4": "player", "hole0": "Gorehowl"}, "choice_history": [121, 198, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 332, 140, 205, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "7", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 86, 244, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 320, 92, 254, "Aura", "<EOS>", 321, 88, 246, "1", "<EOS>", 84, 239, "Minion", "Selector", "<EOS>", 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 320, 105], "score": -5.806705108047822, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_minion(self, player):\n        return Minion(7, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.DRAGON)))])\n"}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"score_history": [-3.814697265625e-05, -7.82012939453125e-05, -2.2053474822314456e-05, -0.005595003254711628, -5.348125705495477e-05, -1.33514404296875e-05, -1.3589859008789062e-05, -0.0006923675537109375, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.4797992706298828, -9.5367431640625e-05, -0.0016937255859375, -3.24249267578125e-05, -0.0002346038818359375, -9.655952453613281e-06, -0.00014364664093591273, -0.03148651123046875, -0.00022125244140625, -0.005657196044921875, -5.340576171875e-05, -0.000278472900390625, -0.000370025634765625, -5.7220458984375e-05, -0.006681680679321289, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.004653215408325195, 0.0, -4.1961669921875e-05, -0.6845159530639648, -0.000354766845703125, 0.0, -2.109982233378105e-05, -1.1923821148229763e-06, -5.722038622479886e-06, -0.005994883831590414, 0.0, -0.000396728515625], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "charge", "_type": "Template27", "hole1": 1, "hole3": {"_type": "Template79"}, "hole0": 1}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Hound", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template47"}, {"_type": "Template75"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "BEAST"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Hound"}, "choice_history": [121, 198, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Hound", "<EOS>", 103, 95, 94, 112, 327, 118, 248, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 62], "score": -1.2293824728312757, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"score_history": [-3.24249267578125e-05, -7.62939453125e-06, -0.016459165140986443, -0.003716230858117342, -1.4305060176411644e-05, 0.0, -4.196114605292678e-05, -0.0002803720999509096, -0.00048065185546875, -0.0031337738037109375, -0.07737541198730469, -3.504691630951129e-05, -3.790855407714844e-05, -2.3841855067985307e-07, 0.0, -0.0006852149963378906, 0.0, -0.0013154743937775493, 0.0, -0.005104957614094019, -7.235806697281078e-05, -1.1444091796875e-05, -0.6075677871704102, -0.04449312388896942, -4.1961669921875e-05, 0.0, -0.1461496353149414, -0.004277229309082031, -4.38690185546875e-05, -2.3484230041503906e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.2957277297973633, -3.933906555175781e-06, -2.09808349609375e-05, -0.003871917724609375, -5.7220458984375e-06, -0.0019484758377075195, -7.104873657226562e-05, -3.814697265625e-06, -0.0019445419311523438, -1.9073486328125e-06, -3.361677227076143e-05, 0.0, -2.86102294921875e-05, -4.00543212890625e-05, -2.288818359375e-05, -1.7881393432617188e-06, -1.9073486328125e-06, -0.00019156916823703796, -5.7220458984375e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 7, "hole0": 4}], "hole2": [{"hole3": "Damage", "hole5": "MinionSelector", "hole2": "RARE", "_type": "Template6", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template46", "hole0": "EnemyPlayer"}, {"_type": "Template46", "hole0": "RandomPicker"}], "hole1": 3, "hole4": [{"_type": "Template63"}], "hole0": "Injured Blademaster"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "InjuredBlademaster"}, "choice_history": [121, 198, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 280, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 320, 106, "Minion", "Selector", "<EOS>", 322, 74, 187, "Null", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 93, 255, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "7", "<EOS>"], "score": -1.2153374257395342, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -1.52587890625e-05, -0.003975109662860632, -0.007207122631371021, -0.0006660401122644544, -2.3841846541472478e-07, -0.00010811757965711877, -5.066332232672721e-05, -0.0004558563232421875, -0.0001544952392578125, -4.76837158203125e-05, -7.390948667307384e-06, -2.110004425048828e-05, -2.1457672119140625e-06, 0.0, -0.0002353191375732422, 0.0, -0.10454964637756348, -1.9073486328125e-06, -3.3020973205566406e-05, 0.0, -0.0001207590103149414, 0.0, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -0.014661788940429688, -3.0517578125e-05, -4.768369876728684e-07, -1.0728830375228426e-06, -2.86102294921875e-05, -7.056941103655845e-05, -1.1682510375976562e-05, -2.264974000354414e-06, -0.0001049041748046875, -0.0003337860107421875, -0.010171890258789062, -0.7099611759185791, -0.051807284355163574, -1.7166135876323096e-05, -0.000370025634765625, -0.06016826629638672, -0.000728607177734375, -0.006269452627748251, -0.009571353904902935, -0.000102996826171875, -5.340576171875e-05, -0.000270843505859375, -0.6549949645996094, -0.006888151168823242, -3.051753265026491e-05, -0.02624797821044922, -0.019288063049316406, -0.03619539737701416, -0.0004844644572585821, 0.0, -0.26120853424072266, -2.09808349609375e-05, 0.0, -0.0026988983154296875, -6.4849853515625e-05, -0.0009822845458984375, 0.0, -0.156793475151062, -1.1324880688334815e-05, 0.0, -0.0001125335693359375, -3.814697265625e-06, -0.0031948089599609375, -1.1444091796875e-05, -0.0002574920654296875, -5.7220458984375e-06, -0.007959127426147461, -9.775159924174659e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.002521514892578125], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 2, "_type": "Template36", "hole1": 3, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Template60"}], "hole3": "CharacterSelector", "hole0": "Damage", "hole5": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template46", "hole0": "EnemyPlayer"}}, {"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "RandomPicker"}}]}], "_type": "Template24", "hole1": [{"_type": "Template46", "hole0": "IsSpell"}], "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "CardUsed"}], "hole0": "Minion"}], "hole2": [{"hole2": "ALL", "_type": "Template15", "hole1": 2, "hole3": "RARE", "hole0": "Knife Juggler"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "KnifeJuggler"}, "choice_history": [121, 198, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 327, 117, 228, "Card", "Used", "<EOS>", 320, 93, 255, "Is", "Spell", "<EOS>", 320, 79, 224, "Damage", "<EOS>", 320, 103, "Character", "Selector", "<EOS>", 328, 119, 310, "players", "<EOS>", 39, 255, "Enemy", "Player", "<EOS>", 119, 310, "picker", "<EOS>", 39, 255, "Random", "Picker", "<EOS>", 320, 105], "score": -2.1624338317763545, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n"}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"score_history": [-1.52587890625e-05, -8.20159912109375e-05, -0.01880492828786373, -0.00033295154571533203, -4.053023076266982e-06, -7.748603820800781e-06, -6.496906280517578e-05, -0.0009021759033203125, -0.000514984130859375, -1.52587890625e-05, -1.4305113609225373e-06, 0.0, -0.00016415119171142578, 0.0, -0.03204357624053955, -5.7220458984375e-06, -0.00018131732940673828, 0.0, -5.53131103515625e-05, 0.0, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.86102294921875e-05, -2.86102294921875e-05, -1.18016459964565e-05, -4.172325134277344e-06, -6.890296936035156e-05, -1.2397689715726301e-05, -1.6569954823353328e-05, -1.9073486328125e-06, -9.918212890625e-05, -2.47955322265625e-05, -0.0005950927734375, -0.00011229515075683594, -0.013553619384765625, -1.728534698486328e-05, -1.9073486328125e-05, -0.015380859375, -0.180938720703125, -0.029118061065673828, -0.03248417377471924, -1.9073486328125e-06, -0.5501279830932617, -0.0002765655517578125, -0.0013408660888671875, -0.00133514404296875, -0.000164031982421875, -0.001428842544555664, 0.0, -5.328655242919922e-05, -0.0022927522659301758, 0.0, -0.4114466905593872, -1.9073486328125e-06, -0.0162353515625, -0.000125885009765625, -0.00063323974609375, -1.1444091796875e-05, -0.00015461444854736328, -0.0017528533935546875, -1.9073486328125e-06, -0.4807065725326538, -3.4332275390625e-05, -7.43865966796875e-05, -0.008924603462219238, -1.71661376953125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.0029354095458984375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 5, "_type": "Template36", "hole1": 0, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "List", "elts": [{"hole2": 1, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}, {"hole2": 1, "_type": "Template28", "hole1": "ChangeHealth", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole3": "SelfSelector", "hole0": "Give"}], "_type": "Template24", "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "TurnStarted"}], "hole0": "Minion"}], "hole2": [{"hole2": "ALL", "_type": "Template15", "hole1": 2, "hole3": "RARE", "hole0": "Lightwell"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Lightwell"}, "choice_history": [121, 198, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Lightwell", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 327, 117, 227, "Turn", "Started", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Self", "Selector", "<EOS>", 320, 105], "score": -1.8059022627702461, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give([\n            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\n"}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"score_history": [-2.47955322265625e-05, -3.24249267578125e-05, -0.00013624693383462727, -6.675716122117592e-06, -7.510169325541938e-06, 0.0, -2.741813204920618e-06, -5.245207830739673e-06, -1.33514404296875e-05, -0.08944892883300781, -1.33514404296875e-05, -5.125986263010418e-06, -8.928769966587424e-05, -6.079665126890177e-06, 0.0, -3.790851405938156e-05, 0.0, -1.440278172492981, 0.0, -9.369850158691406e-05, 0.0, -6.198883056640625e-06, 0.0, -7.62939453125e-06, -0.07697105407714844, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -3.576278118089249e-07, 0.0, -1.3828277587890625e-05, -2.7418097943154862e-06, -2.86102294921875e-05, -7.82012939453125e-05, -0.000560760498046875, -0.03831601142883301, -0.038074374198913574, -2.121925172104966e-05, -0.003536224365234375, -0.278717041015625, -0.004741668701171875, -0.07961301505565643, -0.03456898778676987, -0.3547883927822113, -0.0012786310398951173, -1.33514404296875e-05, -0.0077152252197265625, -0.0038995742797851562, -0.00029965845169499516, -1.5497207641601562e-05, -1.1444091796875e-05, -0.0006427764892578125, -0.00012969970703125, -0.0005016326904296875, -3.0517578125e-05, -0.0047806501388549805, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0002288818359375], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": 3, "_type": "Template36", "hole1": 1, "hole3": [{"hole2": [{"_type": "Template23", "hole1": [{"_type": "Template38", "hole0": 1}], "hole3": "SelfSelector", "hole0": "Give"}], "_type": "Template24", "hole1": [{"_type": "Template46", "hole0": "MinionHasspell"}], "hole3": [{"_type": "Template62_expr_seq"}], "hole0": "MinionSummoned"}], "hole0": "Minion"}], "hole2": [{"hole2": "MAGE", "_type": "Template14", "hole1": 1, "hole0": "Mana Wyrm"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "ManaWyrm"}, "choice_history": [121, 198, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 144, 242, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 327, 117, 228, "Minion", "Summoned", "<EOS>", 320, 93, 255, "Minion", "Has", "spell", "<EOS>", 320, 79, 223, "Give", "<EOS>", 320, 86, 244, "1", "<EOS>", "Self", "Selector", "<EOS>", 320, 105], "score": -2.4598411780881975, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasspell()\n            ), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n"}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0062912278808653355, -0.00016497235628776252, -4.1723224057932384e-06, -2.384149411227554e-07, -5.841255187988281e-06, -2.1338462829589844e-05, -6.4849853515625e-05, -0.0036258697509765625, -0.0002307891845703125, -4.0531076592742465e-06, -1.7881393432617188e-05, -1.1920928244535389e-07, 0.0, -0.00010120290971826762, 0.0, -0.0022622346878051758, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.004058837890625, 0.0, -0.0001239776611328125, -0.0003032684326171875, -2.6702880859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -0.00015209948469419032, -4.00543212890625e-05, -0.0002390146255493164, 0.0, -0.0004138946533203125], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "taunt", "_type": "Template27", "hole1": 7, "hole3": {"_type": "Template79"}, "hole0": 1}], "hole2": [{"hole2": "ALL", "_type": "Template14", "hole1": 4, "hole0": "Mogu'shan Warden"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Mogu'shanWarden"}, "choice_history": [121, 198, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 62], "score": -0.01820258943185138, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"score_history": [-5.7220458984375e-06, -4.38690185546875e-05, -5.364403477869928e-06, -6.556510470545618e-06, -9.775154467206448e-06, -9.5367431640625e-06, -1.9073486328125e-05, -9.918212890625e-05, -0.008319854736328125, -1.9073486328125e-05, -3.62396240234375e-05, -7.05718994140625e-05, -2.86102294921875e-05, -4.00543212890625e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.2755353964166716e-05, -2.0265579223632812e-06, -0.08005523681640625, -3.24249267578125e-05, -0.00014316009765025228, -2.3007391064311378e-05, -0.001636505126953125, -5.7220458984375e-06, -0.000766754150390625, -1.9073486328125e-06, -0.0009517669677734375, -5.340576171875e-05, -0.002345442771911621, 0.0, -0.0020809173583984375, -1.1444091796875e-05, -9.918212890625e-05, -4.1961669921875e-05, -0.010335922241210938, -0.0002956390380859375, -0.008699417114257812, -0.00482177734375, -0.0021315813064575195, -5.161762237548828e-05, -0.0001735687255859375, -0.0003452301025390625, -7.62939453125e-06, -0.4885629117488861, -0.10808386653661728, -0.0008078645914793015, -0.46189308166503906, -0.059142112731933594, -0.026480674743652344, -0.0007648468017578125, -0.10374724864959717, -0.3634204864501953, 0.0, -0.017148971557617188, -1.71661376953125e-05, -3.0517578125e-05, -0.45348262786865234, -5.7220458984375e-06, -0.0039768218994140625, 0.0, -0.18229222297668457, -2.0265373677830212e-05, -7.43865966796875e-05, -0.25436878204345703, -0.053752899169921875, -0.011319160461425781, 0.0, -0.8664926290512085, -0.00018990039825439453, -0.00023651123046875, -8.0108642578125e-05, -2.09808349609375e-05, -0.6233569383621216, -0.39668068289756775, -0.04597971588373184, -0.10534858703613281, -1.9073486328125e-05, -0.005372731015086174, -5.4238957091001794e-05, -4.768370445162873e-07, -1.1444091796875e-05, -0.0036487579345703125, -5.53131103515625e-05, -0.04389774799346924, -0.002067089080810547, -0.0001392364501953125, -0.0005130767822265625, -5.7220458984375e-06, -0.15203067660331726, -0.883648693561554, -0.026541419327259064, -0.7221708297729492, -8.392333984375e-05, -0.610539436340332, -0.2245151698589325, -0.0016880035400390625, -0.12458324432373047, -0.0849447250366211, -0.0007991790771484375, -0.0855247974395752, -7.62939453125e-06, 0.0, -0.000606536865234375, -3.814697265625e-06, -3.0517578125e-05, -0.06185340881347656, -2.47955322265625e-05, -0.000240325927734375, 0.0, -0.005109906196594238, -9.894339200400282e-06, -8.0108642578125e-05, -3.814697265625e-06, -0.000186920166015625, -0.035346031188964844, 0.0, -0.0011490292381495237, 0.0, -0.00012969970703125, -1.9073486328125e-05, -1.52587890625e-05, -0.00016760811558924615, -1.9073486328125e-06, -0.2236337661743164, -0.0023555755615234375, -0.45809459686279297, -0.0003528594970703125, -7.62939453125e-06, -0.0013408660888671875, -6.866455078125e-05, -1.7397061586380005, -0.0037631988525390625, -0.0014543533325195312, -0.6899137496948242, -0.08817195892333984, -1.33514404296875e-05, -0.04772484302520752, -0.040352821350097656, -1.71661376953125e-05, -0.14144515991210938, -2.86102294921875e-05, -1.1444091796875e-05, -0.2989025115966797, -9.5367431640625e-06, -0.4353771209716797, -0.07974433898925781, -0.049088262021541595, -0.8539643287658691, -2.288818359375e-05, -0.000125885009765625, -0.6682043075561523, -0.23586654663085938, -0.0004901885986328125, -3.814697265625e-06, -0.059676170349121094, -0.0001239776611328125, -1.8371598720550537, -5.841255187988281e-06, -9.34600830078125e-05, -0.0030002593994140625, -0.000995635986328125, -1.9073486328125e-06, -0.32975292205810547, -0.08548229932785034, -3.635883331298828e-05, -0.2156209945678711, -0.47974586486816406, -0.0001811981201171875, -2.007113218307495, -0.00010657270468072966, -0.35222721099853516, -4.57763671875e-05, -4.38690185546875e-05, -0.001209259033203125, -3.814697265625e-06, -0.0036458969116210938, 0.0, -0.8948533535003662, -3.457069396972656e-05, -0.25009727478027344, 0.0, -0.05396080017089844, -0.6643075942993164, -0.00038909912109375, -0.1454010009765625, -2.288818359375e-05, -0.35628509521484375, -1.71661376953125e-05, -0.0006275177001953125, -0.987227737903595, -0.005047621671110392, -0.011818665079772472, -7.867573731346056e-05, -0.27513599395751953, -0.0033731460571289062], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Template49"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "choices", "value": {"hole2": [{"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45_expr_seq", "hole1": [{"_type": "Template46", "hole0": "ManaMana"}, {"_type": "Template46", "hole0": "Gain"}, {"_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template46", "hole0": "BothPlayer"}}]}], "hole0": "Choice"}], "_type": "Template45", "hole1": [{"_type": "Template46", "hole0": "Mana<UNK>"}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "arg": "players", "value": {"_type": "Template46", "hole0": "BothPlayer"}}]}, {"args": [{"_type": "Template46", "hole0": "ManaMana"}, {"_type": "Template46", "hole0": "PlayerSelector"}], "_type": "Call", "func": {"_type": "Name", "id": "Summon"}}], "hole0": "Choice"}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"_type": "Assign", "targets": [{"_type": "Name", "id": "Player"}], "value": {"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "arg": "conditions", "value": {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole0": "IsWeapon"}}]}}, {"_type": "Assign", "targets": [{"_type": "Name", "id": "demon_card"}], "value": {"args": [{"_type": "Name", "id": "justice"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "agent", "value": {"_type": "Template64"}}}}, {"_type": "Assign", "targets": [{"_type": "Attribute", "attr": "drawn", "value": {"_type": "Name", "id": "demon_card"}}], "value": {"_type": "Template79"}}, {"_type": "AugAssign", "value": {"_type": "Template60"}, "op": {"_type": "Sub"}, "target": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "Mana", "value": {"_type": "Template64"}}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Nourish"}, "choice_history": [121, 200, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Nourish", "<EOS>", 75, 190, "5", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 96, 327, 119, 310, "choices", "<EOS>", 38, 252, "Choice", "<EOS>", 322, 93, 255, "Mana", "<UNK>", "<EOS>", 68, 162, 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 68, 163, 25, 186, "Summon", "<EOS>", 321, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Player", "Selector", "<EOS>", 320, 92, 254, "Choice", "<EOS>", 322, 93, 255, "Mana", "Mana", "<EOS>", 93, 255, "Gain", "<EOS>", 68, 162, 25, 186, "Player", "Selector", "<EOS>", 327, 119, 310, "players", "<EOS>", 39, 255, "Both", "Player", "<EOS>", 320, 105, "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 336, 141, 126, 155, 320, 73, 186, "Player", "<EOS>", 20, 162, 25, 186, "Card", "Query", "<EOS>", 327, 119, 310, "conditions", "<EOS>", 38, 251, "Is", "Weapon", "<EOS>", 320, 105, 126, 155, 320, 73, 186, "demon_card", "<EOS>", 20, 163, 17, 156, 50, "agent", "<EOS>", 320, 73, 186, "justice", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "demon_card", "<EOS>", "drawn", "<EOS>", 62, 127, 157, 17, 156, 17, 156, 50, "Mana", "<EOS>", "<UNK>", "<EOS>", 123, 46], "score": -22.914750473937943, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(Mana<UNK>(), CardSelector(players=\n            BothPlayer()), Summon(ManaMana(), PlayerSelector())), Choice(\n            ManaMana(), Gain(), PlayerSelector(players=BothPlayer()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n        Player = CardQuery(conditions=[IsWeapon()])\n        demon_card = player.agent(justice)\n        demon_card.drawn = True\n        player.Mana.<UNK> -= 1\n"}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"score_history": [-0.000885009765625, -9.34600830078125e-05, -3.814689989667386e-06, -2.181529634981416e-05, -7.748600182821974e-06, -9.5367431640625e-06, -4.00543212890625e-05, -8.20159912109375e-05, -0.6022768020629883, -3.814697265625e-06, -1.33514404296875e-05, -0.0043315887451171875, -8.0108642578125e-05, -5.53131103515625e-05, -2.288818359375e-05, -0.0002193450927734375, -6.914121058798628e-06, -2.2649765014648438e-06, -0.018823623657226562, -4.00543212890625e-05, -0.0010886510135605931, -5.8412379075889476e-06, -0.007609367370605469, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.0007333755493164062, -7.62939453125e-06, -0.05133533477783203, 0.0, -0.0012683868408203125, -0.0002460479736328125, -0.00145721435546875, -0.17344093322753906, -2.0265579223632812e-06, -0.001537322998046875, -0.0003032684326171875, -9.5367431640625e-06, -0.4816884994506836, 0.0, -0.0004024505615234375, -0.000179290771484375, -0.0010175704956054688, -0.07562887668609619, -0.00011026859283447266, -1.71661376953125e-05, 0.0, -1.9907929527107626e-05, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.00014507770538330078, -1.9073486328125e-06, -0.23396873474121094, -0.011552810668945312, -0.07127189636230469, -3.4332275390625e-05, -0.10357189178466797, -0.5737402439117432, -6.675719760096399e-06, -3.0517578125e-05, -0.0010986328125, -0.00014495849609375, -0.15162372589111328, -0.00018310546875, -0.10231685638427734, -0.0002536773681640625, -0.003986835479736328, -0.029336214065551758, -0.00011336182069499046, -0.00200653076171875, -0.27620601654052734, -1.2503247261047363, -0.0019254684448242188, -0.0002747774124145508, 0.0, -0.3419218063354492, -0.03315997123718262, -0.00019466876983642578, 0.0, -0.2699289321899414, 0.0, -0.016465187072753906, -3.814697265625e-06, -0.46478939056396484, -0.8027087450027466, -5.841255187988281e-06, -0.13404107093811035, -3.24249267578125e-05, -8.0108642578125e-05, -0.0734872817993164, -0.000118255615234375, -0.7831084728240967, -1.9073486328125e-06], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "EPIC", "value": {"_type": "Template56"}}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Template50"}}}]}}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"args": [{"_type": "Template46", "hole0": "TurnEnded"}, {"_type": "Template23", "hole1": [{"_type": "Template68"}], "hole3": "PlayerSelector", "hole0": "AddCard"}], "_type": "Call", "func": {"_type": "Template77"}}], "_type": "Template44", "hole1": "add_effect", "hole0": {"_type": "Template52"}}, {"hole2": [{"_type": "Name", "id": "new_minon"}], "_type": "Template44", "hole1": "append", "hole0": {"_type": "Attribute", "attr": "hand", "value": {"_type": "Template64"}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Preparation"}, "choice_history": [121, 200, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 323, 76, 194, "Preparation", "<EOS>", 75, 190, "0", "<EOS>", 65, 156, 25, 186, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 65, 156, 43, "EPIC", "<EOS>", 327, 119, 310, "target_func", "<EOS>", 17, 156, 40, "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "add_effect", "<EOS>", 320, 68, 163, 60, 321, 93, 255, "Turn", "Ended", "<EOS>", 79, 223, "Add", "Card", "<EOS>", 320, 110, "Player", "Selector", "<EOS>", 145, 250, 17, 156, 50, "hand", "<EOS>", "append", "<EOS>", 320, 73, 186, "new_minon", "<EOS>"], "score": -7.159604336485245, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self),\n            PlayerSelector())))\n        player.hand.append(new_minon)\n"}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"score_history": [-0.0001392364501953125, -0.03505706787109375, -1.168244216387393e-05, -4.362973049865104e-05, -5.245195097813848e-06, -0.0006277561187744141, -2.622600959512056e-06, -0.23136138916015625, -0.00058746337890625, -8.0108642578125e-05, -6.6756979322235566e-06, -3.099440846199286e-06, -1.06095594674116e-05, 0.0, -0.5777497291564941, -1.9073486328125e-06, -0.0531996451318264, -0.0001220703125, -0.003336071502417326, 0.0, -0.00264739990234375, -0.003482818603515625, -3.814697265625e-06, -0.015088081359863281, -2.86102294921875e-05, -0.007959365844726562, -1.9073486328125e-06, -0.00054931640625, -0.004444716032594442, -4.0531158447265625e-06, -0.002265332965180278, -7.128714787540957e-05, -0.010432243347167969, 0.0, -0.0016307830810546875, -0.0001087188720703125, -9.72747802734375e-05, -0.45406460762023926, 0.0, -0.0011310577392578125, -0.0002994537353515625, -0.0007333755493164062, -0.0008831024169921875, -7.62939453125e-06, -0.0003528594970703125, -0.000637054443359375, -8.58306884765625e-05, -0.004459381103515625, -9.5367431640625e-06, -0.0007419586181640625, -0.018466949462890625, -9.5367431640625e-06, -1.1444091796875e-05, -0.0055789947509765625, -1.9073486328125e-06, -0.1616058349609375, -1.9073486328125e-06, -0.0016498565673828125, -0.014683127403259277, -3.814697265625e-06, -0.0007361172465607524, -9.095667337533087e-05, -0.00619196891784668, 0.0, -0.0002422332763671875, -6.4849853515625e-05, -0.0001277923583984375, -0.6241340637207031, 0.0, -0.0009307861328125, -0.0001163482666015625, -0.000598907470703125, -0.0010843276977539062, -7.62939453125e-06, -0.00083160400390625, -9.918212890625e-05, -0.000644683837890625, -7.62939453125e-06, -0.005267143249511719, -0.0022735595703125, -0.2108144760131836, -0.0063934326171875, -0.000179290771484375, -0.0001125335693359375, -0.021035194396972656, -3.814697265625e-06, -0.036163330078125, -0.024974822998046875, -3.814697265625e-06, -0.0101165771484375, 0.0, -0.09494936466217041, -5.507469177246094e-05, -0.3948722183704376, 0.0, -4.00543212890625e-05, -0.25249385833740234, -0.0001316070556640625, -0.0022565126419067383, -1.9073486328125e-05, -0.0716768354177475, -0.01962721347808838, 0.0, -0.3580056428909302, -3.814697265625e-05, -0.019708633422851562, -5.53131103515625e-05, -0.0003604888916015625, -5.14984130859375e-05, -4.38690185546875e-05, -3.814697265625e-06, -4.553794133244082e-05, -0.0007610321044921875, -0.0008360147476196289, -0.0001888275146484375], "model_output": {"hole3": "activate", "hole7": [{"name": "deactivate", "_type": "FunctionDef", "args": {"_type": "Template18"}, "body": [{"hole2": [{"s": "character_attack", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Template68"}}], "_type": "Template44", "hole1": "unbind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Template64"}}}}]}, {"name": "_reveal", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"_type": "Template54"}, {"_type": "arg", "arg": "minion"}]}, "body": [{"hole2": [{"hole2": 3, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}], "_type": "Template44", "hole1": "add_buff", "hole0": {"_type": "Name", "id": "minion"}}, {"_type": "Expr", "value": {"_type": "Template43", "hole1": "reveal", "hole0": {"_type": "Template46", "hole0": "super"}}}]}], "hole6": [{"hole2": [{"s": "minion_played", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Template68"}}], "_type": "Template44", "hole1": "bind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Template64"}}}}], "hole2": [{"hole2": "PALADIN", "_type": "Template14", "hole1": 1, "hole0": "Repentance"}], "_type": "Template1", "hole1": "SecretCard", "hole4": "player", "hole0": "Repentance"}, "choice_history": [121, 199, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 332, 139, 204, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "minion_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 333, 132, 170, "deactivate", "<EOS>", 3, 332, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "character_attack", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 132, 170, "_reveal", "<EOS>", 5, 308, 315, 0, 1, 307, "minion", "<EOS>", 333, 145, 250, 25, 186, "minion", "<EOS>", "add_buff", "<EOS>", 320, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>"], "score": -3.7860486567687985, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.add_buff(Buff(ChangeAttack(3)))\n        super().reveal()\n"}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"score_history": [-0.0016841888427734375, -0.00016021728515625, -0.0001659267581999302, -0.03736213222146034, -0.0009850310161709785, -0.0013124499237164855, -1.1920878932869527e-06, -2.384182153036818e-05, -4.661083221435547e-05, -6.103515625e-05, -0.6590509414672852, -0.00018310546875, -3.6239216569811106e-05, -0.00041866302490234375, -0.001286173122934997, -6.29425048828125e-05, -7.51016559661366e-05, -1.9073486328125e-06, -0.3005676567554474, 0.0, -0.1038428544998169, 0.0, -0.006929755210876465, 0.0, -0.08974647521972656, 0.0, -1.7404556274414062e-05, 0.0, -1.71661376953125e-05, -0.000560760498046875, -0.0002422332763671875, -7.152555099310121e-07, -2.002696055569686e-05, -0.00027748176944442093, -9.536738616588991e-07, -0.08519542217254639, 0.0, -0.0014200210571289062, -2.6702880859375e-05, -0.0016443729400634766, -1.52587890625e-05, -0.0001239776611328125, -0.059853553771972656, -4.00543212890625e-05, -0.17488141357898712, -0.13558046519756317, -0.013291239738464355, -0.000392913818359375, -0.032749176025390625, -1.9073486328125e-05, -0.00034390389919281006, -0.0032164149452000856, -0.0005640595336444676, -0.20139272511005402, -0.5147083401679993, -0.02803741954267025, -3.814697265625e-06, -0.0015850067138671875], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "auras", "_type": "Template27", "hole1": 1, "hole3": {"hole2": [{"_type": "Template62_expr_seq"}], "_type": "Template45", "hole1": [{"_type": "Template46", "hole0": "<UNK>SpellTarget"}, {"_type": "Template31", "hole1": "ShadowShadow", "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole0": 0}], "hole2": [{"hole2": "PRIEST", "_type": "Template15", "hole1": 0, "hole3": "EPIC", "hole0": "Shadow of Nothing"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "ShadowOfNothing"}, "choice_history": [121, 198, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 332, 140, 205, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 38, 252, "Aura", "<EOS>", 321, 93, 255, "<UNK>", "Spell", "Target", "<EOS>", 82, 234, "Minion", "Selector", "<EOS>", "Shadow", "Shadow", "<EOS>", 320, 105], "score": -2.460226513617954, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            ShadowShadow()))])\n"}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"score_history": [-0.000240325927734375, -5.340576171875e-05, -4.529946636466775e-06, -2.622604142743512e-06, -6.302725523710251e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-05, -0.0001735687255859375, -0.0001125335693359375, -3.2186508178710938e-06, -1.9073486328125e-06, -1.0965566616505384e-05, -1.9073486328125e-06, -0.08307456970214844, -2.47955322265625e-05, -0.00011444091796875, 0.0, -0.03187370300292969, -3.814697265625e-06, -0.000118255615234375, -0.008264541625976562, 0.0, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -3.24249267578125e-05, -1.728534698486328e-05, 0.0, -0.035938262939453125, -0.0001125335693359375, -0.0001983642578125, -1.71661376953125e-05, -8.96453857421875e-05, -4.649158199754311e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -0.028289794921875, -5.7220458984375e-06, -1.9073486328125e-05, -3.3974647521972656e-05, -2.384185791015625e-06, -0.4565102756023407, -2.3841855067985307e-07, -3.814697265625e-05, -0.00197601318359375, -3.814697265625e-06, -0.4316520690917969, -1.9073486328125e-06, -0.2395162582397461, -3.0517578125e-05, -0.10480022430419922, -4.76837158203125e-05, -0.00021839141845703125, -2.861018856492592e-06, -0.040970563888549805, -1.1920928244535389e-07, -0.002098553813993931, -1.5616295058862306e-05, -0.0013784072361886501, 0.0, -5.53131103515625e-05, -0.0006427764892578125, -2.09808349609375e-05, -2.288818359375e-05, -6.115436553955078e-05, -2.3841855067985307e-07, -0.5019422769546509, -3.576278118089249e-07, -0.005222320556640625], "model_output": {"hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole2": [{"hole3": "target_func", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Template50"}}, "hole0": "Slam"}], "_type": "Template1", "hole6": [{"_type": "Template19"}, {"hole2": [{"hole2": 2, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Template52"}}, {"hole2": [{"hole2": 2, "_type": "Template37", "hole1": "effective_spell_damage", "hole0": {"_type": "Template64"}}, {"_type": "Template68"}], "_type": "Template44", "hole1": "damage", "hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}], "hole1": "SpellCard", "hole4": "player", "hole0": "Slam"}, "choice_history": [121, 200, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 332, 138, 203, "Slam", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 17, 156, 40, "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 314, 1, 307, "game", "<EOS>", 334, 141, 145, 250, 41, "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110, 145, 250, 17, 156, 17, 156, 25, 186, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 321, 85, 243, 50, "effective_spell_damage", "<EOS>", "2", "<EOS>", 110], "score": -1.9764316641172712, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n"}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"score_history": [-0.011686325073242188, -1.9073486328125e-05, -4.660974445869215e-05, -4.1723224057932384e-06, -4.172288754489273e-06, -5.841255187988281e-06, -2.4199460312956944e-05, -0.0053806304931640625, -0.0022640228271484375, -0.36769580841064453, -0.0003618539194576442, -2.110004425048828e-05, -0.0008679631864652038, 0.0, -0.0013142824172973633, -0.0001125335693359375, -0.5069666504859924, -0.008962035179138184, -7.62939453125e-06, -0.0851602554321289, -0.0004177093505859375, -0.000728607177734375, -0.003856658935546875, -0.0007381439208984375, -0.0006529092788696289, -3.24249267578125e-05, -0.0002180336305173114, -0.0023118257522583008, 0.0, -0.0006904574111104012, -0.0004215240478515625, -0.1502513885498047, -0.0001068115234375, -0.0017626285552978516, -2.86102294921875e-05, -0.0005550384521484375, -0.03768455982208252, -1.1444091796875e-05, -0.004454850219190121, -2.86102294921875e-05, -0.0015239715576171875, -0.001678466796875, -3.814697265625e-06, 0.0, -0.3121671676635742, -1.71661376953125e-05, -1.1444091796875e-05, -0.0008547306060791016, -0.00011444091796875, -0.0003490447998046875, -3.0517578125e-05, -0.00029790401458740234, -5.543231964111328e-05, -0.000278472900390625, -0.0020160675048828125, 0.0, -2.1219253540039062e-05, 0.0, -4.57763671875e-05, -0.00019073486328125, -7.62939453125e-06, -2.3841823804104934e-07, -2.5510509658488445e-05, -0.0018101311288774014, -2.50339189733495e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 3, "hole0": 4}], "hole2": [{"hole3": "Give", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole5": "MinionSelector", "hole2": "COMMON", "_type": "Template6", "hole1": 4, "hole4": [{"_type": "List", "elts": [{"hole2": 1, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}, {"hole2": 1, "_type": "Template28", "hole1": "ChangeHealth", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "hole0": "Spellbreaker"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Spellbreaker"}, "choice_history": [121, 198, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 105, "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "4", "<EOS>", "3", "<EOS>"], "score": -1.5173597800086327, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"score_history": [-0.07188606262207031, -1.1444091796875e-05, -0.0063294898718595505, -0.0048073516227304935, -0.22810149192810059, -1.9073413568548858e-06, -3.814685624092817e-05, -4.4941898522665724e-05, -0.0002231597900390625, -0.0032176971435546875, -0.1874380111694336, -0.00013326856424100697, -2.1219253540039062e-05, -7.390974587906385e-06, -0.004909515380859375, -0.0005125998868606985, 0.0, -0.001126407994888723, -8.20159912109375e-05, -0.01589559018611908, -0.002812380436807871, -6.29425048828125e-05, -0.050286293029785156, -0.005726814270019531, -1.0678406953811646, -0.7181675434112549, -8.583057933719829e-06, -0.4461786448955536, 0.0, -0.0021381378173828125, -2.2649765014648438e-06, -1.0728830375228426e-06, -0.03919029235839844, -2.288818359375e-05, -7.62939453125e-06, -0.05334758758544922, -8.392333984375e-05, -0.0017223358154296875, -3.24249267578125e-05, -0.03119560144841671, -0.0006313323974609375, -0.0010285377502441406, 0.0, -9.655950634623878e-06, 0.0, -0.0001220703125, -0.0016994476318359375, -9.5367431640625e-06, -1.049041748046875e-05, -1.1920928244535389e-07, -1.6570091247558594e-05, -2.3841855067985307e-07], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 3, "hole0": 2}], "hole2": [{"hole3": "Give", "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "Template46", "hole0": "Adjacent"}}], "hole5": "MinionSelector", "hole2": "RARE", "_type": "Template6", "hole1": 2, "hole4": [{"_type": "Template41", "hole1": 1, "hole0": "TauntGive"}], "hole0": "Sunfury Protector"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "SunfuryProtector"}, "choice_history": [121, 198, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 279, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 320, 89, 247, "Taunt", "Give", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 39, 255, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "3", "<EOS>"], "score": -2.9471437672071588, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(TauntGive(1)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"score_history": [-0.0038166046142578125, -1.52587890625e-05, -0.0008562712464481592, -0.0015472148079425097, -1.5139515198825393e-05, -4.291518507670844e-06, -6.020069122314453e-05, -0.00021195411682128906, -0.03288078308105469, -0.007350921630859375, -0.9233055114746094, -0.012592872604727745, -0.0004963673418387771, -0.00012218952178955078, -4.887576324108522e-06, -4.530658770818263e-06, -5.960462772236497e-07, -0.11009478569030762, -1.9073486328125e-06, -0.2643697261810303, -0.042781565338373184, -3.814697265625e-05, -0.025259971618652344, -0.00043487548828125, -0.000614166259765625, -0.03974342346191406, -0.04464244842529297, -0.001708686351776123, -0.105899378657341, -1.71661376953125e-05, -5.340576171875e-05, -0.046631813049316406, -0.0011501312255859375, -0.0003991127014160156, -2.86102294921875e-05, -0.000392913818359375, -0.18100738525390625, -0.009054183959960938, -1.1444091796875e-05, -0.4181991219520569, -0.1460791826248169, -0.013888510875403881, -0.023214340209960938, -3.62396240234375e-05, -0.07340836524963379, -1.8835005903383717e-05, -1.3589859008789062e-05, -0.18498802185058594, -0.3024873733520508, -9.5367431640625e-06, -0.017044857144355774, -1.6689240510459058e-05, -1.0728830375228426e-06, -0.0034777140244841576, -2.6821779101737775e-05, -5.960462772236497e-07, -0.0001420974440407008, -2.47955322265625e-05, -1.7285345165873878e-05, 0.0, -0.000202178955078125, -0.0001583099365234375, -7.62939453125e-06, -6.198883056640625e-06, -1.1920928244535389e-07, -2.393123577348888e-05, -2.503394853192731e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 3, "hole0": 3}], "hole2": [{"hole3": "Give", "hole5": "PlayerSelector", "hole2": "LEGENDARY", "_type": "Template6", "hole1": 3, "hole4": [{"_type": "List", "elts": [{"_type": "Template30", "hole1": [{"hole2": [{"_type": "Template46", "hole0": "HasSquirrel"}, {"_type": "Template46", "hole0": "EnemyPlayer"}], "_type": "Template35", "hole1": {"_type": "Template74"}, "hole0": "Count"}], "hole0": "ChangeAttack"}, {"_type": "Template62_expr_seq"}, {"_type": "Template46", "hole0": "SelfSelector"}]}], "hole0": "Tinkmaster Overspark"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "TinkmasterOverspark"}, "choice_history": [121, 198, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 277, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 320, 71, 181, 322, 81, 233, "Change", "Attack", "<EOS>", 320, 84, 239, "Count", "<EOS>", 57, 321, 93, 255, "Has", "Squirrel", "<EOS>", 93, 255, "Enemy", "Player", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "3", "<EOS>", "3", "<EOS>"], "score": -3.0411167610538925, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Count(MinionSelector(HasSquirrel(), EnemyPlayer())\n            ))), SelfSelector()]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"score_history": [-0.0001010894775390625, -0.043910980224609375, -1.680836794548668e-05, -1.0013547580456361e-05, -1.4781842764932662e-05, -0.00013267564645502716, -0.00026117998640984297, -0.28991127014160156, -0.0005617141723632812, -0.0016918182373046875, -1.2159273865108844e-05, -1.9073486328125e-06, -2.503394853192731e-06, 0.0, -0.00214385986328125, -5.7220458984375e-06, -0.0003948211669921875, 0.0, -0.036559104919433594, -7.62939453125e-06, -1.71661376953125e-05, -3.0517578125e-05, -5.14984130859375e-05, -0.0020914077758789062, -0.00312042236328125, 0.0, -0.032095909118652344, -2.09808349609375e-05, -0.000179290771484375, -1.9073486328125e-06, -0.0012121200561523438, -2.6702880859375e-05, -0.8641457557678223, -5.7220458984375e-06, -0.004399299621582031, -5.53131103515625e-05, -1.71661376953125e-05, -0.6635643243789673, 0.0, -0.000225067138671875, -0.00035858154296875, -0.000118255615234375, -0.016945838928222656, -0.001667022705078125, -0.000240325927734375, -0.03878307342529297, -0.0026216506958007812, -0.002574920654296875, -4.76837158203125e-05, -3.24249267578125e-05, -0.010589241981506348, -2.300739288330078e-05, -0.0661017894744873, -1.2636104656849056e-05, -0.00350189208984375, -3.4332275390625e-05, -0.0013332366943359375, -0.00048065185546875, 0.0, -0.0001316070556640625, -0.0046269893646240234, -1.1920928244535389e-07, -0.000194549560546875, -3.24249267578125e-05, 0.0, -0.0008411407470703125, 0.0, -0.026035308837890625, -5.114077066536993e-05, -1.9073486328125e-06, -0.0002541542053222656, -7.62939453125e-06, -0.0001220703125, -0.0012187957763671875, -3.814697265625e-05, -0.002269744873046875, -0.000152587890625, -6.29425048828125e-05, -1.1444091796875e-05, 0.0, -0.050536155700683594, -2.288818359375e-05, -0.9144706726074219, 0.0, -0.012354850769042969, -0.000286102294921875, -0.34806346893310547, -3.24249267578125e-05, -0.0006561279296875, -1.9073486328125e-06, -0.045848846435546875, -0.0001201629638671875, -0.05232834815979004, 0.0, -0.25575315952301025, -1.3470649719238281e-05, -0.00377655029296875, -0.04117584228515625, -1.9073486328125e-06, -0.3216361999511719, -1.71661376953125e-05, -0.003711477154865861, -0.06325465440750122, -0.03868579491972923, -3.814697265625e-06, -0.009517669677734375, -0.0039348602294921875, 0.0, -0.005615234375, -0.0001697540283203125, -5.7220458984375e-06, -0.2223663330078125, -1.9073486328125e-06, -0.4185781478881836, -1.9073486328125e-06, -0.004723548889160156, -0.00038444995880126953, -9.5367431640625e-06, -0.003422856330871582, -5.7220458984375e-06, -8.7738037109375e-05, -0.0001697540283203125, -1.33514404296875e-05, 0.0, -6.878376007080078e-05, 0.0, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -0.0078277587890625, 0.0, -0.05675983428955078, -5.328655242919922e-05, 0.0, -7.855892181396484e-05, -9.5367431640625e-06, -0.23567676544189453, -9.5367431640625e-06, -0.0001621246337890625, -0.0126190185546875, -8.392333984375e-05, -0.0011005401611328125, 0.0, -0.030569076538085938, -6.67572021484375e-05, -0.5547596216201782, 0.0, -0.046543121337890625, -0.000640869140625, -3.24249267578125e-05, 0.0, -0.0046443939208984375, -5.7220458984375e-06, -0.0015869140625, -0.00023722632613498718, -3.814697265625e-06, -0.01269221305847168, -7.62939453125e-06, -0.0022306442260742188, -0.0014543533325195312, -0.01931476593017578, -0.0067138671875, -0.0032634735107421875, -0.0007343292236328125, -0.016203880310058594, -1.9073486328125e-06, -0.093414306640625, -2.09808349609375e-05, -5.53131103515625e-05, -3.0517578125e-05, -0.0002276791346957907, -2.1457672119140625e-06, -0.0006866455078125, -0.0001926422119140625, -9.918212890625e-05, -7.05718994140625e-05, -2.09808349609375e-05, -0.0018287897109985352, -0.0001316070556640625, -0.0003452301025390625, -0.1542797088623047, -0.0003681182861328125, -1.9073486328125e-05, -0.0003376007080078125, 0.0, -0.0005035400390625, 0.0, -0.001354217529296875, -0.0011002415558323264, -5.841255187988281e-06, -0.00486953416839242, -9.775159560376778e-05, -0.004951953887939453, -3.814697265625e-06, -0.000102996826171875, -4.38690185546875e-05, -5.340576171875e-05, -0.2597811222076416, -3.814697265625e-06, -0.0007419586181640625, -3.814697265625e-05, -0.00020599365234375, -0.0005397796630859375, -1.1444091796875e-05, -0.006195068359375, -3.4332275390625e-05, -4.1961669921875e-05, -2.09808349609375e-05, -0.000118255615234375, -0.0003681182861328125, -0.0007600784301757812, 0.0, -0.4828367233276367, -4.57763671875e-05, -0.00018513202667236328, 0.0, -0.010042190551757812, -7.62939453125e-06, -0.968693733215332, 0.0, -0.0025625228881835938, -0.040386199951171875, -0.0003490447998046875, -9.5367431640625e-05, -0.0012722015380859375, 0.0, -0.00214385986328125, 0.0, -0.0008792877197265625, -0.0027770823799073696, -3.814697265625e-06, -0.002386207925155759, -4.279613494873047e-05, -0.08960044384002686, -1.9073486328125e-06, -0.0001983642578125, -3.24249267578125e-05, -3.0517578125e-05, -0.28180527687072754, -1.9073486328125e-06, -0.000812530517578125, -3.814697265625e-05, -0.000194549560546875, -0.0003528594970703125, -1.9073486328125e-05, -0.003528594970703125, -3.24249267578125e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.000102996826171875, -0.000492095947265625, -0.0002994537353515625, 0.0, -0.48050880432128906, -4.38690185546875e-05, -0.00019848346710205078, 0.0], "model_output": {"hole3": "_reveal", "hole7": [{"name": "activate", "_type": "FunctionDef", "args": {"_type": "Template18"}, "body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Template68"}}], "_type": "Template44", "hole1": "bind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Template64"}}}}, {"_type": "Assign", "targets": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}], "value": {"_type": "NameConstant", "value": "Null"}}]}, {"name": "deactivate", "_type": "FunctionDef", "args": {"_type": "Template18"}, "body": [{"hole2": [{"s": "card_played", "_type": "Str"}, {"_type": "Attribute", "attr": "_reveal", "value": {"_type": "Template68"}}], "_type": "Template44", "hole1": "unbind", "hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Template64"}}}}, {"_type": "Assign", "targets": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}], "value": {"_type": "NameConstant", "value": "Null"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole2": [{"hole2": "MAGE", "_type": "Template15", "hole1": 3, "hole3": "RARE", "hole0": "Vaporize"}, {"_type": "Assign", "targets": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}], "value": {"_type": "NameConstant", "value": "Null"}}], "_type": "Template1", "hole6": [{"_type": "If", "test": {"_type": "BoolOp", "op": {"_type": "And"}, "values": [{"_type": "Template43", "hole1": "<UNK>", "hole0": {"_type": "Name", "id": "card"}}, {"ops": [{"_type": "Lt"}], "_type": "Compare", "left": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "comparators": [{"_type": "Template72"}]}, {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "card"}}, {"_type": "Template43", "hole1": "is_minion", "hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "card"}}}]}, "body": [{"hole2": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Template44", "hole1": "summon", "hole0": {"_type": "Template46", "hole0": "Vaporize"}}, {"_type": "Assign", "targets": [{"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "card"}}], "value": {"_type": "Subscript", "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "operand": {"_type": "Template60"}, "op": {"_type": "USub"}}}, "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "player", "value": {"_type": "Template68"}}}}}, {"_type": "Expr", "value": {"_type": "Template43", "hole1": "reveal", "hole0": {"_type": "Template46", "hole0": "super"}}}]}], "hole1": "SecretCard", "hole4": "card", "hole0": "Vaporize"}, "choice_history": [121, 201, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 333, 140, 205, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 314, 1, 307, "attacker", "<EOS>", 332, 133, 173, 19, 159, 6, 323, 90, 249, 25, 186, "card", "<EOS>", "<UNK>", "<EOS>", 69, 166, 20, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 317, 14, 320, 111, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 90, 249, 17, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", "is_minion", "<EOS>", 334, 145, 250, 39, 255, "Vaporize", "<EOS>", "summon", "<EOS>", 322, 65, 156, 53, "player", "<EOS>", 65, 156, 17, 156, 53, "player", "<EOS>", "game", "<EOS>", 68, 163, 25, 186, "len", "<EOS>", 320, 65, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 126, 155, 320, 65, 156, 25, 186, "card", "<EOS>", "target", "<EOS>", 28, 196, 17, 156, 17, 156, 53, "player", "<EOS>", "minions", "<EOS>", 124, 177, 64, 305, 152, 46, 130, 168, 37, 249, 39, 255, "super", "<EOS>", "reveal", "<EOS>", 333, 132, 170, "activate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>", 132, 170, "deactivate", "<EOS>", 3, 333, 145, 250, 17, 156, 17, 156, 50, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 321, 76, 194, "card_played", "<EOS>", 65, 156, 53, "_reveal", "<EOS>", 126, 155, 320, 65, 156, 53, "player", "<EOS>", 26, 187, "Null", "<EOS>"], "score": -8.873637000163164, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, card, attacker):\n        if card.<UNK>() and len(self.player.minions\n            ) < 7 and card.target and card.target.is_minion():\n            Vaporize().summon(self.player, self.player.game, len(self.\n                player.minions))\n            card.target = self.player.minions[-1]\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n        self.player = Null\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n        self.player = Null\n"}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"score_history": [-1.52587890625e-05, -9.5367431640625e-06, -0.00011848756548715755, -0.00011860643280670047, -1.0728830375228426e-06, 0.0, -9.5367431640625e-06, -7.867813110351562e-06, -3.0517578125e-05, -0.0005130767822265625, -0.000186920166015625, -2.9802317840221804e-06, -2.4437902538920753e-05, -2.0265579223632812e-06, 0.0, -0.0006129878456704319, 0.0, -2.312660035386216e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.001749277114868164, 0.0, -0.0001373291015625, -0.000331878662109375, -1.71661376953125e-05, -1.9311904907226562e-05, 0.0, -8.701881597517058e-05, 0.0, -0.02086353302001953, 0.0, -0.00079345703125], "model_output": {"hole3": "create_minion", "hole6": [{"hole2": "stealth", "_type": "Template27", "hole1": 1, "hole3": {"_type": "Template79"}, "hole0": 2}], "hole2": [{"hole2": "ALL", "_type": "Template14", "hole1": 1, "hole0": "Worgen Infiltrator"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "WorgenInfiltrator"}, "choice_history": [121, 198, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 332, 139, 204, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 142, 230, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 62], "score": -0.025704022652348613, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"score_history": [-2.86102294921875e-05, -9.5367431640625e-06, -0.019072243943810463, -0.00042798896902240813, -5.960462772236497e-07, 0.0, -7.6293927122605965e-06, -3.1828589271754026e-05, -0.0002460479736328125, -0.0009937286376953125, -1.114171028137207, -0.00033099614665843546, -8.940661791712046e-05, -1.9073486328125e-06, 0.0, -0.00019608985166996717, -1.1920928244535389e-07, -0.550582766532898, 0.0, -0.10539969056844711, -2.801397567964159e-05, -0.041425321251153946, -5.7220458984375e-06, 0.0, -0.11967277526855469, -1.9073486328125e-06, -2.09808349609375e-05, -0.0016384124755859375, -5.14984130859375e-05, -0.0002460479736328125, -1.9073486328125e-06, -0.009853720664978027, -0.000148773193359375, -3.814697265625e-06, -0.013613104820251465, 0.0, -7.62939453125e-06, 0.0, -6.29425048828125e-05, -5.91278076171875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -5.960462772236497e-07, -0.0006772279739379883, 0.0], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 4, "hole0": 5}], "hole2": [{"hole3": "Bounce", "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "Template46", "hole0": "UserPicker"}}], "hole5": "MinionSelector", "hole2": "COMMON", "_type": "Template6", "hole1": 5, "hole0": "Blackwing Corruptor"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "BlackwingCorruptor"}, "choice_history": [121, 198, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 332, 148, 272, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Bounce", "<EOS>", "Minion", "Selector", "<EOS>", 327, 119, 310, "picker", "<EOS>", 39, 255, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "5", "<EOS>", "4", "<EOS>"], "score": -1.9791402565548353, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"score_history": [-0.08058643341064453, -8.58306884765625e-05, -0.000110626220703125, -0.002170562744140625, -2.86102294921875e-05, -0.008674086071550846, -6.079586819396354e-05, -6.389413465512916e-05, -1.71661376953125e-05, -0.000301361083984375, -1.33514404296875e-05, -0.000274658203125, -3.4332275390625e-05, -7.48607053537853e-05, -1.8477414414519444e-05, -0.0009925365447998047, -1.9073486328125e-06, -7.266650072779157e-07, 0.0, -0.0008357762126252055, -9.5367431640625e-06, -0.00872814655303955, 0.0, -2.5391558665432967e-05, -3.814697265625e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.19589531421661377, -1.9073486328125e-06, -0.00010883808135986328, 0.0, -0.001728057861328125, -0.10438251495361328, -0.29495543241500854, -0.008293386548757553, -0.008012771606445312, -0.42133235931396484, -0.0002651214599609375, -0.0015861818101257086, -0.00022995455947238952, -0.020703673362731934, -9.179114385915454e-06, -1.1920928244535389e-07, -0.001438140869140625, -5.340576171875e-05, -0.00010049229604192078, -0.00010966674017254263, -5.2014365792274475e-06, -0.0002234936982858926, -0.0001392364501953125], "model_output": {"_type": "Module", "body": [{"name": "DrakonidCrusher", "_type": "ClassDef", "bases": [{"_type": "Template57"}], "body": [{"hole8": {"hole2": "HeroSelector", "_type": "Template22", "hole1": [{"n": 6, "_type": "Num"}], "hole0": "15"}, "hole3": "COMMON", "hole7": "battlecry", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole2": "ALL", "_type": "Template0", "hole6": "DRAGON", "hole1": 6, "hole4": "minion_type", "hole0": "Drakonid Crusher"}, {"_type": "Template8", "hole1": 6, "hole0": 6}]}, {"_type": "Template55_stmt_seq"}]}, "choice_history": [120, 185, 333, 129, 165, "Drakonid", "Crusher", "<EOS>", 320, 100, 333, 136, 197, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 216, "15", "<EOS>", 320, 75, 190, "6", "<EOS>", "Hero", "Selector", "<EOS>", 150, 302, "6", "<EOS>", "6", "<EOS>", 147], "score": -1.162718326480551, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(15(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"score_history": [-0.000125885009765625, -0.0002307891845703125, -7.748573807475623e-06, -0.00086151686264202, -5.136759136803448e-05, -1.7762184143066406e-05, -0.0001704650348983705, -0.000324249267578125, -5.7220458984375e-05, -2.47955322265625e-05, -2.47955322265625e-05, -0.0057830810546875, -0.0001316070556640625, -0.001308441162109375, -4.38690185546875e-05, -0.000118255615234375, -2.3841855067985307e-07, -6.222639785846695e-05, -0.0003299713134765625, -0.0034580230712890625, -0.003955841064453125, -0.0002727508544921875, -0.0027370452880859375, -0.001102447509765625, -0.000766754150390625, -0.042098283767700195, -6.29425048828125e-05, -0.0002002716064453125, -1.9073486328125e-06, -0.00020551681518554688, 0.0, -4.00543212890625e-05, -3.0517578125e-05, -2.6702880859375e-05, -7.522105443058535e-05, 0.0, -7.157723302952945e-06, -1.9073486328125e-06], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 1, "hole0": 1}], "hole2": [{"_type": "Expr", "value": {"args": [{"s": "Imp", "_type": "Str"}, {"_type": "Template60"}, {"_type": "Template48"}, {"_type": "Template49"}, {"_type": "Template75"}], "_type": "Call", "func": {"_type": "Template34"}, "keywords": [{"_type": "Template42", "hole0": "DEMON"}]}}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "Imp"}, "choice_history": [121, 198, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 332, 130, 168, 20, 164, 32, 324, 76, 194, "Imp", "<EOS>", 103, 95, 96, 112, 327, 118, 248, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "1", "<EOS>", "1", "<EOS>"], "score": -0.06471763015630927, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"score_history": [-1.9073486328125e-05, -1.9073486328125e-05, -1.0132738680113107e-05, -1.966933996300213e-05, 0.0, -7.152193575166166e-07, -3.933906555175781e-06, -4.0650367736816406e-05, -0.0006694793701171875, -0.0005779266357421875, -9.918212890625e-05, -1.1920928244535389e-07, -4.851818084716797e-05, 0.0, 0.0, -3.0389754101634026e-05, 0.0, -0.025795936584472656, -5.7220458984375e-06, -0.6234420537948608, -1.9073486328125e-06, -0.10990715026855469, -0.000213623046875, -0.00627899169921875, -0.15508174896240234, -0.44131946563720703, -0.0009746551513671875, -0.14710521697998047, -5.53131103515625e-05, -0.14349079132080078, -0.001338958740234375, -0.0010471343994140625, -0.0039119720458984375, -0.00022125244140625, -0.00023818010231480002, -1.9073486328125e-06, -1.7523765563964844e-05, -0.000643610954284668, -7.62939453125e-06, -0.47148603200912476, -1.1444091796875e-05, -0.4560890197753906, -0.0018367767333984375, -0.00091552734375, -4.1961669921875e-05, -2.8848648071289062e-05, -0.024151086807250977, -1.1444091796875e-05, -0.14366893470287323, -5.14984130859375e-05, -0.0007724761962890625, -0.0003490447998046875, -9.5367431640625e-06, -0.0003491640090942383, -0.009397745132446289, -5.9604644775390625e-06, -0.014469146728515625, -0.0055179595947265625, -0.0003643035888671875, -9.5367431640625e-06, -3.814697265625e-05, -0.0003566741943359375, 0.0, -0.0001735687255859375, -0.007426261901855469, -0.012251853942871094, -4.971027374267578e-05, -0.00025177001953125, -0.0002307891845703125, -1.9073486328125e-06, -0.0011997222900390625, -0.0004082918167114258, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.0001068115234375, -0.00142669677734375, -0.000209808349609375, -0.0001010894775390625, -5.91278076171875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007240772247314453, -0.00034129590494558215, -2.3841855067985307e-07, -2.47955322265625e-05, -0.000354766845703125, -7.62939453125e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.0012111663818359375, -0.000164031982421875, -2.86102294921875e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.0011386871337890625, 0.0, -0.005423545837402344, -0.00012969970703125, -5.7220458984375e-06, -2.3841855067985307e-07, 0.0, -8.58306884765625e-05, -0.00016021728515625, -1.71661376953125e-05, -0.0036584138870239258, 0.0, -2.026555648626527e-06, -1.1920928244535389e-07], "model_output": {"hole3": "create_minion", "hole6": [{"_type": "Template32", "hole1": 1, "hole0": 2}], "hole2": [{"hole3": "battlecry", "hole2": "SHAMAN", "_type": "Template11", "hole1": 1, "hole4": {"args": [{"args": [{"_type": "List", "elts": [{"hole2": 2, "_type": "Template28", "hole1": "ChangeAttack", "hole0": "Buff"}, {"hole2": 2, "_type": "Template28", "hole1": "ChangeHealth", "hole0": "Buff"}, {"_type": "Template62_expr_seq"}]}], "_type": "Call", "func": {"_type": "Template73"}}, {"_type": "Template46", "hole0": "SelfSelector"}, {"args": [{"_type": "Template35", "hole1": {"_type": "Name", "id": "CardSelector"}, "hole3": [{"_type": "keyword", "arg": "condition", "value": {"args": [{"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}}], "hole0": "Count"}], "_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "arg": "value", "value": {"_type": "Template76"}}]}], "_type": "Call", "func": {"_type": "Template66"}}, "hole0": "Twilight Whelp"}], "_type": "Template1", "hole1": "MinionCard", "hole4": "player", "hole0": "TwilightWhelp"}, "choice_history": [121, 198, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 332, 138, 203, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 20, 163, 51, 322, 68, 163, 56, 320, 71, 181, 322, 80, 231, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 80, 231, "Buff", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 105, 93, 255, "Self", "Selector", "<EOS>", 68, 164, 25, 186, "Greater", "Than", "<EOS>", 320, 84, 238, "Count", "<EOS>", 25, 186, "Card", "Selector", "<EOS>", 327, 119, 310, "condition", "<EOS>", 20, 163, 25, 186, "Is", "Type", "<EOS>", 320, 65, 156, 25, 186, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 327, 119, 310, "value", "<EOS>", 59, "create_minion", "<EOS>", "player", "<EOS>", 332, 143, 235, "2", "<EOS>", "1", "<EOS>"], "score": -2.8302985188287693, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
